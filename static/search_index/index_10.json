{"/hardware/en/lichee/K1/lpi3a/8_credits.html":{"title":"credits","content":" title: credits keywords: Linux, Lichee, K1, SBC, RISCV, credits update: date: 2024 07 30 version: v1.0 author: zepan content: Release docs This chapter is dedicated to thanking individuals and groups who have contributed to LicheePi 3A! Thank you for your contributions that have made RISC V develop faster and better! (This article expresses gratitude using one's real name or username according to personal preference) ## Spacemit Thank you for the official support from Spacemit! ## PLCT Wu Wei: Thank you to Mr. Wu for his strong support! [Icenowy Zheng](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/log/?qt author&q Icenowy+Zheng): YYDS, contributed 3A AMD GPU support! Gao Han: Father of Revyos! ## Fedora Thank you to Ambassador Fu Wei and Red Hat for their strong support! ## Deepin Thank you Yukari! ## openKylin Thank you, Bits! ## Open source community [Jisheng Zhang](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/log/?qt author&q Jisheng+Zhang): K1 mainline support"},"/hardware/en/lichee/K1/lpi3a/4_peripheral.html":{"title":"Peripheral Usage","content":" title: Peripheral Usage keywords: Linux, Lichee, K1, SBC, RISCV, Peripheral update: date: 2024 07 30 version: v1.0 author: zepan content: Release docs ## SoC related ### CPU operating frequency `sudo cat /sys/devices/system/cpu/cpu*/cpufreq/cpuinfo_cur_freq ` Unit in KHz Please note that the system comes with a temperature control strategy. When the system is too idle or the temperature is too high, the frequency will be reduced. Please maintain good heat dissipation to keep the CPU below 60 degrees Celsius for optimal performance. ### Chip temperature `cat /sys/class/thermal/thermal_zone0/temp` The unit is 0.001 degrees Celsius ## UART ### System serial port The system serial port of LicheePi 3A is UART0, which is led out in the side pins. You can use a USB to serial module to connect the serial ports, namely 'U0 RX' and 'U0 TX', paying attention to cross connection and GND connection. ![ttl_link](./assets/peripheral/ttl_link.png) After the connection is completed, you can use the serial port tool for communication. For Windows, XShell and MOBaterm are recommended, and for Linux, Minicom is recommended` Set the serial port baud rate to '115200' to log in and perform command operations under the serial port terminal: > Note: After just connecting, you can press a few Enter keys to check for any response. If there is no response, check the wiring or serial port configuration ![ttl_login](./assets/peripheral/ttl_login.png) ### General serial port The side pins of LicheePi 4A also lead out UART1, which can also be operated. Only UART1 is enabled in the default image, and other serial ports may need to reconfigure device tree operations. #### View serial devices ```bash ls /dev/ttyS* ``` #### Check the baud rate and other information of the serial port ```bash stty F /dev/ttyS1 a ``` #### Set serial port baud rate and data mode ```bash stty F /dev/ttyS1 ispeed 115200 ospeed 115200 cs8 ``` #### View serial port data ```bash cat /dev/ttyS1 ``` #### Send serial port data ```bash echo \"12345\" > /dev/ttyS1 ``` #### Other methods Users can also use 'microcom' or the pyserial library for serial port operations. Please search for relevant information and use it yourself. ## I2C There are multiple I2C devices (I2C0/2/5/6) on LicheePi 3A, with I2C2 connected to a codec chip; I2C5 is connected to the IO expansion chip and also to the pins; I2C6 connects the touch screen and IO expansion chip. Here we use i2c tools for i2c verification operations. The default image does not have i2c tools installed. Please use apt to install them first `apt install i2c tools` List all I2C buses: ```bash root@k1 :~# i2cdetect l i2c 0 i2c spacemit i2c adapter I2C adapter i2c 2 i2c spacemit i2c adapter I2C adapter i2c 5 i2c spacemit i2c adapter I2C adapter i2c 6 i2c spacemit i2c adapter I2C adapter i2c 8 i2c spacemit i2c adapter I2C adapter ``` Detecting devices on the I2C bus, it can be seen that the I2C address of PCA9557PW is 0x18, which is consistent with the schematic diagram: ```bash sipeed@lpi4a :~$ sudo /sbin/i2cdetect r y 5 0 1 2 3 4 5 6 7 8 9 a b c d e f 00: 10: UU 20: 30: 40: 50: 60: 70: ``` In addition, 'i2cdump' can be used to dump all registers at the specified i2c address, 'i2cget' can be used to read the specified register value at the specified i2c address, and 'i2cset' can be used to write the specified register value at the specified i2c address. However, as the IO expansion chip has already been used by the kernel, these commands cannot be directly used for verification. Users can connect external devices to I2C2 for verification. ## SPI LicheePi3A has reserved two SPI paths, one is the SPI Flash pad with empty backside, and the other is the SPI on the pin. Commonly used ioctl commands for SPI: SPI_SOC_maSSAGE: Used for sending and receiving SPI messages, can be used for reading and writing data, controlling devices, and other operations SPI_SOC_2R_MODE: Used to set the working mode of SPI devices, such as CPOL, CPHA, etc SPI_SOC_CD_MODE: Used to read the working mode of SPI devices SPI_SOC WR_LSB_FIRST: Used to set the byte order of SPI devices, that is, whether the highest bit is transmitted first or the lowest bit is transmitted first SPI_SOC_SD_LSB_FIRST: Used to read the byte order of SPI devices SPI_SOC WR_BITs_PER WORD: Used to set the data bit width of SPI devices SPI_SOC RD_BITs_PER WORD: Used to read the data bit width of SPI devices SPI_SOC WR_MAX_SPEED_HZ: Used to set the maximum clock frequency of SPI devices SPI_SOC_SD_MAX_SPEED_HZ: Used to read the maximum clock frequency of SPI devices SPI_SOC WR_MODE32: Used to set the 32 bit mode of SPI devices, such as CPOL, CPHA, etc SPI_SOC_CD_MODE32: Used to read the 32 bit mode of SPI devices The above are some commonly used ioctl commands for SPI devices, which can be used to configure and control various parameters of SPI devices. To turn on/off SPI devices: ```c int open(const char *pathname, int flags); int close(int fd); ``` Header files to be referenced: ```c #include<fcntl.h> #include<unistd.h> ```c #include <stdint.h> #include <unistd.h> #include <stdio.h> #include <stdlib.h> #include <string.h> #include <getopt.h> #include <fcntl.h> #include <sys/ioctl.h> #include <linux/types.h> #include <linux/spi/spidev.h> #define DATA_NUM 2 #define CHECK(ret, str) if (ret < 0) {printf(\"%s\\r\\n\", str); return ret;} static uint8_t bits 8; static uint32_t speed 1000000; // 1M Hz static int mode 0; int main(int argc, char *argv[]) { int ret, fd; fd open(\"/dev/spidev2.0\", O_RDWR); CHECK(fd, \"can't open device\"); mode SPI_MODE_0 SPI_CS_HIGH; ret ioctl(fd, SPI_IOC_WR_MODE32, &mode); CHECK(ret, \"can't set spi mode\"); ret ioctl(fd, SPI_IOC_RD_MODE32, &mode); CHECK(ret, \"can't get spi mode\"); ret ioctl(fd, SPI_IOC_WR_BITS_PER_WORD, &bits); CHECK(ret, \"can't set bits per word\"); ret ioctl(fd, SPI_IOC_RD_BITS_PER_WORD, &bits); CHECK(ret, \"can't get bits per word\"); ret ioctl(fd, SPI_IOC_WR_MAX_SPEED_HZ, &speed); CHECK(ret, \"can't set max speed hz\"); ret ioctl(fd, SPI_IOC_RD_MAX_SPEED_HZ, &speed); CHECK(ret, \"can't get max speed hz\"); printf(\"spi mode: %d\\n\", mode); printf(\"bits per word: %d\\n\", bits); printf(\"max speed: %d Hz (%d KHz)\\n\", speed, speed/1000); uint8_t tx[] {0x11, 0x22}; uint8_t rx[DATA_NUM] {0}; struct spi_ioc_transfer tr { .tx_buf (unsigned long)tx, .rx_buf (unsigned long)rx, .len DATA_NUM, .delay_usecs 0, .speed_hz speed, .bits_per_word bits }; ret ioctl(fd, SPI_IOC_MESSAGE(1), &tr); CHECK(ret, \"can't send spi message\"); printf(\"tx: %.2X %.2X\\r\\n\", tx[0], tx[1]); printf(\"rx: %.2X %.2X\\r\\n\", rx[0], rx[1]); close(fd); return ret; } ``` ## USB LPi3A has 4 USB 3.0 ports, which can be plugged into a USB device to work. It will not be repeated here. Note that if you are using the LPi4A motherboard, the differences in the motherboard may cause the USB A port under the default image to be unusable. For the first use, you need to connect to the serial port or network, enter the device terminal, and replace the dtb Under/boot/spacemit/6.1.15/, overwrite k1 x_lpi3a_4a.dtb with k1 x_lpi3a.dtb and restart to use USB ## ETH LicheePi4A has dual gigabit Ethernet ports, with Eth0 also having PoE functionality. ### PoE The Ethernet 0 interface of LicheePi 4A has PoE function and can be powered through PoE. The PoE power supply module needs to be purchased by oneself, with a specification of 5V voltage and 35.6mm length, which can be obtained by searching for the keyword \"5V PoE pin\". When the visual direction is facing the \"POE POWER\" label, the four pins on the left of the pin are defined from left to right as VA1, VA2, VB1, VB2, and GND, 5VIN on the right. ## Speaker Audio The LicheePi 4A has two analog silicon microphones using ES7210 CODEC, as well as an onboard speaker and stereo headphones using ES8156 CODEC. > Note: The onboard speakers and stereo headphones use a mutually exclusive design. After inserting the headphones, the audio output automatically switches to the headphones, and the onboard speakers become disabled. Easy recording and playback tests can be conducted using APLay and ARECord, please note that the onboard speaker is for the right channel. ```bash #!/ bin/bash echo \"Play Test Audio\" aplay Dhw:1,0 disco48.wav ``` You can also use Alsa related tools, such as' Alsamixer ', to adjust the volume and perform other operations. Please note that currently only 48KHz audio playback is supported. The recording function is currently under development. ## MIPI CSI The LicheePi 3A has two camera interfaces on the back, the 24Pin interface is compatible with the LPi4A's 2 lane camera interface, and the 22Pin interface is compatible with the Raspberry Pi's 22Pin 4 lane camera interface. ## MIPI DSI LicheePi 3A has MIPI DSI0 interface, supports 1080P video output, and can be optionally equipped with a 10.1 inch 1280x800 touch screen. The connection method is shown in the following figure. Both FPC ribbon cables are bottom connected (with the metal contact at the end of the cable facing downwards). When connecting the touch screen adapter board, attention should be paid to the direction. Confirm that the ToLPi4A end is connected to the LPi4A touch ribbon cable, and the ToLcdTP end is connected to the screen: Schematic diagram of metal contact surface of flexible cable: ![fpc](./assets/peripheral/fpc.jpg) Note that before connecting, first pull up the black flip cover on the interface used to fix the cable, confirm that it is connected, and then unplug it. Touch screen ribbon cable connection: ![tpconnector_on_touchscreen](./assets/peripheral/tpconnector_on_touchscreen.jpeg) ![touchconnector_on_board](./assets/peripheral/touchconnector_on_board.jpeg) MIPI screen ribbon cable connection: ![mipi_dsi_connect](./assets/peripheral/mipi_dsi_connect.jpeg) After confirming that the connection is correct, use the firmware (k1 x_lpi3a_lcd. dtb) that supports MIPI screens, and you can see the MIPI screen display upon booting up. ## JTAG The JTAG interface of K1 is multiplexed with TF card signals and can be connected using TF to JTAG small boards. ## GPU The following command can be used to view the real time status of the GPU: ```shell sudo watch cat /sys/kernel/debug/pvr/status ```"},"/hardware/en/lichee/K1/lpi3a/3_burn_image.html":{"title":"Burn Image","content":" title: Burn Image keywords: Linux, Lichee, K1, SBC, RISCV, image update: date: 2024 07 30 version: v1.0 author: zepan content: Release docs ## Get Images ### Bianbu ![bianbu](./assets/image/bianbu.png) LicheePi3A has been supported by the official bianbu image of Spacemit You can go to the official mirror site of Spacemit https://archive.spacemit.com/image/k1/version/bianbu/ ）Download, please note to download images v1.0.11 or higher ### Debian 13 (trixie) ![debian](./../../../../zh/lichee/th1520/lpi4a/assets/images/debian.png) LicheePi3A image from Spacemit Spacemit image: https://archive.spacemit.com/image/k1/version/debian/ ### Fedora ![fedora](./assets/images/fedora.png) https://images.fedoravforce.com/LicheePi%203A ### openKylin ![openKylin](./assets/images/openkylin.png) https://www.openkylin.top/downloads/ ### Deepin ![deepin](./assets/images/deepin.jpg) https://ci.deepin.com/repo/deepin/deepin ports/cdimage/20240815/riscv64/ ### irradium ![irradium](./assets/images/irradium.png) https://dl.irradium.org/irradium/images/lichee_pi_3a/ [mirror 1](https://mirror.serverion.com/irradium/images/lichee_pi_3a/), [mirror 2](https://ftp.cc.uoc.gr/mirrors/linux/irradium/images/lichee_pi_3a/), [mirror 3](https://mirror.accum.se/mirror/irradium.org/images/lichee_pi_3a/) ## Get burning tools LicheePi3A can be burned using fastboot or titan burning tools. [Windows](https://cloud.spacemit.com/prod api/release/download/tools?token titantools_for_windows_X86_X64) [Linux](https://cloud.spacemit.com/prod api/release/download/tools?token titantools_for_linux_64BIT_APPIMAGE) Download the latest tools from the official website of Spacemit: https://developer.spacemit.com/#/Documentation Burning Guide: https://bianbu.spacemit.com/installation_and_upgrade ## Burn eMMC ### Use Titan Flasher to flash the device When the board detects that the BOOT key is pressed during startup, it can enter the burning mode. That is to say, first press and hold the BOOT key, then plug it in or short press the RESET key to enter the burning mode. ![flash1](./assets/image/flash1.png) ![flash2](./assets/image/flash2.png) ![flash3](./assets/image/flash3.png) ### Use Fastboot to flash the device The zip firmware ending in. zip can be used to flash the device with fastboot after decompression. **Prerequisite** 1. The device has been plugged in with a USB data cable and connected to a PC; 2. Install the fastboot command on the computer. **Flashing steps** 1. Unzip firmware 2. Download the flashing script [flash all. zip](https://archive.spacemit.com/image/k1/flash all.zip) , and extract it to the firmware directory; 3. Enter fastboot mode ```reboot fastboot``` Wait for the device to restart and enter fastboot mode: 1. Run the flash all script and wait for the flashing to complete; 2. When running flash all. sh on a Linux PC, be sure to grant executable permissions first; Run flash all. bat on Windows PC; 3. After flashing the device, simply power it on again to enter the system. ##Burn TF card The firmware ending in img.zip is the sdcard firmware. After decompression, it can be written to the sdcard using the dd command or balenaEtcher. Please note that this firmware is not compatible with eMMC. **Steps** 1. Write the firmware to the sdcard; 2. Insert the sdcard into the device; 3. The device can be started by powering it on. ## LPi4A compatibility settings Note that if you are using the LPi4A motherboard, the differences in the motherboard may cause the USB A port under the default image to be unusable. For the first use, you need to connect to the serial port or network, enter the device terminal, and replace the dtb Under/boot/spacemit/6.1.15/, overwrite k1 x_lpi3a_4a.dtb with k1 x_lpi3a.dtb and restart to use USB ## LCD support The default image only has HDMI output enabled. If LCD support is required, dtb needs to be replaced Under/boot/spacemit/6.1.15/, overwrite k1 x_lpi3a_lcd.dtb with k1 x_lpi3a.dtb and restart to use the LCD Please note that this dtb must be connected to an LCD in order to use it"},"/hardware/en/lichee/K1/lpi3a/6_application.html":{"title":"典型应用","content":" title: 典型应用 keywords: Linux, Lichee, K1, SBC, RISCV, application update: date: 2024 07 30 version: v1.0 author: zepan content: Release docs "},"/hardware/en/lichee/K1/lpi3a/7_faq.html":{"title":"FAQs","content":" title: FAQs keywords: Linux, Lichee, K1, SBC, RISCV, Debian, Desktop update: date: 2024 07 30 version: v1.0 author: zepan content: Release docs ### LPi4A compatibility settings Note that if you are using the LPi4A motherboard, the differences in the motherboard may cause the USB A port under the default image to be unusable. For the first use, you need to connect to the serial port or network, enter the device terminal, and replace the dtb Under/boot/spacemit/6.1.15/, overwrite k1 x_lpi3a_4a.dtb with k1 x_lpi3a.dtb and restart to use USB"},"/hardware/en/lichee/Nano/Nano.html":{"title":"Lichee Nano","content":"# Lichee Nano ## 概述 Lichee Nano是基于全志科技的F1C100s(ARM 926EJS内核)高性能soC芯片设计的迷你开发板。开发板设计小巧精致，将芯片的所有资源都引出，板载USB、Flash、TF卡、4OP LCD接口等，并把所有IO资源引出，方便开发者拓展使用，非常适合初学者学习linux或者商用于产品开发。 <img src \"./../assets/Nano/Nano_2.png\" width 400> <img src \"./../assets/Nano/Nano_3.png\" width 400> ## 参数 ### F1C100s参数 Lichee Nano开发板板载的F1C100s芯片功能很强大，芯片内置32MBDDR，拥有SDIO、SPI、UART、Speaker、Mic等接口，支持外挂 8~32MB SPI Nor Flash;在视频处理方面表现出现，支持720P视频输出，支持H.264、MJPEG等高清格式的解码。 ![](./../assets/Nano/F1C100s.png) 项目 参数 CPU •ARM9 CPU architecture<br>•16KByte D Cache<br>•32KByte I Cache Memory •SIP 32MB DDR1<br>•SD2.0,eMMC 4.41 Video •H.264 1280x720@30fps decoding<br>•MPEG1/2/4 1280x720@30fps decoding<br>•MJPEG 1280x720@30fps encoding<br>•JPEG encode size up to 8192x8192 Camera •8 bit CMOS sensor interface<br>•CCIR656 protocol for NTSC and PAL Audio •Integrated analog audio codec with two DAC channels and one ADC channel,maximum 192kHz DAC sample rate and 48kHz ADC sample rate<br>•One I2S/PCM interface Display •LCD RGB interface up to 1280x720@60fps<br>•TV CVBS output, support NTSC/PAL, with auto plug detecting Connectivity •USB OTG, SDIO,IR, 3 x TWI, 2 x SPI, 3 x UART ### 开发板参数 项目 参数 CPU 全志 F1C100s， ARM 926EJS , 主频 408MHz， 可超频至 600Mhz 内存及存储 集成 32MB DDR<br>板载 16MB NOR FLASH， 可从 FLASH 启动<br>板载 TF 卡座，可从 TF 启动 显示 通用 40P RGB LCD FPC 0.5mm 座子<br>可直接使用常见的 40P 4.3/5/7 寸屏幕（板载背光驱动）<br>支持常见的 272x480, 480x800, 1024x600 等分辨率<br>板载电阻式触摸屏芯片 视频处理能力 H.264 1280x720@30FPS 解码<br>MPEG1/2/4 1280x720@30FPS 解码<br>MJPEG 1280x720@30 FPS 解码<br>JPEG encode size up to 8192x8192 通信接口 SDIO，可搭配配套 SDIO WiFi+BT 模块<br>SPI x2<br>TWI x3<br>UART x3<br>OTG USB x1<br>TV out 其它接口 PWM x2<br>LRADC x1<br>Speakerx2 + Mic x1 ![](./../assets/Nano/Nano_pin.png) ### 软件参数 开发环境 参数 Linux 支持3.10 BSP Linux<br>支持4.19 主线 Linux 裸机 Xboot 裸机 RT Thread ## 使用教程 [Lichee Nano](/soft/Lichee/zh/Nano Doc Backup/index.md) ## 产品技术支持 Lichee Zero 开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"},"/hardware/en/lichee/Zero/Zero.html":{"title":"Lichee Zero","content":"# Lichee Zero ## Lichee Zero 概述 Lichee Zero是基于全志科技的V3s(ARM Cortex A7内核)高性能CPL芯片设计的迷你开发板。开发板设计小巧精致，将芯片的所有资源都引出,板载USB、Flash、TF卡、4OP LCD接口等，并把所有IO资源引出，方便开发者拓展使用，适合初学者学习linux或者商用于产品开发。 核心板： <img src \"./../assets/Zero/Zero_1.png\" width 500> <img src \"./../assets/Zero/Zero_6.png\" width 500> 核心板+扩展板： <img src \"./../assets/Zero/Zero_3.png\" width 500> <img src \"./../assets/Zero/Zero_4.png\" width 500> ## 参数 ### V3s参数 V3s框架 ![](./../assets/Zero/V3s.png) 项目 参数 CPU ARM Cortex™ A7 最高1.2GHz Memory Integrated 64MB DRAM Audio Codec • Integrated 92dB audio codec<br>• Supports two ADC channels and two DAC channels<br>• Supports one low noise analog microphone bias outputs<br>• Supports one microphone input and one stereo microphone outpu Video • Supports 1080p@40fps or 1080p@30fps+VGA@30fps H.264 video encoding,<br>• Supports H.264 1080p@30fps decoding, MJPEG 1080@30fps decoding Video Input/Output • Supports 8/10/12 bit parallel CSI and 4 lane MIPI CSI2<br>• Supports up to 5M CMOS sensor<br>• Supports RGB/i80/LVDS LCD up to 1024x768 resolution Connectivity • 3 x SD card controllers<br>• LRADC/SPI/TWI/UART/PWM<br>• USB, EMAC+PHY ISP • Integrated ISP up to 5M pixels<br>• Supports two channel outputs for display and encoding respectively<br>• Supports various input and output formats<br>• Supports AE/AF/AWB<br>• Supports saturation adjustment/ noise reduction/ defect pixel correction/distortion correction ### Lichee Zero核心板参数 项目 参数 CPU V3s 内存 64MB DDR2 存储 预留 SOP8 SPI Flash焊盘 <br>板载TF卡座 显示 通用40P RGB LCD FPC座<br>可直插常见的40P 4.3/5/7寸屏幕（板载背光驱动)，通过转接板可插50P 7/9寸屏<br>支持常见的272x480,480x800,1024x600等分辨率板载电阻式触摸屏芯片，支持电阻屏<br>板载RGB LED 通讯接口 SDIO x2，可搭配配套SDIO WiFi+BT模块<br>SPl x1<br>12C x2<br>UART x3<br>100M Ether x1(含EPHY)<br>OTG USB x1<br>MIPI CSI x1 其他接口 <br>PWM x2<br>LRADC x1<br>Speakerx2+ Mic x1 电气特性 Micro USB 5V供电<br>2.54mm插针3.3V~5V供电<br>1.27mm邮票孔供电 ![](./../assets/Zero/Zero_8.png) ![](./../assets/Zero/Zero_10.png) ### Lichee Zero 拓展板 项目 参数 CPU V3s 内存 64MB DDR2 存储 预留 SOP8 SPI Flash焊盘 <br>板载TF卡座 显示 通用40P RGB LCD FPC座<br>可直插常见的40P 4.3/5/7寸屏幕（板载背光驱动)，通过转接板可插50P 7/9寸屏<br>支持常见的272x480,480x800,1024x600等分辨率板载电阻式触摸屏芯片，支持电阻屏<br>板载RGB LED 通讯接口 SDIO x2，可搭配配套SDIO WiFi+BT模块<br>SPl x1<br>12C x2<br>UART x3<br>100M Ether x1(含EPHY)<br>OTG USB x1<br>MIPI CSI x1 其他接口 <br>PWM x2<br>LRADC x1<br>Speakerx2+ Mic x1 板载外设 以太网接口<br>3.5mm耳机接口<br>驻极体麦克风<br>额外TF卡卡槽<br>4个按键<br>MIPI接口 电气特性 Micro USB 5V供电<br>2.54mm插针3.3V~5V供电<br>1.27mm邮票孔供电 ![](./../assets/Zero/Zero_9.png) ## 使用教程 [Lichee Zero](/soft/Lichee/zh/Zero Doc/Start/intro_cn.md) ## 产品技术支持 Lichee Zero 开发板可以在多种场景实现客户不同方面的需要，在 AIoT 上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"},"/hardware/en/lichee/ZeroPlus/ZeroPlus.html":{"title":"Lichee ZeroPlus","content":"# Lichee ZeroPlus ## 概述 Lichee Zero Plus是基于全志科技的S3 (ARM Cortex A7内核)的高性能CPU芯片设计的高集成度核心板。 使用双NGFF金手指设计，引出134pin引脚，方便开发者拓展使用。S3是V3s的升级版，1.2GHz主频，内置128MB ddr3内存，引脚相对V3s全很多。 支持MIPI摄像头，普通并口摄像头，RGB屏幕，内置ePHY. <img src \"./../assets/Zero Plus/Plus_1.jpg\" width 400> ## 参数 ### 芯片 S3芯片架构 ![](./../assets/Zero Plus/Plus_2.png) 项目 参数 CPU • ARM® Cortex™ A7 @1.2GHz GPU • Supports 1080p@60fps or 2 channel 1080p@30fps H.264 video encoding, supports 8M JPEG encoding <br>• Supports H.264 1080p@60fps decoding, MJPEG 1080@30fps decoding ISP • Integrated ISP up to 8M pixels<br>• Supports two channel outputs for display and encoding respectively<br>• Supports various input and output formats<br>• Supports AE/AF/AWB<br>• Supports saturation adjustment/ noise reduction/ defect pixel correction/distortion correction Video Input/Output • Supports 8/10/12 bit parallel CSI and 4 lane MIPI CSI2<br>• Supports BT1120 input<br>• Supports up to 8M CMOS sensor<br>• Supports RGB/i80/LVDS LCD up to 1024x768 resolution<br>• Supports Allwinner's next gen SmartColor display technology for better visual effects for images & videos Memory • SIP 16 bit DDR3, up to 1333Mbp Audio Codec • Integrated 92dB audio codec<br>• Supports two ADC channels and two DAC channels<br>• Supports 3 MIC in, a stereo Line in, a headphone output and a stereo line out output Security Engine • Supports AES/DES Connectivity • 3 x SD card controllers<br>• LRADC/SPI/TWI/UART/PWM<br>• USB, EMAC+PHY ### 核心板 项目 参数 CPU ARM Cortex A7 处理器(1.2Ghz)， VFPv4 浮点处理器 内存 芯片内置 128Mbyte DDR3 内存 (时钟频率最高 672MHz) 存储 可选 SPI Nor Flash(8/16/32MB)，SD Nand(128/512MB)，eMMC(4/8GB)<br>Micro SD 卡 电源 5V 电源输入， 3 路 DCDC 稳压输出 (1.2,1.5,3.3) 复位 板载复位芯片 晶振 板载 24M 主晶振， 32.768KHz RTC 晶振 接口 NGFF M.2 B KEY x 2 共引出 67x2 134pin<br>板载 micro usb 接口和系统串口，可供下载固件及调试 系统支持 支持最新 Linux 5.2 mainline kernel, Linux 3.4 bsp kernel<br>支持 debian 发行版 ## 使用教程 [Lichee Zero](/soft/Lichee/zh/Zero Doc/Start/intro_cn.md) ## 产品技术支持 Lichee ZeroPlus 开发板可以在多种场景实现客户不同方面的需要，在 AIoT 上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"},"/hardware/en/lichee/index.html":{"title":"Lichee Pi","content":"# Lichee Pi ## Lichee Zero <div align \"center\"> <a href \"./Zero/Zero.html\" ><img src \"./assets/Zero/Zero_1.png\" width 400></a> </div> ## Lichee Nano <div align \"center\"> <a href \"./Nano/Nano.html\" ><img src \"./assets/Nano/Nano_2.png\" width 400></a> </div> ## Lichee Zero Plus <div align \"center\"> <a href \"./ZeroPlus/ZeroPlus.html\"><img src \"./assets/Zero Plus/Plus_1.jpg\" width 400></a> </div> ## Lichee RV <div align \"center\"> <a href \"./RV/RV.html\"><img src \"./assets/RV/D1 4.png\" width 400></a> </div>"},"/hardware/en/lichee/RV_Nano/3_images.html":{"title":"Image Format","content":"# Image Format The image is compressed using xz. After decompression, use tools like Rufus, Win32 Disk Imager, or dd to write it to an SD card. ## Images Based on the Official SDK [Download here](https://github.com/sipeed/LicheeRV Nano Build/releases) ## Images Based on the Mainline Buildroot SDK (WORK IN PROGRESS) [Download here](https://github.com/0x754C/sipeed toolchain/releases) ## Debian Sid Based image [Image Information and Downloads](https://github.com/Fishwaldo/sophgo sg200x debian)"},"/hardware/en/lichee/RV_Nano/1_intro.html":{"title":"LicheeRV Nano","content":" title: LicheeRV Nano keywords: riscv, licheerv,nano ## Introduction The LicheeRV Nano is a mini sized development board (measuring only 22.86*35.56mm), equipped with the SG2002 processor. It features a powerful core running at 1GHz (RISC V/ARM options available) and a smaller core at 700MHz RISC V, along with 256MB DDR3 memory, and an integrated 1Tops NPU. The board includes a wealth of interfaces such as MIPI CSI, MIPI DSI, SDIO, ETH, USB, SPI, UART, I2C, etc., allowing for the expansion of a wide variety of applications. Its through hole/half hole design facilitates easy mass production and soldering. ![](./../assets/RV_Nano/intro/RV_Nano_1.jpg) ## Specifications Item Specification CPU SOPHGO SG2002; <br>Major core: 1GHz RISC V C906 / ARM A53 (selectable); <br>Minor core: 700MHz RISC V C906;<br>Low power core: 25～300M 8051 NPU 1TOPS INT8, supports BF16 Memory Integrated 2Gbit (256MByte) DDR3 Storage Bootable from either TF card / SD NAND (SD NAND pads under TF card slot) Video Interface Video Output: 2 lane MIPI DSI output, standard 31pin interface, supports 6pin capacitive touchscreen <br>Video Input: 4 lane MIPI CSI input, 22Pin interface, supports dual CSI split Audio Interface Audio Output: Onboard PA amplifier, can directly connect speakers under 1W <br>Audio Input: Onboard analog silicon microphone, capable of direct sound reception Wired Connection E suffix version supports 100M RJ45 connector Wireless Connection W suffix version supports 2.4G / 5.8G dual band WiFi6 + BLE5.4 USB 1 x USB2.0 OTG Type C IO Interface 2 x 14pin 2.54 pin headers, 800mil spacing, breadboard friendly Buttons 1 x RST button + 1 x BOOT button LEDs 1 x Power LED, 1 x User LED Operating System Buildroot Linux / Debian Dimensions 22.86*35.56mm ![](./../assets/RV_Nano/intro/RV_Nano_3.jpg) ![](./../assets/RV_Nano/intro/RV_Nano_4.jpg) ## Version Comparison **Specification** **Basic System** **Microphone/Speaker** **Ethernet** **WiFi6/BT5** : : : : : : : : : : **LicheeRV Nano B** Yes Yes No No **LicheeRV Nano E** Yes Yes Yes No **LicheeRV Nano W** Yes Yes No Yes **LicheeRV Nano WE** Yes Yes Yes Yes ## Hardware Resources Datasheets, schematic diagrams, dimension drawings, and more can be found here: [Click Here](http://cn.dl.sipeed.com/shareURL/LICHEE/LicheeRV_Nano) [Board Specification](http://cn.dl.sipeed.com/shareURL/LICHEE/LicheeRV_Nano/01_Specification) [Board Schematic](http://cn.dl.sipeed.com/shareURL/LICHEE/LicheeRV_Nano/02_Schematic) [Board Designator Drawing](http://cn.dl.sipeed.com/shareURL/LICHEE/LicheeRV_Nano/03_Designator_drawing) [Board Dimensional Drawing](http://cn.dl.sipeed.com/shareURL/LICHEE/LicheeRV_Nano/04_Mechanical_drawing) [3D Model Files](http://cn.dl.sipeed.com/shareURL/LICHEE/LicheeRV_Nano/06_3D_file) [Core Board Packaging](http://cn.dl.sipeed.com/shareURL/LICHEE/LicheeRV_Nano/05_PCB_Lib) [Board Chip Information](http://cn.dl.sipeed.com/shareURL/LICHEE/LicheeRV_Nano) http://cn.dl.sipeed.com/shareURL/LICHEE/LicheeRV_Nano/07_Datasheet) ## Software Resources [SDK LicheeRV Nano Build](https://github.com/sipeed/LicheeRV Nano Build) ## SOPHGO Resources Summary [Datasheet](https://github.com/sophgo/sophgo doc/releases) [Compiler Toolchain Download](https://sophon file.sophon.cn/sophon prod s3/drive/23/03/07/16/host tools.tar.gz) [Software SDK Download](https://github.com/sophgo/cvi_mmf_sdk) [SDK Development Documentation Summary](https://developer.sophgo.com/thread/471.html) [HDK Development Documentation Summary](https://developer.sophgo.com/thread/472.html) [TPU SDK Development Resources Summary](https://developer.sophgo.com/thread/473.html) [TDL SDK Development Guide: (Provides common AI model algorithms, application packaging based on TPU SDK)](https://doc.sophgo.com/cvitek develop docs/master/docs_latest_release/CV180x_CV181x/zh/01.software/TPU/TDL_SDK_Software_Development_Guide/build/TDLSDKSoftwareDevelopmentGuide_zh.pdf) [TDL SDK Development Resources Summary](https://developer.sophgo.com/thread/473.html) https://developer.sophgo.com/thread/556.html) Precautions The beta version hardware (70405) NPU only supports operation at 0.5T, running at 1.0T does not guarantee the stability of the board. The WIFI of the beta version hardware (70405) has not been fully optimized yet, resulting in lower speeds. We appreciate your understanding. If purchasing a camera accessory or the WE version package, screws, soldering pillars, and a screwdriver are included in the package. To avoid burns during soldering, please refer to the [Camera & WE Ethernet Module Installation Guide](https://wiki.sipeed.com/hardware/zh/lichee/RV_Nano/2_unbox.html). If purchasing 3 inch, 4 inch, or 10.1 inch screen accessories, a screen adapter board and ribbon cable are included in the package. Please refer to the [Screen Installation Guide](https://wiki.sipeed.com/hardware/zh/lichee/RV_Nano/2_unbox.html)"},"/hardware/en/lichee/RV_Nano/2_unbox.html":{"title":"Unbox","content":" title: Unbox keywords: riscv, licheerv,nano ## LicheeRV Nano Package Introduction The LicheeRV Nano is available in four versions based on networking capabilities: **Standard Version (B)**: Comes without any networking accessories. **Ethernet Version (E)**: Features an onboard 100M Ethernet port for wired network connections. **WiFi Version (W)**: Equipped with an onboard WiFi6/BT5.2 module. By default, the BT5.2 functionality is not enabled. To activate Bluetooth capabilities, it's necessary to solder four 0201 resistors in the specified location or use a 2B pencil to create a short circuit in the designated area. ![](./../assets/RV_Nano/unbox/BLE_RES.jpg) + The WiFi Ethernet (WE) version features an onboard WiFi 6/BT 5.2 module and comes with an Ethernet module that connects to the development board via standoffs and ribbon cables. We also offer the following accessory: Camera![](./../assets/RV_Nano/unbox/Camera.jpg) + The camera (model 3754) features non short circuiting screw holes on both sides for secure mounting. It is recommended to fix the standoffs to the fifth pad for optimal stability. ![](./../assets/RV_Nano/unbox/Camera 5.jpg) + 3 inch Display Screen ![](./../assets/RV_Nano/unbox/3inch.jpg) The display features a resolution of 480*845 and supports touch functionality. The package includes a touch screen adapter board and a ribbon cable for easy integration. 5 inch Display Screen ![](./../assets/RV_Nano/unbox/5inch.jpg) This display boasts a resolution of 480*845 and does not support touch functionality. The ribbon cable can be directly connected to the LicheeRV Nano 31Pin screen interface for seamless integration. 7 inch Display Screen ![](./../assets/RV_Nano/unbox/7inch.jpg) The display features a resolution of 800*1280 and supports touch functionality. The ribbon cable can be directly connected to both the LicheeRV Nano 31Pin screen interface and the 6Pin touch interface, ensuring easy setup and integration. 10 inch Display Screen ![](./../assets/RV_Nano/unbox/10inch.jpg) The display features a resolution of 800*1280 and supports touch functionality. The package includes a touch adapter board and a ribbon cable for easy setup. The screen ribbon cable can be directly connected to the LicheeRV Nano 31Pin screen interface, ensuring seamless integration. Raspberry Pi Camera Adapter Ribbon Cable (Coming Soon) ![](./../assets/RV_Nano/unbox/1.jpg) Raspberry Pi Standard 15Pin Camera to LicheeRV 22Pin CSI Camera Interface Adapter + 1. Installation Guide ### Installing the WE Module Soldering the Ribbon Cable 1. Solder the ribbon cable following the direction shown in the diagram below. ![](./../assets/RV_Nano/unbox/WE1.jpg) 2. Use a Multimeter to Test for Continuity ![](./../assets/RV_Nano/unbox/WE2.jpg) ●Securing the Standoffs 1. To avoid burns while soldering the standoffs, you can first screw them onto the Ethernet module.![](./../assets/RV_Nano/unbox/WE3.jpg) 2.Insert the standoff into the fifth pad. It is advisable to apply solder paste to the pad beforehand to enhance the stability of the standoff after soldering. ![](./../assets/RV_Nano/unbox/WE4.jpg) 3.Use a soldering iron from the bottom side to solder. ![](./../assets/RV_Nano/unbox/WE5.jpg) + Assembly 1. Insert the ribbon cable into the FPC connector of the Ethernet module and secure it. ![](./../assets/RV_Nano/unbox/WE6.jpg) 1. Secure the Ethernet module to the standoffs using screws. ![](./../assets/RV_Nano/unbox/WE7.jpg) ### Installing the Camera Securing the Standoffs 1. Similar to the method mentioned above: first, screw the standoffs and screws onto the camera module. ![](./../assets/RV_Nano/unbox/CAM1.jpg) 2.Insert the standoff into the fifth pad. To enhance the stability of the standoff after soldering, it is recommended to apply solder paste to the pad beforehand. ![](./../assets/RV_Nano/unbox/CAM2.jpg) 3.Solder from the bottom side using a soldering iron. ![](./../assets/RV_Nano/unbox/CAM3.jpg) + Assembly 1. Connect the camera ribbon cable as shown in the diagram below. ![](./../assets/RV_Nano/unbox/CAM4.jpg) 2.Secure with screws. ![](./../assets/RV_Nano/unbox/CAM5.jpg)"},"/hardware/en/lichee/RV_Nano/8_mmf_development_guide.html":{"title":"Multimedia Framework (MMF) Development Guide","content":" title: Multimedia Framework (MMF) Development Guide keywords: riscv, licheerv, nano, mmf update: date: 2024 02 04 version: v0.1 author: lxowalle ## Overview This document is used to introduce the method of using SDK to develop MMF, to provide a development idea for developers who want to start developing MMF but can't get started. MMF full name is Multimedia Framework, an framework that offers a unified API format for video input/output, audio input/output, image signal processing, and hardware encoding/decoding, allowing users to quickly implement multimedia related functions by calling these APIs. ## Build MMF development environment Please refer to the method introduced in `LicheeRV Nano >System Development >cvi_mmf_sdk` to build the MMF development environment. Or follow the instructions below: ```shell Copy code # Download dependencies sudo apt install pkg config build essential ninja build automake autoconf libtool wget curl git gcc libssl dev bc slib squashfs tools android sdk libsparse utils android sdk ext4 utils jq cmake python3 distutils tclsh scons parallel ssh client tree python3 dev python3 pip device tree compiler libssl dev ssh cpio squashfs tools fakeroot libncurses5 flex bison # Download SDK and toolchain git clone https://github.com/sipeed/LicheeRV Nano Build.git wget https://sophon file.sophon.cn/sophon prod s3/drive/23/03/07/16/host tools.tar.gz tar xvf host tools.tar.gz # Compile all examples with the build_middleware command cd LicheeRV Nano Build git checkout v4.1.0 licheervnano ln s ../host tools ./ source build/cvisetup.sh defconfig cv1812cp_licheerv_nano_sd build_middleware ``` The above instructions describe how to install the MMF related compilation environment and how to compile the MMF examples provided by the SDK. Note: You may fail to compile sample_cvg. If you do not need this example, try again after deleting the `LicheeRV Nano Build/middleware/v2/sample/cvg` folder. If you need this demo, try compiling with `build_all`, which requires compiling the entire SDK, so the compilation time will be longer. ## Development Document Please refer to the `LicheeRV Nano >Board Introduction` to find most of the document. For MMF applications, pay attention to the following document: [Media Processing Software Development Reference](https://doc.sophgo.com/cvitek develop docs/master/docs_latest_release/CV180x_CV181x/en/01.software/MPI/Media_Processing_Software_Development_Reference/build/html/index.html) [SDK LicheeRV Nano Build](https://github.com/sipeed/LicheeRV Nano Build) ## Connecting to the Development Board via Network The purpose of connecting to the development board via network is to upload the firmware we compiled to the board. Please refer to the methods in `LicheeRV Nano >peripheral` to get the IP address of the development board. Any one of the three methods can be implemented: Ethernet connection, WIFI connection, or USB RNDIS connection. ## Compiling and Running an Example MMF will use the hardware directly, so incorrect operation can lead to system crash, and you must be careful to pay attention to details when developing MMF. The suggestion is to modify your own program by using the examples. Compile and run sample_vio example: ```shell # Ensure that the basic MMF compilation environment has been set up and that build_middleware has been compiled once # Compile sample_vio cd middleware/v2/sample/vio make # Upload to the development board (account root, password cvitek) scp sample_vio root@xxx.xxx.xxx.xxx:/root # xxx.xxx.xxx.xxx is the board's IP address # Log into the development board ssh root@xxx.xxx.xxx.xxx # If you need to use the display, you need to run fb_load.sh to make sure the driver is loaded (it only needs to be executed once) /opt/fb_load.sh # Run the example cd ~ ./sample_vio ``` The instructions above explain how to compile a specific MMF example, and how to upload and run the example on the development board. Developers can modify the example based on their applications to eventually develop the functionality they desire. ## Have an unsolvable problem? 1. Please remain patient and carefully review the development document to see if anything was overlooked. For example, check if the input parameters are correct, whether resources have been properly released, etc. 2. Post your problem on [maixhub](https://maixhub.com/discussion) or GitHub. Please organize the functionality you want to achieve, the problems you encountered, the solutions you tried, and the ways to reproduce them, by the way, many times can be solved in the process of organizing your thoughts."},"/hardware/en/lichee/RV_Nano/4_burn_image.html":{"title":"Flashing image","content":" title: Flashing image keywords: riscv, licheerv,nano # Image Format The image is compressed using xz. After decompression, use Rufus, Win32 Disk Imager, or dd to write it to an SD card. ## Linux ``` curl O https://github.com/sipeed/LicheeRV Nano Build/releases/download/20240124/licheervnano 20230124.img.xz # Replace sdX with your SD card's device node xzcat https://github.com/sipeed/LicheeRV Nano Build/releases/download/20240124/licheervnano 20230124.img.xz dd of /dev/sdX conv sync ``` ## Windows Use 7zip for extraction: https://www.7 zip.org/download.html Use Rufus or Win32 Disk Imager to write to the SD card: https://rufus.ie/ https://sourceforge.net/projects/win32diskimager/"},"/hardware/en/lichee/RV_Nano/6_develop_mainline.html":{"title":"","content":""},"/hardware/en/lichee/RV_Nano/5_peripheral.html":{"title":"Peripheral","content":" title: Peripheral keywords: riscv, licheerv,nano # Pinout ![](./../assets/RV_Nano/intro/RV_Nano_3.jpg) ## Connecting to the Board ### UART0 Connect the UART serial port to the GND, `A16 (TX)`, and `A17 (RX)` of the board Then use terminal software to connect to the serial port, with a baud rate of 115200. UART0 is also brought out on SBU1/2 on the USB interface. You can use the USB TypeC adapter to bring out RX0 and TX0. #### Disable UART0 output log First, transfer the output of the user space to another tty device: ``` #include <stdlib.h> #include <unistd.h> #include <sys/ioctl.h> #include <fcntl.h> int main(int argc, char *argv[]) { int fd; if (argc < 2) { fprintf(stderr, \"usage: %s /dev/ttyX\\n\", argv[0]); exit(EXIT_FAILURE); } fd open(argv[1], O_RDWR); if (fd < 0) { perror(\"open\"); exit(EXIT_FAILURE); } ioctl(fd, TIOCCONS); close(fd); exit(EXIT_SUCCESS); } ``` ``` riscv64 unknown linux gcc tioccons.c o tioccons ./tioccons /dev/tty2 # Transfer /dev/console to tty2 ``` Then set the kernel log level: ``` echo 0 > /proc/sys/kernel/printk ``` Test method: ``` echo userspace > /dev/console echo kernel > /dev/kmsg ``` Another way is to add the following content to /boot/uEnv.txt to switch the console to another tty: ``` consoledev /dev/ttyX ``` ### UART1 UART2 UART3 By default, the pins of UART1 and 2 are used to connect to the UART Bluetooth chip: ``` mmio_write_32(0x03001070, 0x1); // GPIOA 28 UART1 TX mmio_write_32(0x03001074, 0x1); // GPIOA 29 UART1 RX mmio_write_32(0x03001068, 0x4); // GPIOA 18 UART1 CTS mmio_write_32(0x03001064, 0x4); // GPIOA 19 UART1 RTS ``` If you only want to use UART1, you don't need to change PINMUX, just connect GPIOA28 GPIOA29. If you want to use the functions of UART1 and UART2 at the same time, you need to write to the register to set the PINMUX of the pin: In Linux user space, you can use the `devmem` tool to write registers. shell: ``` devmem 0x03001070 32 0x2 # GPIOA 28 UART2 TX devmem 0x03001074 32 0x2 # GPIOA 29 UART2 RX devmem 0x03001068 32 0x6 # GPIOA 18 UART1 RX devmem 0x03001064 32 0x6 # GPIOA 19 UART1 TX ``` The UART3 pins are multiplexed as SDIO by default: ``` mmio_write_32(0x030010D0, 0x0); // D3 mmio_write_32(0x030010D4, 0x0); // D2 mmio_write_32(0x030010D8, 0x0); // D1 mmio_write_32(0x030010DC, 0x0); // D0 mmio_write_32(0x030010E0, 0x0); // CMD mmio_write_32(0x030010E4, 0x0); // CLK ``` If you want to use the UART3 function, you need to write to the register to set the PINMUX of the pin: In Linux user space, you can use the `devmem` tool to write registers. shell: ``` devmem 0x030010D0 32 0x5 # GPIOP 18 UART3 CTS devmem 0x030010D4 32 0x5 # GPIOP 19 UART3 TX devmem 0x030010D8 32 0x5 # GPIOP 20 UART3 RX devmem 0x030010DC 32 0x5 # GPIOP 21 UART3 RTS ``` Serial port usage in Linux system: C: ``` /* TODO */ ``` shell: ``` stty F /dev/ttyS1 115200 # Set the UART1 baud rate to 115200 stty F /dev/ttyS1 raw # Set tty to RAW mode echo n UUU > /dev/ttyS1 # Send UUU(0x55 0x55 0x55) hexdump C /dev/ttyS1 # Display the received data in HEX format ``` ### USB CDC ACM Serial Port When the board's USB Type C port is connected to a computer, it will provide a USB CDC ACM serial port device (provided by Linux gadget). Linux: ``` # Replace /dev/ttyACMX with the specific device, depending on your computer picocom b 9600 /dev/ttyACMX ``` Windows: Press Win + R, enter devmgmt.msc, and press Enter. Find the new device's serial port number under the serial port devices. Then use PuTTY or HyperTerminal to connect. ### USB RNDIS Network Port When the board's USB Type C port is connected to a computer, it will provide a USB RNDIS network card device (provided by Linux gadget). The PC will automatically obtain an address using DHCP. Replace the last digit of the automatically obtained IPv4 address with 1 to get the board's IPv4 address: ``` 10.44.55.66 PC's IPv4 address 10.44.55.1 Board's IPv4 address ``` Then use ssh to connect: `ssh root@board's IP address` Username: root Password: root On Windows system, some configurations need to be made. Open Device Manager and find the following option: ![usb_rndis_step1](./../../../zh/lichee/assets/RV_Nano/peripheral/usb_rndis_step1.png) Select \"Update driver\": ![usb_rndis_step2](./../../../zh/lichee/assets/RV_Nano/peripheral/usb_rndis_step2.png) Select \"Browse my computer for driver software\": ![usb_rndis_step3](./../../../zh/lichee/assets/RV_Nano/peripheral/usb_rndis_step3.png) Select \"Let me pick from a list of available drivers on my computer\": ![usb_rndis_step4](./../../../zh/lichee/assets/RV_Nano/peripheral/usb_rndis_step4.png) In the device type list, select \"Network adapters\": ![usb_rndis_step5](./../../../zh/lichee/assets/RV_Nano/peripheral/usb_rndis_step5.png) For manufacturer, select \"Microsoft\"; for model, select \"Remote NDIS Compatible Device\": ![usb_rndis_step6](./../../../zh/lichee/assets/RV_Nano/peripheral/usb_rndis_step6.png) If this warning pops up, please click \"OK\": ![usb_rndis_step7](./../../../zh/lichee/assets/RV_Nano/peripheral/usb_rndis_step7.png) After the update is successful, it will show as follows: ![usb_rndis_step8](./../../../zh/lichee/assets/RV_Nano/peripheral/usb_rndis_step8.png) Then you can find the \"Remote NDIS Compatible Device\" item under the Network adapters list in Device Manager: ![usb_rndis_step9](./../../../zh/lichee/assets/RV_Nano/peripheral/usb_rndis_step9.png) ### Ethernet Connection Connect the Ethernet cable to the board; the board will automatically obtain an address using DHCP upon boot. The board's image defaults to enabling the MDNS service. Use the command: ``` avahi browse art grep lpirvnano ``` to list devices in the broadcast domain with lpirvnano in their domain names. Then use: ``` ssh root@lpirvnano XXXX.local ``` to connect to the board. ## Disabling the Boot Demo of the Image ``` # Clear rc.local echo '#!/bin/sh' > /etc/rc.local # Reboot reboot ``` ## Audio The LicheeRV Nano supports recording and playback. Standard ALSA tools can be used for recording, playback, and other operations. ### Recording First, set the microphone volume, range: 0 24 ```shell amixer Dhw:0 cset name 'ADC Capture Volume' 24 ``` After setting, start recording: ```shell arecord Dhw:0,0 d 3 r 48000 f S16_LE t wav test.wav & > /dev/null & ``` ### Playback ```shell ./aplay D hw:1,0 f S16_LE test.wav ``` ## I2C I2C1 and I2C3 are brought out on the pin header, and devices can be connected to them. Before using, you need to correctly set the PINMUX: ``` shell# I2C1 devmem 0x030010D0 32 0x2 devmem 0x030010DC 32 0x2 # I2C3 devmem 0x030010E4 32 0x2 devmem 0x030010E0 32 0x2 ``` Then you can use i2c tools to operate the i2c peripherals. The image is already pre installed. ## ADC An ADC route is brought out on the pin header, using ADC1. First, select the ADC channel, here taking ADC1 as an example: ```shell echo 1 > /sys/class/cvi saradc/cvi saradc0/device/cv_saradc ``` Read the value of ADC1: ```shell cat /sys/class/cvi saradc/cvi saradc0/device/cv_saradc ``` ## LCD Connect the screen's ribbon cable to the board's MIPI interface, paying attention to the wire order. Create or edit the uEnv.txt file in the first partition of the sdcard, add or modify the panel field: Note: The image will have the first partition already mounted in the /boot directory and can be used directly in the terminal: ```shell cd /boot touch uEnv.txt vi uEnv.txt # Use 'i' to enter edit # Use 'Esc',':wq' to save and quit ``` 7 inch screen: ``` panel zct2133v1 ``` 5 inch screen: ``` panel st7701_dxq5d0019b480854 ``` 3 inch screen: ``` panel st7701_d300fpc9307a ``` 2.3 inch screen: ``` panel st7701_hd228001c31 ``` If you want to use the framebuffer function, create a file named fb in the first partition of the sd card: ``` touch /boot/fb ``` Then load the driver: ``` /etc/init.d/S04fb start ``` Adjusting the Backlight Brightness: ``` echo 0 > /sys/class/pwm/pwmchip8/pwm2/enable echo 5000 > /sys/class/pwm/pwmchip8/pwm2/duty_cycle # 50% echo 1 > /sys/class/pwm/pwmchip8/pwm2/enable # some example: #echo 2000 > /sys/class/pwm/pwmchip8/pwm2/duty_cycle # 20% #echo 4000 > /sys/class/pwm/pwmchip8/pwm2/duty_cycle # 40% #echo 7000 > /sys/class/pwm/pwmchip8/pwm2/duty_cycle # 70% #echo 9000 > /sys/class/pwm/pwmchip8/pwm2/duty_cycle # 90% ``` ## Touch Screen Connect the touchscreen ribbon to the board's touchscreen interface, paying attention to the wire sequence. Then execute: ``` /opt/touch.sh # Load the touchscreen driver ``` Followed by: ``` echo 2 evtest ``` Touching the screen will display specific coordinates in the terminal. For reading coordinates and touch events, refer to the input section in /opt/src/vendortest. ## WIFI Install the antenna onto the WIFI module's antenna connector. Then write the AP's SSID and password into the /etc/wpa_supplicant.conf file: ``` network { ssid \"ssid\" psk \"password\" } ``` After that, execute: ``` /opt/wifi.sh ``` To verify if the network is available: ``` ping your gateway address ``` If available, you can add it to the boot script: ``` echo '/opt/wifi.sh' >> /etc/rc.local ``` ## Camera Install the camera onto the camera mount, paying attention to the wire sequence. Then execute: ``` /mnt/system/usr/bin/sample_vio 6 # Real time display of camera images on the screen # Type 255 to exit the program ``` ``` /mnt/system/usr/bin/sensor_test # Camera test program that can be used to dump single YUV images. ``` When using the 70405 (beta) boards: ``` touch /boot/alpha # Beta version # rm /boot/alpha # Official version cd /mnt/data cp sensor_cfg.ini.alpha sensor_cfg.ini # Beta version # cp sensor_cfg.ini.beta sensor_cfg.ini # Official version ``` ## Button To view button events, use the command: ``` echo 1 evtest ``` Then press the USER button, and you will see the corresponding event report in the terminal. ## HelloWorld For information on compiling programs using the vendor's toolchain, visit: https://github.com/sipeed/LicheeRV Nano Build/blob/v4.1.0/build/boards/cv181x/cv1812cp_licheerv_nano_sd/readme.md#compile program use vendors toolchain"},"/hardware/en/lichee/RV_Nano/7_test_report.html":{"title":"","content":""},"/hardware/en/lichee/th1520/lbook4a/lbook4a.html":{"title":"LicheePi Book 4A","content":" title: LicheePi Book 4A keywords: LicheeBook, TH1520, RISCV, SBC, Laptop update: date: 2024 06 17 version: v0.1 author: Zepan content: Initial documentation creation ## Introduction Lichee Book 4A (hereinafter referred to as Book) is a high performance RISC V lightweight laptop developed by Sipeed, designed to allow RISC V developers to experience the application of RISC V products in real life ahead of time. Lichee Book 4A uses a mainstream 14 inch laptop mold, integrates a high performance RISC V TH1520 SOM (8+32/16+128 options), a 14 inch 1920x1200 high definition screen, an 88 key round cap silent keyboard, and USB A, USB C, 2280 SSD slot, TF card slot, miniHDMI, 3.5mm headphone jack, and other rich interfaces, making it a RISC V laptop that combines openness and usability. The software support for Lichee Book 4A is also quite comprehensive, with Debian as the default operating system, supporting Chrome browser, VSCode IDE, KiCAD PCB drawing software, Office software, 4K player, various game emulators, meeting the needs of daily work and study. Lichee Book 4A uses a modular design, allowing you to reuse the SOM from LicheePi4A if you purchased it earlier. Thanks to the modular SOM design, Lichee Book 4A can also be upgraded to LM3A or LM5A modules in the future by replacing the module! > Note: High performance RISC V consumer electronics are still in the early stages as of 2024. Lichee Book 4A is mainly aimed at RISC V developers with at least proficient Linux operating experience, and ordinary consumers may not be able to use it directly. > If you are an ordinary user without Linux experience, please do not purchase ![lbook4a](./assets/lbook/lbook.jpg) ## Technical Specifications <table> <colgroup> <col class \"org left\" /> <col class \"org left\" /> </colgroup> <tr> <td class \"org left\">SOM</td> <td class \"org left\"> <a href \"https://wiki.sipeed.com/lm4a\">LM4A</a> </td> </tr> <tr> <td class \"org left\">CPU</td> <td class \"org left\"><strong>RISC V RV64GCV C910@1.85GHz * 4</strong> </td> </tr> <tr> <td class \"org left\">GPU</td> <td class \"org left\">IMG™ B 系列 BXM 4 64 </td> </tr> <tr> <td class \"org left\">NPU</td> <td class \"org left\">4TOPS@INT8 </td> </tr> <tr> <td class \"org left\">Memory</td> <td class \"org left\"> 8GB or 16GB LPDDR4X </td> </tr> <tr> <td class \"org left\">Storage</td> <td class \"org left\"> 32GB or 128GB eMMC, NGFF 2280 SATA SSD </td> </tr> <tr> <td class \"org left\">Display</td> <td class \"org left\"> 14 inch 1920 x 1200 LCD, miniHDMI </td> </tr> <tr> <td class \"org left\">Inoput</td> <td class \"org left\"> 88 Keyboard, touchpad </td> </tr> <tr> <td class \"org left\">Camera</td> <td class \"org left\"> 0.3MP Front Camera </td> </tr> <tr> <td class \"org left\">Audio</td> <td class \"org left\"> 3.5mm Headphone, MEMS MIC, StereoSpeaker </td> </tr> <tr> <td class \"org left\">Network</td> <td class \"org left\"> WiFi6 + BT5.4 </td> </tr> <tr> <td class \"org left\">Interface</td> <td class \"org left\"> USB3.0 Type A, USB3.0 Type C, USB2.0 Type A, MicroSD Slot </td> </tr> <tr> <td class \"org left\"> Battery </td> <td class \"org left\"> 4500 mAh@7.6V </td> </tr> <tr> <td class \"org left\">Case</td> <td class \"org left\"> Silver plastic Case</td> </tr> <tr> <td class \"org left\">Size & Weight</td> <td class \"org left\">314x217x17mm 1.3Kg</td> </tr> <tr> <td class \"org left\">System</td> <td class \"org left\">Debian </td> </tr> </table> ## Getting Started ### Unbox Upon receiving the package: ![unbox1](./assets/lbook4a/unbox1.jpg) Open the box, and take out the two parts, the notebook on the top, and the 12V2.5A power adapter and MiniHDMI cable at the bottom. ![unbox2](./assets/lbook4a/unbox2.jpg) Take out the main unit, the top view is as shown: ![unbox3](./assets/lbook4a/unbox3.jpg) The bottom view shows an SSD cover, you can unscrew it to install an SSD; the central part is the fan intake, the unit uses a heat pipe + silent fan for cooling to ensure a cool core temperature. ![unbox4](./assets/lbook4a/unbox4.jpg) One side view shows the interfaces from left to right: TF card, 3.5mm headphone jack, USB2.0 interface, and computer lock. ![unbox5](./assets/lbook4a/unbox5.jpg) The other side view shows the interfaces from left to right: USB3.0 port, 12V DC port, miniHDMI port, USB C port (for download/Host/charging). ![unbox6](./assets/lbook4a/unbox6.jpg) (If you purchased a barebones package, refer to the \"SOM Installation Guide\" section to install the LM4A before proceeding.) Open the main unit, press and hold the power button on the top right for 3 seconds to turn it on (release when the screen backlight lights up or the left power indicator lights up). ![unbox8](./assets/lbook4a/unbox8.jpg) If the backlight does not light up, the battery might be drained during transportation. Try plugging in the power adapter and holding the power button. After turning on the backlight, it will light up for about 15 seconds before the top left corner of the screen starts flashing a cursor (indicating it has entered the kernel). After about 20 seconds, it will enter the Debian desktop system login interface. Enter the username \"sipeed\" and the default password \"licheepi\". After entering the desktop system, you can test the touchpad, keyboard, camera, etc. If any components are not working, contact customer service. The default system is Debian, pre installed with Chrome, Office, and other applications for you to experience. You can use sudo apt install xxx to install software. The default username and password are \"sipeed\" and \"licheepi\". Refer to the relevant sections of the LicheePi4A documentation for general software usage. ### SSDUsage Guide The Book supports M.2 2280 SATA SSDs, which can be installed by removing the SSD cover on the back. ![ssd1](./assets/lbook4a/ssd1.jpg) 如果你不计划使用SSD，可以手工关闭USB转SSD芯片来降低功耗（约0.6Watt），提升续航： If you do not plan to use an SSD, you can manually turn off the USB to SSD chip to reduce power consumption (about 0.6Watt) and extend battery life: Go to /boot/dtbs/linux image 5.10.113 zzz sipeed 20240531+/thead/ and find the corresponding dtb to modify, such as the 8GB memory version: sudo dtc I dtb O dts o tmp.dts th1520 lpi4a plastic.dtb Edit the following part, change enable active high to enable active low: ``` \treg_sata_vcc_5v: regulator sata vcc 5v en { \t\tstatus \"okay\"; \t\tcompatible \"regulator fixed\"; \t\tregulator name \"regulator sata vcc 5v en\"; \t\tregulator min microvolt <5000000>; \t\tregulator max microvolt <5000000>; \t\tvin supply <&reg_sys_vcc_5v>; \t\tgpio <&pcal6408ahk_c 1 1>; \t\tenable active low; \t\tregulator always on; \t}; ``` sudo dtc I dts O dtb o th1520 lpi4a plastic.dtb tmp.dts Then restart to turn off the SATA power. ### SOM Installation Guide If you purchased the barebones package, you need to install the SOM module. Prepare a Phillips screwdriver, remove the back cover (first peel off the two foot pads, each has a screw underneath), install the SOM module, apply thermal grease on the CPU/DDR, place the heatgrease, and reassemble the back cover. ![unbox7](./assets/lbook4a/unbox7.jpg) ## System The Book's image is released together with the LConsole's image, with only the U Boot being different. It is recommended to use the SOM with 8+32 or higher configuration. The GitHub repository is at: https://github.com/0x754C/sipeed th1520 laptop extra/releases linux image *.deb is the kernel installation package provided by Sipeed. If you only want to upgrade the kernel, you can install this package. Remember to update to the corresponding version of U Boot and backup files before installation. sipeed th1520 laptop extra *.deb is the additional file package provided by Sipeed, including configuration files, test tools, and EC firmware. u boot with spl *.bin is the U Boot file. Please choose the U Boot corresponding to your circuit board model. Remember to back up files before flashing. Flashing the wrong U Boot may cause the system to fail to boot. bootroot *.ext.xz is the partition image. If you want to re flash the entire system, use this. Baidu Pan： Link: https://pan.baidu.com/s/1jkJ4YR7EhMRZ11XmccKDtg Code: qj1r Mega： https://mega.nz/folder/p9BCTbLb#sWSZvLw6nrBmqujQXfvWrg Common application Show: ![sys1](./assets/lbook4a/sys1.png) The system architecture of the Book is as follows. Refer to the schematic or device tree files for details. ![sys2](./assets/lbook4a/sys2.png) ## Resources Download Lichee Book 4A and Lichee Console 4A share the same motherboard and hardware resources: [Sipeed 下载站](https://dl.sipeed.com/shareURL/LICHEE/LicheeConsole4A) ## Other Links [Taobao](https://item.taobao.com/item.htm?id 807162533118) [Aliexpress](https://www.aliexpress.com/item/3256807018240741.html) QQ Group: 559614960 [Click to join](http://qm.qq.com/cgi bin/qm/qr?k 5YkapIhdtWHp8AEfM5_bFFYQIX3CUQN6) Telegram: https://t.me/linux4rv Forum：Maixhub.com/discussion Contact Email：support@sipeed.com"},"/hardware/en/lichee/th1520/lbook4a/4_burn_image.html":{"title":"burn image","content":" title: burn image keywords: Linux, Lichee, TH1520, Console, RISCV, image update: date: 2024 06 18 version: v0.1 author: Zepan content: Release docs ## Image download https://github.com/0x754C/sipeed th1520 laptop extra/releases Baidu Pan： Link: https://pan.baidu.com/s/1jkJ4YR7EhMRZ11XmccKDtg code: qj1r Mega： https://mega.nz/folder/p9BCTbLb#sWSZvLw6nrBmqujQXfvWrg ## Full Image ### Flashing via Type C Port 1. Remove the SSD cover. 2. Locate the BOOT button and the RST button. ![boot_and_rst_key](./assets/burn_image/boot_and_rst_key.jpg) 3. Press and hold the BOOT button, then press the power button on the keyboard to turn on the device (or press the reset button if the device is already on). Connect the Book to the PC via the Type C port for flashing the image. ![typec_connect](./assets/burn_image/typec_connect.jpg) 4. Download the flashing image on the PC. 5. Execute the flashing commands: ``` fastboot flash ram u boot with spl plastic8g.bin #Choose according to the purchased memory model fastboot reboot fastboot flash uboot u boot with spl plastic8g.bin fastboot flash boot boot.ext4 fastboot flash root root.ext4 ``` 10. Press the RST button next to the BOOT button to restart the Book laptop."},"/hardware/en/lichee/th1520/lc4a/lc4a.html":{"title":"LicheePi Cluster 4A","content":" title: LicheePi Cluster 4A keywords: LicheePi, Sodimm, TH1520, RISCV, SBC, Cluster update: date: 2023 10 29 version: v0.1 author: 0x754C content: initial version ## Introduction Lichee Cluster 4A (hereinafter referred to as LC4A) is a high performance RISC V cluster computing platform developed by SiliconSpeed Technology. It can be used to build multi node computing clusters, and can also learn Kubernetes, automation, edge artificial intelligence computing, local mini servers, and hosted applications. Excellent tool for programs, containers, etc. A single Lichee Cluster 4A can be equipped with up to 7 LM4A core boards. Each LM4A core board contains an NPU with 4TOPS@int8 AI computing power. A single core board supports up to 16GB LPDDR4X memory and 128G eMMC storage. The entire cluster has strong flexibility and reliability. Scalability. Lichee Cluster 4A has an onboard eight port Gigabit switch to provide high speed connections and easily connect multiple nodes to form a powerful computing cluster. It also supports USB3.0 and SD card storage expansion, making it easy to expand additional storage or add peripherals. equipment. Lichee Cluster 4A also comes with BMC (out of band management), which independently connects the system serial port and reset pin of each LM4A. BMC can reset a single computing node from the hardware, and can also execute commands through the serial port, such as executing ser2net or kermit to manage slots. ## Technical specifications <table> <colgroup> <col class \"org left\" /> <col class \"org left\" /> </colgroup> <tr> <td class \"org left\">Supported core boards</td> <td class \"org left\"> <a href \"https://wiki.sipeed.com/lm4a\">LM4A</a> * 7</td> </tr> <tr> <td class \"org left\">CPU</td> <td class \"org left\"><strong>RiscV C910@1.85GHz * 4</strong> * 7</td> </tr> <tr> <td class \"org left\">GPU</td> <td class \"org left\">IMG™ B Series BXM 4 64 * 7</td> </tr> <tr> <td class \"org left\">NPU</td> <td class \"org left\">4TOPS@INT8 * 7</td> </tr> <tr> <td class \"org left\">RAM</td> <td class \"org left\">Max 16GB * 7</td> </tr> <tr> <td class \"org left\">EMMC</td> <td class \"org left\">Max 128GB * 7</td> </tr> <tr> <td class \"org left\">BMC</td> <td class \"org left\"><a href \"https://wiki.sipeed.com/Lichee RV\">SIPEED Lichee RV</a></td> </tr> <tr> <td class \"org left\">Power management</td> <td class \"org left\"><a href \"https://wiki.sipeed.com/m0sense\"> Sipeed M0 Sense</a></td> </tr> <tr> <td class \"org left\">Ethernet</td> <td class \"org left\">Gigabit Ethernet 1 (Slot#1)<br>Gigabit Ethernet 2 (Switch)<br>100 Mbit Ethernet (BMC)</td> </tr> <tr> <td class \"org left\">USB</td> <td class \"org left\">USB3.0 * 7 (LM4A)<br>USB2.0 * 1 (BMC)</td> </tr> <tr> <td class \"org left\">HDMI</td> <td class \"org left\">HDMI * 1 (Slot 1)</td> </tr> <tr> <td class \"org left\">SDCARD</td> <td class \"org left\">TF * 7</td> </tr> <tr> <td class \"org left\">Power support</td> <td class \"org left\">Supports DC port DC power supply<br>Supports ATX 24PIN power supply</td> </tr> <tr> <td class \"org left\">RTC power supply</td> <td class \"org left\">CR2032 button battery</td> </tr> <tr> <td class \"org left\">Heat dissipation</td> <td class \"org left\">5V PWM fan interface * 7<br>12V 4PIN PWM fan interface * 1</td> </tr> <tr> <td class \"org left\">Dimensions</td> <td class \"org left\">Mini ITX, 17 * 17 cm (6.7 * 6.7 inch)<br> Optional MINI ITX chassis, 20 * 12 * 22 cm</td> </tr> </table> ## Hardware system ### Motherboard introduction ![lc4a_top](./assets/lc4a/lc4a_top.png) ### Motherboard frame diagram ![lc4a_architecture](./assets/lc4a/lc4a_architecture.png) LicheeRV SOM (D1 C906@1GHz) has 5 native serial ports and two USB serial ports, which are independently connected to 7 SOMs. Each LM4A's RST/BOOT can be controlled via an analog switch. LM4A No. 1 has the second Gigabit port and HDMI port by default, which facilitates the SOM to perform task distribution operations for the entire cluster. The motherboard can be powered by a 12V DC charging head (12V9A or above recommended), or by a standard ATX power supply. ### Chassis introduction It is recommended to choose the MINI ITX chassis. This chassis has good appearance and heat dissipation performance, and is convenient for the deployment and display of computing clusters. The chassis is adapted to the MINI ITX motherboard, equipped with a 250W high power power supply, and installed with a 12cm silent fan for heat dissipation, which can ensure that the CPU temperature is below 70 degrees when running at full load. ![lc4a_box](./assets/lc4a/lc4a_box.png) ### Hardware Installation Guide By default, all SOMs have been installed on the LC4A during transportation. If you need to remove or upgrade the SOM, please refer to the following instructions. #### Install core board Pull the white lock buckle to both sides. Please confirm the gap before inserting to avoid damage caused by incorrect direction. ![lc4a_install_goldfinger](./assets/lc4a/lc4a_install_goldfinger.png) After placing the core board, apply downward pressure evenly ![lc4a_install_install_lm4a](./assets/lc4a/lc4a_install_install_lm4a.png) After hearing a click, confirm that the white lock is properly engaged and the installation is complete. If you need to take out the core board, just pull the white locks to both sides. ![lc4a_install_slot](./assets/lc4a/lc4a_install_slot.jpeg) #### Install BMC Install the burned image SD card to LicheeRV, then install the LicheeRV module to the seat next to the switch chip, and then tighten the screws. #### Plug in power Optional ATX power supply or DC movie power supply. Make sure the buckle of the ATX power socket is fastened to avoid poor contact causing the connector to heat up. ![lc4a_power_atx20_cable](./assets/lc4a/lc4a_power_atx20_cable.png) Plug in the jumper cap ![lc4a_power_jumpwire](./assets/lc4a/lc4a_power_jumpwire.png) #### Internet connection The cluster system mainly connects to two external network ports: 1. Onboard Gigabit switch network port 2. BMC network port It is recommended that the onboard Gigabit switch network port be connected to the user's intranet or main network for the cluster to obtain required network data. It is recommended that the BMC network port be connected to an independent network for cluster control, which is more secure. The clusters are connected internally through Gigabit switches. How to get the cluster’s IP address: The pre installed firmware installation has the mdns service enabled Enable avahi service on your PC (Linux) Use mdns to scan the entire network to obtain the mdns domain name information of lc4a: ``` avahi browse art grep lc4a ``` Then use: ``` ssh debin@lc4aXXXX.local ``` XXXX is the last four digits of the mac address, used to distinguish each slot ## Software system ### LM4A Mirror The LM4A SOM in the cluster can directly use the LicheePi4A image. If you need to enable USB, you can apply the following PATCH in the Linux device tree: [Click here to download](https://dl.sipeed.com/fileList/LICHEE/LicheeCluster4A/04_Firmware/lpi4a/src/linux/0001 arch riscv boot dts lpi4a disable i2c io expander fo.patch) Or use the precompiled image directly: [Click here to download](https://dl.sipeed.com/shareURL/LICHEE/LicheeCluster4A/04_Firmware/lpi4a/bin) Image burning method: 1. Press the BOOT button and press the RST button at the same time, then use the A to A male USB cable to connect to the computer 2. Burn using fastboot tool ### OpenBMC Image The LicheeRV SOM on the motherboard runs OpenBMC to manage the SOM on the motherboard. Mirror download address: [Click here to jump](https://dl.sipeed.com/shareURL/LICHEE/LicheeCluster4A/04_Firmware/bmc/bin) Image burning method: ``` bmaptool copy obmc phosphor image lichepi rv.wic.gz /dev/YOUR_SDCARD ``` Default username: `root` Default password: `0penBmc` 0 is zero, not O If you need to develop customization, please download PATCH: https://dl.sipeed.com/shareURL/LICHEE/LicheeCluster4A/04_Firmware/bmc/src And applied to OpenBMC source code: ``` git clone https://github.com/openbmc/openbmc/ git checkout commit id git amxxx.patch ``` ### OpenBMC Management Access Slot's serial port from SSH: ``` ssh p 2301 root@bmcip # access first slot's serial port ``` * Port 22: OpenBMC shell * Port 2301: SOL (Serial Over LAN) of slot1 * Port 2302: SOL for slot2 * Port 2303: SOL for slot3 * Port 2304: SOL for slot4 * Port 2305: SOL for slot5 * Port 2306: SOL for slot6 * Port 2307: SOL for slot7 The serial port of each Slot is output to the log: ``` cat /var/log/obmc cons*.log ```"},"/hardware/en/lichee/th1520/lpi4a/3_images.html":{"title":"Collection of images","content":" title: Collection of images keywords: Linux, Lichee, TH1520, SBC, RISCV, image update: date: 2023 10 23 version: v1.2 author: ztd content: Update image info and upload new images date: 2023 07 19 version: v1.1 author: ztd content: Update docs date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## Supported kernels Currently T Heads SDK uses Linux Kernel 5.10: https://gitee.com/thead yocto Support is currently added to Linux 6.x, the main contributor of this is `Jisheng Zhang ` ## Official Sipeed image The image for the LicheePi 4A is updated irregularly. The initial image may not be stable, or it may not be able to fully utilize the performance of the TH1520. Please follow the steps below to get the latest image. The official Sipeed image is based on an adapted Debian. There may be problems with the memory identification of some 16G memory core boards, which may cause the system to crash when the memory usage is high. The default image's account and password configurations is: User: `debian`，password: `debian`; User: `sipeed`，password: `licheepi`; root has no password by default. ### Memory Problem Repair Instructions IMPORTANT：16GB memory board sendout before 2023.8.1 have a buggy images that can't correctly recognize 16GB memory (occupy errors running big applications), please follow the next instructions to fix this error. Please use the following command to burn a new u boot to the board. The u boot used by 16G memory is in the [Mega Cloud Storage link](https://mega.nz/folder/phoQlBTZ#cZeQ3qZ__pDvP94PT3_bGA), and can also be downloaded from [this link](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/07_Tools) The relevant files are in the `20230803_tempfix.zip` compressed package. (images of 0721 and later versions can be used normally, no need to replace it with the file here) ```shell sudo ./fastboot flash ram ./images/u boot with spl lpi4a 16g.bin sudo ./fastboot reboot sleep 1 sudo ./fastboot flash ram ./images/u boot with spl lpi4a 16g.bin # If there is no device tree corresponding to 16G ddr in the boot.ext4 you use, you need to burn the boot.ext4 corresponding to 16G ddr sudo ./fastboot flash boot ./images/boot.ext4 ``` ### Debian ![debian](./../../../../zh/lichee/th1520/lpi4a/assets/images/debian.png) ![debian_neofetch](./../../../../zh/lichee/th1520/lpi4a/assets/images/debian_neofetch.png) Download Links: Mega Cloud Storage：[click me](https://mega.nz/folder/phoQlBTZ#cZeQ3qZ__pDvP94PT3_bGA) ISCAS mirror(including test mirror, ordinary users please use the mirror in the previous network disk): [click me](https://mirror.iscas.ac.cn/revyos/extra/images/lpi4a/) 1. LPI4A_20240111_BASIC.zip Release Date: Jan 11, 2024 Kernel: 5.10 Root Filesystem: ext4, 4.3GB Preinstalled Software Packages: Development: python3.11 Office: libreoffice suite Browser: chromium Media: 4K video players like Parole(Supports hardware acceleration, recommended for priority use), VLC, GIMP changelog: 20230706: Fixed HDMI display device and HDMI audio device recognition issues. Fixed Bluetooth issues. Bluetooth devices now function properly, and Bluetooth headphones can play audio normally. Fixed the issue with the browser shortcut in the bottom launch bar not being available. It is now clickable to access Chromium. Fixed kernel panic issue caused by prolonged connection to a USB camera. 20230721: Fixed the issue with recognizing 16GB of memory. To fully recognize 16GB of memory, please update this image. 20230912: Fixed audio quality issue when playing HDMI audio in Chromium. Fixed font pixel loss issue when using dual monitors with different resolutions. 20231023: Fixed cursor misalignment issue. Fixed the mismatch between NPU driver kernel and user versions. Fixed the failure to burn root file system larger than 4GB. 20231214: Fixed cursor flickering issue. Added support for Wifi6 driver. 20240111: Fixed MIPI screen brightness not being adjustable Fixed Bluetooth not working with new WIFI/BT module Usage Instructions: Auto login enabled, default login user is sipeed Sudo without password enabled NPU drivers loaded automatically, no manual initialization needed Supports both HDMI and MIPI display, switch in boot menu Boot menu config at /boot/extlinux/extlinux.conf in boot.ext4. 3 options, distinguished by suffix: Suffix (HDMI only) HDMI only Suffix (HDMI and MIPI) Dual display Suffix (rescue target) Recovery Default is HDMI only. Two ways to switch to MIPI: 1. Connect serial tool, press 2 to choose MIPI display when boot menu appears, one time only 2. Edit extlinux.conf, change default l0 to default l1 to change default to MIPI The zip contains two u boot, note the suffix and device parameters when burning u boot with 16g suffix is for 16GB memory, no suffix is for 8GB memory Known Issues: 2. LPI4A_20240111_FULL.zip Release Date: Jan 11, 2024 Kernel: 5.10 Root Filesystem: ext4, 9.7GB Preinstalled Software Packages: Development: python3.11, GCC, VScode, Kicad (with demo projects), AI env (with precompiled yolov5n/yolov5s executables) Office: libreoffice suite Browser: chromium Media: 4K video players like Parole (Supports hardware acceleration, recommended for priority use.with demo 4K videos on desktop), VLC, GIMP, video editor Kdenlive (with demo video clips), kodi Game: SuperTuxKart Other: btop, neofetch changelog: 20230706: Fixed HDMI display device and HDMI audio device recognition issues. Fixed Bluetooth issues. Bluetooth devices now function properly, and Bluetooth headphones can play audio normally. Fixed the issue with the browser shortcut in the bottom launch bar not being available. It is now clickable to access Chromium. Fixed kernel panic issue caused by prolonged connection to a USB camera. 20230721: Fixed the issue with recognizing 16GB of memory. To fully recognize 16GB of memory, please update this image. 20230912: Fixed audio quality issue when playing HDMI audio in Chromium. Fixed font pixel loss issue when using dual monitors with different resolutions. 20231023: Fixed cursor misalignment issue. Fixed the mismatch between NPU driver kernel and user versions. Fixed the failure to burn root file system larger than 4GB. 20231214: Fixed cursor flickering issue. Added support for Wifi6 driver. 20240111: Fixed MIPI screen brightness not being adjustable Fixed Bluetooth not working with new WIFI/BT module Usage Instructions: The image occupies a large amount of space, and the internal testing version cannot use this image due to the eMMC capacity being only 8GB. Therefore, internal testing users should use the BASIC version image; Auto login enabled, default login user is sipeed Sudo without password enabled NPU drivers loaded automatically, no manual initialization needed Supports both HDMI and MIPI display, switch in boot menu Boot menu config at /boot/extlinux/extlinux.conf in boot.ext4. 3 options, distinguished by suffix: Suffix (HDMI only) HDMI only Suffix (HDMI and MIPI) Dual display Suffix (rescue target) Recovery Default is HDMI only. Two ways to switch to MIPI: 1. Connect serial tool, press 2 to choose MIPI display when boot menu appears, one time only 2. Edit extlinux.conf, change default l0 to default l1 to change default to MIPI The zip contains two u boot, note the suffix and device parameters when burning u boot with 16g suffix is for 16GB memory, no suffix is for 8GB memory Known Issues: <! 1. LPi4A_Test_0425 1. Release date: April 25, 2023 2. Linux Kernel version: 5.10 3. rootfs: ext4, 4.3GB 4. Pre Installed packages: 1. Development utilities 2. Office suite 5. Fixed issues: 6. Known problems： 1. GPU sometimes turns off 2. After installing the ibus input method, the GPU will be turned on, and the problem of GPU double buffering (terminal + graphical interface) will be reproduced. 2. LPI4A tempfix0428 1. Release date: April 28, 2023 2. Linux Kernel version: 5.10 3. rootfs: ext4, 4.3GB 4. Pre Installed packages: TODO 5. Fixed issues: 1. Temporarily fix the problem of terminal display lag in version 0425, but it will increase CPU usage and halve GPU efficiency 6. Known issues: 1. After installing the ibus input method, the GPU will be turned on, and the problem of GPU double buffering (graphical interface) will be reproduced. > ### OpenWRT ![openwrt](./../../../../zh/lichee/th1520/lpi4a/assets/images/openwrt.png) [Click me](https://github.com/ruyisdk/openwrt) ### Android ![android](./../../../../zh/lichee/th1520/lpi4a/assets/images/android.png) Readme and image download link: [Click me](https://gitee.com/thead android/thead android) Prebuild Image Download Links: Mega Cloud Storage：[click me](https://mega.nz/folder/phoQlBTZ#cZeQ3qZ__pDvP94PT3_bGA) > The Android 13 SDK is still in its infancy, and the problems will be gradually fixed The precompiled image file of Android 13 is provided in the network disk download link of Sipeed official image, and the burning method after downloading is as follows. Please use the version downloaded from here for the fastboot tool: https://developer.android.com/tools/releases/platform tools There are also fastboot files in the network disk. ```shell #Burn uboot and initialize boot environment variables fastboot flash ram u boot with spl.bin fastboot reboot fastboot flash uboot u boot with spl.bin #Burn all partitions #In the non boot burning mode, you can enter the command fastboot usb 0 in the uboot command line to burn the partition separately fastboot flash bootpart bootpart.ext4 fastboot flash boot boot.img fastboot flash vendor_boot vendor_boot.img fastboot flash super super.img fastboot flash userdata userdata.img fastboot flash vbmeta vbmeta.img fastboot flash vbmeta_system vbmeta_system.img #Initialize metadata and misc partition fastboot erase metadata fastboot erase misc ``` ## Third party images The images provided by third parties are listed here for informational purposes only. Sipeed does not guarantee the availability and stability of these images. ### openEuler ![openEuler](./../../../../zh/lichee/th1520/lpi4a/assets/images/openEuler.png) ![openeuler_neofetch](./../../../../zh/lichee/th1520/lpi4a/assets/images/openeuler_neofetch.png) Download: [Click me](https://mirror.iscas.ac.cn/openeuler sig riscv/openEuler RISC V/preview/openEuler 23.03 V1 riscv64/lpi4a/) Twitter: https://twitter.com/openEuler ### DeepinOS ![deepin](./../../../../zh/lichee/th1520/lpi4a/assets/images/deepin.jpg) ![deepin_neofetch](./../../../../zh/lichee/th1520/lpi4a/assets/images/deepin_neofetch.png) Readme and image download address: [Link](https://github.com/aiminickwong/licheepi4a images) ### openKylin ![openKylin](./../../../../zh/lichee/th1520/lpi4a/assets/images/openkylin.png) ![oepnkylin_neofetch](./../../../../zh/lichee/th1520/lpi4a/assets/images/oepnkylin_neofetch.png) Readme link: [Click me](https://github.com/aiminickwong/licheepi4a images) [openKylin V1.0 Download address](https://www.openkylin.top/downloads/index cn.html) ### armbian ![armbian](https://cdn.armbian.com/wp content/uploads/2018/03/logo2.png) Project address: [Click me](https://github.com/chainsx/armbian riscv build) ### Fedora ![fedora](./../../../../zh/lichee/th1520/lpi4a/assets/images/fedora.png) Project address: [Click me](https://github.com/chainsx/fedora riscv builder) ### Ubuntu ![ubuntu](./../../../../zh/lichee/th1520/lpi4a/assets/images/ubuntu.png) [Click me](http://cdimage.ubuntu.com/ubuntu base/releases/22.04/release/) ![ubuntu_neofetch](./../../../../zh/lichee/th1520/lpi4a/assets/images/ubuntu_neofetch.jpg) ### NixOS (unofficial) ![nixos](./../../../../zh/lichee/th1520/lpi4a/assets/images/nixos.png) ![nixos_neofetch](./../../../../zh/lichee/th1520/lpi4a/assets/images/nixos licheepi neofetch.jpg) Project address: [Click me](https://github.com/ryan4yin/nixos licheepi4a) ### Gentoo Project address: [Click me](https://wiki.gentoo.org/wiki/Project:RISC V) The link below shows how to create a Gentoo Linux system from stage3 Deplay Gentoo Linux [Click me](https://wiki.gentoo.org/wiki/User:Dlan/RISC V/TH1520) ![gentoo](./../../../../zh/lichee/th1520/lpi4a/assets/images/gentoo.jpg) ### slarm64 ![slarm64](./../../../../zh/lichee/th1520/lpi4a/assets/images/slarm64.png) Project address: [Click me](https://gitlab.com/sndwvs/images_build_kit) Download: [Click me](https://dl.slarm64.org/slackware/images/lichee_pi_4a/)"},"/hardware/en/lichee/th1520/lpi4a/12_faq.html":{"title":"FAQ","content":" title: FAQ keywords: Linux, Lichee, TH1520, SBC, RISCV, Debian, Desktop update: date: 2023 10 30 version: v1.2 author: ztd content: Update official development docs. date: 2023 10 23 version: v1.1 author: ztd content: Update NPU's FAQ date: 2023 09 22 version: v1.0 author: ztd content: Release docs ## Unbox Power supply notes: 1. The USB C port only supports 5V input. For safety, do not use fast charging power banks or chargers. 2. The IO pins are 1.8V logic level. Please use the shipped serial adapter board or a serial board that supports 1.8V. 3. Computer USB ports usually only provide 5V1A, which is not enough for the board. The board needs at least 5V2A, 5V3A adapter is recommended, or use 12V DC power. 4. If the LED next to the USB silkscreen blinks, it indicates unstable power or a short circuit. Differences between formal and beta hardware versions, USB current limit instructions see[Board hardware overview](https://en.wiki.sipeed.com/hardware/en/lichee/th1520/lpi4a/2_unbox.html#Board hardware overview) ## Images For image versions before 20230721, there is an issue of incorrectly identifying the memory size on the 16+128 core board, the image version needs to be updated. If it is a version after 20230706, you can also refer to[Images summary](https://en.wiki.sipeed.com/hardware/en/lichee/th1520/lpi4a/3_images.html) for repairing. Please read the usage instructions for the image collection in the wiki carefully before using the image, to ensure downloading the expected image, for example using the 10.1 inch touch screen requires flashing the image in the MIPI suffixed compressed package. The Android 13 image currently does not have peripheral support. After flashing, only basic functions like HDMI display are available. ## Burn image When flashing on Windows, please confirm if the driver is installed correctly first. If the driver is installed correctly but there is still no reaction during flashing, try changing the USB cable. Note that the USB cable used must be able to supply power and transmit data, and try not to use the USB ports on the front panel of the PC case when flashing, or the data ports on a laptop, otherwise the device may not be recognized due to power supply issues. To switch boot modes, for example to boot from SD card, formal version boards can switch via dip switches (note a dedicated image is needed), beta version boards can also switch by passing boot arguments, see[Board Boot Process](https://en.wiki.sipeed.com/hardware/en/lichee/th1520/lpi4a/4_burn_image.html#Board Boot Process). After 20231023, large image burning support has been updated. From this version, burning requires using the latest version of fastboot, which can be found in the image collection's [cloud disk link](https://mega.nz/folder/phoQlBTZ#cZeQ3qZ__pDvP94PT3_bGA). The file's name is `burn_tools_support_bigimage.zip`. ## Desktop Usage If the icons in the desktop bottom launcher are not working properly, you can manually configure them as desired, or use the following command to restore the default configuration. See [Web Browser](https://en.wiki.sipeed.com/hardware/en/lichee/th1520/lpi4a/5_desktop.html#Web Browser) for the default configuration. \t```shell \tcp /etc/xdg/xfce4/panel/default.xml /home/sipeed/.config/xfce4/xfconf/xfce perchannel xml/xfce4 panel.xml \tchown sipeed:sipeed /home/sipeed/.config/xfce4/xfconf/xfce perchannel xml/xfce4 panel.xml \t``` If you encounter errors when installing software, please update to the latest image or refer to [Software Source](https://en.wiki.sipeed.com/hardware/en/lichee/th1520/lpi4a/5_desktop.html#Software Installation) for solutions. If you find that the Wifi/BT function of the development board cannot be used or if you cannot see the Wifi device after rebooting, unplug the power supply of the development board, completely disconnect it, and then power it back on to restart. ## Peripheral Use 1. To use the NPU, please use image versions 0920 or later. 2. JTAG requires manual wiring and setting pinmux on the board, refer to [JTAG](https://en.wiki.sipeed.com/hardware/en/lichee/th1520/lpi4a/6_peripheral.html#JTAG). 3. When connecting multiple peripherals (e.g. HDMI, USB keyboard/mouse), use 12V DC power if possible. If the computer's USB port already has many peripherals connected, it may not have enough power for the dev board and connected peripherals. 4. When using the NPU for inference, the first run will optimize on the board, which is a slow process. It will generate a shl.hhb.bm file afterwards. Using this weight file for inference will be much faster. 5. For certain TF cards that do not support UHS and may result in I/O errors when reading or writing large files, you can switch to the root user and execute the following commands: ```shell apt update apt install device tree compiler cd /boot/dtbs/linux image 5.10.113 lpi4a/thead/ # For dual screen, cd /boot/dtbs/linux image 5.10.113 lpi4a/dual/thead/ dtc I dtb O dts light lpi4a.dtb o light lpi4a.dts # For 16GB ddr, change the dt name to light lpi4a 16gb.dtb(light lpi4a 16gb.dts) awk v RS \"}\" '/sd@ffe7090000/ {sub(\"max frequency <0xbcd3d80>;\", \"max frequency <100000000>;\")} {printf \"%s}\", $0}' light lpi4a.dts > temp.dts && mv temp.dts light lpi4a.dts # For 16GB ddr, change the dt name to light lpi4a 16gb.dtb(light lpi4a 16gb.dts) dtc I dts O dtb light lpi4a.dts o light lpi4a.dtb # For 16GB ddr, change the dt name to light lpi4a 16gb.dtb(light lpi4a 16gb.dts) sync ``` After modifying the device tree, restart the development board to apply the changes. 6. If after connecting a Bluetooth mouse, there is no response when moving, you can try restarting the Bluetooth service: ```shell sudo systemctl restart bluetooth.service ``` ## System building ### revyos 1. Before building the kernel/uboot/opensbi, please check if these environment variables are set correctly: \t```shell \texport toolchain_tripe riscv64 unknown linux gnu \texport ARCH riscv \texport nproc 12 \texport GITHUB_WORKSPACE \"~/th1520_build\" \texport PATH \"/opt/Xuantie 900 gcc linux 5.10.4 glibc x86_64 V2.6.1/bin:$PATH\" \t``` \tThe above environment variables need to be adjusted according to your actual configuration, file paths, etc. After building, also check if the corresponding folders are created and paths are correct when installing the files, e.g. `rootfs`, `rootfs/boot` directories. 2. Due to different toolchain versions, binaries built under different SDKs cannot be mixed. 3. If USB and other peripherals stop working after building and flashing, please check if the Image and modules (put module directory to /lib/modules on board) match. ### THead Yocto 1. As of version 1.1.2 of this SDK, changes are needed in the Dockerfile when building the development environment using Docker. See [THead Yocto related section](https://en.wiki.sipeed.com/hardware/en/lichee/th1520/lpi4a/7_develop_thead.html#Build Yocto compilation environment) for the specific changes: \tcomment Dockerfile's line 182 186: \t```shell \t# install npm \t#RUN cd $WORK_PATH \\ \t# && curl fsSL https://deb.nodesource.com/setup_lts.x bash \\ \t# && apt install y nodejs yarn \\ \t# && npm install aiot vue cli g \t``` \tthen \t```shell \tdocker build t linux dev base:base . \t``` \t \tAfter installation finished, enter the container and run commands below: \t```shell \tsudo apt update \tsudo apt install npm \tsudo apt install nodejs \t``` \tAt last, run: \t```shell \tnpm v \tnodejs v \t``` \tthere will be output about version info. 3. When using the `MACHINE light lpi4a bitbake thead image linux` command to build the image, if it crashes during the `compile` task, it could be due to insufficient memory. At least 32GB memory is recommended. 4. Due to network issues, download failures or very slow downloads may occur. Using a proxy for downloading is recommended. 5. If you encounter an error like the following: \t```text \tPlease use a locale setting which supports utf 8. \tPython can't change the filesystem locale after loading so we need a utf 8 when python starts or things won't work. \t``` \tPlease follow the steps below: \tFirst, install some dependencies \t```shell \tsudo apt get install locales \tsudo dpkg reconfigure locales \t``` \t Then in the printed list, find the `en_US.UTF8` item (typically around item 158), enter the number corresponding to this item and press enter. Also select this item again and press enter. After the above configuration steps, run the following commands (you can also consider adding the commands below to docker's `.bashrc`): \t```shell \tsudo locale gen en_US.UTF 8 \tsudo update locale LC_ALL en_US.UTF 8 LANG en_US.UTF 8 \texport LANG en_US.UTF 8 \t``` 5. If you encounter an error like the following: \t```text \tplease install them in order to proceed: lz4c pzstd zstd \t``` \tinstall some corresponding dependencies \t```shell \tsudo apt update && sudo apt install y zstd liblz4 tool \t``` ### Android 1. When compiling in a docker environment, you may encounter errors like the following: \t```shell \tBuild sandboxing disabled due to nsjail error. \t``` \tThis error can be ignored for now, it does not affect subsequent build steps. To run nsjail, you can try upgrading the kernel version to 5.XX or passing these parameters when starting docker: ` security opt apparmor unconfined security opt seccomp unconfined security opt systempaths unconfined` or ` privileged`. ## Development Documentation The development documentation can be found at [this link](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/09_Doc)."},"/hardware/en/lichee/th1520/lpi4a/1_intro.html":{"title":"Board introduction","content":" title: Board introduction keywords: Linux, Lichee, TH1520, SBC, RISCV update: date: 2023 07 21 version: v1.1 author: ztd content: Update English docs date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## Introduction LicheePi 4A is the high performance RISC V linux development board using [Lichee Module 4A](http://wiki.sipeed.com/hardware/en/lichee/th1520/lm4a.html), based on [TH1520](https://www.t head.cn/product/yeying) SOC (4xC910@1.85G, RV64GCV, 4TOPS@int8 NPU, 50GFLOP GPU), LicheePi 4A contains maximum 16GB 64bit LPDDR4X, 128GB eMMC, supports HDMI+MIPI dual 4K display, supports 4K camera input, dual Gigabit Ethernet interfaces (one of these supports POE) amd 4 USB3.0 interfaces, supports kinds of audio processing by C906 core. ![lpi4a](./../../../../zh/lichee/th1520/lpi4a/assets/intro/lpi4a.png) The LicheePi 4A is the most powerful RISC V SBC as of now (Q2 2023). Its performance is about 2 times that of the previous generation RISC V SBC [VisionFive2](https://www.starfivetech.com/en/site/boards). Without enabled custom instruction set acceleration, its performance is close to the Raspberry Pi 4 based on ARM A72. With acceleration enabled, it can match the Raspberry Pi 4. It also has a maximum 16GB ultra large memory, twice that of the Raspberry Pi 4's max 8GB! ![benchmark](./../../../../zh/lichee/th1520/lpi4a/assets/intro/benchmark.png) ![geekbench5](./../../../../zh/lichee/th1520/lpi4a/assets/intro/geekbench5.png) The LicheePi 4A can be used as a typical RISC V verification platform. Its powerful performance allows faster native compilation without the need for QEMU emulation. We will soon (Q2 2023) release the LicheeCluster 4A based on the LM4A for cluster computing, supporting up to 7xLM4A for cluster build and compilation, ideal for distribution build farms. Stay tuned! While maintaining high performance, we have also done our best to design for cost. The 8GB RAM version is priced at ¥749 899 ($100 $130), while the 16GB version is ¥1100 1300 ($155 $185). This is a better price/performance ratio than the Raspberry Pi 4 8GB (~$150)! Whether you are a RISC V enthusiast or not, the LicheePi 4A is a game changing high performance RISC V SBC worth getting! ![desktop](./../../../../zh/lichee/th1520/lpi4a/assets/intro/desktop.png) ## Contributions Welcome This is an online document hosted on GitHub. You can click the `Edit this page` link in the top right to edit it. For quality contributions to the docs, we offer discount coupons from ¥5 to ¥150 ($1 to $20) based on the content. ## Parameters <table> <thead> <tr> <th colspan 2>Main Chip</th> </tr> </thead> <tbody> <tr> <td>Name</td> <td>TH1520</td> </tr> <tr> <td>CPU</td> <td>RISC V 64GCV C910*4@1.85GHz <br>· Each core contains 64KB I cache amd 64KB D Cache <br>· 1MB of Shared L2 Cache <br>· Support TEE and REE, configured during core booting<br>· Support multi core debugging framework of custom and RISC V compatible interface<br>· Independent power domain, supports DVFS</td> </tr> <tr> <td>GPU</td> <td>· OpenCL 1.1/1.2/2.0<br>· OpenGL ES 3.0/3.1/3.2<br>· Vulkan 1.1/1.2<br>· Android NN HAL</td> </tr> <tr> <td>NPU</td> <td>Support 4TOPS@INT8, up to 1GHz <br>· Support TensorFlow、ONNX、Caffe <br>· Support CNN、RNN、DNN </td> </tr> <tr> <td>Decode</td> <td>Real time decoder, support H.265/H.264/VP9/8/7/6/AVS/AVS+/AVS2.0/VC1/MPEG4 <br>· Supports H.264 BP/MP/HP@level 5.1 decoding, up to 4K resolution<br>· Supports H.265/HEVC Main Profile@level 5.1 decoding, up to 4K resolution<br>· Supports VP9 Profile 2 decoding, up to 4K resolution<br>· Supports AVS2.0 decoding, up to 4K resolution<br>· Supports VP6/7/8/AVS/AVS+/VC1/MPEG4 decoding, up to 1920x1080 resolution<br>· Decoding at 4K@75fps maximum</td> </tr> <tr> <td>Encode</td> <td>· Supports H.264 BP/MP/HP@level4.2 encoding, up to 4K resolution<br>· Supports H.265/HEVC Main Profile encoding, up to 4K resolution<br>· Only supports I frames and P frames<br>· Encoding at 4K@40fps maximum</td> </tr> <tr> <th colspan 2>Hardware features</th> </tr> <tr> <td>RAM</td> <td>· 8GB 64bits LPDDR4<br>· 16GB 64bits LPDDR4<br></td> </tr> <tr> <td>Storage</td> <td>· eMMC(Optional): None, 8G, 32G, 128G<br>· Support TF card</td> </tr> <tr> <td>Ethernet</td> <td>· 2 x Gigabit Ethernet interfaces, Optional POE</td> </tr> <tr> <td>USB</td> <td>· USB3.0 x 4<br>· USB2.0 x 1 (For power supply or flashing OS)</td> </tr> <tr> <td>Audio</td> <td>· 1 x 3.5mm stereo interface<br>· One audio interface<br>· Two onboard microphones<br></td> </tr> <tr> <td>Display</td> <td>· 1 x HDMI2.0<br>· 1 x 4 lane MIPI DSI</td> </tr> <tr> <td>Camera</td> <td>· 2 x 2 lane MIPI CSI<br>· 1 x 4 lane MIPI CSI</td> </tr> <tr> <td>GPIO</td> <td>· UART<br>· IIC<br>· SPI</td> </tr> </tbody> </table> ### Hardware information [Specification / Datasheet](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/01_Specification) [Schematic](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/02_Schematic) [BOM](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/03_Bit_number_map) [Dimensional Drawing](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/04_Dimensional_drawing) [3D Model](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/05_3D_model) ## Other Site Online store: [Aliexpress](https://www.aliexpress.com/item/1005005532736080.html) [Github](https://github.com/sipeed/LicheePi4A) [Sipeed Site](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a) Telegram: https://t.me/linux4rv Contact email：support@sipeed.com"},"/hardware/en/lichee/th1520/lpi4a/2_unbox.html":{"title":"Unboxing","content":" title: Unboxing keywords: Linux, Lichee, TH1520, SBC, RISCV, unbox update: date: 2023 07 21 version: v1.3 author: ztd content: Update English docs date: 2023 07 19 version: v1.2 author: wonder content: Add shell install steps ## Unboxing / Box contents There are two versions of the LicheePi 4A board, the beta version and the official version. The beta version was released in May 2023. There is only one version of the board with 8+8 (DDR+eMMC). The official version is expected to release in July 2023, comes up with 8+32 (DDR+eMMC) and 16+128 (DDR+eMMC) version, with some minor adjustments and fixes based on the feedback from the beta version users. The functionality and images will stay the same as the beta version. ### Beta Version If you received the board as part of the beta program, you will receive the following package: ![package_alpha](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/package_alpha.png) The opened box will look like this： ![unbox_alpha](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/unbox_alpha.png) The main body of LicheePi 4A is wrapped in black foam, and the other labeled parts are: 1. 30x30mm thermal grease pad, used to attach the heatsink to the CPU. 2. 30mm 5V cooling fan. The connector should be plugged into the 5V fan header on the board. Note: The red wire is the positive wire and should be connected to the + pole. The fan will not work if you reverse the polarity. 3. 2.4G WiFi Antenna, already connected to the IPEX socket. If it comes loose please re attach it yourself. 4. USB C cable, used for power supply and image flashing. If you miss any part during unpacking, please contact customer service for help. ### Offical Version Here is what you will receive if you purchase the official LicheePi 4A: ![package_v1](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/package_v1.jpg) The side of the package shows the memory/eMMC version of the enclosed hardware. If it does not match your purchase, please contact customer support: ![package_v1mem](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/package_v1mem.jpg) Removing the blue cover reveals a white box package: ![package_v1box](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/package_v1box.jpg) Opening the white box reveals the LicheePi 4A board: ![package_v1board](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/package_v1board.jpg) Note the two QR codes on the board. The one on the USB port is the base board production info, indicating the base board model, version, production date, e.g. `LPI4A0 23070702067`. The one on the SOM is the SOM production info, indicating the SOM model, memory, eMMC, MAC addresses (second port is address+1), and production date, e.g. `LM4A0 16128 48DA3560003E 23071100318`. Removing the board reveals the included accessories in the bottom of the box, a USB cable, heatsink, and thermal paste: ![package_v1misc](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/package_v1misc.jpg) Please contact customer support if any items are missing from your order. ### Optional Accessories The LicheePi 4A also has a variety of optional accessories as shown below: ![accessory](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/accessory.jpg) Purchase recommendations: AccessoryDescription Aluminum CaseSuitable as a small host or router case 10.1\" Touch Screen1280x800 4lane MIPI, suitable for vehicle computers, Android debugging OV5693 Camera5MP camera, suitable as a native camera for mobile devices like Android debugging USB Camera5MP USB camera with onboard mic, suitable as a webcam for OpenCV PoE Power Module5V2.4A PoE power module, for PoE power over Ethernet for gateway applications 12V Power Adapter12V2A power adapter, for powering many external peripherals RV Debugger PlusUART+JTAG debugger board for connecting to serial console ## Assembling the board ### SOM installation By default, the LM4A SOM has been installed on the motherboard. If you need to upgrade/replace the SOM, you can follow the instructions below to remove and install the SOM 1. Removing the SOM: <table> <tr> <td colspan 2>Unlock the board by pushing the retainer tabs outwards and lift up the SOM</td> </tr> <tr> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/unbox/unlock_som.png\" alt \"unlock_som\"></td> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/unbox/remove_som.png\" alt \"remove_som\"></td> </tr> </table> 2. Installing the SOM: <table> <tr> <td colspan 2>First insert the SOM into the connector, ensure that it´s pushed all the way in and push down on both sides till the retainer clips automatically hold the board.</td> </tr> <tr> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/unbox/insert_som.png\" alt \"insert_som\"></td> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/unbox/lock_som.png\" alt \"lock_som\"></td> </tr> </table> ### Cooler Installation LicheePi 4A is a high performance SBC，you need to install an active cooler to dissipate the heat. Otherwise it might automatically throttle the frequency due to overheating and is unable to deliver the full performance. 1. Installing the thermal pad, take the thermal pad and remove the protective film from both sides, then place the thermal pad in the location shown below, the thermal pad can be re arragnet if needed. Please ensure that you cover the main CPU as well as both memory chips fully. ![silicone_pad](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/silicone_pad.png) 2. Installing the fan / heatsink Align the 30x30mm heatsink and fan with the thermal pad and press down lightly. ![insert_fan](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/insert_fan.png) 3. Connecting the cooling fan By default the cooling fan should already be plugged in when you received the board. If the fan power cables was unplugged, please re plug it as shown in the image below. Pay attention to the polarity of the fan, in case the fan is plugged in backwards it will not work. Note: The fan is controlled by a linux kernel driver which needs to be configured correctly to work. (fan does not spin per default) If you are unsure if the fan works, you can test it by plugging it into a +5V and GND pin on the 20 pin GPIO header. ![insert_fan_cable](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/insert_fan_cable.png) ### WiFi Antenna Installation The WiFi antenna is already connected when you receive the board. If it got unplugged, here is how to install it: ![insert_ant](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/insert_ant.png) ### POE module installation The POE module can be purchased seperatly. It´s a 5V POE power module with a length of 35.6mm, which can be soldered to the POE POWER holes on the development board. The PoE module should be installed like this： <table> <tr> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/unbox/unbox_poe_0.jpg\" alt \"poe_back\"></td> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/unbox/unbox_poe_1.jpg\" alt \"poe_front\"></td> </tr> </table> ### Assembly completed This is what the fully assembled board looks like: ![assemble_ok](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/assemble_ok.png) ## Booting the board LicheePi 4A is pre loaded with a basic system image, so you can try it out directly! Note: The pre loaded system image might be very old. After you booted the system for the first time, please have a look at the next section on how to flash / update the image. Use an HDMI cable (not included) to connect a display (not included) to the HDMI port of LicheePi 4A. Use the supplied USB C cable to connect the board to a USB power supply (not included) with at least 5V and 2A output. The LicheePi 4A will automatically boot into the default image and the login screen should appear within 30 seconds, or automatically login via sipeed username. ![boot_login](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/boot_login.png) The default image's account and password configurations is: User: `debian`，password: `debian`; User: `sipeed`，password: `licheepi`; root has no password by default. If you followed the above procedure, but your display fails to show any image, please check the following: 1. Check whether the USB Power supply is connected correctly, works and whether the power LED is lit on the board. 2. Check that the heatsink is installed correctly and that the fan is spinning. 3. Check that the HDMI connection is correct and that the display is turned on and the correct input is selected. 4. It might be the case that there is no pre loaded image from the factory, in this case check the next section on how to flash an image. 5. If none of the above works, please contact us for support. ## Aluminum Case Installation Guide ### Case Accessory Overview The shell accessories should include the following contents, if there is something missing, please contact customer service. ![20230718_assemble_0](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/20230718_assemble_0.jpg) From left to right: 1. 3507 Turbo Fan 2. 40x40x5mm Aluminum Heat Sink 3. Small Phillips Screwdriver 4. M3x5 Flat Head Screws x 8 5. Case Cover Plates x 2 6. IPEX to SMA Pigtail + SMA Whip Antenna 7. 30x30mm Thermal Paste Sheet 8. Aluminum Case x 2 ### Install Heat Sink 1. Prepare board ![20230718_assemble_1](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/20230718_assemble_1.jpg) 2. Apply thermal paste ![20230718_assemble_2](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/20230718_assemble_2.jpg) 3. Install heat sink in orientation ![20230718_assemble_3](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/20230718_assemble_3.jpg) ### Install Cover Plates 1. Slide in board ![20230718_assemble_4](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/20230718_assemble_4.jpg) 2. Install antenna to plate ![20230718_assemble_5](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/20230718_assemble_5.jpg) 3. Install antenna to PCB ![20230718_assemble_6](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/20230718_assemble_6.jpg) 4. Install front plate (2 screws) ![20230718_assemble_7](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/20230718_assemble_7.jpg) 5. Remove foam from back plate ![20230718_assemble_8](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/20230718_assemble_8.jpg) 6. Install back plate (2 screws) ![20230718_assemble_9](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/20230718_assemble_9.jpg) ### Install Fan 1. Connect fan power to pins (red on top, black on bottom), attach fan to top shell (ensure fan is close to shell edge to straighten wires) ![20230718_assemble_10](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/20230718_assemble_10.jpg) 2. Carefully cover from right, ensure wires are not snagged ![20230718_assemble_11](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/20230718_assemble_11.jpg) ### Install Remaining Screws ![20230718_assemble_12](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/20230718_assemble_12.jpg) ![20230718_assemble_13](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/20230718_assemble_13.jpg) ### Final Result ![last](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/last.png) ## POE Module Installation The POE module requires manual soldering as shown: ![poe](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/poe.jpg) > Note that the POE module **cannot** be inserted into the metal case after soldering. ## Board hardware overview After booting up the board for the first time, let´s take a look at the hardware of LicheePi 4A, so you can get familiar with it and maybe do some maintenance work in the future. ![pi_view](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/pi_view.png) ### Overclocking The nominal operating frequency of the TH1520 is 1.85GHz, and we only guarantee that the board you receive can work stably at 1.85GHz. If you are an enthusiast you can try to overclock the board to 2GHz, but we don´t guarantee that the board will work stable at this frequency. After some testing, about 80% of the boards can boot into the system when overclocked to 2GHz and about 50% of the boards successfully pass the stress test at 2GHz. ### USB Power Limitation The maximum input power of the board is 12V at 2A which is 24W. After it is converted to 5V on the board, there is about 20W of effective power available. In order to provide maximum power to the SOM (the SOM can pull up to 12W when overclocked), the output of the USB Hub is limited to 1.5A. This is for the pre production version of the board, the final version will have a higher current limit based on feedback from the community. When you connect a large number of USB Devices, you might exceed this current limit, in this case we recommend to use an external power supply for the USB devices. If you need to disable the current limit, please do the following: TODO ### Differences between the official version and the beta version 1. Added high voltage protection at the input of the USB C port to prevent some fast charging adapters from burning the SOM due to high voltage input 2. The system serial port IO adds a level conversion IC to 3.3V, which can be connected with a common serial port module 3. Repair the automatic switching circuit of the earphone and speaker (the speaker circuit of the beta version is not in place and unstable) 4. Add a new mic input in the headphone socket 5. Added boot media dial switch (bottom of SOM), optional TF/eMMC boot 6. Other details silk screen, component fine tuning ### Board info download links [Specification / Datasheet](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/01_Specification) [Schematic](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/02_Schematic) [BOM](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/03_Bit_number_map) [Dimensional Drawing](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/04_Dimensional_drawing) [3D Model](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/05_3D_model) ## Other links Online store: [Aliexpress](https://www.aliexpress.com/item/1005005532736080.html) [Github](https://github.com/sipeed/LicheePi4A) [Sipeed Site](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a) Telegram: https://t.me/linux4rv Contact email: support@sipeed.com"},"/hardware/en/lichee/th1520/lpi4a/7_develop_android.html":{"title":"RISC-V Android","content":" title: RISC V Android keywords: Linux, Lichee, TH1520, SBC, RISCV, Kernel, SDK, Develop update: date: 2023 07 27 version: v1.1 author: ztd content: Update English docs date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## Android [thead android](https://gitee.com/thead android/thead android) This project is a repository supported by the Android Open Source Project (AOSP), which contains board level configuration, peripheral HAL layer, kernel, u boot and pre compiled component support for the LPi4A board, while the rest of the components can be pulled directly from the upstream AOSP repository. ### Precautions **The image offered in this document only support basic functions such as HDMI display and Ethernet after compilation. Touch screens and USB peripherals are not supported yet. It is expected to update the SDK and documentation with more complete functions in October.** ### Get Started Before downloading the source code of Android open source project , please check your working environment , it is recommended to use a Linux system with at least 250G free disk space , 16GB + RAM (Ubuntu 20.04 or later version is recommended ) of the working environment , compilation time and the number of processor cores of the host computer is related to the host computer , it is recommended to use a host computer with more cores . It is recommended to use a host with more cores. Due to the network, the download time may vary greatly depending on the network conditions, and it is recommended to use a proxy to download the source code. > The following data is for reference: > Compiling on a machine with an E5 2699 CPU and 377GB of RAM took about 2 hours (in a docker environment on Ubuntu 22.04). Downloading the source code took about 3 hours. Download the Android open source project (mainline version) and development board support source code to the working directory, using a fixed version of the upstream code: ```shell mkdir riscv android src && cd riscv android src repo init u https://gitee.com/thead android/local_manifests.git b main_2023_7_7 git clone https://gitee.com/thead android/local_manifests.git .repo/local_manifests b thead android community repo sync ``` Using the latest version of the upstream code may cause some compilation issues due to compatibility: ```shell mkdir riscv android src && cd riscv android src repo init u https://android.googlesource.com/platform/manifest b master git clone https://gitee.com/thead android/local_manifests.git .repo/local_manifests b thead android community repo sync ``` ### Compile Source Code Once the download is complete, install some of the dependencies that will be used for compilation: ```shell sudo apt get install git core gnupg flex bison build essential zip curl zlib1g dev gcc multilib g++ multilib libc6 dev i386 libncurses5 lib32ncurses5 dev x11proto core dev libx11 dev lib32z1 dev libgl1 mesa dev libxml2 utils xsltproc unzip fontconfig python3 bc cpio rsync wget ``` The system can then be built with the following commands: ```shell source build/envsetup.sh lunch lichee_pi_4a userdebug m j ``` After the compilation is complete, check the generated files: ```shell $ ls out/target/product/lichee_pi_4a/*img out/target/product/lichee_pi_4a/boot.img out/target/product/lichee_pi_4a/super_empty.img out/target/product/lichee_pi_4a/vendor_boot debug.img out/target/product/lichee_pi_4a/cache.img out/target/product/lichee_pi_4a/system.img out/target/product/lichee_pi_4a/vendor_boot test harness.img out/target/product/lichee_pi_4a/dtb.img out/target/product/lichee_pi_4a/system_ext.img out/target/product/lichee_pi_4a/vendor_boot.img out/target/product/lichee_pi_4a/dtbo unsigned.img out/target/product/lichee_pi_4a/userdata.img out/target/product/lichee_pi_4a/vendor_ramdisk debug.img out/target/product/lichee_pi_4a/dtbo.img out/target/product/lichee_pi_4a/vbmeta.img out/target/product/lichee_pi_4a/vendor_ramdisk test harness.img out/target/product/lichee_pi_4a/product.img out/target/product/lichee_pi_4a/vbmeta_system.img out/target/product/lichee_pi_4a/vendor_ramdisk.img out/target/product/lichee_pi_4a/ramdisk.img out/target/product/lichee_pi_4a/vendor bootconfig.img out/target/product/lichee_pi_4a/super.img out/target/product/lichee_pi_4a/vendor.img ``` ### Burn to LPi4A Development Board Use fastboot to burn the system image, for adb and fastboot tools use the version downloaded from here: https://developer.android.com/tools/releases/platform tools Copy the files to be burned to the directory where the fastboot utility is located for use by fastboot: ```shell cp bootpart.ext4 boot.img super.img userdata.img vbmeta.img vbmeta_system.img vendor_boot.img <path_to_fastboot> ``` The development board mainly needs to be connected to the power supply, serial port, USB and display: The serial port is mainly used for U boot and kernel command interaction, can be connected through the U0 RX and U0 TX of the GPIO on the board, baud rate is 115200. USB Device interface is mainly used for fastboot and adb tool connection MIPI DSI/HDMI interface can be used to connect the screen to display the UI interface. To fully burn the system, you need to press and hold the boot button of the development board and press the reset button to enter the boot burning mode. Use the just downloaded fastboot to burn: ```shell # burn uboot and initialize boot environment variables fastboot flash ram u boot with spl.bin fastboot reboot fastboot flash uboot u boot with spl.bin #Burn individual partitions #In non boot burn mode, you can burn the partitions individually by typing the command fastboot usb 0 at uboot's command line fastboot flash bootpart bootpart.ext4 fastboot flash boot boot.img fastboot flash vendor_boot vendor_boot.img fastboot flash super super.img fastboot flash userdata userdata.img fastboot flash vbmeta vbmeta.img fastboot flash vbmeta_system vbmeta_system.img # Initialize metadata and misc partitions fastboot erase metadata fastboot erase misc ``` A typical burn log is shown below: ```shell < waiting for any device > Sending 'ram' (982 KB) OKAY [ 0.261s] Writing 'ram' OKAY [ 0.002s] Finished. Total time: 0.268s Rebooting OKAY [ 0.001s] Finished. Total time: 0.402s < waiting for any device > Sending 'uboot' (982 KB) OKAY [ 0.044s] Writing 'uboot' OKAY [ 0.077s] Finished. Total time: 0.158s Sending 'bootpart' (8192 KB) OKAY [ 0.217s] Writing 'bootpart' OKAY [ 0.071s] Finished. Total time: 0.316s Warning: skip copying boot_a image avb footer (boot_a partition size: 65536, boot_a image size: 33554432). Sending 'boot_a' (32768 KB) OKAY [ 0.825s] Writing 'boot_a' OKAY [ 0.255s] Finished. Total time: 1.116s Sending 'vendor_boot_a' (32768 KB) OKAY [ 0.824s] Writing 'vendor_boot_a' OKAY [ 0.254s] Finished. Total time: 1.107s Sending sparse 'super' 1/9 (114684 KB) OKAY [ 2.872s] Writing 'super' OKAY [ 0.855s] Sending sparse 'super' 2/9 (114336 KB) OKAY [ 2.849s] Writing 'super' OKAY [ 0.880s] Sending sparse 'super' 3/9 (114684 KB) OKAY [ 2.947s] Writing 'super' OKAY [ 0.857s] Sending sparse 'super' 4/9 (114684 KB) OKAY [ 2.921s] Writing 'super' OKAY [ 0.862s] Sending sparse 'super' 5/9 (114684 KB) OKAY [ 2.875s] Writing 'super' OKAY [ 0.904s] Sending sparse 'super' 6/9 (110208 KB) OKAY [ 2.794s] Writing 'super' OKAY [ 0.859s] Sending sparse 'super' 7/9 (106652 KB) OKAY [ 2.679s] Writing 'super' OKAY [ 0.853s] Sending sparse 'super' 8/9 (109509 KB) OKAY [ 2.754s] Writing 'super' OKAY [ 2.400s] Sending sparse 'super' 9/9 (88872 KB) OKAY [ 2.251s] Writing 'super' OKAY [ 0.707s] Finished. Total time: 34.231s Sending 'userdata' (2652 KB) OKAY [ 0.085s] Writing 'userdata' OKAY [ 0.581s] Finished. Total time: 0.706s Sending 'vbmeta_a' (8 KB) OKAY [ 0.019s] Writing 'vbmeta_a' OKAY [ 0.021s] Finished. Total time: 0.078s Sending 'vbmeta_system_a' (4 KB) OKAY [ 0.019s] Writing 'vbmeta_system_a' OKAY [ 0.023s] Finished. Total time: 0.079s Erasing 'metadata' OKAY [ 0.087s] Finished. Total time: 0.132s Erasing 'misc' OKAY [ 0.029s] Finished. Total time: 0.071s ``` When the completion of the burn in reset power into the system boot mode, you can access the command line of the system through the serial port / ADB, and can interact with the touch screen or external HDMI display system image interface: ![licheepi4a_aosp](./assets/develop_android/licheepi4a_aosp.png) ### Common Problems When compiling with the docker environment, you may encounter the following error: ```shell Build sandboxing disabled due to nsjail error. ``` This error can be ignored for now, and will not affect later compilation steps. If you want to run nsjail, try upgrading the kernel version to 5.XX or pass in these parameters when you start the docker ` security opt apparmor unconfined security opt seccomp unconfined security opt systempaths unconfined` or ` privileged`."},"/hardware/en/lichee/th1520/lpi4a/7_develop_thead.html":{"title":"Yocto Linux","content":" title: Yocto Linux keywords: Linux, Lichee, TH1520, SBC, RISCV, Kernel, SDK, Develop update: date: 2023 07 21 version: v1.3 author: ztd content: Update English docs date: 2023 07 17 version: v1.2 author: ztd content: Update docs date: 2023 05 12 version: v1.1 author: wonder content: Depart docs date: 2023 05 08 version: v1.0 author: wonder content: Release docs The official development environment for TH1520 is Thead's yocto based development environment, which you can get here: https://gitee.com/thead yocto/ This section briefly describes how to set up a Linux Yocto environment and use Yocto to build a complete image that can run on the development board. **Recommended machine configuration: more than 64G of RAM, more than 250G of disk space, compilation time varies greatly depending on the network conditions, in the case of using a proxy to compile a typical linux system configuration (the minimum system plus the necessary related basic components) time is about 8 hours (CPU for i5 11400, the time for reference) **Without Yocto, it is not recommended to build a full image without Yocto, so you can use Yocto to build a complete image that can run on your development board. **This SDK is not recommended for users who have no experience with Yocto**. ## Build Yocto compilation environment The Linux SDK uses Yocto to build the image. Yocto is compiled using Ubuntu18.04, and it is recommended to use Docker to deploy it on Linux, or you can build the environment under Ubuntu18.04 directly (see [T Head曳影1520Yocto用户指南.pdf](https://gitee.com/thead yocto/documents/blob/master/zh/user_guide/T Head%E6%9B%B3%E5%BD%B11520Yocto%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)2.2) . Here is only the way to deploy with Docker on Linux. Install docker using the official script \t```bash \tcurl fsSL https://get.docker.com bash s docker mirror Aliyun \t``` Download the dockerfile and change the username and ID. \tDownload [linux dev master.7z](https://gitee.com/thead yocto/documents/blob/master/linux dev master.7z) and extract it, go to the `linux dev master` directory, open `Dockerfile` and find the following statement \t```bash \tENV DOCKER_USER2 \"your the same user name asyour host\" \tENV USER2_ID \"your user id\" \t``` \tChange \"your the same user name asyour host\" to the username of the user host os, and fill in the value of \"your user id\" with a plain value representing the uid, which can be 100. Build the docker image environment \t```bash \tdocker build t linux dev base:base . \t``` \tIf you encounter the following error while building: \t```shell \tDockerfile:183 \t \t182 # install npm \t183 >>> RUN cd $WORK_PATH \\ \t184 >>> && curl fsSL https://deb.nodesource.com/setup_lts.x bash \\ \t185 >>> && apt install y nodejs yarn \\ \t186 >>> && npm install aiot vue cli g \t187 \t \tERROR: failed to solve: process \"/bin/sh c cd $WORK_PATH && curl fsSL https://deb.nodesource.com/setup_lts.x bash && apt install y nodejs yarn && npm install aiot vue cli g\" did not complete successfully: exit code: 100 \t``` \t \tThen comment lines 182 186 in the Dockerfile: \t```shell \t# install npm \t#RUN cd $WORK_PATH \\ \t# && curl fsSL https://deb.nodesource.com/setup_lts.x bash \\ \t# && apt install y nodejs yarn \\ \t# && npm install aiot vue cli g \t``` \tThen \t```shell \tdocker build t linux dev base:base . \t``` \t \tOnce the container is installed, enter the container and then execute the following command. \t```shell \tsudo apt update \tsudo apt install npm \tsudo apt install nodejs \t``` \tFinal execution: \t```shell \tnpm v \tnodejs v \t``` \tThe version number will be exported. \tThis docker image can compile Linux SDKs such as buildroot, yocto, etc. released by thead. user `thead` has a default password of `123`. Start docker \t```bash \tdocker run u thead dt name linux dev {your_name} v {your_lock_home}:{your_home} linux dev base:base /bin/bash \t``` \t{your_name} is the name of the container, do not rename it. \tThe v option allows you to mount a directory on the host, similar to a shared file. {your_lock_home} is the local path to the host, {your_home} is the path to the docker. Check started docker containers \t```bash \tdocker ps grep linux dev base \t``` You will be able to see the docker container you just started. Log in to docker \t```bash \tdocker exec it linux dev {your_name} /bin/bash \t``` Downloading open source packages (only required when first acquiring the SDK) \tWhen building firmware, you will download open source packages from the web, which can take a long time if you have a poor network. To speed up the process, you can go to gitee and download the open source package offline (assuming it is downloaded to the user directory). \t```bash \tcd ~ \tgit clone https://gitee.com/thead yocto/yocto downloads.git \t``` Download the Yocto build kit \t```bash \tgit clone https://gitee.com/thead yocto/xuantie yocto.git b Linux_SDK_V1.1.2 \t``` Load the target device's configuration files and environment variables (remember to check if they are loaded before compiling) \t```bash \tcd xuantie yocto \tsource openembedded core/oe init build env thead build/light fm \t``` Softlink the previously downloaded open source packages to the SDK directory by sharing the downloads directory. \t```bash \tln s ~/yocto downloads ../downloads \t``` Use patch Since writing the document xuantie yocto's commit d296c2345fe2c2521eb0e1a2772bcba637029bc8 The changes in the following patches have not yet been merged, so you need to patch them manually to synchronize them for further development. The patch files can be downloaded from the [download site](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/06_Patch), so please use the latest version of the Please use the latest version of the patch archive. ### xuantie yocto's patch 0001 Allow download without logging in gitee.patch Allow pulling gitee repositories without logging in Usage: Use the patch under the path xuantie yocto ### kernel's patch 0001 pca9557.patch Replacing pcal9554 extension chip with pca9557 0002 cpufreq to 2GHz.patch Modify the voltage and frequency table and cpu_freq driver to adjust the frequency limit to 2GHz. 0003 remove audio pcal9554b.patch Remove all i2c extensions and synchronize with lpi4a changes. 0004 sync audio patch.patch Synchronize audio device changes 0005 8G ddr.patch Adjust memory address range to support 8G DRAM 0006 set cpu_max_frq 1.992GHz.patch Adjust the frequency according to the frequency provided in the user manual (about 20% can't work stably at this frequency) 0007 set cpu_max_frq 1.848GHz.patch All the frequencies at which the 1520 can pass the stress test 0012 riscv dts thead lpi4a add PWM Fan.patch Add PWM fan support 0016 drm dc8200 disable gamma lut now.patch Disable gamma lut, resolve dependency issue. 0017 drm verisilicon fix fbcon.patch Fix fbcon 0018 riscv dts thead lpi4a change fan pwm frequency.patch Change PWM frequency parameter to improve fan noise problem 0019 add mipi screec and touch support.patch Add mipi 720p screen and touchscreen driver support. 0020 add hdmi audio support.patch Add HDMI audio driver support 0021 enable pwm fan.patch Enable PWM fans 0022 add mipi camera ov5693 support.patch Add OV5693 camera device tree support Usage: Note: You need to build the firmware once before using it, otherwise the path xuantie yocto/theader build/light fm/tmp glibc does not exist! Use patch in xuantie yocto/thead build/light fm/tmp glibc/work/light_lpi4a oe linux/linux thead/5.10.y r0/linux 5.10.y path ### opensbi's patch 0001 lib sbi_illegal_insn Add emulation for fence.tso.patch 0002 lib sbi_illegal_insn Fix FENCE.TSO emulation infinit.patch The above two patches simulate the implementation of the fence.tso directive, fixing the LLVM crash. Usage: Note: You need to build the firmware once before using it, otherwise the path xuantie yocto/thead build/light fm/tmp glibc does not exist! Use patch under xuantie yocto/thead build/light fm/tmp glibc/work/light_lpi4a oe linux/opensbi/0.9 r0/git ### uboot's patch 0001 ENV_SETTINGS.patch Delete partitions 4 6 to reserve enough space for rootfs and use systemd to boot the system. 0002 fix fix bootargs.patch Fix the set bootargs command 0003 fix ftbfs.patch Fix a variable definition problem in ftbfs, compilation will not report error after the change. Usage: Note: You need to build the firmware once before using it, otherwise the path xuantie yocto/thead build/light fm/tmp glibc does not exist! Use patch in xuantie yocto/thead build/light fm/tmp glibc/work/light_lpi4a oe linux/u boot/1_2020.10 r0/git path ### vi sensor's patch 0001 add OV5693 support.patch Add OV5693 camera driver support Usage: Note: You need to build the firmware once before using it, otherwise the path xuantie yocto/thead build/light fm/tmp glibc does not exist! Use patch under the path xuantie yocto/thead build/light fm/tmp glibc/work/riscv64 oe linux/vi sensor/1.0 r0/git ### roofs's patch bluetooth_fix.zip Fix the problem that Bluetooth does not work properly, see readme.txt in the zip file for instructions. At this point, the compilation environment has been configured. ## Machine/Target Support List In the Load Environment Variables step above, you can see the following information after the settings are complete ```bash ### Shell environment set up for builds. ### You can now run 'bitbake <target>' Common targets are: thead image linux thead image multimedia thead image gui machines: light beagle light b product light a val light lpi4a ``` The description is as follows target (list of mirrors supported by the SDK): namingdescription thead image linuxTypical linux system configuration, minimal system plus necessary related basic componentsthead image linux thead image multimediaTypical linux system + video visualization configuration, plus components for the video subsystem (Gstreamer, etc.) thead image gui plus a fully configured version of GUI related components, including Gnome desktop, weston, QT, and other application components, etc. **Currently, the GUI related components compiled with thead image gui option are for functional validation only, and do not have access to a graphical desktop.** machines (board level configuration supported by the SDK): namingdescription light a valTH1520 A EVB board light b productTH1520 B EVB board light beaglebeagleV Ahead board light lpi4aLichee Pi 4A board ## Building an Image The build command format is as follows: ```bash MACHINE {machine} bitbake {target} ``` Replace the {machine} and {target} parts with the corresponding names in the two tables above. For example, the command to compile a typical Linux image running on a LicheePi 4A development board is as follows: ```bash MACHINE light lpi4a bitbake thead image linux ``` ### Problems that may occur when building an image Due to network reasons, this step may still appear download failure or download very slowly, if possible, it is recommended to use a proxy. Error message \t```bash \tPlease use a locale setting which supports utf 8. \tPython can't change the filesystem locale after loading so we need a utf 8 when python starts or things won't work. \t``` \tFirst run the following command \t```bash \tsudo apt get install locales \tsudo dpkg reconfigure locales \t``` \tThen, in the printed list, find the item `en_US.UTF8` (around item 158), enter the serial number of this item, and then enter, and then select this item as well and then enter. \tOnce you've done that, run the following command (you can also add the following command to your docker's `.bashrc`) \t`.bash \tsudo locale gen en_US.UTF 8 \tsudo update locale LC_ALL en_US.UTF 8 LANG en_US.UTF 8 \texport LANG en_US.UTF 8 \t``` \tAfter completing the above steps and compiling again, the original error will not appear. The error message \t```bash \tplease install them in order to proceed: lz4c pzstd zstd \t``` \tJust install the corresponding dependencies \t``bash \tsudo apt update && sudo apt install y zstd liblz4 tool \t``` ### Mirror Packaging The [light_deploy_images](https://gitee.com/thead yocto/light_deploy_images/tree/master/tarball) repository contains a number of pre release images. For freshly compiled images, you can utilize the `sdk.sh` script in this repository to package them. First, switch to the `light fm` directory of the compiled image, and move the `sdk.sh` script from that repository there. Run the script `. /sdk.sh` and the image will be generated, see the [light_deploy_images](https://gitee.com/thead yocto/light_deploy_images/tree/master/) repository for the location of the corresponding files and the structure of the image directory. Finally, you can copy the docker compiled image and associated files to the shared folder that you mounted with the v option, and the host can use the files to burn. At this point, we have finished compiling and packaging the image, and we have an image that can be burned into the development board. **To use the image, you need to manually set a MAC address in uboot using environment variables, with the following commands**. ```shell # 将下列两个地址替换为你的 MAC 地址，eth1addr 的值为ethaddr 的值+1 setenv ethaddr XX:XX:XX:XX:XX:XX setenv eth1addr XX:XX:XX:XX:XX:XX env save ``` A brief introduction to common concepts and some practical tips in yocto. ### Basic concepts Yocto is used to build customized Linux images with a wide range of hardware support, and it is an open source project with a collection of tools. Let's start with a brief introduction to the general workflow of Yocto when building images: Fetch >Extract >Patch >Configure >Build >Install >Package Fetch: Fetch the required source code at compile time. Extract: Extract the fetched source code. Patch: Apply patches to fix bugs and add new features. Configure: configure the development environment. Build: build the image and compile the links. Install: Copy files to the target directory. Package: Package the image. The following figure shows some of the specific steps in the process: ![yocto_flows.png](./../../../../zh/lichee/th1520/lpi4a/assets/develop_thead/yocto_flows.png) The approximate composition of the Yocto project is shown below. The main system used for the build is the OpenEmbedded build system (hereafter referred to as OE), which is centered around the task executor Bitbake. ![yocto_structure](./../../../../zh/lichee/th1520/lpi4a/assets/develop_thead/yocto_structure.png) Some commonly used concepts are as follows: Recipes: Files ending in `.bb`, which contain the information needed to download a package, such as the location of the file from which the fixed source code is downloaded, information about the patches that need to be applied to the package, information about the compilation needs, and so on. For example, `gnome shell` in `xuantie yocto`, its recipes file is stored in `/home/thead/xuantie yocto/meta openembedded/meta gnome/recipes gnome/gnome shell`. directory. build directory: this directory is the output directory of the build, and also stores some environment configuration files. This directory is generated when the `source` command specifies the build environment, and is named `build` by default, but can be changed to other names when `sourcing`, such as `sourece oe init build env mybuild`. configurations: Files ending in `.conf`, mainly configuration files. For example, `local.conf` is stored in the `conf` directory of the `build directory`, and some of its parameters may be changed at compile time as needed. Layers: This is where the various metadata needed (e.g., `.bb` files, `patches` and some other additional files) are usually stored, mainly to tell the OE build system how to build the target files. Categorizing metadata into layers helps with project maintenance. bitbake: a task executor used in the OE build system to perform various tasks. ## Common Operations ### Common Tasks YOcto manages open source software components on a package basis, if you need to compile a certain package, the method is as follows: ```shell bitbake \"package name\" ``` Each package defines supported tasks in the recipes file. Some tasks, such as clean, are common to all packages, and you can list the tasks supported by the package with the following command: ```shell bitbake \"package name\" c listtasks ``` ### Finding the location of a compiled package Yocto integrates with a large number of open source packages, and the working directory where these packages are compiled is usually in the following directory: tmp glibc/work/riscv64 oe linux tmp glibc/work/${MACHINE} For example ```shell thead@b9461db16a58:~/xuantie yocto/thead build/light fm/tmp glibc/work/light_lpi4a oe linux/u boot$ tree L 2 . └── 1_2020.10 r0 ├── 0001 no strip fw_printenv.patch ├── build ├── deploy debs ``` The package directory can be found with the `bitbake e linux thead grep ^S ` command. For example, to see the kernel's build directory ```shell $ bitbake e linux thead grep ^S S \"/home/thead/xuantie yocto/thead build/light fm/tmp glibc/work/light_a_val oe linux/linux thead/5.10.y r0/linux 5.10.y\" ``` The location of the output files after compilation, for example, the various files related to the mirror after compilation are located under `light fm/tmp/glibc/work/light_lpi4a oe linux`, for example, the mirror is located in the `linux thead` of that directory, and only needs to be packaged at the end. ### Slow fetch package at compile time When compiling, may encounter fetch package too slow problem, this is in addition to the use of proxies, you can also download the package to the local, and then according to get the package address to let fetch directly use the local repo. for example: ```shell WARNING: bzip2 native 1.0.8 r0 do_fetch: Failed to fetch URL git://sourceware.org/git/bzip2 tests.git;name bzip2 tests;branch master, attempting MIRRORS if available ``` Then you can find the download address of the package using the following command ```shell $ bitbake e bzip2 grep ^SRC_URI SRC_URI \"https://sourceware.org/pub/bzip2/bzip2 1.0.8.tar.gz git://sourceware.org/git/bzip2 tests.git;name bzip2 tests;branch master file://configure.ac;subdir bzip2 1.0.8 file://Makefile.am;subdir bzip2 1.0.8 file://run ptest \" ``` Once you have the address, manually `clone` the repository and then find its corresponding `.bb` file ```shell $ find name bzip*.bb ./openembedded core/meta/recipes extended/bzip2/bzip2_1.0.8.bb ``` Find the item `SRC_URI` in the file ```shell SRC_URI \"https://sourceware.org/pub/${BPN}/${BPN} ${PV}.tar.gz \\ git://sourceware.org/git/bzip2 tests.git;protocol file;name bzip2 tests;branch master \\ file://configure.ac;subdir ${BP} \\ file://Makefile.am;subdir ${BP} \\ file://run ptest \\ \" ``` Add `protocol` as `file`, and if you need to switch branches, you can just `checkout` to the corresponding branch in the `clone` down local repo, and then directly fetch the package after modifying it. ```shell bitbake bzip2 c fetch ``` If the compilation speed is too slow, find the `local.conf` file in the `conf` directory of `build_directory`, and change the corresponding parameters, refer to [this_doc](https://docs.yoctoproject.org/dev manual/speeding up build. html?highlight bb_numbers), for example, to increase the speed during download and compilation, you can add the following code to the file to increase the number of parallelism (note that it depends on the specific parameters of the CPU) ``` BB_NUMBER_THREADS '16' PARALLEL_MAKE ' j 12' ``` yocto has a caching mechanism for packages after compilation, which can reduce the time spent on compilation later. In addition, you can also download some packages before compiling, put them into a folder, and then find `DL_DIR` in `local.conf` in `conf` folder of `build_directory`, which is a shared folder, and then change it to a specific directory or softlink share. ### Build u boot separately Download the source code to `light fm/tmp glibc/work/light_lpi4a oe linux/u boot/1_2020.10 r0/git` path (the penultimate directory is named version number) at compile time, and execute this command after modifying the source code: ```shell bitbake u boot C compile ``` ### Build opensbi separately Download the source code to `light fm/tmp glibc/work/light_lpi4a oe linux/opensbi/0.9 r0/git` at compile time, and execute this command after modifying the source code: ```shell bitbake opensbi C compile ``` After compilation, to simplify the packing process, a packing script `sdk.sh` is provided in `light_deploy_images`. After compilation, create a `sdk` folder under the `light fm` folder, download the image packaging script to that folder, and run it. A typical directory structure after packaging should look like the following: ```shell . ├── deb │   ├── all │   ├── light_lpi4a │   └── riscv64 ├── images │   └── light lpi4a │   ├── boot.ext4 │   ├── light_fastboot_image_single_rank │   │   └── u boot with spl.bin │   ├── rootfs.thead image linux.ext4 │   └── vmlinux ├── sdk.sh └── tarball └── prebuild_light lpi4a.tar.gz ``` The `images` directory is the main file to use for burning, or you can manually copy in the files if any are missing. The `tarball` directory contains the zip of the packaged image files, and the `deb` directory contains the package. Reference: [bitbake官方文档](https://docs.yoctoproject.org/bitbake.html?highlight bitbake) [yocto官方文档](https://docs.yoctoproject.org/overview manual/yp intro.html) [T Head 曳影 1520 Yocto 用户指南](https://gitee.com/thead yocto/documents/raw/master/zh/user_guide/T Head%E6%9B%B3%E5%BD%B11520Yocto%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf) ## Device Tree Analysis TODO ## Other references **light_deploy_images repo:** Includes already built burnable Linux images, package image scripts and other related tools, see the repository for details. The repository address:[https://gitee.com/thead yocto/light_deploy_images](https://gitee.com/thead yocto/light_deploy_images) **documents repo:** Includes all published SDK related documentation The repository address:[https://gitee.com/thead yocto/documents](https://gitee.com/thead yocto/documents) Contributions are welcome~ You can get ￥5～150 ($1～20) coupon if your contribution is accepted!"},"/hardware/en/lichee/th1520/lpi4a/5_desktop.html":{"title":"Basic Usage of Desktop System","content":" title: Basic Usage of Desktop System keywords: Linux, Lichee, TH1520, SBC, RISCV, Debian, Desktop update: date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## Log in to the System This document provides an introduction to basic system usage using the default Debian desktop system as an example. Once LicheePi 4A is connected to a monitor, you will see the graphical user interface. At the login screen, enter the username sipeed and the password licheepi to log in to the system. > There are three users: root, debian, and sipeed, all with the initial password licheepi. > For some versions, the password for the debian user is sipeed. **Starting from version 0714, the image enables automatic login with the user sipeed.** ![usage_login_userpasserward](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_login_userpasserward.png) ## Open the Command Line In the Debian graphical system on LicheePi 4A, you can directly open the command line terminal using the shortcut `Ctrl` + `Alt` + `T` for quick and convenient system operations. **Starting from version 0714, the image enables passwordless `sudo`** ![usage_debian_terminal_shell_hotkey](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_terminal_shell_hotkey.png) ## Connect to the Network ### Connect to Wired Network LicheePi 4A has two gigabit network interfaces. To connect to a wired network, simply plug in the Ethernet cable into the network interface of LicheePi 4A. <table> <tr> <td>Before connecting the cable</td> <td>After connecting the cable</td> </tr> <tr> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_ethernet_port_disconnect_one.png\" alt \"usage_debian_ethernet_port_connect_one\"></td> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_ethernet_port_connect_one.png\" alt \"usage_debian_ethernet_port_connect_one\"></td> </tr> <tr> <td colspan 2> By comparing the two images above, you can see that before connecting the cable, it shows <code>Ethernet Network</code> under <code>disconnected</code>, and after connecting the cable, it shows<code>Wired connection </code></td> </tr> </table> ### Connect to Wireless Network LicheePi 4A has an onboard wireless module that supports Bluetooth and Wi Fi. From the Available networks in the status bar, select the desired wireless network and enter the password to connect automatically. <table> <tr> <td colspan 2><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_select_wireless_network.png\" alt \"usage_debian_select_wireless_network\"></td> </tr> <tr> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_wireless_network_password.png\" alt \"usage_debian_wireless_network_password\"></td> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_wireless_network_connected.png\" alt \"usage_debian_wireless_network_connected\"></td> </tr> </table> In the password input dialog, make sure to select `wlan0` under `Wi Fi adapter` to connect to the network. ## Connect to Bluetooth Devices Find the Bluetooth icon in the top right corner of the desktop. Make sure that the Bluetooth function is enabled. If it's not enabled, right click on the Bluetooth icon to turn it on: ![bluetooth_icon.png](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/bluetooth_icon.png) Once enabled, left click on the Bluetooth icon to access the Bluetooth device scanning interface. Click on the \"Search\" button in the top left corner of this interface to start searching for Bluetooth devices. Make sure the Bluetooth keyboard, mouse, or headphones are in pairing mode so they can be detected. Right click on the desired device and select \"Connect\" to establish the connection. Once connected successfully, you can also right click on the device and click \"Trust\" to enable automatic connection the next time it's detected. ![bluetooth_devices.png](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/bluetooth_devices.png) If you experience the error `br connection profile unavailable` while trying to connect your Bluetooth audio device after pairing the following commands might help. Make sure to execute them under your user and not root: ```shell systemctl user enable pulseaudio systemctl user start pulseaudio sudo apt install bluetooth rfkill blueman bluez bluez tools pulseaudio module bluetooth ``` If the Bluetooth graphic interface fails to detect devices, you can also run `bluetoothctl` in the command line interface to pair devices. Follow these steps: ```shell bluetoothctl scan on # Find the mac address of the desired device pair \"The mac address of the target device\" connect \"The mac address of the target device\" ``` The above steps can also be performed in the Bluetooth graphic interface. However, the graphic interface may have limitations in showing all detected Bluetooth devices. In such cases, you can use the `bluetoothctl` tool first to search and pair the devices. Once the pairing is successful, the device will appear in the graphic interface, and you can switch to the graphic interface for further operations. ## Software Installation After completing the network connection, you can update the software package and install it. ### Software Source On Debian systems, you can use apt (Advanced Packaging Tool) to install software. When installing software, it will search for and download the target software from the system's designated repositories. If the repositories are difficult to access (e.g. the server is too far away or the server network is poor), you can manually edit the repositories to the nearest repository to minimize the download time. By default, the sources are listed in the `/etc/apt/sources.list` file, but you can change it if you need to. You can change this if you need to. However, please note that you need to use sources that support the Risc V architecture. ![usage_debian_apt_change_source](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_apt_change_source.png) ### Upgrading the Software Use `sudo apt update` to update the software list, which is usually needed after changing sources. Before using this command, check the time with the `date` command. If the time is not correct or the time is not updated automatically after connecting to the network, you can update it manually to make sure that the packages in the repository are the latest versions: ```shell sudo date s \"20230717 12:00:00\" ``` Then use `sudo apt upgrade package_name` to update the software with the name `package_name`. For example, the following is an example of using `sudo apt upgrade vim` to update the program `vim`. ![usage_debian_apt_upgrade_vim](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_apt_upgrade_vim.png) If you use the `sudo apt update` command, you encounter a message similar to the following: ```shell Ign:1 https://mirror.iscas.ac.cn/deepin riscv/deepin stage1 beige InRelease Ign:2 https://community packages.deepin.com/driver driver InRelease Ign:3 https://mirror.iscas.ac.cn/deepin riscv/deepin addons beige InRelease Ign:2 https://community packages.deepin.com/driver driver InRelease Ign:1 https://mirror.iscas.ac.cn/deepin riscv/deepin stage1 beige InRelease Ign:3 https://mirror.iscas.ac.cn/deepin riscv/deepin addons beige InRelease Ign:1 https://mirror.iscas.ac.cn/deepin riscv/deepin stage1 beige InRelease Ign:2 https://community packages.deepin.com/driver driver InRelease Ign:3 https://mirror.iscas.ac.cn/deepin riscv/deepin addons beige InRelease Err:2 https://community packages.deepin.com/driver driver InRelease Could not resolve 'community packages.deepin.com' Err:1 https://mirror.iscas.ac.cn/deepin riscv/deepin stage1 beige InRelease Could not resolve 'mirror.iscas.ac.cn' Err:3 https://mirror.iscas.ac.cn/deepin riscv/deepin addons beige InRelease Could not resolve 'mirror.iscas.ac.cn' Reading package lists... Done W: Failed to fetch https://mirror.iscas.ac.cn/deepin riscv/deepin stage1/dists/beige/InRelease Could not resolve 'mirror.iscas.ac' W: Failed to fetch https://mirror.iscas.ac.cn/deepin riscv/deepin addons/dists/beige/InRelease Could not resolve 'mirror.iscas.ac' W: Failed to fetch https://community packages.deepin.com/driver/dists/driver/InRelease Could not resolve 'community packages.deep' W: Some index files failed to download. They have been ignored, or old ones used instead. ``` You can try the following command to fix it: ```shell sudo apt get update fix missing ``` ### Installing Programs Software can be installed with the aid of the apt command; for example, `sudo apt install package_name` is used to install `package_name`, and the following is an example of using apt to install `net tools`. ![usage_debian_apt_install_nettools](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_apt_install_nettools.png) After installing `net tools`, you can use the `ifconfig` command. ![usage_debian_ifconfig_result_list](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_ifconfig_result_list.png) The arrow points to what is often referred to as the IP address. If you encounter a message similar to the one below while downloading the software: ```shell W: GPG error: http://archive.ubuntu.com trusty updates Release: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 40976EAF437D05B5 NO_PUBKEY 3B4FE6ACC0B21F32 ``` You can try the following command to fix it: ```shell sudo apt key adv keyserver keyserver.ubuntu.com recv keys 'Replace the key value after NO_PUBKEY in the error message here' # or gpg keyserver keyserver.ubuntu.com recv keys 'Replace the key value after NO_PUBKEY in the error message here' ``` ## SSH If you don't have the ssh or sshd command in your image, you can install it first with the following command: ```bash sudo apt install ssh openssh server ``` Once installed, you can use ssh to log in remotely to other machines, or use ssh to log in to LicheePi 4A on other machines. You can also use scp to transfer files: ```bash scp demo.zip sipeed@192.168.1.9:~/ `` ## Input Methods If you need to input non ascii characters, you need to install an input method, here is an example of Chinese input method, for other languages, please look for tutorials. First install ibus libpinyin: ```bash sudo apt install y ibus libpinyin ``` > Note that this will consume about 200MB of disk space. After installation, reboot the card and you will see the `IBus Preference` option under Applications, click on it to enter the settings. ![pinyin_cfg0](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/pinyin_cfg0.png) In the interface that appears, click `Input Method`, click `Add`, select `Chinese`, select `Intelligent Pinyin`, and click `Add` to add Chinese Pinyin input method. ![pinyin_cfg1](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/pinyin_cfg1.png) Click on the Input Method icon in the upper right corner to see the following options, select `Chinese Intelligent Pinyin`. ![pinyin_cfg2](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/pinyin_cfg2.png) Now you can enter Chinese into your system without any problem: ![pinyin_cfg3](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/pinyin_cfg3.png) > Note: In the 0425 version of the image, there may be a GPU support issue that causes the GUI to stutter and lag after the input method is installed. ## Office Software Some of the mirrors have the basic Office office software (LibreOffice) built in: ![office0](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/office0.png) LibreOffice Calc is the XLS function: ![office_calc](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/office_calc.png) LibreOffice Impress is the PPT function: ![office_impress](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/office_impress.png) LibreOffice Writer is the WORD function: ![office_writer](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/office_writer.png) ## Web Browser The Chromium browser is built in and is available by clicking the browser icon at the bottom of the desktop: ![browser_location](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/browser_location.png) > If the launch bar icon at the bottom of the desktop is displayed abnormally, you can try to use the following commands to fix it: ```shell cp /etc/xdg/xfce4/panel/default.xml /home/sipeed/.config/xfce4/xfconf/xfce perchannel xml/xfce4 panel.xml chown sipeed:sipeed /home/sipeed/.config/xfce4/xfconf/xfce perchannel xml/xfce4 panel.xml ``` Use a search engine: ![browser_search_engine_use](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/browser_search_engine_use.jpg) Watch online videos: ![browser_play_video](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/browser_play_video.jpg) WebGL support test: ![browser_webgl](./assets/desktop/browser_webgl.png) > Note: In the current 0714 mirror, when playing video or audio under Chromium, there will be noise if it is HDMI audio output, you can switch to Firefox browser to play it temporarily. Use the following commands to install the Firefox browser and related dependencies: ```shell sudo apt install firefox ffmpeg ``` ## Media Player There are some open source players built in the system. The default player is Parole, which supports playing 4K videos. It is recommended to use the hardware accelerated media player Parole as the preferred option. The effect of playing 4K videos with Parole is as follows: ![4k_video_play](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/4k_video_play.png) Also supports kodi, using the effect as follows: ![kodi_homepage](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/kodi_homepage.png) ![kodi_iconmenu](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/kodi_iconmenu.png) ![kodi_settings](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/kodi_settings.png) mpv player supported as well, which can be installed through commands below: ```shell sudo apt update sudo apt install mpv ``` In addition, also preinstalled VLC Player player: ![player](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/player.png) The effect of using VLC Player to view videos in MP4 format is as follows: ![vlc_player_use](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/vlc_player_use.jpg) ## Programming ### Python The python3 environment is built in and can be run directly from the terminal: ![python](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/python.png) If you need to install Python packages, use: `sudo apt install python3 XXX`. For example, to install the pyserial package: `sudo apt install python3 serial`. ### C The `build essential` package is required and takes up about 800MB of disk space. ```bash sudo apt install build essential ``` Then you can compile it with gcc: ![gcc](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/gcc.png) ## Extended Storage The onboard eMMC capacity of the beta version is small, leaving only 2~3GB of space for the user. If you need to carry out mass storage, you need to expand the storage space, and you can choose to use USB storage or TF storage. ### Mounting a USB Flash Drive After inserting a USB flash drive into the USB port of the LicheePi 4A, you can use `dmesg` in the command terminal window to view the hardware change information of the board. The following is the latest information seen in the command line terminal using `dmesg` after connecting the USB flash drive (screenshot). ![usage_debian_udisk_dmesg](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_udisk_dmesg.png) The message above shows the peripheral change information for the board; from this you can see that there is a mass USB storage device connected to the LicheePi 4A. Use the command `cat /proc/partitions grep \"sd*\"` to see the number of partitions within the USB. ![usage_debian_udisk_partition_detail](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_udisk_partition_detail.png) Take the above result as an example, where `sda` refers to the whole USB flash drive, and `sda1` and `sda2` represent the two partitions inside the USB flash drive. First create a folder on the desktop system, and then use the `mount` command to mount a partition of the USB flash disk under the folder. ```bash mkdir ~/Desktop/udisk # Create a folder on your desktop called udisk mount /dev/sda2 ~/Desktop/udisk # Mount the sda2 partition of the USB flash drive to the udisk folder ``` <table> <tr> <td> Before running the command </td> <td> After running the command </td> </tr> <tr> <td style \"white space:nowrap\"><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_udisk_before_mount.png\" alt \"usage_debian_udisk_before_mount\"></td> <td style \"white space:nowrap\"><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_udisk_after_mount.png\" alt \"usage_debian_udisk_after_mount\"></td> </tr> <tr> <td colspan 2> After running the command, a new folder named udisk has been added to the desktop, double click the mouse to open the udisk folder and you can see that the contents of the folder are the same as the actual contents of the USB flash drive. <img src \"./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_udisk_open_folder.png\" alt \"usage_debian_udisk_open_folder\"></td> </tr> </table> ### Mount TF Card Insert the TF card into the TF slot on the back of the LicheePi 4A and you will see the device `/dev/mmcblk1` under the system (/dev/mmcblk0 is eMMC on the SOM). If the TF card has not been partitioned or formatted, you can use the `sudo fdisk /dev/mmcblk1` command to partition the card. Then use `sudo mkfs.ext4 /dev/mmcblk1p1` or `sudo mkfs.vfat /dev/mmcblk1p1` to format the newly created partition. If you want to use it as an extended partition, it is recommended to use ext4; if you want to use it as a TF card for exchanging data with Windows, it is recommended to use vfat. After formatting, you can mount the partition as in the previous section to make sure it is mounted properly. ### Setting up power on mounting After verifying the success of manual mounting, you can further set up boot mounting. You only need to add the device information that needs to be mounted automatically in /etc/fstab file, the following is an example of adding TF card to be mounted automatically in the last line. ```bash sipeed@lpi4a:~$ cat /etc/fstab # UNCONFIGURED FSTAB FOR BASE SYSTEM /dev/mmcblk0p3 / auto defaults 1 1 /dev/mmcblk0p2 /boot auto defaults 0 0 /dev/mmcblk1p1 /mnt auto defaults 0 2 ``` The first number: 0 means that the disk is not checked at boot, 1 means that the disk is checked at boot; The second number: 0 for the swap partition, 1 for the boot partition (Linux), and 2 for the normal partition. /dev/mmcblk1p1 can also use the disk UUID, which is written as UUID xxxx xxx, and can be viewed using `sudo blkid`: `/dev/mmcblk1p1: UUID \"033173ff b3ab 494c ab14 4dcd656a9214\" BLOCK_SIZE \"4096\" TYPE \"ext4\" PARTUUID \"8e4e28df 01\"` ## VNC Remote Desktop Install the required packages and remote desktop using the lightweight Xfce desktop environment. ```shell sudo apt install xfce4 xfce4 goodies xorg dbus x11 x11 xserver utils sudo apt install tigervnc standalone server tigervnc common ``` After installation, run the `vncserver` command to configure the relevant password. The system will prompt you to configure the password, set it according to your own needs, and the second password is used for view only user login: ```shell sipeed@lpi4a:~$ vncserver You will require a password to access your desktops. Password: Verify: Would you like to enter a view only password (y/n)? n A view only password is not used ``` The associated password is created and stored in a file `~/.vnc`. After the password is set, the following message is displayed ```shell New Xtigervnc server 'lpi4a:1 (sipeed)' on port 5901 for display :1. Use xtigervncviewer SecurityTypes VncAuth passwd /tmp/tigervnc.I5Af7X/passwd :1 to connect to the VNC server. ``` Note that the hostname in the above output is followed by a `:1`, which indicates the display port number of the VNC server. The VNC server will be listening on port `5901`, i.e. 5900+1. Similarly, running the vncserver command to create a second instance will use the next display port `:2`, for which the listening port will be `5902`. Next, kill the VNC instance you just created and do some configuration first. ```shell vncserver kill :1 ``` The xstartup file is a script that runs when the TigerVNC server starts up. Create and edit the file `~/.vnc/xstartup` and write the following: ```shell #!/bin/sh unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS exec startxfce4 ``` and give permission ```shell chmod +x ~/.vnc/xstartup ``` Next, add the startup parameters for the VNC server. Create and edit the `~/.vnc/config` file and add the required startup parameters. For example, if you want to set the resolution and dpi at startup, you can write the following: ```shell geometry your_prefer_resolution dpi your_prefer_dpi ``` If you cannot connect to VNC because of a firewall, you can use ufw to add allowed ports, for example, using the VNC server's display port 5901: ```shell sudo ufw allow 5901 ``` Finally, it's time to run the vnc server: ```shell vncserver localhost no ``` Next, in order to access the remote host (LPi4A), we need to download and install [vncviewer](https://www.realvnc.com/en/connect/download/viewer/) on the local host (the computer you're using), and once it's installed, start VNCviewer, and on the window At the top, enter the IP address and port number of the remote host (in the format `Your IP address:VNC server's display port number): ![vnc_viewer_connect](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/vnc_viewer_connect.png) By default, the image quality of remote desktop will be set according to the network conditions, low image quality may cause the remote desktop screen color abnormality, at this time, you can manually specify the high image quality. After the first successful connection, right click on the newly appeared session window and select properties: ![vnc_viewer_change_properties](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/vnc_viewer_change_properties.png) Modify the Picture quality in the Options option to High: ![vnc_viewer_settings](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/vnc_viewer_settings.png) The effect displayed is as follows: ![vnc_viewer_use](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/vnc_viewer_use.png) ## btop Btop is an aesthetically pleasing resource that displays processor, memory, disk, network, and process usage and statistics. It can be installed using the following command: ```shell sudo apt install btop ``` Then run the `btop` command on the command line to use it, the effect is as follows: ![btop_use](./../../../../zh/lichee/th1520/lpi4a/assets/application/btop_use.png) ## More Contributions are welcome~ You can get ￥5~150 ($1~20) coupon after your submission is accepted!"},"/hardware/en/lichee/th1520/lpi4a/7_develop_openwrt.html":{"title":"OpenWrt","content":" title: OpenWrt keywords: Linux, Lichee, TH1520, SBC, RISCV, Kernel, SDK, Develop update: date: 2023 09 17 version: v1.1 author: ztd content: Update docs date: 2023 05 12 version: v1.0 author: wonder content: Release docs ## OpenWrt [Project address](https://github.com/ruyisdk/openwrt) ## Build There are some issues with building on Ubuntu currently, using Debian can build smoothly. The repository provides the corresponding Dockerfile for Debian. First you need to clone the project source code: ```shell git clone https://github.com/ruyisdk/openwrt.git ``` If your machine has not been configured with Docker environment before, refer to the steps in [Docker](https://docs.docker.com/install/linux/docker ce/ubuntu/): Uninstall possible versions of Docker: ```shell sudo apt get remove docker docker engine docker.io containerd runc ``` Install basic software that Docker depends on: ```shell sudo apt get update sudo apt get install apt transport https ca certificates curl gnupg agent software properties common ``` Add official sources: ```shell curl fsSL https://download.docker.com/linux/ubuntu/gpg sudo apt key add sudo add apt repository \"deb [arch amd64] https://download.docker.com/linux/ubuntu $(lsb_release cs) stable\" ``` Install Docker: ```shell sudo apt get update sudo apt get install docker ce docker ce cli containerd.io ``` Then enter the docker build directory to configure the corresponding environment and start compiling. ```shell cd openwrt/docker build # Build docker image sudo docker build t ruyisdk openwrt builder . # Build openwrt using docker sudo docker run rm v \"$(cd .. && pwd)\":/workspace ruyisdk openwrt builder ``` After the build is complete, flash the built image to the development board. Then you can refer to [Openwrt Docs](https://openwrt.org/docs/start) to develop. ## Reference [Openwrt](https://github.com/ruyisdk/openwrt) [Docker Build](https://github.com/ruyisdk/openwrt/tree/lpi4a new/docker build) [Openwrt Docs](https://openwrt.org/docs/start)"},"/hardware/en/lichee/th1520/lpi4a/11_credits.html":{"title":"Credits","content":" title: Credits keywords: Linux, Lichee, TH1520, SBC, RISCV, credits update: date: 2023 05 08 version: v1.0 author: wonder content: Release docs 本章节专门向 LicheePi 4A 作出贡献的个人和团体致谢！ 感谢你们的贡献让 RISC V 发展得更快更好！ （本文按个人意愿以真名或者网名进行致谢） ## 矽速 泽畔，阔爷，瀚宝，wonder，ztd，... ## 平头哥 春强，陈炜，穆呈，陆斌，... 特别感谢 陆斌 同学的全程沟通！ ## PLCT Wu Wei：感谢吴老板大力支持！老板大气！ [Icenowy Zheng](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/log/?qt author&q Icenowy+Zheng)：冰激凌，永远的神，手打 binary patch，真人快打！ 高涵：revyos之父！ Estela ad Astra：预订 OpenWRT！ ## 开源社区 [Jisheng Zhang](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/log/?qt author&q Jisheng+Zhang): TH1520 主线化支持 范文捷：Wine CE 作者，在 LPi4A 上进行相关移植测试。"},"/hardware/en/lichee/th1520/lpi4a/4_burn_image.html":{"title":"Flashing an Image","content":" title: Flashing an Image keywords: Linux, Lichee, TH1520, SBC, RISCV, image update: date: 2023 07 21 version: v1.1 author: ztd content: Update English docs date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## Preparation ### Download an image Refer to the previous chapter \"Images\" to find the desired image. The following burning method takes Debian single screen image `LPI4A_20230721.zip`, 16+128 core board as an example. ### Get the burning tool The burning tool can be obtained from the Mega cloud disk and is found in the `burn_tool.zip` file. After decompression the fastboot binary is found in the win/linux/mac subfolders. **Note:** Images from 20231023 and later versions have added support for burning large image files, which require using the latest version of fastboot. You can find the latest version of fastboot in the [cloud disk link](https://mega.nz/folder/phoQlBTZ#cZeQ3qZ__pDvP94PT3_bGA). The file name is `burn_tools_support_bigimage.zip`. ## How to enter burning mode Note that different versions of hardware have slightly different ways to enter the burning mode, see the following chapters. ### Beta Hardware Press and hold the BOOT button on the board while plugging in the USB C cable to power on the board (the other side of the USB C cable should be connected to your PC) This will enter USB burning mode. ![press_boot](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/press_boot.png) Windows: The board should show up in the Device Manager as “USB download gadget”. Linux: Use `lsusb`, the board should show up in burning mode as `ID 2345:7654 T HEAD USB download gadget` ### Official Hardware / Release Hardware In addition to holding the BOOT button as mentioned above, pay attention to check whether the DIP switch on the bottom board is in EMMC startup mode: ![switch_boot_mode](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/switch_boot_mode.jpg) After confirming that it is correct, it can be burned, and the next burning steps are the same as the internal test version. ### Windows Driver installation(Disable Driver Signature Checks) The driver needs to be installed manually the first time you use the device. Note that the driver is not digitally signed, and you need to disable the driver signature checks. To disable digital signatures follow the steps below: **Win10** 1. Find the settings of WIN10, click \"Settings\": ![win10_find_windows_settings](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/win10_find_windows_settings.png) 2. Click the last \"Update and Security\", then click \"Recovery\": ![win10_click_the_restore](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/win10_click_the_restore.png) 3. After clicking \"Recovery\", click \"Restart\" under Advanced Startup on the right, and the computer will restart at this time. If there are other important programs running, please be careful: ![win10_click_the_restart](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/win10_click_the_restart.png) **Win11** 1. Find \"System Menu\" in Settings and tap \"Restore\". ![win11_click_the_restore](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/win11_click_the_restore.png) 2. Click \"Restart\" under Advanced Startup on the right, and the computer will restart at this time. If there are other important programs running, please be careful. ![win11_click_the_restart](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/win11_click_the_restart.png) **Same Part** 1. After restarting, several options will appear, click on the option \"Troubleshooting\", then click on \"Advanced\", start the settings, and restart. ![click_the_advanced_option](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/click_the_advanced_option.png) 2. After this will restart, a list will pop up, including options such as safe mode, including the \"prohibit mandatory driver signature\" we care about here, select \"disable mandatory driver signature\", press the corresponding number, and then The computer will restart. ![ban_the_signature](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/ban_the_signature.png) 3. After restarting, the driver can be installed successfully. If prompted, click to continue the installation. The specific steps of fastboot driver installation are as follows: a. The development board is connected to the computer via usb. b. Open the device manager and the \"USB download gadget\" device will appear. Refer to [Disable Driver signature verification](https://answers.microsoft.com/en us/windows/forum/all/permanent disable driver signature verification/009c3498 bef8 4564 bb52 1d05812506e0#:~:text Start%20your%20computer%20and%20then%20keep%20pressing%20the,your%20keyboard%20to%20select%20Disable%20driver%20signature%20enforcement.) ![before_install_driver](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/before_install_driver.png) ![install_driver](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/install_driver.png) ### Windows Driver installation(Manually install signed drivers) This part of tutorial comes from [RevyOS Documentation](https://docs.revyos.dev). Feel free to read it's flash manual when you get into trouble. While holding down the BOOT button on the board, connect the Type C port near the BOOT button to the computer. The board will enter flashing mode. Right click on the Windows logo, open Device Manager. If you see \"USB download gadget\" under \"Other devices\", it means the device has been correctly recognized. However, the driver is not installed. To install the fastboot driver, you need to download the [Google USB Driver (proxy required)](https://dl.google.com/android/repository/usb_driver_r13 windows.zip), download and extract it to a location. 1. Right click on \"USB download gadget\" in Device Manager, click \"Update driver\" 2. Choose \"Browse my computer for drivers\" ![Driver Update Step 2](./assets/burn_image/driver update step 2 en.png) 3. Select \"Let me pick from a list of available drivers on my computer\" 4. Select \"Show All Devices\" and click \"Next\" ![Driver Update Step 4](./assets/burn_image/driver update step 4 en.png) 5. Click \"Have Disk\" 6. Click \"Browse\", select the inf file under the Google USB Driver, click OK ![Driver Update Step 6](./assets/burn_image/driver update step 6 en.png) 7. Select \"Android Bootloader Interface\", click \"Next\", click \"Yes\" in the pop up dialog, click \"Install\" in the Windows Security Center dialog that pops up ![Driver Update Step 7](./assets/burn_image/driver update step 7 en.png) 8. Successfully installed the fastboot driver ![Driver Update Step 8](./assets/burn_image/driver update step 8 en.png) If there are problems with the above steps, please go back to Device Manager, find the device, click \"Uninstall driver\", then unplug and replug the development board and try again. ## Burn the image ### Windows Edit the `burn_lpi4a.bat` decompressed from burn_tool.zip, replace the example image path into your real image path. Then run this `burn_lpi4a.bat` to burn image into LPi4A. Notes: 1. `fastboot.exe` path also needs verifying, otherwise it reports file not found. 2. If you install fastboot driver by manually installing signed drivers shown above, the flash script `burn_lpi4a.bat` may stuck at `< waiting for any device >`. In this case you will see a \"USB download gadget\" under \"Other Devices\", just repeat the driver installation manual and it should be fixed. ![target_burn_image_path](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/target_burn_image_path.png) ### Linux After putting the board into burning mode, you can use fastboot from `burn_tool.zip` to burn the image. Let´s take linux as an example: Note that you need to mark the fastboot binary as executable first via `chmod +x fastboot` `u boot with spl lpi4a.bin` and `u boot with spl lpi4a 16g.bin` are u boot firmware, please refer to the image description for specific differences. ```bash sudo ./fastboot flash ram ./images/u boot with spl lpi4a 16g.bin sudo ./fastboot reboot sleep 1 sudo ./fastboot flash uboot ./images/u boot with spl lpi4a 16g.bin sudo ./fastboot flash boot ./images/boot_sing.ext4 sudo ./fastboot flash root ./images/rootfs sing.ext4 ``` The first three lines will check and create the partitions on the flash. If you skip this step, burning the rootfs will be very slow later on. `boot sing.ext4` and `boot dual.ext4` for boot For specific differences, please refer to the image description. They mainly include the following: ```bash fw_dynamic.bin #opensbi Image #kernel image kernel release #commit id of kernel light_aon_fpga.bin #fw for E902 aon light_c906_audio.bin #fw for C906 audio light lpi4a.dtb # ddr8G dtb light lpi4a ddr16g.dtb # ddr16G dtb ``` `rootfs sing.ext4` and `rootfs mipi.ext4` are the root file system, and the default is Debian system. For the specific differences between the two, please refer to the image description. Log output you typically see while burning an image: ![burn_image_progress_result](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/burn_image_progress_result.png) <! ```bash (base) pc@n5105:~/work/$ sudo ./fastboot flash ram u boot with spl.bin Sending 'ram' (935 KB) OKAY [ 0.248s] Writing 'ram' OKAY [ 0.002s] Finished. Total time: 0.255s (base) pc@n5105:~/work/$ sudo ./fastboot reboot Rebooting OKAY [ 0.001s] Finished. Total time: 0.202s (base) pc@n5105:~/work/$ sudo ./fastboot flash uboot u boot with spl.bin Sending 'uboot' (935 KB) OKAY [ 0.054s] Writing 'uboot' OKAY [ 0.030s] Finished. Total time: 0.107s (base) pc@n5105:~/work/$ sudo ./fastboot flash boot boot_20230420.ext4 Sending 'boot' (40000 KB) OKAY [ 1.705s] Writing 'boot' OKAY [ 0.877s] Finished. Total time: 2.770s (base) pc@n5105:~/work/$ sudo ./fastboot flash root rootfs 20230425 001635 nogpu.ext4 Invalid sparse file format at header magic Sending sparse 'root' 1/37 (114572 KB) OKAY [ 4.793s] Writing 'root' OKAY [ 3.087s] Sending sparse 'root' 2/37 (105264 KB) OKAY [ 4.465s] Writing 'root' OKAY [ 2.330s] Sending sparse 'root' 3/37 (111970 KB) OKAY [ 4.814s] Writing 'root' OKAY [ 2.861s] Sending sparse 'root' 4/37 (114684 KB) OKAY [ 4.902s] Writing 'root' OKAY [ 2.658s] Sending sparse 'root' 5/37 (101490 KB) OKAY [ 4.305s] Writing 'root' OKAY [ 2.652s] Sending sparse 'root' 6/37 (114684 KB) OKAY [ 4.648s] Writing 'root' OKAY [ 2.657s] Sending sparse 'root' 7/37 (113862 KB) OKAY [ 4.755s] Writing 'root' OKAY [ 2.826s] Sending sparse 'root' 8/37 (111189 KB) OKAY [ 4.741s] Writing 'root' OKAY [ 2.695s] Sending sparse 'root' 9/37 (114625 KB) OKAY [ 4.865s] Writing 'root' OKAY [ 2.660s] Sending sparse 'root' 10/37 (104030 KB) OKAY [ 4.506s] Writing 'root' OKAY [ 4.108s] Sending sparse 'root' 11/37 (111701 KB) OKAY [ 4.744s] Writing 'root' OKAY [ 2.717s] Sending sparse 'root' 12/37 (107317 KB) OKAY [ 4.568s] Writing 'root' OKAY [ 2.583s] Sending sparse 'root' 13/37 (114629 KB) OKAY [ 4.830s] Writing 'root' OKAY [ 2.753s] Sending sparse 'root' 14/37 (109798 KB) OKAY [ 4.711s] Writing 'root' OKAY [ 2.778s] Sending sparse 'root' 15/37 (112203 KB) OKAY [ 4.795s] Writing 'root' OKAY [ 2.982s] Sending sparse 'root' 16/37 (112502 KB) OKAY [ 4.827s] Writing 'root' OKAY [ 2.991s] Sending sparse 'root' 17/37 (114110 KB) OKAY [ 4.849s] Writing 'root' OKAY [ 2.853s] Sending sparse 'root' 18/37 (114681 KB) OKAY [ 4.888s] Writing 'root' OKAY [ 2.802s] Sending sparse 'root' 19/37 (112042 KB) OKAY [ 4.799s] Writing 'root' OKAY [ 3.674s] Sending sparse 'root' 20/37 (109101 KB) OKAY [ 4.631s] Writing 'root' OKAY [ 2.582s] Sending sparse 'root' 21/37 (114225 KB) OKAY [ 4.623s] Writing 'root' OKAY [ 2.782s] Sending sparse 'root' 22/37 (114365 KB) OKAY [ 4.703s] Writing 'root' OKAY [ 2.667s] Sending sparse 'root' 23/37 (103529 KB) OKAY [ 4.133s] Writing 'root' OKAY [ 2.442s] Sending sparse 'root' 24/37 (114664 KB) OKAY [ 4.631s] Writing 'root' OKAY [ 2.581s] Sending sparse 'root' 25/37 (114550 KB) OKAY [ 4.749s] Writing 'root' OKAY [ 2.878s] Sending sparse 'root' 26/37 (114686 KB) OKAY [ 4.796s] Writing 'root' OKAY [ 2.853s] Sending sparse 'root' 27/37 (114466 KB) OKAY [ 4.800s] Writing 'root' OKAY [ 2.894s] Sending sparse 'root' 28/37 (110689 KB) OKAY [ 4.711s] Writing 'root' OKAY [ 2.616s] Sending sparse 'root' 29/37 (114687 KB) OKAY [ 4.880s] Writing 'root' OKAY [ 2.992s] Sending sparse 'root' 30/37 (110984 KB) OKAY [ 4.710s] Writing 'root' OKAY [ 2.451s] Sending sparse 'root' 31/37 (114685 KB) OKAY [ 4.920s] Writing 'root' OKAY [ 2.749s] Sending sparse 'root' 32/37 (114684 KB) OKAY [ 4.825s] Writing 'root' OKAY [ 2.503s] Sending sparse 'root' 33/37 (114684 KB) OKAY [ 4.816s] Writing 'root' OKAY [ 3.262s] Sending sparse 'root' 34/37 (114686 KB) OKAY [ 4.745s] Writing 'root' OKAY [ 2.825s] Sending sparse 'root' 35/37 (114684 KB) OKAY [ 4.913s] Writing 'root' OKAY [ 2.630s] Sending sparse 'root' 36/37 (114684 KB) OKAY [ 4.838s] Writing 'root' OKAY [ 2.593s] Sending sparse 'root' 37/37 (21324 KB) OKAY [ 0.926s] Writing 'root' OKAY [ 0.487s] Finished. Total time: 281.671s ``` > ## Board Boot Process brom > U Boot SPL > U Boot > OpenSBI > Kernel Here is a brief overview of each stage and sample console output. The board now has a level shifter for the serial port to 3.3V logic, so a regular USB serial adapter can be used. ### brom Typical output: ```shell brom_ver 8 [APP][E] protocol_connect failed, exit. ``` The brom stage loads initial code from the SoC's ROM and looks for the next stage bootloader. ### U Boot SPL Typical output: ```shell U Boot SPL 2020.01 gd6c9182f (Jul 07 2023 12:31:51 +0200) FM[1] lpddr4x dualrank freq 3733 64bit dbi_off n sdram init ddr initialized, jump to uboot image has no header ``` U Boot SPL stands for Secondary Program Loader. It initializes RAM, loads the main U Boot into RAM and jumps to it. ### U Boot Typical output: ```shell U Boot 2020.01 gd6c9182f (Jul 07 2023 12:31:51 +0200) CPU: rv64imafdcvsu Model: T HEAD c910 light DRAM: 8 GiB C910 CPU FREQ: 750MHz AHB2_CPUSYS_HCLK FREQ: 250MHz AHB3_CPUSYS_PCLK FREQ: 125MHz PERISYS_AHB_HCLK FREQ: 250MHz PERISYS_APB_PCLK FREQ: 62MHz GMAC PLL POSTDIV FREQ: 1000MHZ DPU0 PLL POSTDIV FREQ: 1188MHZ DPU1 PLL POSTDIV FREQ: 1188MHZ MMC: sdhci@ffe7080000: 0, sd@ffe7090000: 1 Loading Environment from MMC... OK Error reading output register Warning: cannot get lcd en GPIO LCD panel cannot be found : 121 splash screen startup cost 15 ms In: serial Out: serial Err: serial Net: ethernet@ffe7070000 (eth0) using MAC address ae:be:2a:50:5e:89 eth0: ethernet@ffe7070000ethernet@ffe7070000:0 is connected to ethernet@ffe7070000. ethernet@ffe7060000 (eth1) using MAC address ae:be:2a:50:5e:8a , eth1: ethernet@ffe7060000 Hit any key to stop autoboot: 0 ``` Press enter within 2 seconds of seeing `Hit any key to stop autoboot:` to enter the U Boot console. Typical environment variable configuration: Set MAC addresses: ```shell setenv ethaddr ae:be:2a:50:5e:89 setenv eth1addr ae:be:2a:50:5e:8a saveenv ``` Just replace the MAC address in the above command with your own MAC address. Note that the value of `eth1addr` is the value of `ethaddr` plus 1. Set kernel device tree: ```shell setenv fdt_file light lpi4a.dtb saveenv ``` Replace `light lpi4a.dtb` in the above command with the file name of the desired device tree stored in `boot.ext4`. After the setting is complete, you can also use the `printenv` command to check whether it is correct, and then enter the `boot` command to enter the kernel. In addition, you can also set startup parameters here to choose a startup method, such as using an SD card to start. After burning the image to the SD card, insert the SD card into the development board and enter U Boot: ```shell env set f set_bootargs 'setenv bootargs console ttyS0,115200 root /dev/mmcblk1 rootfstype ext4 rootwait rw earlycon clk_ignore_unused loglevel 7 eth ethaddr rootrwoptions rw,noatime rootrwreset {factory_reset} init /lib/systemd/systemd' env save ``` After the above steps are completed, enter the `reset` command to restart the development board, and the system can be booted from the SD card. For the official version of the development board, you can use the DIP switch on the bottom board to select the startup mode: ![switch_boot_mode](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/switch_boot_mode.jpg) ### OpenSBI Some initialization prints in OpenSBI's sbi_init.c file will not be displayed in the startup log, but you can see some information about OpenSBI being printed out when the Kernel starts: ```shell [ 0.000000] SBI specification v0.3 detected [ 0.000000] SBI implementation ID 0x1 Version 0x9 [ 0.000000] SBI v0.2 TIME extension detected [ 0.000000] SBI v0.2 IPI extension detected [ 0.000000] SBI v0.2 RFENCE extension detected [ 0.000000] SBI v0.2 HSM extension detected ``` OpenSBI has three kinds of firmware, the one used here is FW_DYNAMIC, which will load the next stage according to the information passed in the previous stage. The fw_dynamic.bin firmware of OpenSBI is stored in boot.ext4, which will boot the kernel at this stage. ### Kernel A typical log of this stage is as follows (because it is too long, only part of it is intercepted): ```shell [ 0.000000] Linux version 5.10.113 g387b6863253c dirty [ 0.000000] OF: fdt: Ignoring memory range 0x0 0x200000 [ 0.000000] earlycon: uart0 at MMIO32 0x000000ffe7014000 (options '115200n8') [ 0.000000] printk: bootconsole [uart0] enabled [ 0.000000] efi: UEFI not found. [ 0.000000] Reserved memory: created CMA memory pool at 0x00000003e4000000, size 320 MiB [ 0.000000] OF: reserved mem: initialized node linux,cma, compatible id shared dma pool [ 0.000000] Zone ranges: [ 0.000000] DMA32 [mem 0x0000000000200000 0x00000000ffffffff] [ 0.000000] Normal [mem 0x0000000100000000 0x00000003ffffffff] [ 0.000000] Movable zone start for each node [ 0.000000] Early memory node ranges [ 0.000000] node 0: [mem 0x0000000000200000 0x000000000fffffff] [ 0.000000] node 0: [mem 0x0000000010000000 0x00000000166fffff] [ 0.000000] node 0: [mem 0x0000000016700000 0x0000000016ffffff] [ 0.000000] node 0: [mem 0x0000000017000000 0x0000000018ffffff] [ 0.000000] node 0: [mem 0x0000000019000000 0x000000001bffffff] [ 0.000000] node 0: [mem 0x000000001c000000 0x000000001dffffff] [ 0.000000] node 0: [mem 0x000000001e000000 0x000000001fffffff] [ 0.000000] node 0: [mem 0x0000000020000000 0x00000000207fffff] [ 0.000000] node 0: [mem 0x0000000020800000 0x00000003ffffffff] [ 0.000000] Initmem setup node 0 [mem 0x0000000000200000 0x00000003ffffffff] [ 0.000000] software IO TLB: mapped [mem 0x00000000fbfff000 0x00000000fffff000] (64MB) [ 0.000000] SBI specification v0.3 detected [ 0.000000] SBI implementation ID 0x1 Version 0x9 [ 0.000000] SBI v0.2 TIME extension detected [ 0.000000] SBI v0.2 IPI extension detected [ 0.000000] SBI v0.2 RFENCE extension detected [ 0.000000] SBI v0.2 HSM extension detected [ 0.000000] riscv: ISA extensions acdfimsuv [ 0.000000] riscv: ELF capabilities acdfimv [ 0.000000] percpu: Embedded 27 pages/cpu s73496 r8192 d28904 u110592 [ 0.000000] Built 1 zonelists, mobility grouping on. Total pages: 4128264 [ 0.000000] Kernel command line: console ttyS0,115200 root PARTUUID 80a5a8e9 c744 491a d [ 0.000000] Dentry cache hash table entries: 2097152 (order: 12, 16777216 bytes, linear) [ 0.000000] Inode cache hash table entries: 1048576 (order: 11, 8388608 bytes, linear) [ 0.000000] Sorting __ex_table... [ 0.000000] mem auto init: stack:off, heap alloc:off, heap free:off [ 0.000000] Memory: 15887448K/16775168K available (12390K kernel code, 5982K rwdata, 61) [ 0.000000] SLUB: HWalign 64, Order 0 3, MinObjects 0, CPUs 4, Nodes 1 [ 0.000000] rcu: Preemptible hierarchical RCU implementation. [ 0.000000] rcu: RCU restricting CPUs from NR_CPUS 8 to nr_cpu_ids 4. [ 0.000000] Trampoline variant of Tasks RCU enabled. [ 0.000000] Tracing variant of Tasks RCU enabled. [ 0.000000] rcu: RCU calculated value of scheduler enlistment delay is 25 jiffies. [ 0.000000] rcu: Adjusting geometry for rcu_fanout_leaf 16, nr_cpu_ids 4 [ 0.000000] NR_IRQS: 64, nr_irqs: 64, preallocated irqs: 0 [ 0.000000] riscv intc: 64 local interrupts mapped [ 0.000000] plic: interrupt controller@ffd8000000: mapped 64 interrupts with 4 handlers. [ 0.000000] random: get_random_bytes called from start_kernel+0x372/0x4d4 with crng_ini0 [ 0.000000] riscv_timer_init_dt: Registering clocksource cpuid [0] hartid [0] [ 0.000000] clocksource: riscv_clocksource: mask: 0xffffffffffffffff max_cycles: 0x1623s [ 0.000008] sched_clock: 64 bits at 3000kHz, resolution 333ns, wraps every 439804651109s [ 0.008693] Console: colour dummy device 80x25 ``` After starting the kernel, you can replace the device tree DTB file, OpenSBI firmware, kernel image file Image and other files, which are located in the `/boot/` directory: ```shell sipeed@lpi4a:~$ ls /boot/ Image light lpi4a.dtb System.map 5.10.113 g387b6863253c dirty light_aon_fpga.bin config 5.10.113 g387b6863253c dirty light_c906_audio.bin fw_dynamic.bin vmlinuz 5.10.113 g387b6863253c dirty kernel commitid ``` ## Batch programming / flashing If you have commercial needs and need to burn firmware in batches, you can use the ARM/RV version of fastboot provided by sipeed to make an offline batch burner. If you need to burn a large number, you can also contact support@sipeed.com directly , we provide pre burning image service."},"/hardware/en/lichee/th1520/lpi4a/8_application.html":{"title":"Typical Application","content":" title: Typical Application keywords: Linux, Lichee, TH1520, SBC, RISCV, application update: date: 2023 09 12 version: v1.2 author: ztd content: Add some NPU applications date: 2023 07 21 version: v1.1 author: ztd content: Update English docs date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## llama.cpp llama is the META Open Source Large Language Model, and [llama.cpp](https://github.com/ggerganov/llama.cpp) is the ggerganov Open Source pure cpp runtime llama inference project. Thanks to llama.cpp, an excellent project, we can run LLM on LicheePi 4A. Zepan slightly modified llama.cpp [https://github.com/Zepan/llama.cpp](https://github.com/Zepan/llama.cpp) earlier to allow it to run the 7B model with less memory (down to about 700MB). You can see that TH1520 takes about 6s to compute a token (without V extension acceleration, which is expected to accelerate it by a factor of 4 8, so feel free to pitch in if you've added V extension support!) ![llama_th1520](. /... /... /... /... /zh/lichee/th1520/lpi4a/assets/application/llama_th1520.png) The feasibility of running the 7B model on an entry level C906 core was also briefly tested, and due to the small amount of memory in the D1 and the use of mmap read only extensions, a large number of low speed IO operations were introduced, which slowed down the speed of the run, ending up at only 18s/token. ![llama_d1](./../../../../zh/lichee/th1520/lpi4a/assets/application/llama_d1.png) ## YOLOX Target Detection This tutorial is an example of how to deploy the [YOLOX](https://github.com/Megvii BaseDetection/YOLOX) model to accomplish target detection on the LPi4A (LicheePi 4A) development board platform(CPU inference). Included in the tutorial: Installing the Python environment on the LPi4A development board Executing the model using the source code from the YOLOX project. The tutorial follows the usual model deployment process: 1. Basic Python environment configuration on LPi4A. 2. 2. Obtaining the yolox source code and models 3. Installing python packages that yolox depends on 4. Example execution using HHB onnxruntime on LPi4A **Basic Python Environment Configuration** **Basic Hardware and Software Configuration** Refer to the description in LPi4A's \"[Out of the box experience](https://wiki.sipeed.com/hardware/zh/lichee/th1520/lpi4a/2_unbox.html)\", install the development board correctly, and enter with root privileges after powering on and booting up. Ensure that you are connected to the Internet, and update the apt source. ```bash sudo apt update ``` Install some software for subsequent use in the example ```bash sudo apt install wget git vim ``` Installing the SHL Library ```bash wget https://github.com/T head Semi/csi nn2/releases/download/v2.4 beta.1/c920.tar.gz tar xf c920.tar.gz cp c920/lib/* /usr/lib/riscv64 linux gnu/ rf ``` **Python Environment Configuration** Python version 3.11 is installed by default on the system where LPi4A is burned. You can confirm this with the following command ```bash python version ``` We will use python 3.11 as an example, but for other versions, you will need to change to the corresponding version of the command when installing dependencies. Most of the packages that the various python programs depend on can be installed via pip, which can be installed with the following command ```bash apt install python3 pip ``` Before installing other python packages, install the venv package, which is used to create a python virtual environment ```bash apt install python3.11 venv ``` Create a python virtual environment and activate it ```bash cd /root python3 m venv ort source /root/ort/bin/activate ``` At this point, the basic python environment has been created. Similar to other architectures, you can install pure python packages directly via pip install. The opencv installation will depend on other python packages, so if pip does not download them automatically, you can install the dependencies manually first. See [download riscv whl](https://www.yuque.com/za4k4z/uzn618/zsp0krgg9dlp0fhx) for more information on how to get the packages. **Get YOLOX** [YOLOX](https://github.com/Megvii BaseDetection/YOLOX) is a YOLO like target detection model with quite excellent performance. The source code and model can be downloaded directly from github ```bash git clone https://github.com/Megvii BaseDetection/YOLOX.git cd YOLOX/demo/ONNXRuntime wget https://github.com/Megvii BaseDetection/YOLOX/releases/download/0.1.1rc0/yolox_s.onnx ``` **Modify the source code** This tutorial will use the HHB onnxruntime execution model, so switch to. In the onnxruntime example directory in the source code, modify the beginning of the file demo/ONNXRuntime/onnx_inference.py to add two new lines of code ```bash #!/usr/bin/env python3 # Copyright (c) Megvii, Inc. and its affiliates. +import sys +sys.path.insert(0, \"../../\") + import argparse import os ``` The code uses sys.path.insert to specify the search path, thus eliminating the need to install the YOLOX installer from the source code. **Installing dependencies The python ecosystem for the RISC V architecture is still lacking, but in the future, packages dependent on YOLOX can be installed directly from the [requirements.txt](https://github.com/Megvii BaseDetection/YOLOX/blob/main/) file. requirements.txt) file. The YOLOX example in this tutorial relies on a large number of python packages, download the pre compiled python packages ```bash git clone b python3.11 https://github.com/zhangwm pt/prebuilt_whl.git cd prebuilt_whl ``` It can be handled manually in the following order. ```bash pip install numpy 1.25.0 cp311 cp311 linux_riscv64.whl pip install opencv_python 4.5.4+4cd224d cp311 cp311 linux_riscv64.whl pip install kiwisolver 1.4.4 cp311 cp311 linux_riscv64.whl pip install Pillow 9.5.0 cp311 cp311 linux_riscv64.whl pip install matplotlib 3.7.2.dev0+gb3bd929cf0.d20230630 cp311 cp311 linux_riscv64.whl pip install pycocotools 2.0.6 cp311 cp311 linux_riscv64.whl pip3 install loguru 0.7.0 py3 none any.whl pip3 install torch 2.0.0a0+gitc263bd4 cp311 cp311 linux_riscv64.whl pip3 install MarkupSafe 2.1.3 cp311 cp311 linux_riscv64.whl pip3 install torchvision 0.15.1a0 cp311 cp311 linux_riscv64.whl pip3 install psutil 5.9.5 cp311 abi3 linux_riscv64.whl pip3 install tqdm 4.65.0 py3 none any.whl pip3 install tabulate 0.9.0 py3 none any.whl ``` The installation process will involve other pure python dependencies, which pip will automatically download from the official sources. **Installation of HHB onnxruntime** HHB onnxuruntime is a port of the SHL backend (execution providers) that allows onnxruntime to reuse the high performance optimized code in SHL for the Gentei CPU. ```bash wget https://github.com/zhangwm pt/onnxruntime/releases/download/riscv_whl/onnxruntime 1.14.1 cp311 cp311 linux_riscv64.whl pip install onnxruntime 1.14.1 cp311 cp311 linux_riscv64.whl ``` **Execute** Execute the onnx_inference.py example in the example directory ```bash python3 onnx_inference.py m yolox_s.onnx i soccer.jpg o outdir s 0.3 input_shape 640,640 ``` `python3 onnx_inference.py m yolox_s.onnx i soccer.jpg o outdir s 0.3 input_shape640,640` Parameter Description: m: specify model i: specify image o: specify output directory s: specify the detection threshold input_shape: specify the size of the image to be used for detection **Reference results** The input for this tutorial is the following image, which is an image of an athlete playing soccer, and the expected detection result is to detect two people and a soccer ball. > Image from the web ![yolox_detection_soccer_input.jpg](./../../../../zh/lichee/th1520/lpi4a/assets/application/yolox_detection_soccer_input.jpg) After the example executes normally, the result image soccer.jpg will be generated in the outdir directory. the image will draw the detected target with a box and labeled with the probability, and the effect is as shown in the following figure: ![yolox_detection_soccer_output.jpg](./../../../../zh/lichee/th1520/lpi4a/assets/application/yolox_detection_soccer_output.jpg) ## MobilenetV2 This tutorial is an example of how to deploy the mobilenetv2 model for image classification on the LicheePi4A platform. The tutorial includes: Compiling the onnx model into a binary available on LicheePi4A using HHB Preprocessing the mobilenetv2 model using opencv c++ version on LicheePi4A Differences between using CPU and NPU on LicheePi4A ### NPU #### Setup After setting up the NPU environment according to the [peripheral](https://wiki.sipeed.com/hardware/zh/lichee/th1520/lpi4a/6_peripheral.html#NPU) documentation, we can go to the Docker image of HHB environment. First, we need to get the model of this tutorial, which is downloaded to the example directory `/home/example/th1520_npu/onnx_mobilenetv2_c++`: [mobilenetv2 12.onnx](https://github.com/onnx/models/blob/main/vision/classification/mobilenet/model/mobilenetv2 12.onnx) To get the libraries for the optimized version of opencv used in this tutorial, go to [github](https://xuantie.t head.cn/community/download?id 4112956065753141248) and download them to the directory `/home/example/th1520_npu/`. ```shell cd /home/example/th1520_npu/ git clone https://github.com/zhangwm pt/prebuilt_opencv.git ``` #### Compile **HHB Compiling Model:** To cross compile the ONNX model into an executable program on the NPU, you need to use the hhb command. Note that the NPU only supports 8 bit or 16 bit fixed point operations, which in this case are int8 asymmetric quantization. To compile, you need to go to the directory `/home/example/th1520_npu/onnx_mobilenetv2_c++`: ```shell cd /home/example/th1520_npu/onnx_mobilenetv2_c++ hhb D model file mobilenetv2 12.onnx data scale 0.017 data mean \"124 117 104\" board th1520 postprocess save_and_top5 input name \"input\" output name \"output\" input shape \"1 3 224 224\" calibrate dataset persian_cat.jpg quantization scheme \"int8_asym\" ``` The options are: D: Specifies that the HHB process will run until the executable is generated model file: Specifies the mobilenet model that has been downloaded in the current directory data mean: Specifies the mean value data scale: Specifies the scale value board: Specifies that the target platform is th1520 input name: The input name of the model output name: The output name of the model input shape: The input size of the model postprocess: Saves the output results and prints the top5 results calibrate dataset: Specifies the calibration images required for quantization quantization scheme: Specifies the quantization scheme as int8 asymmetric After the command is executed, the hhb_out subdirectory will be generated in the current directory, which includes hhb_runtime, model.c and other files: hhb. bm: The HHB model file, including the quantized weight data and other information hhb_runtime: The executable on the th1520 platform, compiled from the c file in the directory main. c: A temporary file, the reference entry of the sample program model. c: A temporary file, the model structure file, related to the model structure model.params: A temporary file, the weight values io. c: A temporary file, the auxiliary functions for reading and writing files io. h: A temporary file, the auxiliary functions for reading and writing files declaration process. c: A temporary file, the image preprocessing function process. h: A temporary file, the image preprocessing function declaration For more detailed HHB options, refer to the command line options in the [HHBUserManual](https://www.yuque.com/za4k4z/kvkcoh/shl1nybhel6iviwt). **g++ Compiling** ```shell riscv64 unknown linux gnu g++ main.cpp I../prebuilt_opencv/include/opencv4 L../prebuilt_opencv/lib lopencv_imgproc lopencv_imgcodecs L../prebuilt_opencv/lib/opencv4/3rdparty/ llibjpeg turbo llibwebp llibpng llibtiff llibopenjp2 lopencv_core ldl lpthread lrt lzlib lcsi_cv latomic static o mobilenetv2_example ``` The mobilenetv2_example file is generated in the example directory after the compilation command is executed correctly. #### Execute After the cross compilation is complete, you can copy the files needed for program execution to the directory of the development board. The scp command can be used: ```shell scp r ../onnx_mobilenetv2_c++ sipeed@your_ip:~ ``` First confirm whether the driver in the development board is loaded: ```shell lsmod ``` If there are 'img_mem', 'vha' and 'vha_info' in the output of the three modules, the NPU driver is loaded successfully. Refer to [YOLOX](https://wiki.sipeed.com/hardware/en/lichee/th1520/lpi4a/8_application.html#YOLOX Target Detection) Install and configure the python virtual environment: ```shell sudo apt update sudo apt install wget git vim wget https://github.com/T head Semi/csi nn2/releases/download/v2.4 beta.1/c920.tar.gz tar xf c920.tar.gz cp c920/lib/* /usr/lib/riscv64 linux gnu/ rf sudo apt install python3 pip sudo apt install python3.11 venv cd /root python3 m venv ort source /root/ort/bin/activate git clone b python3.11 https://github.com/zhangwm pt/prebuilt_whl.git cd prebuilt_whl pip install numpy 1.25.0 cp311 cp311 linux_riscv64.whl pip install opencv_python 4.5.4+4cd224d cp311 cp311 linux_riscv64.whl pip install kiwisolver 1.4.4 cp311 cp311 linux_riscv64.whl pip install Pillow 9.5.0 cp311 cp311 linux_riscv64.whl pip install matplotlib 3.7.2.dev0+gb3bd929cf0.d20230630 cp311 cp311 linux_riscv64.whl pip install pycocotools 2.0.6 cp311 cp311 linux_riscv64.whl pip3 install loguru 0.7.0 py3 none any.whl pip3 install torch 2.0.0a0+gitc263bd4 cp311 cp311 linux_riscv64.whl pip3 install MarkupSafe 2.1.3 cp311 cp311 linux_riscv64.whl pip3 install torchvision 0.15.1a0 cp311 cp311 linux_riscv64.whl pip3 install psutil 5.9.5 cp311 abi3 linux_riscv64.whl pip3 install tqdm 4.65.0 py3 none any.whl pip3 install tabulate 0.9.0 py3 none any.whl ``` Run the just compiled example in the appropriate directory on the development board: ```shell ./mobilenetv2_example ``` After the execution, the terminal will prompt the stages of the execution: 1. Preprocessing 2. Model execution 3. Post processing The files used in the execution of mobilenetv2_example are: persian_cat.jpg: the input image input_img.bin: the intermediate results generated by the input image during the preprocessing stage hhb_out/hhb_runtime: the file used in the model execution stage, generated by HHB on the x86 host hhb_out/hhb. bm: the file used in the model execution stage, generated by HHB on the x86 host input_img.bin_output0_1_1000.txt: the output file of the model execution stage, including 1000 results of the model execution output #### Results ```shell (ort) root@lpi4a:/home/sipeed/onnx_mobilenetv2_c++# ./mobilenetv2_example ********** preprocess image ********** ********** run mobilenetv2 ********** INFO: NNA clock:792000 [kHz] INFO: Heap :ocm (0x18) INFO: Heap :anonymous (0x2) INFO: Heap :dmabuf (0x2) INFO: Heap :unified (0x5) Run graph execution time: 7.87149ms, FPS 127.04 tensor info shape: 1 3 224 224 data pointer: 0x857ca0 tensor info shape: 1 1000 data pointer: 0x3fc9abe000 The max_value of output: 16.053827 The min_value of output: 8.026914 The mean_value of output: 0.001889 The std_value of output: 9.203342 top5: 283: 16.053827 281: 14.165141 287: 11.709850 285: 11.615416 282: 11.332113 ********** postprocess result ********** ********** probability top5: ********** n02123394 Persian cat n02123045 tabby, tabby cat n02127052 lynx, catamount n02124075 Egyptian cat n02123159 tiger cat ``` ### CPU Replace the HHB compile command in the NPU step above with: ```shell hhb D model file mobilenetv2 12.onnx data scale 0.017 data mean \"124 117 104\" board c920 postprocess save_and_top5 input name \"input\" output name \"output\" input shape \"1 3 224 224\" ``` g++ compilation command replaced with: ```shell riscv64 unknown linux gnu g++ main.cpp I../prebuilt_opencv/include/opencv4 L../prebuilt_opencv/lib lopencv_imgproc lopencv_imgcodecs L../prebuilt_opencv/lib/opencv4/3rdparty/ llibjpeg turbo llibwebp llibpng llibtiff llibopenjp2 lopencv_core ldl lpthread lrt lzlib lcsi_cv latomic static o mobilenetv2_example ``` Then send the compiled binary file to the development board to run. The reference results are as follows: ```shell (ort) root@lpi4a:/home/sipeed/onnx_mobilenetv2_c++# ./mobilenetv2_example ********** preprocess image ********** ********** run mobilenetv2 ********** Run graph execution time: 79.77252ms, FPS 12.54 tensor info shape: 1 3 224 224 data pointer: 0x259240 tensor info shape: 1 1000 data pointer: 0x1c5200 The max_value of output: 16.843750 The min_value of output: 7.414062 The mean_value of output: 0.001131 The std_value of output: 9.056762 top5: 283: 16.843750 281: 13.789062 287: 12.257812 282: 10.898438 285: 10.765625 ********** postprocess result ********** ********** probability top5: ********** n02123394 Persian cat n02123045 tabby, tabby cat n02127052 lynx, catamount n02123159 tiger cat n02124075 Egyptian cat ``` ## Yolov5n ### NPU #### Setup Refer to [Peripheral](https://wiki.sipeed.com/hardware/en/lichee/th1520/lpi4a/6_peripheral.html#NPU)After the NPU usage environment is set up, the document enters the Docker image of the HHB environment. First get the model for this tutorial and download it to the sample directory `/home/example/th1520_npu/yolov5n` : ```shell git clone https://github.com/ultralytics/yolov5.git cd yolov5 pip3 install ultralytics python3 export.py weights yolov5n.pt include onnx ``` #### Compile **HHB Compile** To cross compile the ONNX model into an executable program on the NPU, you need to use the hhb command. Note that only 8 bit or 16 bit fixed point operations are supported on the NPU, which is defined as int8 asymmetric quantization in this example. When compiling, you need to go to the directory where the sample is stored `/home/example/th1520_npu/yolov5n`: ```shell cd /home/example/th1520_npu/yolov5n hhb D model file yolov5n.onnx data scale div 255 board th1520 input name \"images\" output name \"/model.24/m.0/Conv_output_0;/model.24/m.1/Conv_output_0;/model.24/m.2/Conv_output_0\" input shape \"1 3 384 640\" calibrate dataset kite.jpg quantization scheme \"int8_asym\" ``` Option description: D: specify the HHB process to generate the executable file until the end model file: specify the yolov5 model that has been downloaded in the current directory data mean: specify the mean value data scale: specify the scale value board: specify the target platform as th1520 input name: the input name of the model output name: the output name of the model input shape: the input size of the model postprocess: save the output results and print the top5 results calibrate dataset: specify the calibration images required for quantization quantization scheme: specify the quantization scheme as int8 asymmetric After the command is executed, the hhb_out subdirectory will be generated in the current directory, which includes hhb_runtime, model. c and other files: hhb. bm: HHB model file, including the weight data after quantization hhb_runtime: the executable file on the th1520 platform, compiled from the c file in the directory main. c: temporary file, the reference entry of the sample program model. c: temporary file, model structure file, related to the model structure model. params: temporary file, weight value io. c: temporary file, auxiliary functions for reading and writing files io. h: temporary file, auxiliary function declaration for reading and writing files process. c: temporary file, image preprocessing function process. h: temporary file, image preprocessing function declaration For more detailed HHB options, refer to the command line options in the [HHBUserManual](https://www.yuque.com/za4k4z/kvkcoh/shl1nybhel6iviwt). **g++ compile** ```shell riscv64 unknown linux gnu gcc yolov5n.c o yolov5n_example hhb_out/io.c hhb_out/model.c Wl, gc sections O2 g mabi lp64d I hhb_out/ L /usr/local/lib/python3.8/dist packages/hhb/install_nn2/th1520/lib/ lshl L /usr/local/lib/python3.8/dist packages/hhb/prebuilt/decode/install/lib/rv L /usr/local/lib/python3.8/dist packages/hhb/prebuilt/runtime/riscv_linux lprebuilt_runtime ljpeg lpng lz lstdc++ lm I /usr/local/lib/python3.8/dist packages/hhb/install_nn2/th1520/include/ mabi lp64d march rv64gcv0p7_zfh_xtheadc Wl, unresolved symbols ignore in shared libs ``` The yolov5n_example file is generated in the example directory after the compilation command is executed correctly. #### Excute After the cross compilation is complete, you can copy the files needed for program execution to the directory of the development board. The scp command can be used: ```shell scp r ../yolov5n sipeed@your_ip:~ ``` First confirm whether the driver in the development board is loaded: ```shell lsmod ``` If there are 'img_mem', 'vha' and 'vha_info' in the output of the three modules, the NPU driver is loaded successfully. ``` Refer to [YOLOX](https://wiki.sipeed.com/hardware/en/lichee/th1520/lpi4a/8_application.html#YOLOX Target Detection) Install and configure the python virtual environment: ```shell sudo apt update sudo apt install wget git vim wget https://github.com/T head Semi/csi nn2/releases/download/v2.4 beta.1/c920.tar.gz tar xf c920.tar.gz cp c920/lib/* /usr/lib/riscv64 linux gnu/ rf sudo apt install python3 pip sudo apt install python3.11 venv cd /root python3 m venv ort source /root/ort/bin/activate git clone b python3.11 https://github.com/zhangwm pt/prebuilt_whl.git cd prebuilt_whl pip install numpy 1.25.0 cp311 cp311 linux_riscv64.whl pip install opencv_python 4.5.4+4cd224d cp311 cp311 linux_riscv64.whl pip install kiwisolver 1.4.4 cp311 cp311 linux_riscv64.whl pip install Pillow 9.5.0 cp311 cp311 linux_riscv64.whl pip install matplotlib 3.7.2.dev0+gb3bd929cf0.d20230630 cp311 cp311 linux_riscv64.whl pip install pycocotools 2.0.6 cp311 cp311 linux_riscv64.whl pip3 install loguru 0.7.0 py3 none any.whl pip3 install torch 2.0.0a0+gitc263bd4 cp311 cp311 linux_riscv64.whl pip3 install MarkupSafe 2.1.3 cp311 cp311 linux_riscv64.whl pip3 install torchvision 0.15.1a0 cp311 cp311 linux_riscv64.whl pip3 install psutil 5.9.5 cp311 abi3 linux_riscv64.whl pip3 install tqdm 4.65.0 py3 none any.whl pip3 install tabulate 0.9.0 py3 none any.whl ``` Run the just compiled example in the appropriate directory on the development board: ```shell python3 inference.py ``` After the execution, the terminal will prompt the stages of the execution: 1. Preprocessing: fill and scale the original image to 384 * 640 2. Model execution and post processing: perform model inference and do post processing such as nms 3. Frame: draw the detection results on the 384 * 640 size graph and output the new image Files used in the execution of inference.py: kite.jpg: the input image image_preprocessed.bin: the intermediate results generated from the input image in the preprocessing stage yolov5n_example: the file used in the model execution stage, compiled by gcc on an x86 host hhb_out/hhb.bm: the file used in the model execution stage, generated by HHB on an x86 host detect.txt: the output file of the post processing stage, including the four targets detected in the image kite_result.jpg: the output image, which adds the detection frame to the results of the input graph #### Results ```shell (ort) root@lpi4a:/home/sipeed/yolov5n_npu# python3 inference.py ********** preprocess image ********** ******* run yolov5 and postprocess ******* INFO: NNA clock:792000 [kHz] INFO: Heap :ocm (0x18) INFO: Heap :anonymous (0x2) INFO: Heap :dmabuf (0x2) INFO: Heap :unified (0x5) Run graph execution time: 5.36258ms, FPS 186.48 detect num: 4 id: label score x1 y1 x2 y2 [0]: 0 0.895277 273.492188 161.245056 359.559814 330.644257 [1]: 0 0.887368 79.860062 179.181244 190.755692 354.304474 [2]: 0 0.815214 222.054550 224.477600 279.828979 333.717285 [3]: 33 0.563324 67.625580 173.948883 201.687988 219.065765 ********** draw bbox ********** [273.492188, 161.245056, 359.559814, 330.644257, 0.895277, 0] [79.860062, 179.181244, 190.755692, 354.304474, 0.887368, 0] [222.05455, 224.4776, 279.828979, 333.717285, 0.815214, 0] [67.62558, 173.948883, 201.687988, 219.065765, 0.563324, 33] ``` > The sample image is from the web. ![yolov5n_detection_soccer_output](./../../../../zh/lichee/th1520/lpi4a/assets/application/yolov5n_detection_soccer_output.jpg) ### CPU Replace the HHB compile command in the NPU step above with: ```shell hhb D model file yolov5n.onnx data scale div 255 board c920 input name \"images\" output name \"/model.24/m.0/Conv_output_0;/model.24/m.1/Conv_output_0;/model.24/m.2/Conv_output_0\" input shape \"1 3 384 640\" ``` gcc compile command replaced with: ```shell riscv64 unknown linux gnu gcc yolov5n.c static o yolov5n_example hhb_out/io.c hhb_out/model.c Wl, gc sections O2 g mabi lp64d I hhb_out/ L /usr/local/lib/python3.8/dist packages/hhb/install_nn2/c920/lib/ lshl static L /usr/local/lib/python3.8/dist packages/hhb/prebuilt/decode/install/lib/rv L /usr/local/lib/python3.8/dist packages/hhb/prebuilt/runtime/riscv_linux lprebuilt_runtime ljpeg lpng lz lstdc++ lm I /usr/local/lib/python3.8/dist packages/hhb/install_nn2/c920/include/ mabi lp64d march rv64gcv0p7_zfh_xtheadc ``` Then send the compiled binary file to the development board to run. The reference results are as follows: ```shell (ort) root@lpi4a:/home/sipeed/yolov5n_cpu# python3 inference.py ********** preprocess image ********** ******* run yolov5 and postprocess ******* Run graph execution time: 387.34067ms, FPS 2.58 detect num: 4 id: label score x1 y1 x2 y2 [0]: 0 0.901887 274.524475 158.559036 359.169312 332.431702 [1]: 0 0.879545 80.073883 184.767792 190.130157 349.906281 [2]: 0 0.845192 219.378418 221.662415 283.860413 333.798584 [3]: 33 0.666908 67.099136 174.128189 202.971451 220.213608 ********** draw bbox ********** [274.524475, 158.559036, 359.169312, 332.431702, 0.901887, 0] [80.073883, 184.767792, 190.130157, 349.906281, 0.879545, 0] [219.378418, 221.662415, 283.860413, 333.798584, 0.845192, 0] [67.099136, 174.128189, 202.971451, 220.213608, 0.666908, 33] ``` ## Yolov5s Referring to the compilation steps for yolov5n, simply replace the yolov5n. onnx file with yolov5s. onnx and change the arguments `yolov5n. onnx` to `yolov5s. onnx` in the HHB and GCC compilation commands. ### Setup On an x86 host, after setting up the NPU usage environment according to the [peripheral](https://wiki.sipeed.com/hardware/en/lichee/th1520/lpi4a/6_peripheral.html#NPU) documentation, go into the Docker image of the HHB environment. On the 1520, configure the python virtual environment refer to [YOLOX](https://wiki.sipeed.com/hardware/zh/lichee/th1520/lpi4a/8_application.html#YOLOX %E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B). ### CPU #### Compile **HBB Compile** ```shell hhb D model file yolov5s.onnx data scale div 255 board c920 input name \"images\" output name \"/model.24/m.0/Conv_output_0;/model.24/m.1/Conv_output_0;/model.24/m.2/Conv_output_0\" input shape \"1 3 384 640\" ``` In the HHB command, extract up to the last convolution layer. The post processing after the convolution layers is handled by the yolov5s.c file. The `yolov5s.c` file can refer to the `yolov5n.c` file under the yolov5n example. **GCC Compile** ```shell riscv64 unknown linux gnu gcc yolov5s.c static o yolov5s_example hhb_out/io.c hhb_out/model.c Wl, gc sections O2 g mabi lp64d I hhb_out/ L /usr/local/lib/python3.8/dist packages/hhb/install_nn2/c920/lib/ lshl static L /usr/local/lib/python3.8/dist packages/hhb/prebuilt/decode/install/lib/rv L /usr/local/lib/python3.8/dist packages/hhb/prebuilt/runtime/riscv_linux lprebuilt_runtime ljpeg lpng lz lstdc++ lm I /usr/local/lib/python3.8/dist packages/hhb/install_nn2/c920/include/ mabi lp64d march rv64gcv0p7_zfh_xtheadc ``` #### Results ```shell (ort) root@lpi4a:/home/sipeed/yolov5s# python3 inference.py ********** preprocess image ********** ******* run yolov5 and postprocess ******* Run graph execution time: 821.20135ms, FPS 1.22 detect num: 4 id: label score x1 y1 x2 y2 [0]: 0 0.932165 275.538910 159.163147 359.211151 329.072205 [1]: 0 0.888989 219.883255 222.074265 285.310486 334.005676 [2]: 0 0.840487 85.319901 184.137268 186.844284 346.103210 [3]: 33 0.783095 70.033737 176.102921 202.740250 218.405075 ********** draw bbox ********** [275.53891, 159.163147, 359.211151, 329.072205, 0.932165, 0] [219.883255, 222.074265, 285.310486, 334.005676, 0.888989, 0] [85.319901, 184.137268, 186.844284, 346.10321, 0.840487, 0] [70.033737, 176.102921, 202.74025, 218.405075, 0.783095, 33] ``` ### NPU #### Compile Refer to yolov5n. **HHB Compile** ```shell hhb D model file yolov5s.onnx data scale div 255 board th1520 input name \"images\" output name \"/model.24/m.0/Conv_output_0;/model.24/m.1/Conv_output_0;/model.24/m.2/Conv_output_0\" input shape \"1 3 384 640\" calibrate dataset kite.jpg quantization scheme \"int8_asym\" ``` **GCC Compile** In the HHB command, extract up to the last convolution layer. The post processing after the convolution layers is handled by the yolov5s.c file. The `yolov5s.c` file can refer to the `yolov5n.c` file under the yolov5n example. ```shell riscv64 unknown linux gnu gcc yolov5s.c o yolov5s_example hhb_out/io.c hhb_out/model.c Wl, gc sections O2 g mabi lp64d I hhb_out/ L /usr/local/lib/python3.8/dist packages/hhb/install_nn2/th1520/lib/ lshl L /usr/local/lib/python3.8/dist packages/hhb/prebuilt/decode/install/lib/rv L /usr/local/lib/python3.8/dist packages/hhb/prebuilt/runtime/riscv_linux lprebuilt_runtime ljpeg lpng lz lstdc++ lm I /usr/local/lib/python3.8/dist packages/hhb/install_nn2/th1520/include/ mabi lp64d march rv64gcv0p7_zfh_xtheadc Wl, unresolved symbols ignore in shared libs ``` #### Results ```shell (ort) root@lpi4a:/home/sipeed/yolov5s_npu# python3 inference.py ********** preprocess image ********** ******* run yolov5 and postprocess ******* INFO: NNA clock:792000 [kHz] INFO: Heap :ocm (0x18) INFO: Heap :anonymous (0x2) INFO: Heap :dmabuf (0x2) INFO: Heap :unified (0x5) Run graph execution time: 9.85487ms, FPS 101.47 detect num: 4 id: label score x1 y1 x2 y2 [0]: 0 0.933075 276.321838 157.925751 358.274475 329.757538 [1]: 0 0.893568 219.203781 221.895264 286.790039 334.801636 [2]: 0 0.848185 83.283234 182.688538 187.325684 346.702515 [3]: 33 0.800765 68.743454 175.539230 204.108292 218.260056 ********** draw bbox ********** [276.321838, 157.925751, 358.274475, 329.757538, 0.933075, 0] [219.203781, 221.895264, 286.790039, 334.801636, 0.893568, 0] [83.283234, 182.688538, 187.325684, 346.702515, 0.848185, 0] [68.743454, 175.53923, 204.108292, 218.260056, 0.800765, 33] ``` ## BERT ### CPU #### Setup Refer to [Peripheral](https://wiki.sipeed.com/hardware/en/lichee/th1520/lpi4a/6_peripheral.html#NPU)After the NPU usage environment is set up, the document enters the Docker image of the HHB environment. The model used in this tutorial is from the google bert repository and has been converted to the onnx version of the BERT model, which can be downloaded to the `/home/example/c920/bert_small` directory with the following command: ```shell cd home/example/c920/bert_small wget https://github.com/zhangwm pt/bert/releases/download/onnx/bert_small_int32_input.onnx ``` #### Compile **HHB Compile** To cross compile the ONNX model into an executable program on the NPU, you need to use the hhb command. Note that only 8 bit or 16 bit fixed point operations are supported on the NPU, which is defined as int8 asymmetric quantization in this example. To compile, you need to first go to the directory where the sample is located `/home/example/c920/bert_small` : ```shell cd /home/example/c920/bert_small hhb model file bert_small_int32_input.onnx input name \"input_ids;input_mask;segment_ids\" input shape '1 384;1 384;1 384' output name \"output_start_logits;output_end_logits\" board c920 quantization scheme \"float16\" postprocess save_and_top5 D without preprocess ``` The options are: D: Specifies that the HHB process will run until the executable is generated model file: Specifies that the bert model has been downloaded in the current directory data mean: Specifies the mean value data scale: Specifies the scale value board: Specifies that the target platform is th1520 input name: The input name of the model output name: The output name of the model input shape: The input size of the model postprocess: Saves the output results and prints the top 5 results calibrate dataset: Specifies the calibration images required for quantization quantization scheme: Specifies that the quantization scheme is int8 asymmetric After the command is executed, the hhb_out subdirectory will be generated in the current directory, which includes hhb_runtime, model.c and other files: hhb. bm: The HHB model file, including the quantized weight data and other information hhb_runtime: The executable on the th1520 platform, compiled from the c file in the directory main. c: A temporary file, the reference entry of the sample program model. c: A temporary file, the model structure file, related to the model structure model.params: A temporary file, the weight values io. c: A temporary file, the auxiliary functions for reading and writing files io. h: A temporary file, the auxiliary functions for reading and writing files declaration process. c: A temporary file, the image preprocessing function process. h: A temporary file, the image preprocessing function declaration For more detailed HHB options, refer to the command line options in the [HHBUserManual](https://www.yuque.com/za4k4z/kvkcoh/shl1nybhel6iviwt). After the compilation command is executed correctly, an executable file is generated in the example directory. You can copy the example directory to the development board and run it. ```shell scp r ../bert_small sipeed@your_ip:~ ``` #### Excute The preceding steps to execute the example program are the same as YOLOv5n, which will not be described here. After the preceding steps are correct, you can run commands in the example directory ```shell python3 inference.py ``` #### Results The reference input in this example comes from the SQuAD dataset, a reading comprehension dataset consisting of questions posed by a set of Wikipedia articles, where the answer to each question is a piece of text from the corresponding reading article or question. The input for this example is as follows. The article describes the game of a rugby game and asks the question of who participated in the game. ``` [Context]: Super Bowl 50 was an American football game to determine the champion of the National Football League (NFL) for the 2015 season. The American Football Conference (AFC) champion Denver Broncos defeated the National Football Conference (NFC) champion Carolina Panthers 24–10 to earn their third Super Bowl title. The game was played on February 7, 2016, at Levi's Stadium in the San Francisco Bay Area at Santa Clara, California. As this was the 50th Super Bowl, the league emphasized the \"golden anniversary\" with various gold themed initiatives, as well as temporarily suspending the tradition of naming each Super Bowl game with Roman numerals (under which the game would have been known as \"Super Bowl L\"), so that the logo could prominently feature the Arabic numerals 50. [Question]: Which NFL team represented the AFC at Super Bowl 50? ``` Based on the reading comprehension results, the expected output would be the Denver Broncos ```shell (ort) root@lpi4a:/home/sipeed/bert_small_cpu# python3 inference.py ********** preprocess test ********** [Context]: Super Bowl 50 was an American football game to determine the champion of the National Football League (N FL) for the 2015 season. The American Football Conference (AFC) champion Denver Broncos defeated the National Footba ll Conference (NFC) champion Carolina Panthers 24–10 to earn their third Super Bowl title. The game was played on Fe bruary 7, 2016, at Levi's Stadium in the San Francisco Bay Area at Santa Clara, California. As this was the 50th Sup er Bowl, the league emphasized the \"golden anniversary\" with various gold themed initiatives, as well as temporarily suspending the tradition of naming each Super Bowl game with Roman numerals (under which the game would have been k nown as \"Super Bowl L\"), so that the logo could prominently feature the Arabic numerals 50. [Question]: Which NFL team represented the AFC at Super Bowl 50? ******* run bert ******* Run graph execution time: 1713.15491ms, FPS 0.58 tensor info shape: 1 384 data pointer: 0x183d60 tensor info shape: 1 384 data pointer: 0x185380 tensor info shape: 1 384 data pointer: 0x1869a0 tensor info shape: 1 384 data pointer: 0x2a8610 The max_value of output: 3.826172 The min_value of output: 9.968750 The mean_value of output: 8.412353 The std_value of output: 5.128320 top5: 46: 3.826172 57: 3.142578 39: 1.303711 38: 1.179688 27: 0.624512 tensor info shape: 1 384 data pointer: 0x2a8300 The max_value of output: 3.617188 The min_value of output: 9.625000 The mean_value of output: 7.798176 The std_value of output: 4.820137 top5: 47: 3.617188 58: 3.482422 32: 2.523438 29: 1.541992 41: 1.473633 ********** postprocess ********** [Answer]: Denver Broncos ``` ## Docker First install the required packages ```shell sudo apt get update sudo apt get install docker docker compose ``` Once the installation is complete, use the ``sudo docker info`` command to verify that the installation was successful: ```shell sipeed@lpi4a:~$ sudo docker info Client: Context: default Debug Mode: false Server: Containers: 0 Running: 0 Paused: 0 Stopped: 0 Images: 0 Server Version: 20.10.24+dfsg1 Storage Driver: overlay2 Backing Filesystem: extfs Supports d_type: true Native Overlay Diff: true userxattr: false Logging Driver: json file Cgroup Driver: systemd Cgroup Version: 2 Plugins: Volume: local Network: bridge host ipvlan macvlan null overlay Log: awslogs fluentd gcplogs gelf journald json file local logentries splunk syslog Swarm: inactive Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc Default Runtime: runc Init Binary: docker init containerd version: 1.6.20~ds1 1+b1 runc version: 1.1.5+ds1 1+b1 init version: Security Options: seccomp Profile: default cgroupns Kernel Version: 5.10.113 gfac22a756532 Operating System: Debian GNU/Linux 12 (bookworm) OSType: linux Architecture: riscv64 CPUs: 4 Total Memory: 15.47GiB Name: lpi4a ID: MCKE:SEGQ:EBUX:ZMLC:P2WK:GIJ7:XAEQ:F56H:73HK:C3L5:IA5A:7GJI Docker Root Dir: /var/lib/docker Debug Mode: false Registry: https://index.docker.io/v1/ Labels: Experimental: false Insecure Registries: 127.0.0.0/8 Live Restore Enabled: false ``` If you want a normal user to have Docker execution privileges as well, you can execute the following command to do so: ```shell sudo groupadd docker sudo usermod aG docker $USER newgrp docker ``` These commands add a username with normal user privileges to the `docker` user group and activate group privileges. If you don't add them, you'll need to execute Docker related commands with sudo privileges every time you execute them. Next, let's pull up the hello world image to get a taste of Docker: ```shell sipeed@lpi4a:~$ docker pull hello world Using default tag: latest latest: Pulling from library/hello world b102dd09f2b3: Pull complete Digest: sha256:926fac19d22aa2d60f1a276b66a20eb765fbeea2db5dbdaafeb456ad8ce81598 Status: Downloaded newer image for hello world:latest docker.io/library/hello world:latest ``` Next, start the container you just pulled off: ```shell sipeed@lpi4a:~$ docker run hello world Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \"hello world\" image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get started/ ``` View information about the hello world mirror: ```shell sipeed@lpi4a:~$ docker images hello world REPOSITORY TAG IMAGE ID CREATED SIZE hello world latest eb6f80695a28 2 months ago 4.98kB ``` To experience a more complete image, go [here](https://hub.docker.com/) and search for the name of the distribution you want to use and pull it. ## K3s RISCV This chapter will show how to run the lightweight Kubernetes distribution K3s on LPi4A. First download the precompiled K3s package: https://github.com/CARV ICS FORTH/k3s/releases Then merge the downloaded packages into a `.gz` file and decompress it. After completion, add execution permission to k3s: ```shell wget https://github.com/CARV ICS FORTH/k3s/releases/download/20230721/k3s riscv64.gz.aa wget https://github.com/CARV ICS FORTH/k3s/releases/download/20230721/k3s riscv64.gz.ab wget https://github.com/CARV ICS FORTH/k3s/releases/download/20230721/k3s riscv64.gz.ac # The following commands need root user to execute sudo i cat k3s riscv64.gz.* gunzip > /usr/local/bin/k3s chmod +x /usr/local/bin/k3s exit ``` Verify whether it can run successfully. The typical output of a successful run is as follows: ```shell sipeed@lpi4a:~$ k3s NAME: k3s riscv64 Kubernetes, but small and simple USAGE: k3s riscv64 [global options] command [command options] [arguments...] VERSION: v1.27.3+k3s 9d376dfb dirty (9d376dfb) COMMANDS: server Run management server agent Run node agent kubectl Run kubectl crictl Run crictl ctr Run ctr check config Run config check token Manage bootstrap tokens etcd snapshot secrets encrypt Control secrets encryption and keys rotation certificate Manage K3s certificates completion Install shell completion script help, h Shows a list of commands or help for one command GLOBAL OPTIONS: debug (logging) Turn on debug logs [$K3S_DEBUG] data dir value, d value (data) Folder to hold state (default: /var/lib/r) help, h show help version, v print the version ``` Now, download and run the k3s install script: ```shell curl sfL https://get.k3s.io > k3s install.sh chmod +x k3s install.sh INSTALL_K3S_EXEC \"server disable metrics server\" INSTALL_K3S_SKIP_DOWNLOAD \"true\" bash x ./k3s install.sh ``` After running, use the following command to check whether k3s is running normally. Typical output is as follows: ```shell sipeed@lpi4a:~$ systemctl status k3s ● k3s.service Lightweight Kubernetes Loaded: loaded (8;;file://lpi4a/etc/systemd/system/k3s.service/etc/systemd) Active: active (running) since Mon 2023 07 31 06:48:34 UTC; 6s ago Docs: 8;;https://k3s.iohttps://k3s.io8;; Process: 3240 ExecStartPre /bin/sh xc ! /usr/bin/systemctl is enabled qu> Process: 3242 ExecStartPre /sbin/modprobe br_netfilter (code exited, status> Process: 3243 ExecStartPre /sbin/modprobe overlay (code exited, status 0/SU> Main PID: 3244 (k3s server) Tasks: 37 Memory: 529.5M CPU: 54.841s CGroup: /system.slice/k3s.service ├─3244 \"/usr/local/bin/k3s server\" └─3361 \"containerd ``` Next, we create a new configuration file to run the k3s container: ```shell vi hello lpi4a.yaml ``` The content of the file is as follows (refer to https://raw.githubusercontent.com/CARV ICS FORTH/kubernetes riscv64/main/examples/hello kubernetes.yaml): ```yaml apiVersion: v1 kind: Service metadata: name: hello spec: type: ClusterIP ports: port: 8080 selector: app: hello apiVersion: apps/v1 kind: Deployment metadata: name: hello spec: replicas: 1 selector: matchLabels: app: hello template: metadata: labels: app: hello spec: containers: name: hello kubernetes image: carvicsforth/hello kubernetes:1.10.1 env: name: MESSAGE value: \"Hello Lichee Pi 4A!\" ``` Then start a container with this configuration file. A typical input is as follows: ```shell sipeed@lpi4a:~$ sudo kubectl apply f hello lpi4a.yaml service/hello created deployment.apps/hello created ``` Then check the status of pods (if the IP address is not displayed in the output, you can wait a little longer and check again): ```shell sipeed@lpi4a:~$ NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES hello 5b576d45d7 fdjgh 1/1 Running 0 16m 10.42.0.6 lpi4a <none> <none> ``` Next, use curl to test whether the k3s container runs successfully. The typical output is as follows: ```shell sipeed@lpi4a:~$ curl 10.42.0.6:8080 <!DOCTYPE html> <html> <head> <title>Hello Kubernetes!</title> <link rel \"stylesheet\" type \"text/css\" href \"/css/main.css\"> <link rel \"stylesheet\" href \"https://fonts.googleapis.com/css?family Ubuntu:300\"> </head> <body> <div class \"main\"> <img src \"/images/kubernetes.png\"/> <div class \"content\"> <div id \"message\"> Hello Lichee Pi 4A! </div> <div id \"info\"> <table> <tr> <th>namespace:</th> <td> </td> </tr> <tr> <th>pod:</th> <td>hello 5b576d45d7 fdjgh</td> </tr> <tr> <th>node:</th> <td> (Linux 5.10.113 gfac22a756532)</td> </tr> </table> </div> <div id \"footer\"> paulbouwer/hello kubernetes:1.10.1 (linux/riscv64) </div> </div> </div> </body> </html> ``` So far, the k3s container has run successfully. The page shows as follows: ![k3s_hello_world](./../../../../zh/lichee/th1520/lpi4a/assets/application/k3s_hello_world.png) ## Minecraft Server Here we take `1.20.1` version as an example, LPi4A as Server and PC (Ubuntu 22.04) as Client. First download the Fizzed optimized nitro JDK 19 from [here](https://github.com/fizzed/nitro/releases/tag/builds), extract it, rename the folder and move it to the `/opt/` directory: ```shell tar xvf fizzed19.36 jdk19.0.1 linux_riscv64.tar.gz sudo mv fizzed19.36 jdk19.0.1 linux_riscv64 /opt/jdk_19 ``` Test if this JDK is available: ```shell sipeed@lpi4a:~$ /opt/jdk_19/bin/java version openjdk version \"19.0.1\" 2022 09 20 OpenJDK Runtime Environment Fizzed19.36 (build 19.0.1+10) OpenJDK 64 Bit Server VM Fizzed19.36 (build 19.0.1+10, mixed mode) ``` If the version number appears, it is available. If you have already pre installed a different version of the JDK, you can change the softlinks by checking the original softlinks and making a note of them so that you can change them back later: ```shell sipeed@lpi4a:~$ ls /usr/bin/java l lrwxrwxrwx 1 root root 22 Apr 26 10:40 /usr/bin/java > /etc/alternatives/java ``` Then change the softlink to point to the JDK you just installed: ```shell sudo rm /usr/bin/java sudo ln s /opt/jdk_19/bin/java /usr/bin/java ``` Verify that the soft link was configured successfully with the command ```shell java version ``` If the version appears, the configuration was successful. Next, download the original server side jar file to LPi4A at [here](https://www.minecraft.net/zh hans/download), noting that the version is ``1.20.1``, and then execute it on LPi4A first: ```shell java jar server.jar nogui ``` If prompted ```shell [ServerMain/WARN]: Failed to load eula.txt [ServerMain/INF0]:You need to agree to the EULA in order to run the server. Go to e ula.txt for more info. Go to eula.txt for more info. Changes false to true on the corresponding line in the `eula.txt` file in the current directory: ```shell eula true ``` Save and exit, restart the server, the first startup will be slower, be patient, the startup time will be displayed after the startup is complete (the following time is not the first startup time): ```shell [03:51:02] [Server thread/INFO]: Time elapsed: 36394 ms [03:51:02] [Server thread/INFO]: Done (52.927s)! For help, type \"help\" ``` Next, you can connect after launching the client on the PC, we recommend using the third party client launcher HMCL (download link https://hmcl.huangyuhui.net/download/). Once the download is complete, launch HMCL: ```shell java jar HMCL 3.5.5.jar ``` You can download ``1.20.1`` version directly in the launcher and configure the game account, then you can enter the game, after entering the game, enter the server IP (LPi4A's IP) to add the server to connect (make sure that the computer and LPi4A are under the same network), the effect is as follows: ![mc_server_menu](./../../../../zh/lichee/th1520/lpi4a/assets/application/mc_server_menu.png) ![mc_server_use](./../../../../zh/lichee/th1520/lpi4a/assets/application/mc_server_use.png) > Note that if you want to change back to the original version of the JDK, run: > ```shell. > sudo rm /usr/bin/java > sudo ln s /opt/jdk_19/bin/java /etc/alternatives/java > ``` ## Wine CE First download [here](https://gitee.com/wine ce/wine ce/releases/tag/v8.9) the `wine ce_dlls_8.9.0.all.tar.xz`, `wine ce_core_8.9.0.riscv64.tar.xz` files. Both files are assumed to be downloaded to the user's home directory (the latest version is 8.9 at the time of writing this document). Then follow the steps in the documentation to install them: ```shell sudo apt install fonts liberation fonts wine glib networking libpulse0 gstreamer1.0 plugins good gstreamer1.0 x libaa1 libaom3 libasound2 plugins libcaca0 libcairo gobject2 libcodec2 1.0 libdav1d6 libdv4 libgdk pixbuf 2.0 0 libgomp1 libgpm2 libiec61883 0 libjack jackd2 0 libmp3lame0 libncurses6 libncursesw6 libnuma1 libodbc2 libproxy1v5 libraw1394 11 librsvg2 2 librsvg2 common libsamplerate0 libshine3 libshout3 libslang2 libsnappy1v5 libsoup2.4 1 libsoxr0 libspeex1 libspeexdsp1 libtag1v5 libtag1v5 vanilla libtwolame0 libva drm2 libva x11 2 libva2 libvdpau1 libvkd3d shader1 libvkd3d1 libvpx7 libwavpack1 libwebpmux3 libx265 199 libxdamage1 libxvidcore4 libzvbi common libzvbi0 mesa va drivers mesa vdpau drivers va driver all vdpau driver all vkd3d compiler sudo tar Jxvf wine ce_core_8.9.0.riscv64.tar.xz C /opt/ sudo tar Jxvf wine ce_dlls_8.9.0.all.tar.xz C /opt/ sudo ln sf /opt/wine ce/bin/wine /usr/bin/wine sudo ln sf /opt/wine ce/bin/winecfg /usr/bin/winecfg rm rf ~/.wine ``` Next some initialization settings: ```shell winecfg ``` The settings used here are as follows: ![wine_ce_settings](./../../../../zh/lichee/th1520/lpi4a/assets/application/wine_ce_settings.png) Once the settings are complete, you can run programs under Windows, such as the command here to run Notepad under Windows: ```shell wine notepad.exe ``` ![wine_ce_use](./../../../../zh/lichee/th1520/lpi4a/assets/application/wine_ce_use.png) ## Use optimized GCC toolchain If you find problems with experimental features, you can report [issue](https://github.com/revyos/revyos/issues). Installation steps ```shell # Add optimization source sudo sed i '1ideb https://mirror.iscas.ac.cn/revyos/revyos c910v/ revyos c910v main' /etc/apt/sources.list # update software sudo apt update # install gcc 10 or gcc 13 sudo apt install y build essential # gcc 10 sudo apt install y gcc 13 g++ 13 # gcc 13 # Restart to avoid other problems sudo reboot ``` Test gcc 10 (gcc10.4 enables xtheadc+v0p7) ```shell gcc v Using built in specs. COLLECT_GCC gcc COLLECT_LTO_WRAPPER /usr/lib/gcc/riscv64 linux gnu/10/lto wrapper Target: riscv64 linux gnu Configured with: ../src/configure v with pkgversion 'Debian 10.4.0 8revyos2.3' with bugurl file:///usr/share/doc/gcc 10/README.Bugs enable languages c,ada,c++,go,d,fortran,objc,obj c++,m2 prefix /usr with gcc major version only program suffix 10 program prefix riscv64 linux gnu enable shared enable linker build id libexecdir /usr/lib without included gettext enable threads posix libdir /usr/lib enable nls enable clocale gnu enable libstdcxx debug enable libstdcxx time yes with default libstdcxx abi new enable gnu unique object disable libitm disable libsanitizer disable libquadmath disable libquadmath support enable plugin enable default pie with system zlib enable libphobos checking release with target system zlib auto enable objc gc auto enable multiarch disable werror disable multilib with arch rv64gcv0p7_zfh_xtheadc with abi lp64d enable checking release build riscv64 linux gnu host riscv64 linux gnu target riscv64 linux gnu Thread model: posix Supported LTO compression algorithms: zlib zstd gcc version 10.4.0 (Debian 10.4.0 8revyos2.3) ``` Test gcc 13 (gcc13.2 enables xthead extension) ```shell gcc 13 v Using built in specs. COLLECT_GCC gcc 13 COLLECT_LTO_WRAPPER /usr/libexec/gcc/riscv64 linux gnu/13/lto wrapper Target: riscv64 linux gnu Configured with: ../src/configure v with pkgversion 'Debian 13.2.0 1revyos1' with bugurl file:///usr/share/doc/gcc 13/README.Bugs enable languages c,ada,c++,go,d,fortran,objc,obj c++,m2 prefix /usr with gcc major version only program suffix 13 program prefix riscv64 linux gnu enable shared enable linker build id libexecdir /usr/libexec without included gettext enable threads posix libdir /usr/lib enable nls enable clocale gnu enable libstdcxx debug enable libstdcxx time yes with default libstdcxx abi new enable gnu unique object disable libitm disable libquadmath disable libquadmath support enable plugin enable default pie with system zlib enable libphobos checking release with target system zlib auto enable objc gc auto enable multiarch disable werror disable multilib with arch rv64gc_zfh_xtheadba_xtheadbb_xtheadbs_xtheadcmo_xtheadcondmov_xtheadfmemidx_xtheadfmv_xtheadint_xtheadmac_xtheadmemidx_xtheadmempair_xtheadsync with abi lp64d enable checking release build riscv64 linux gnu host riscv64 linux gnu target riscv64 linux gnu with build config bootstrap lto lean enable link serialization 16 Thread model: posix Supported LTO compression algorithms: zlib zstd gcc version 13.2.0 (Debian 13.2.0 1revyos1) ``` gcc 10/gcc 13 differences: Except for v0p7, other optimizations can use gcc 13 instead of gcc 10. The latter optimization can report problems on the mainline, which is a function that has been mainlined. ## SuperTuxKart SuperTuxKart is a 3D open source arcade racer with a variety characters, tracks, and modes to play. It can also be experienced on LPi4A by compiling the source code: First install dependencies: ```shell sudo apt get install build essential cmake libbluetooth dev libsdl2 dev \\ libcurl4 openssl dev libenet dev libfreetype6 dev libharfbuzz dev \\ libjpeg dev libogg dev libopenal dev libpng dev \\ libssl dev libvorbis dev libmbedtls dev pkg config zlib1g dev ``` Next, refer to [documentation](https://github.com/supertuxkart/stk code/blob/master/INSTALL.md#building supertuxkart on linux) step to compile: ```shell # clone and configure src git clone https://github.com/supertuxkart/stk code stk code svn co https://svn.code.sf.net/p/supertuxkart/code/stk assets stk assets # go into the stk code directory cd stk code # create and enter the cmake_build directory mkdir cmake_build cd cmake_build # run cmake to generate the makefile cmake .. DBUILD_RECORDER off DNO_SHADERC on #compile make j$(nproc) ``` After compiling, you can find the `supertuxkart` program in the `bin/` folder in the current directory. Just run: ```shell ./bin/supertuxkart ``` The effect is as follows: ![supertuxkart_play](./../../../../zh/lichee/th1520/lpi4a/assets/application/supertuxkart_play.png) ## llama2.c [project_link](https://github.com/karpathy/llama2.c) We can run a small model of Llama 2 by following the steps in the project link documentation. First, clone the project and switch to the changed project directory: ```shell git clone https://github.com/karpathy/llama2.c.git ``` Then download the model.bin file and place it in the specified directory: ```shell wget https://karpathy.ai/llama2c/model.bin P out ``` Then compile and run: ```shell gcc O3 o run run.c lm ./run out/model.bin ``` You can get the following output: ```text <s> Once upon a time, there was a little girl named Lily. She loved to play with her dolls and teddy bea rs. One day, she saw her friend Lucy playing with her favorite doll. Lily: \"Lucy, can I play with you?\" Lucy: \"Sure, but can you be careful with my doll?\" Lily: \"Sure, I promise I won't break her.\" Lucy: \"That's very original. I really love it.\" Lily smiled and showed her doll to her mom. Her mom said, \"That's nice, Lily. Let's put your doll on the shelf and play with her some more.\" From that day on, Lily and her doll played together every day. They were the best of friends and didn 't break anyone's possession. <s> Once upon a time, there was a little boy named Timmy. Timmy loved to eat sandwiches. One day, Timmy' s mom made him a sandwich for lunch. It was so yummy and tasty! But then, something unexpected happen ed. Timmy's little sister spilled some juice on his sandwich. Tim achieved tok/s: 30.955260 ``` You can also modify some compilation parameters to speed things up: ```text sipeed@lpi4a:~/llama2.c$ gcc Ofast fopenmp run.c lm o run sipeed@lpi4a:~/llama2.c$ OMP_NUM_THEADS 4 ./run out/model.bin <s> Once upon a time, there was a boy named Tom. He liked to run fast. One day, he saw a big tree. Under the tree, he found a hole. Tom was curious. He looked inside and saw something shiny. Tom looked closer, and it was not a shiny thing. It was a key! He was very surprised. He took the key and ran home. He showed his mom the key. Tom's mom said the key was for a sneeze. The sneeze was a sneeze. Tom's mom put the key next to her p ocket. Tom said, \"Now you can have a sneeze too!\" Tom put his nose under his ears. He went home and took a nap. When he woke up, he had a small sneeze from the key. It was not food or water. Tom was happy and laughed. <s> Once upon a time, there was a bunny. The bunny was very restless and wanted to explore, so he hopped off his little house. The bunny hopped and hopped until he saw a shiny silver carrot. He was so excited to eat it, he achieved tok/s: 52.043098 ``` ### Stable Diffusion [OnnxStream](https://github.com/vitoplantamura/OnnxStream) This example runs Stable Diffusion on LPi4A with this project. First, we need to build the XNNPACK: ```shell git clone https://github.com/google/XNNPACK.git cd XNNPACK git checkout 3f56c91b492c93676a9b5ca4dd51f528b704c309 mkdir build cd build cmake DXNNPACK_BUILD_TESTS OFF DXNNPACK_BUILD_BENCHMARKS OFF .. cmake build . config Release ``` Next, build the Stable Diffusion example: ```shell git clone https://github.com/vitoplantamura/OnnxStream.git cd OnnxStream cd src mkdir build cd build cmake DXNNPACK_DIR <此处替换为clone的XNNPACK存放路径> .. cmake build . config Release ``` Now we have the runnable Stable Diffusion example file ``sd``, run with the following parameters: ```shell . /sd models path . rpi ``` Where ` models path` is the model file downloaded from the project's Release page, which can be placed in the directory where the `sd` file is located. The runtime configuration is as follows: ```shell [start] positive_prompt: a photo of an astronaut riding a horse on mars negative_prompt: ugly, blurry output_png_path: . /result.png steps: 10 ``` The result is the `result.png` file, and the image from the above prompt is as follows: ![onnxstream_result](./../../../../zh/lichee/th1520/lpi4a/assets/application/onnxstream_result.png) ## PSP Simulator [Project address](https://github.com/hrydgard/ppsspp) This example runs the PSP simulator on LPi4A through this project. Firstly, we need to build PPSSPP: ```shell #Install the required packages first sudo apt install build essential cmake libgl1 mesa dev libsdl2 dev libvulkan dev mesa common dev libglu1 mesa dev libsdl2 dev libcurl4 openssl dev git clone recurse submodules https://github.com/hrydgard/ppsspp.git cd ppsspp git submodule update init recursive git pull rebase https://github.com/hrydgard/ppsspp.git cmake . make j4 ``` Compilation may take some time, and successful compilation occurs when the following output occurs: ```shell sipeed@lpi4a:~/ppsspp$ make j4 [ 0%] Built target unix_based_hardware_detection [ 0%] Built target utils [ 0%] Built target gason [ 1%] Built target snappy [ 1%] Built target cityhash [ 1%] Built target vma [ 2%] Built target png17 [ 3%] Built target udis86 [ 3%] Built target basis_universal [ 16%] Built target libzip [ 16%] Built target glew [ 16%] Built target sfmt19937 [ 17%] Built target kirk [ 18%] Built target xbrz [ 18%] Built target xxhash [ 19%] Generating something_that_never_exists [ 21%] Built target miniupnpc [ 25%] Built target libzstd_static Could NOT find Git (missing: GIT_EXECUTABLE) CMake Warning at git version.cmake:16 (message): git not found, unable to include version. [ 25%] Built target GitVersion [ 25%] Built target GenericCodeGen [ 25%] Built target OGLCompiler [ 25%] Built target OSDependent [ 31%] Built target armips [ 31%] Built target spirv cross core [ 34%] Built target rcheevos [ 35%] Built target cpu_features [ 35%] Built target discord rpc [ 36%] Built target spirv cross glsl [ 41%] Built target MachineIndependent [ 41%] Built target spirv cross cpp [ 41%] Built target spirv cross msl [ 41%] Built target spirv cross hlsl [ 41%] Built target glslang [ 42%] Built target SPIRV [ 58%] Built target Common [ 59%] Built target native [ 95%] Built target Core [100%] Built target PPSSPPSDL ``` After installation, you can try running it (in root mode)： ```shell ./PPSSPPSDL ``` As shown in the figure: ![game_result](./../../../../zh/lichee/th1520/lpi4a/assets/application/psp1.png) Game download: [PSP game Download](https://playdreamcreate.com/) Download completed: We only need to use the EBOOT.PBP file in the compressed package 1. If using a graphical interface, extract directly 2. If using the command line, you need to change the compressed package to a zip suffix before decompressing it ```shell Mv [compressed package name] [compressed package name]. zip Unzip [compressed package name]. zip ``` Start the game: Open EBOOT.PBP under the PPSSPPSDL command ```shell ./PPSSPPSDL ./game/01/EBOOT.PBP ``` The operation effect is shown in the figure: ![game_result](./../../../../zh/lichee/th1520/lpi4a/assets/application/psp_2.png) ![game_result](./../../../../zh/lichee/th1520/lpi4a/assets/application/psp_3.png) ## Use of OpenCV First, install the dependencies and the Python 3 environment ```shell sudo apt install python3 python3 pip sudo apt install python3 opencv sudo apt install libqt5gui5 gles ``` OpenCV reads image demo: ```shell #!/bin/bash import cv2 img2 cv2.imread('aContour.jpg', cv2.IMREAD_UNCHANGED) cv2.namedWindow('show_img', 0) # 定义窗口名称，三个函数（namedWindow、 resizeWindow、 imshow）中窗口名称要一致 cv2.resizeWindow('show_img', 736, 416) cv2.imshow(\"show_img\",img2) cv2.waitKey(0) cv2.destroyAllWindows() cv2.destroyWindow(\"show_img\") ``` Run program: ```shell python3 show_pic.py ``` Running results: ![opencv_result](./../../../../zh/lichee/th1520/lpi4a/assets/application/opencv_o.png) PIL numpy opencv comprehensive test demo: ```shell #!/bin/bash from typing import List, Any, Tuple import matplotlib.pyplot as plt import cv2 import numpy as np from PIL import Image from PIL import ImageFilter im Image.open('a.jpg') om im.filter(ImageFilter.CONTOUR) om.save('aContour.jpg') b np.random.randint(0, 255, (200, 300), dtype np.uint8) g np.random.randint(0, 255, (200, 300), dtype np.uint8) r np.random.randint(0, 255, (200, 300), dtype np.uint8) print(b) img np.empty([20,30,3],dtype np.uint8) bgr () rowlist [] collist: List[List[Tuple[Any, Any, Any]]] [] for row in range(200): rowlist [] for col in range(300): bgr (r[row][col],g[row][col],b[row][col]) rowlist.append(bgr) collist.append(rowlist) img np.asarray(collist) img2 cv2.imread('aContour.jpg', cv2.IMREAD_UNCHANGED) cv2.namedWindow('show_img', 0) cv2.resizeWindow('show_img', 736, 416) cv2.imshow(\"show_img\",img2) cv2.waitKey(0) cv2.destroyAllWindows() cv2.destroyWindow(\"show_img\") ``` USB camera demo ```python import cv2 # Open the camera cap cv2.VideoCapture(0) # Check if camera opened successfully if not cap.isOpened(): print(\"Unable to open camera\") exit() # Loop to capture continuous frames while True: # Capture frame by frame ret, frame cap.read() # Check if frame is read correctly if not ret: print(\"Can't receive frame\") break # Display the resulting frame cv2.imshow(\"USB Camera\", frame) # Exit on ESC key if cv2.waitKey(1) 27: break # Release camera and close windows cap.release() cv2.destroyAllWindows() ``` ## Use of NCNN Firstly, the Git source code and installation related dependency libraries ```shell git clone https://github.com/Tencent/ncnn.git cd ncnn git submodule update init sudo apt install build essential git cmake libprotobuf dev protobuf compiler libvulkan dev libopencv dev ``` Compile source code ```shell cd ncnn mkdir p build cd build cmake DCMAKE_BUILD_TYPE Release DNCNN_VULKAN OFF DNCNN_BUILD_EXAMPLES ON .. make j$(nproc) ``` Download the relevant model files and parameters, and place them in the same folder as the executable file： [Download](https://github.com/nihui/ncnn assets) ```shell ~/ncnn/build/example ``` ![ncnn2](./../../../../zh/lichee/th1520/lpi4a/assets/application/ncnn2_o.png) execute ```shell ./nanodet a.jpg ``` Running results ![ncnn_result](./../../../../zh/lichee/th1520/lpi4a/assets/application/ncnn_result_o.png) ![ncnn_result](./../../../../zh/lichee/th1520/lpi4a/assets/application/ncnn_pic_o.png) ## Use of Kdenlive Installation steps: ```shell sudo apt update sudo apt install libqt5gui5 gles sudo apt install kdenlive ``` If kdenlive installed through the commands above can't operate properly, run the following command instead: ```shell sudo apt update sudo apt reinstall libqt5gui5 gles sudo apt reinstall kdenlive ``` After the installation is complete, you can use the command to open kdenlive: ```shell kdenlive ``` The video editing view is as follows: ![kdenlive_use](./../../../../zh/lichee/th1520/lpi4a/assets/application/kdenlive_use.png) ## GStreamer GStreamer is a pipeline based multimedia framework based on GObject and written in C. It is designed to be used with a wide variety of applications and applications. With GStreamer, it is easy to create a wide range of multimedia capable components, including simple audio playback, audio and video playback, recording, streaming and audio editing. Based on the pipelined design , you can create many multimedia applications such as video editors , streaming media broadcasting and media players and so on . Next, a demo showing how to run GStreamer on LPi4A. First, you need to install the relevant dependencies: ```shell sudo apt install git build essential libgstreamer* gstreamer1.0 tools ``` Then pull the relevant source code repository ```shell git clone https://gitlab.freedesktop.org/gstreamer/gst docs ``` Go to the `gst docs/examples/tutorials` directory and compile, we'll get the `basic tutorial 1` executable ```shell cd gst docs/examples/tutorials gcc basic tutorial 1.c o basic tutorial 1 `pkg config cflags libs gstreamer 1.0` ``` After successful compilation, an executable program will be generated in the current directory, use the following command to run ```shell ./basic tutorial 1 ``` ![gstreamer_demo](./../../../../zh/lichee/th1520/lpi4a/assets/application/gstreamer_demo.png) ## Kicad **Note, only versions 20231023 and above support Kicad!** First install Kicad: ```shell sudo apt update sudo apt install kicad ``` After installation, run the following commands before launching Kicad: ```shell sudo switch gl gl4es rm ~/.cache ``` Launch Kicad: ```shell kicad ``` ![kicad_startpage](./../../../../zh/lichee/th1520/lpi4a/assets/application/kicad_startpage.png) ![kicad_pcbview](./../../../../zh/lichee/th1520/lpi4a/assets/application/kicad_pcbview.png) After using Kicad, run these commands to avoid compatibility issues: ```shell sudo switch gl mesa rm ~/.cache ``` ## KODI Install and launch directly: ```shell sudo apt install kodi kodi ``` ![kodi_homepage](./../../../../zh/lichee/th1520/lpi4a/assets/application/kodi_homepage.png) ![kodi_iconmenu](./../../../../zh/lichee/th1520/lpi4a/assets/application/kodi_iconmenu.png) ![kodi_settings](./../../../../zh/lichee/th1520/lpi4a/assets/application/kodi_settings.png) ## Other Contributions are welcome~ You can get ￥5~150 ($1~20) coupon if your contribution is accepted!"},"/hardware/en/lichee/th1520/lpi4a/7_develop_revyos.html":{"title":"revyos SDK","content":" title: revyos SDK keywords: Linux, Lichee, TH1520, SBC, RISCV update: date: 2023 07 21 version: v1.2 author: ztd content: Update English docs date: 2023 07 03 version: v1.1 author: ztd The SDK used by Sipeed is the one in this document. The SDK is built locally using `make` to configure the build environment. The following build process runs on ubuntu 22.04, so please reserve about 20 gigabytes of space. ## Build environment configuration First, install the required packages and set the environment variables. ```bash export xuetie_toolchain https://occ oss prod.oss cn hangzhou.aliyuncs.com/resource//1663142514282 export toolchain_file_name Xuantie 900 gcc linux 5.10.4 glibc x86_64 V2.6.1 20220906.tar.gz export toolchain_tripe riscv64 unknown linux gnu export ARCH riscv export nproc 12 #Please set according to their own CPU configuration, the document uses cpu i5 11400 mkdir th1520_build && cd th1520_build export GITHUB_WORKSPACE \"~/th1520_build\" #The assumptions in this article are downloaded to the user's directory and can be changed according to your needs. sudo apt update && \\ sudo apt install y gdisk dosfstools g++ 12 riscv64 linux gnu build essential \\ libncurses dev gawk flex bison openssl libssl dev tree \\ dkms libelf dev libudev dev libpci dev libiberty dev autoconf device tree compiler sudo update alternatives install \\ /usr/bin/riscv64 linux gnu gcc riscv64 gcc /usr/bin/riscv64 linux gnu gcc 12 10 sudo update alternatives install \\ /usr/bin/riscv64 linux gnu g++ riscv64 g++ /usr/bin/riscv64 linux gnu g++ 12 10 ``` **Note: When clone the following repo, please check whether it is the corresponding branch:** **kernel branch is lpi4a** **uboot branch is lpi4a**. **opensbi branch is lpi4a** ## Build kernel First, please clone the used repo and create the corresponding folder (the following paths assume that the root directory is under the user directory). ```shell git clone https://github.com/revyos/thead kernel.git kernel ``` Configuring the compilation toolchain ```shell wget ${xuetie_toolchain}/${toolchain_file_name} tar xvf ${toolchain_file_name} C /opt export PATH \"/opt/Xuantie 900 gcc linux 5.10.4 glibc x86_64 V2.6.1/bin:$PATH\" ``` Create the installation target directory ```shell mkdir rootfs && mkdir rootfs/boot ``` Build the kernel ```shell pushd kernel make CROSS_COMPILE ${toolchain_tripe} ARCH ${ARCH} revyos_defconfig make CROSS_COMPILE ${toolchain_tripe} ARCH ${ARCH} j$(nproc) make CROSS_COMPILE ${toolchain_tripe} ARCH ${ARCH} j$(nproc) dtbs if [ x\"$(cat .config grep CONFIG_MODULES y)\" x\"CONFIG_MODULES y\" ]; then sudo make CROSS_COMPILE ${toolchain_tripe} ARCH ${ARCH} INSTALL_MOD_PATH ${GITHUB_WORKSPACE}/rootfs/ modules_install j$(nproc) fi #sudo make CROSS_COMPILE ${toolchain_tripe} ARCH ${ARCH} INSTALL_PATH ${GITHUB_WORKSPACE}/rootfs/boot zinstall j$(nproc) ``` Build perf (build as needed) ```shell make CROSS_COMPILE riscv64 unknown linux gnu ARCH riscv LDFLAGS static NO_LIBELF 1 NO_JVMTI 1 VF 1 C tools/perf/ sudo cp v tools/perf/perf ${GITHUB_WORKSPACE}/rootfs/sbin/perf thead ``` Record commit id ```shell git rev parse HEAD > kernel commitid sudo cp v kernel commitid ${GITHUB_WORKSPACE}/rootfs/boot/ ``` Install kernel, device tree to target directory ```shell sudo cp v arch/riscv/boot/Image ${GITHUB_WORKSPACE}/rootfs/boot sudo cp v arch/riscv/boot/dts/thead/{light lpi4a.dtb,light lpi4a 16gb.dtb} ${GITHUB_WORKSPACE}/rootfs/boot/ popd ``` After that, you only need to copy or overwrite the contents of the rootfs to the corresponding directory. Note that the kernel image and kernel module directories must correspond to each other, or else the peripheral functions will be disabled due to the missing kernel module. Starting from commit `c56347a43e850de287a2249d3d9118910718527b`, the kernel defaults to include a 16GB memory device tree, so 8G/16G share one kernel, with only uboot being different. ## Building uboot Note that at this point, you are still in the th1520_build directory and have already configured the environment variables and toolchain, refer to building the kernel for the steps. ```shell git clone https://github.com/revyos/thead u boot.git uboot ``` Note that at this point, you are still in the th1520_build directory and have already configured the environment variables and toolchain, refer to building the kernel for the steps. ```shell pushd uboot # Build uboot for 16G memory version make light_lpi4a_16g_defconfig make CROSS_COMPILE ${toolchain_tripe} ARCH ${ARCH} j$(nproc) find . name \"u boot with spl.bin\" xargs I{} cp av {} ${GITHUB_WORKSPACE}/rootfs/u boot with spl lpi4a 16g.bin make clean # Build uboot for 8G memory version make light_lpi4a_defconfig make CROSS_COMPILE ${toolchain_tripe} ARCH ${ARCH} j$(nproc) find . name \"u boot with spl.bin\" xargs I{} cp av {} ${GITHUB_WORKSPACE}/rootfs/u boot with spl lpi4a.bin make clean popd ``` When flashing, pay attention to flash the uboot corresponding to the development board you are using. When flashing, please pay attention to the command you use. If the image version you are using is `0912` or above, you only need to run the following command to upgrade uboot: ```shell sudo ./fastboot flash uboot u boot with spl lpi4a 16g.bin ``` Check the output files ```shell tree ${GITHUB_WORKSPACE}/rootfs ``` ## Build opensbi Note that at this point, you are still in the th1520_build directory and have already configured the environment variables and toolchain, refer to building the kernel for the steps. ```shell git clone https://github.com/revyos/thead opensbi.git opensbi ``` Then start executing the compile command ```shell pushd opensbi make PLATFORM generic ARCH ${ARCH} CROSS_COMPILE ${toolchain_tripe} sudo install D p m 644 build/platform/generic/firmware/fw_dynamic.bin \\ \"${GITHUB_WORKSPACE}/rootfs/boot/\" popd ``` Checking the output files ```shell tree ${GITHUB_WORKSPACE}/rootfs ``` Pack the kernel, uboot, opensbi related files from the current build into a zip archive. ```shell tar zcvf kernel.tar.gz rootfs ``` To use the build files, just replace the files in the zip package to the appropriate locations. Delete the files to be replaced in boot.ext4, then the files under rootfs/boot/ are put into boot.ext4; Replace rootfs/lib/modules/ with the /lib/modules/ directory in rootfs.ext4; If you have built perf, replace the files under rootfs/sbin with the files under /sbin in rootfs.ext4; Just burn uboot directly. ## GStreamer Player Adaptation Documentation with PTG omxil Library Support ### Overview PTG's OpenMAX IL library (hereinafter referred to as vpu omxil) enables the LicheePi 4A to smoothly hard decode 4k 60fps video, so how to use this library? This article will mainly introduce the integration and use of the Parole player on the LicheePi 4A development board, users can follow this article to understand the process of adapting to the LicheePi 4A Take the hard decoding of h264 as an example, the workflow of the hard decoding of the video is shown in the following figure ```text + + + + + + + + + + + + video stream + > omxh264dec + > video sink + + > player + + + + + + + GStreamer + + + GStreamer +++ ++ ++ + v + vpu omxil + + + vpu omxil +++ vpu omxil +++ vpu omxil + v + kernel module (driver) + + + kernel module (driver) +++ v hardware ``` 1. the video stream is read in by the GStreamer and then goes through a series of pre processing before being sent to the GStreamer's decoder `omxh264dec`. 2. omxh264dec calls a dynamic library, the vpu omxil library provided by PTG, which accesses the hardware (kernel module) through the driver to perform hard decoding. 3. the decoded stream is transferred to the video sink of GStreamer and rendered by the player ### GStreamer omxh264dec decoding test The omxh264 decoding section is separated out and has the following general structure ```text + + + + + + + + + omxh264dec + + GStreamer + + + omxh264dec + + v + + + + vpu omxil vpu omxil + + libomxil bellagio + + + libomxil bellagio + v + memalloc vc8000 hantrodec vidmem kernel modules + + + kernel modules +++ v kernel modules +++ v ``` We build the chain shown in bottom up order. The main purpose of this section is to get the omxh264dec decoder up and running, and does not deal with outputting screens, etc. The main purpose of this section is to get the omxh264dec decoder running. #### 1. Driver Compilation, Installation, and Hardware Access Setup Hard decoding requires access to the hardware, and access to the hardware requires a driver, so you need to compile and install the driver. ##### 1.1 Compile driver PTG provides the driver source: https://gitee.com/thead yocto/vpu vc8000e kernel https://gitee.com/thead yocto/vpu vc8000d kernel https://gitee.com/thead yocto/video_memory ##### 1.2 Install the driver ```shell # depmod analyzes the dependencies of loadable modules and adds a modules.dep file to /lib/modules/<kernel version> for subsequent modprobe use sudo depmod a sudo modprobe vidmem vc8000 hantrodec memalloc ## If you are having trouble installing modprobe, try using insmod to install it. #cd /usr/lib/modules/$(uname r) #sudo insmod $(find . name *vidmem.ko*) #sudo insmod $(find . name *vc8000.ko*) #sudo insmod $(find . name *hantrodec.ko*) #sudo insmod $(find . name *memalloc.ko*) # Optional: set bootloader module echo e \"\\nvidmem\\nhantrodec\\nmemalloc\\nvc8000\\n\" sudo tee a /etc/modules > /dev/null ``` ##### 1.3 Setting Hardware Access Privileges After installing the kernel module, three device files, hantrodec vidmem vc8000, appear in the /dev directory. By default, users do not have access rights to these files. If you do not change the permissions, non root users will get an error when opening the omxil library. ```shell # Execute the shell once. cd /dev sudo chmod 666 hantrodec vidmem vc8000 # Long term cat << EOF sudo tee /lib/udev/rules.d/70 hantro.rules > /dev/null KERNEL \"vidmem\", MODE \"0666\" KERNEL \"hantrodec\", MODE \"0666\" KERNEL \"vc8000\", MODE \"0666\" EOF ``` ##### RevyOS Adaptation Records To get the kernel module for a specific version of RevyOS, go to [revyos/thead kernel](https://github.com/revyos/revyos/wiki/%E6%94%AF%E6%8C%81 PTG omxil %E5%BA%93%E7%9A% 84 GStreamer %E6%92%AD%E6%94%BE%E5%99%A8%E9%80%82%E9%85%8D%E6%96%87%E6%A1%A3), and download the artifacts from the GitHub CI #### 2. Install vpu omxil and adjust the configuration First, download and extract vpu omxil into /usr/lib/omxil/: [vpu omxil_1.2.1.tar.gz](https://drive.google.com/file/d/1pYgCVI7WltfpskltJ RqzVUCEC21FS56/ edit?pli 1). As shown below, it is required: 1. register the OpenMax component from vpu omxil to libomxil bellagio 2. gst omx (this package provides the omxh264dec decoder) You also need to know the name of the component you are calling when you call libomxil bellagio. ```text + + + + + + gst omx + > libomxil bellagio + > vpu omxil + + + + + + ``` ##### 2.1 Registering components from vpu omxil to libomxil bellagio ```shell sudo apt install libomxil bellagio bin libomxil bellagio0 # Register the component omxregister bellagio v /usr/lib/omxil/ ``` ##### 2.2 Adjusting gstomx.conf settings Adjust the settings of gstomx.conf so that the decoder omxh264dec calls the correct components, see the patch for gst omx: [gst omx 01 add libomxil config.patch](https://gist.github.com/Sakura286/26777ea8204c1819885e093806a4f7ca#file gst omx 01 add libomxil config patch) #### 3. Add dmabuf patch Please check the dmabuf patch for gst omx provided by PTG: [gst omx 02 set dec out port dmabuf.patch](https://gist.github.com/Sakura286/26777ea8204c1819885e093806a4f7ca#file gst omx 02 set dec out port dmabuf patch) #### 4. GStreamer decoding preliminary test ```shell sudo apt install gstreamer1.0 omx generic gstreamer1.0 omx bellagio config gstreamer1.0 plugins bad gstreamer1.0 plugins base gstreamer1.0 gl gstreamer1.0 plugins good gstreamer1.0 tools # 1 Basic decoding gst launch 1.0 filesrc location <test.mp4> ! qtdemux ! h264parse ! omxh264dec ! videoconvert ! fakesink sync false # 2 Display fps in terminal # Reference: https://stackoverflow.com/questions/73948308 gst launch 1.0 filesrc location <test.mp4> ! qtdemux ! h264parse ! omxh264dec ! videoconvert ! fpsdisplaysink video sink fakesink text overlay false sync false v 2>&1 ``` `fakesink` swallows the previous video stream in its entirety and doesn't output the picture (thus not losing performance in the video sink part), but in combination with fpsdisplaysink you can read the decoding speed. The normal log is as follows: ```shell Setting pipeline to PAUSED ... [DBGT] vc8kdec compiled without trace support (ENABLE_DBGT_TRACE switch not enabled) Pipeline is PREROLLING ... Redistribute latency... OMX ! decoder_get_parameter OMX_ErrorNoMore (2) Pipeline is PREROLLED ... Setting pipeline to PLAYING ... New clock: GstSystemClockRedistribute latency... 0:01:39.5 / 0:01:49.4 (90.9 %) ``` **[TIP]** If there is [omxh264dec omxh264dec0: Could not initialize supporting library.](https://gist.github.com/Sakura286/ 015fae6792e160268db7ad8a697dd2df), you can install `gst omx`, `libomxil bellagio` and `debug symbol` package related to `libc6`, and start the above commands with `gdb` for debugging. When debugging, break `DWLInit` and then break `open`, depending on which part of `open` is wrong. ##### RevyOS adaptation log During the adaptation of RevyOS, the following three reasons were found for the failure of initializing dynamic libraries: 1. the toolchain used to compile vpu omxil is not compatible with the current system 2. vpu omxil was not registered with `omxregister bellagio`. 3. not adjusting permissions on devices like `hantrodec`, `vc8000`, `vidmem` in `/dev` directory. ### B. Selecting a suitable GStreamer video sink The `video sink` is the last step of the video stream in the whole [GStreamer pipeline](https://gstreamer.freedesktop.org/documentation/tutorials/basic/concepts.html), and its role is generally to output the video stream to the screen. The `fakesink` in the previous section is just a special `video sink` to test that the decoder is working correctly, [optional video sink](https://gstreamer.freedesktop.org/documentation/tutorials/basic/platform) specific elements.html?gi language c) are very numerous, common ones are `autovideosink`, `ximagesink`, `xvimagesink`, `fbdevsink`, `waylandsink`, `glimagesink`, `gtkglsink` and so on. gtkglsink`, etc. They are each in different plugin packages and need to be installed as appropriate: **video sink** **Package name** waylandsink gtkglsink waylandsink gtkglsink waylandsink gstreamer1.0 plugins bad fbdevsink gstreamer1.0 plugins bad autovideosink gstreamer1.0 plugins good gtkglsink fbdevsink gstreamer1.0 plugins bad gtkglsink gstreamer1.0 plugins good gstreamer1.0 plugins good gstreamer1.0 plugins good ximagesink \\ xvimagesink gstreamer1.0 plugins base glimagesink gstreamer1.0 plugins base \\ gstreamer1.0 gl **[TIP]** Use `gst inspect 1.0 <video sink name>` to see what options are available for the corresponding video sink. **[TIP]** Add ` gst debug level <lv>` to get more [output logs] (https://gstreamer.freedesktop.org/documentation/tutorials/basic/debugging tools. html#the debug log), where `<lv>` stands for 1 to 6, and the verbosity level is from low to high, it is recommended to be at level 4 and below, otherwise the log will be very long. Please try different video sinks, and try different plugin parameters, and different environment variables, until you find one that can smoothly harden H264. #### RevyOS adaptation log `**waylandsink**`: Since RevyOS now (20230720) uses the Xfce desktop, it is not possible to support Wayland, so `waylandsink` does not work in principle. `**fbdevsink**` and `**ximagesink**`: not working `**xvimagesink**`: via [pipeline graphs](https://gstreamer.freedesktop.org/documentation/tutorials/basic/debugging tools.html#getting pipeline graphs) and logs, we can determine that playbin or autovideosink will automatically call xvimagesink, and after analyzing with perf, we can find that using xvimagesink will inevitably perform a large number of memcpy operations, which will seriously degrade the decoding performance; this problem still exists after obtaining PTG's dmabuf patch. This problem still exists after obtaining PTG's dmabuf patch, so it is not possible to use `**gtkglsink**`: [GTK3 does not support EGL on X11](https://gitlab.gnome.org/GNOME/gtk/ /issues/738), and RevyOS is currently based on x11 and only supports EGL, so it cannot be used. The only thing left is `glimagesink`, according to [Running and debugging GStreamer Applications](https://gstreamer.freedesktop.org/documentation/gstreamer/running), and looking at other examples that use glimagesink, we can guess that we need to explicitly specify the environment variables `GST_GL_API` and `GST_GL_PLATFORM`. Since RevyOS uses a combination of gles2+egl, it was successfully hardened using the following command. ```shell GST_GL_API gles2 GST_GL_PLATFORM egl gst launch 1.0 filesrc location <test.mp4> ! qtdemux ! h264parse ! omxh264dec ! videoconvert ! fpsdisplaysink video sink glimagesink sync false ``` However, GStreamer cannot be passed parameters via environment variables when called by the player, so additional meson compilation parameters should be passed when building gst plugins base: ```shell Dgl_api [\\'gles2\\'] Dgl_platform [\\'egl\\'] ``` ### C. Player support After the pipeline of GStreamer is OK, we need to make the player support. Different players use different video sinks, and also have different levels of dependency on gstreamer. When adapting a player, the most important thing to do is to either (i) adapt the player to a validated video sink, or (ii) make the gstreamer pipeline support the video sink specified by the player, which is what we have done in this RevyOS adaptation. ```plain + + + + + + + + + + + + video stream + > omxh264dec + > video sink + + > player + + + + + + GStreamer + + ``` #### RevyOS adaptation log Simple troubleshooting based on [https://gstreamer.freedesktop.org/apps/](https://gstreamer.freedesktop.org/apps/) Available Updated App Name Remarks ❌ Gnash Flash Player ❌ GEntrans Debian Uncovered ❓ 20230226 Kaffeine ❌ Requires a lot of KDE related components ✔️ exists in [riscv64 repository](https://buildd.debian.org/status/package.php?p kaffeine&suite sid) ❌ On Debian amd64 Gnome, the playback window is separate from the control window, and VLC is called by default for playback ❌ Lcdgrilo Debian not included ✔️ 20230218 Parole ✔️ For XFCE ❓ No Wayland support, only x11 support ✔️ Debian amd64 Gnome Verified by ✔️ exists in [riscv64 repository](https://buildd.debian.org/status/package.php?p parole&suite sid) ❌ Songbird Debian not included ❌ Snappy Debian not included ❌ Totem requires GTK3, which does not support EGL on X11 The first player of choice was Totem, but it turns out that Totem can't specify video sinks other than gtkglsink, and RevyOS doesn't support it. I then chose Parole, which is written by GObject, and looked for the method parole_gst_constructed when constructing the parole_gst object, and set the video sink to the glimagesink as verified in the previous section, and the rough adaptation was completed. ### Summary: Adapting to RevyOS 1. Compile the driver module into the kernel, set bootloading, and set device permissions. 2. Package the omxil binary library provided by PTG into th1520 vpu. 1. modified the dependencies of th1520 vpu to depend on packages like gst omx, libomxil bellagio, etc. 2. set some postinstalls. 2. set up some postinstall operations, such as registering components with omxregister bellagio, etc. 3. Modify gst omx 1. added support for vpu omxil component in config 2. apply dmabuf patch 3. add support for h265 vp9. 4. 4. modify gst base compile time gl support to gles2+egl. 5. modify parole to support gl. 5. modify parole to support glimagesink ### Resources used in this article Patch collection: https://gist.github.com/Sakura286/26777ea8204c1819885e093806a4f7ca PTG omxil library: https://drive.google.com/file/d/1pYgCVI7WltfpskltJ RqzVUCEC21FS56"},"/hardware/en/lichee/th1520/lpi4a/7_develop.html":{"title":"System Development","content":" title: System Development keywords: Linux, Lichee, TH1520, SBC, RISCV, Kernel, SDK, Develop update: date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## Yocto Linux The official development environment is based on yocto and customized by T head, which could be obtained here: https://gitee.com/thead yocto/ This section gives a brief introduction of setuping uilding Linux Yocto environment and use it to build the full image able to run on the development board. ### Setup Yocto Compilation Environment Linux SDK uses Yocto to build images, which runs under Ubuntu 18.04. It is recommended to deploy Yocto under Linux with Docker. Yocto could also be deployed under Ubuntu18.04 directly. (Refer to [T Head曳影1520Yocto用户指南.pdf](https://gitee.com/thead yocto/documents/blob/master/zh/user_guide/T Head%E6%9B%B3%E5%BD%B11520Yocto%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)2.2) This section includes the guide to deploy with Docker only. **It is recommended to reserve 200G disk space and more than 4G memory on the machine. The time cosumed varies because of network situation. Building with a typical Linux configuration (mininal system plus essential basic components) takes about 1.5 hours. (with i5 11400, as only a reference) Install docker with official script \t```bash \tcurl fsSL https://get.docker.com bash s docker mirror Aliyun \t``` Download dockerfile and modify username and ID \tClick here to download [linux dev master.7z](https://gitee.com/thead yocto/documents/blob/master/linux dev master.7z) ，enter `linux dev master` after decompressing，open `Dockerfile` and find following instructions \t```bash \tENV DOCKER_USER2 \"your the same user name asyour host\"` \tENV USER2_ID \"your user id\" \t``` \tChange \"your the same user name as your host\" to the name of user on host OS, \"your user id\" to the corresponding password Setup Docker image environment \t```bash \tdocker build t linux dev base:base . \t``` \tSome errors may occur during downloading packages in this step. You could modify Dockerfile and put off downloading to successfully logining. This Docker image is able to build Linux SDKs released by T Head, such as buildroot, yocto and so on. The default password is `123`. Startup Docker \t```bash \tdocker run u thead dt name linux dev {your_name} v {your_lock_home}:{your_home} linux dev base:base /bin/bash \t``` \t{your\\_name} is the name of your container. Remember not to reuse an existing name. \tIt is possible mount a directory in host with option ` v`, which could serve as a way to share files. {your\\_lock\\_home} is the local path under host, {your\\_home} is the path mounted in Docker. Check started Docker containers. \t```bash \tdocker ps grep linux dev base \t``` then started Docker containers are shown, Login Docker \t```bash \tdocker exec it linux dev {your_name} /bin/bash \t``` Download open source packages (only needed at the first time of building SDK) \tPackages will be downloaded during building the firmware, which could take a long time with a poor network connection. To speed up the process, you could download the packages from Gitee ahead of time. \t```bash \tcd ~ \tgit clone https://gitee.com/thead yocto/yocto downloads.git \t``` Download Yocto building packages \t```bash \tgit clone https://gitee.com/thead yocto/xuantie yocto.git b Linux_SDK_V1.1.2 \t``` Load configuration of targeted device and environment variables (remember to check before building) \t```bash \tcd xuantie yocto \tsource openembedded core/oe init build env thead build/light fm \t``` Create a softlink to downloaded packages in directory downloads in SDK directory. \t```bash \tln s ~/yocto downloads ../downloads \t``` Now the building environment is ready. ### Supported List of Machine/Target In the step above (load environment variables), following message is shown after successfully setuping. ```bash ### Shell environment set up for builds. ### You can now run 'bitbake <target>' Common targets are: thead image linux thead image multimedia thead image gui machines: light beagle light b product light a val light lpi4a ``` Here is the description: target (List of images supported by the SDK): NameDescription thead image linuxTypical configuration of Linux, mininal system with essential basic components thead image multimediaTypical configuration of Linux with video & CV support, mininal system with components of video subsystem (GStreamer etc.) thead image guiAll of above with GUI related components, full image, including applications like Gnome desktop, weston, QT and so on. machines (Board level configuration supported by the SDK): NameDescription light a valTH1520 A EVB Board light b productTH1520 B EVB Board light beaglebeagleV Ahead Development Board light lpi4aLichee Pi 4A Development Board ### Building images Building commands are like following: ```bash MACHINE {machine} bitbake {target} ``` Replace {machine} and {target} with corresponding names in tables above. For example, the command to build a typical Linux image running on LicheePi 4A development board is: ```bash MACHINE light lpi4a bitbake thead image linux ``` #### Problems while building images Caused by poor network, downloading may be slow and even fails at this step. Recommend proxies if possible. Error message: \t```bash \tPlease use a locale setting which supports utf 8. \tPython can't change the filesystem locale after loading so we need a utf 8 when python starts or things won't work. \t``` \tRun following commands first \t```bash \tsudo apt get install locales \tsudo dpkg reconfigure locales \t``` \tThen find `en\\_US.UTF8` in the printed list (approximately the 158th). Type its ID and then press enter. Select this option also in the next step. \tThen run following commands (it is worth adding to `.bashrc` in Docker) \t```bash \tsudo locale gen en_US.UTF 8 \tsudo update locale LC_ALL en_US.UTF 8 LANG en_US.UTF 8 \texport LANG en_US.UTF 8 \t``` \tAfter finishing, there will not be errors during building. Error message: \t```bash \tplease install them in order to proceed: lz4c pzstd zstd \t``` \tSimply install corrsponding dependencies. \t```bash \tsudo apt update && sudo apt install y zstd liblz4 tool \t``` ### Packaging images This repository [light\\_deploy\\_images](https://gitee.com/thead yocto/light_deploy_images/tree/master/tarball) contains serveral pre released images. `sdk.sh` in the repository is suitable to package new built images. Enter `light fm` directory in the built image and move `sdk.sh` here. Run it with `./sdk.sh` and the corresponding image is generated after packaging. For file paths and directory structure of the image, refer to repository [light\\_deploy\\_images](https://gitee.com/thead yocto/light_deploy_images/tree/master/tarball). Finally, copy the built image and related files to the shared directory mounted with option ` v` and the file could be used for burning. Now we have finished building and packaging, resulting with an image able to burn into and run in the development board. ### Build Separately How to build official components released by T head separately OpenSBI Uboot \t```bash \tgit clone https://gitee.com/thead yocto/u boot \tcd u boot \tmake CROSS_COMPILE riscv64 unknown linux gnu ARCH riscv light_lpi4a_defconfig \tmake CROSS_COMPILE riscv64 unknown linux gnu ARCH riscv \t``` \tThe generated firmware is u boot with spl.bin, which could be burnt with fastboot. Kernel ### Device Tree Analysis TODO ### Other References **light_deploy_images Repository：** Includes pre built and burnable Linux images, packaging scripts and other reletive tools. Refer to the repository for more information. Repository Address: [https://gitee.com/thead yocto/light_deploy_images](https://gitee.com/thead yocto/light_deploy_images) **documents Repository: ** Includes all released documentation related to SDK Repository Address: [https://gitee.com/thead yocto/documents](https://gitee.com/thead yocto/documents) ## Mainline How to build mainline version (under developing) ### OpenSBI Download and build ```bash \tgit clone https://github.com/riscv software src/opensbi \tcd opensbi \tmake CROSS_COMPILE riscv64 unknown linux gnu PLATFORM generic \t``` \tGenerated firmware is build/platform/generic/firmware/fw\\_dynamic.bin. Copy it to /boot ### U boot Download and build \t```bash \tgit clone b th1520 https://github.com/dlan17/u boot.git \tcd u boot \tmake CROSS_COMPILE riscv64 unknown linux gnu ARCH riscv light_lpi4a_defconfig \tmake CROSS_COMPILE riscv64 unknown linux gnu ARCH riscv \t``` \tGenerated firmware is u boot dtb.bin. Copy it to /boot Boot mainline U boot (under developing) with on board U boot \tPre burnt U boot has supported Ethernet already, which makes it possible to obtain new U boot image through tftp protocol. \tStartup a tftp instance on the developing machine. Taking Alpine for example, install package `tftp hpa` and enable corresponding service. \t```bash \tapk add tftp hpa \trc update add in.tftp \trc service in.tftp start \t``` \tBy default tftp uses `/var/tftpboot` as the root directory, so copy the new built U boot `u boot dbt.bin` to `/var/tftpboot`. \tConnect UART and Ethernet on LicheePi 4A development board, power it and press any key when following message is shown in serial \t``` \tPress any key to stop autoboot \t``` \tto enter U boot shell. \tType `dhcp` to configure Ethernet card with DHCP protocol. Mainline U boot is expected to be loaded at 0x1c00000, so type \t``` \ttftp 0x1c00000 TFTP_SERVER_IP:u boot dtb.bin \tgo 0x1c00000 \t``` \tin U boot shell to load the new built U boot into 0x1c00000 and jump to it. ### Linux ## OpenWRT TODO ## Andriod TODO ## OpenHarmony TODO ## Others 欢迎投稿～ 投稿接受后可得￥5～150（$1~20）优惠券！"},"/hardware/en/lichee/th1520/lpi4a/6_peripheral.html":{"title":"Peripheral Use","content":" title: Peripheral Use keywords: Linux, Lichee, TH1520, SBC, RISCV, Peripheral update: date: 2023 09 12 version: v1.3 author: ztd content: Update NPU user guide date: 2023 08 18 version: v1.2 author: ztd content: Update JTAG user guide date: 2023 07 21 version: v1.1 author: ztd content: Update English docs date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## SoC related ### CPU frequency `sudo cat /sys/devices/system/cpu/cpu*/cpufreq/cpuinfo_cur_freq ` The unit is KHz. Note that the system comes with a temperature control policy that will downclock the system when it is too idle or too hot. Please maintain good heat dissipation to keep the CPU below 60 degrees for optimal performance. ### Chip temperature `cat /sys/class/thermal/thermal_zone0/temp` Unit is 0.001 degrees Celsius. ### CPU overclocking The TH1520 runs at 1.85GHz by default, but preliminary tests show that about 80% of the chips can run at 2GHz, and about 50% of the chips can pass the stress test at 2GHz. Here is a simple overclocking procedure for reference only, no guarantee for stability and safety. Check the files under `/boot`: ```bash fw_dynamic.bin #opensbi Image #kernel image kernel release #commit id of kernel light_aon_fpga.bin #fw for E902 aon light_c906_audio.bin #fw for C906 audio light lpi4a.dtb #1.85GHz dtb light lpi4a_2Ghz.dtb #2GHz overclock dtb light lpi4a ddr2G.dtb #history dtb ``` Copy `light lpi4a_2Ghz.dtb` and overwrite it with `light lpi4a.dtb`, reboot, and then you can change the maximum frequency after booting. Note that there is a chance that it will not boot after this modification, and then you need to re burn the firmware to recover. If it boots successfully, then you can check the following values to confirm that it has been successfully overclocked: `sudo cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq` ## PWM Take PWM1 which is connected to the cooling fan as an example, you can get the fan speed with the following code: ```bash cat /sys/class/hwmon/hwmon0/pwm1 ``` The PWM speed value ranges from 0 to 255, where a higher value represents a higher fan speed. You can write ```1``` to the PWM enable control for manual speed regulation, and set the fan speed (e.g., 255): ``` echo 0 > /sys/class/hwmon/hwmon0/pwm1_enable echo 255 > /sys/class/hwmon/hwmon0/pwm1 ``` You can enable automatic speed regulation with the following code: ```bash echo 2 > /sys/class/hwmon/hwmon0/pwm1_enable ``` Or stop the fan completely: ```bash echo 0 > /sys/class/hwmon/hwmon0/pwm1_enable ``` ## GPIO The LicheePi 4A has 2x10pin pins on board with 16 native IOs, including 6 normal IOs, 3 pairs of serial ports, and one SPI. > Note: All native IOs of the SOC are at 1.8V level, please pay attention to the level shift. > The serial input side on the pins has been processed with 1/2 voltage divider and can be connected to a 3.3V serial port. The TH1520 SOC has 4 GPIO banks, each with a maximum of 32 IOs: Bank Address kernel io num GPIO0 0xffec005000 456 487 GPIO1 0xffec006000 424 455 GPIO2 0xffe7f34000 392 423 GPIO3 0xffe7f38000 360 391 AO_GPIO 0xfffff41000 328 359 AO_GPIO4 0xfffff52000 296 327 AUDIO_GPIO0xffcb013000 Where the 4Byte (32bit) at offset 0x0 is the GPIO data register and the 4Byte (32bit) at offset 0x4 is the GPIO direction register. The GPIO correspondences of the pins on the LicheePi 4A are(from the perspective of overlooking the front of the BOTTOM plate, TOP is the left side, BOTTOM is the right side): ![io_map](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/io_map.png) > Subject to the labeling of the document, the silkscreen labeling of the internal test version may be incorrect GPIO operation: > Note that pinmux may need to be set in advance. ```bash num xxx echo ${num} > /sys/class/gpio/export echo out > /sys/class/gpio/gpio${num}/direction echo 1 > /sys/class/gpio/gpio${num}/value echo 0 > /sys/class/gpio/gpio${num}/value ``` The mapping of GPIO is shown in the following figure： ![gpio_num](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/gpio_num.png) For example, if you want to operate the 4 GPIOs on the pin, the correspondence is as follows, change the num in the above code to the number corresponding to the GPIO pin you want to operate. numIO Number 427IO 1_3 428IO 1_4 429IO 1_5 430IO 1_6 It is also possible to manipulate registers directly: > devmem can be downloaded and compiled from here: https://github.com/VCTLabs/devmem2/blob/master/devmem2.c ```bash ./devmem 0xffe7f38000 w ``` In system GPIO information view: ```bash sipeed@lpi4a:~$ sudo cat /sys/kernel/debug/gpio ``` Here are the sample results: ![peripheral_gpio_information](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/peripheral_gpio_information.png) Next, taking GPIO1_3 on the baseplate pin as an example, we use libgpiod to operate gpio in user space. First install libgpiod: ```shell sudo apt update sudo apt install libgpiod dev ``` Then run the `vi gpio.c` command, and write the following code to the file: ```c #include <stdio.h> #include <stdlib.h> #include <unistd.h> #include <gpiod.h> int main() { int i; int ret; struct gpiod_chip * chip; struct gpiod_line * line; chip gpiod_chip_open(\"/dev/gpiochip1\"); if(chip NULL) { printf(\"gpiod_chip_open error\\n\"); return 1; } line gpiod_chip_get_line(chip, 3); if(line NULL) { printf(\"gpiod_chip_get_line error\\n\"); gpiod_line_release(line); } ret gpiod_line_request_output(line,\"gpio\",0); if(ret < 0) { printf(\"gpiod_line_request_output error\\n\"); gpiod_chip_close(chip); } for(i 0; i < 10; i++) { gpiod_line_set_value(line,1); sleep(1); gpiod_line_set_value(line,0); sleep(1); } gpiod_line_release(line); gpiod_chip_close(chip); return 0; } ``` Compile with the following command: ```shell gcc gpio.c I /usr/include/ L /usr/lib/riscv64 linux gnu/ lgpiod o gpio ``` Then execute with root privileges: ```shell sudo ./gpio ``` At this time, use a multimeter to measure the IO1_3 pin on the baseplate. You can find that the voltage of the pin changes every second. <! ```bash sipeed@lpi4a:~$ sudo cat /sys/kernel/debug/gpio gpiochip8: GPIOs 296 327, parent: platform/fffff52000.gpio, fffff52000.gpio: AO_GPIO4 gpiochip7: GPIOs 328 359, parent: platform/fffff41000.gpio, fffff41000.gpio: AO_GPIO gpio 332 ( hubswitch ) out hi gpiochip6: GPIOs 360 391, parent: platform/ffe7f38000.gpio, ffe7f38000.gpio: GPIO3 gpiochip5: GPIOs 392 423, parent: platform/ffe7f34000.gpio, ffe7f34000.gpio: GPIO2 gpio 395 ( cs ) out hi ACTIVE LOW gpio 406 ( aon:soc_vdd5v_se_en ) out lo gpio 407 ( spi0 CS0 ) out hi ACTIVE LOW gpio 417 ( Volume Up Key ) in lo IRQ ACTIVE LOW gpio 421 ( aon:soc_wcn33_en ) out lo gpiochip4: GPIOs 424 455, parent: platform/ffec006000.gpio, ffec006000.gpio: GPIO1 gpio 443 ( Volume Down Key ) in hi IRQ ACTIVE LOW gpio 446 ( aon:soc_vbus_en ) out hi gpiochip3: GPIOs 456 487, parent: platform/ffec005000.gpio, ffec005000.gpio: GPIO0 gpio 457 ( spi2 CS0 ) out hi ACTIVE LOW gpio 486 ( aon:soc_vdd_3v3_en ) out hi gpiochip2: GPIOs 488 495, parent: i2c/3 0018, 3 0018, can sleep: IO expend 3 gpio 490 ( regulator hub vdd12 ) out hi gpio 491 ( regulator hub vcc5v ) out hi gpio 492 ( regulator pwr en ) out hi gpio 493 ( aon:soc_lcd0_vdd33_e) out hi gpio 494 ( aon:soc_lcd0_vdd18_e) out hi gpio 495 ( reset ) out hi ACTIVE LOW gpiochip1: GPIOs 496 503, parent: i2c/1 0018, 1 0018, can sleep: IO expend 2 gpio 496 ( aon:soc_cam2_dvdd12_) out lo gpio 501 ( wlan_default_wlan_po) out hi gpio 502 ( bt_default_poweron ) out lo gpiochip0: GPIOs 504 511, parent: i2c/0 0018, 0 0018, can sleep: IO expend 1 gpio 504 ( aon:soc_dvdd12_rgb ) out lo gpio 505 ( aon:soc_avdd28_rgb ) out lo gpio 506 ( aon:soc_dovdd18_rgb ) out lo gpio 507 ( aon:soc_dovdd18_ir ) out lo gpio 508 ( aon:soc_dvdd12_ir ) out lo gpio 509 ( aon:soc_avdd25_ir ) out lo gpio 510 ( aon:soc_cam2_dovdd18) out lo gpio 511 ( aon:soc_cam2_avdd25_) out lo ``` ### Use of gpiod library The GPiod library is a library that can call GPIO in the same user space, making it convenient for users to operate GPIO in applications. Firstly, install and deploy the GPIO library: ```shell sudo apt install wget wget https://git.kernel.org/pub/scm/libs/libgpiod/libgpiod.git/snapshot/libgpiod 2.0.tar.gz tar zxvf libgpiod 2.0.tar.gz cd libgpiod 2.0 sudo apt get install build essential pkg config m4 automake autoconf libtool autoconf archive sudo apt install gcc g++ export CC gcc export CXX g++ #Deploy the relevant files of the library to the project folder: The path after prefix should be changed to the path where the project is located for future operations ./autogen.sh enable tools yes prefix /home/sipeed/mylib_local make sudo make install ``` 如果执行：./autogen.sh enable tools yes prefix /home/sipeed/mylib_local 出现以下错误： ```shell aclocal: warning: couldn't open directory 'm4': No such file or directory #You can execute the following commands mkdir m4 ./autogen.sh enable tools yes prefix /home/sipeed/mylib_local make make install ``` Start operating GPIO: ```shell sudo vim gpio.c #The content of gpio. c is as follows: #include<stdio.h> #include<unistd.h> #include<gpiod.h> #define PIN_IO1_3 3 #define PIN_IO1_4 4 #define PIN_IO1_5 5 int main() { struct gpiod_chip *gchip; struct gpiod_line_info *glinein, *glineout; struct gpiod_line_settings *gline_settings_in, *gline_settings_out; struct gpiod_line_config *gline_config_in, *gline_config_out; struct gpiod_request_config *gline_request_config_in, *gline_request_config_out; struct gpiod_line_request *gline_request_in, *gline_request_out; int offset_in[1] {PIN_IO1_5}; int offset_out[2] {PIN_IO1_3, PIN_IO1_4}; int value; if ((gchip gpiod_chip_open(\"/dev/gpiochip4\")) NULL) { perror(\"gpiod_chip_open\"); return 1; } gline_settings_in gpiod_line_settings_new(); if ((value gpiod_line_settings_set_direction(gline_settings_in, GPIOD_LINE_DIRECTION_INPUT)) ! 0) { perror(\"gpiod_line_settings_set_direction\"); } gline_config_in gpiod_line_config_new(); value gpiod_line_config_add_line_settings(gline_config_in, offset_in, 1, gline_settings_in); gline_request_config_in gpiod_request_config_new(); gline_request_in gpiod_chip_request_lines(gchip, gline_request_config_in, gline_config_in); value gpiod_line_request_get_value(gline_request_in, PIN_IO1_5); printf(\"IO1 5 %d\\n\", value); gline_settings_out gpiod_line_settings_new(); if (gpiod_line_settings_set_direction(gline_settings_out, GPIOD_LINE_DIRECTION_OUTPUT) ! 0) { perror(\"gpiod_line_settings_set_direction\"); } gline_config_out gpiod_line_config_new(); gpiod_line_config_add_line_settings(gline_config_out, offset_out, 2, gline_settings_out); gline_request_config_out gpiod_request_config_new(); gline_request_out gpiod_chip_request_lines(gchip, gline_request_config_out, gline_config_out); value gpiod_line_request_set_value(gline_request_out, PIN_IO1_3, 1); value gpiod_line_request_set_value(gline_request_out, PIN_IO1_4, 0); printf(\"IO1 3 1, IO1 4 0\\n\"); sleep(1); for (int i 0; i < 10; i++) { value gpiod_line_request_get_value(gline_request_in, PIN_IO1_5); printf(\"IO1 5 %d\\n\", value); value gpiod_line_request_set_value(gline_request_out, PIN_IO1_3, 0); value gpiod_line_request_set_value(gline_request_out, PIN_IO1_4, 1); printf(\"IO1 3 0, IO1 4 1\\n\"); sleep(1); value gpiod_line_request_get_value(gline_request_in, PIN_IO1_5); printf(\"IO1 5 %d\\n\", value); value gpiod_line_request_set_value(gline_request_out, PIN_IO1_3, 1); value gpiod_line_request_set_value(gline_request_out, PIN_IO1_4, 0); printf(\"IO1 3 1, IO1 4 0\\n\"); sleep(1); } gpiod_chip_close(gchip); return 0; } ``` Save and compile ```shell gcc I/home/sipeed/mylib_local/include L/home/sipeed/mylib_local/lib o gpio gpio.c lgpiod ``` Some device permissions need to be granted before execution ```shell export LD_LIBRARY_PATH /home/sipeed/mylib_local/lib:$LD_LIBRARY_PATH export PATH /home/sipeed/mylib_local/bin:$PATH sudo chmod o+rw /dev/gpiochip4 sudo chmod o+rw /dev/spidev2.0 #It can be directly executed in an. sh file ``` Run program: ```shell ./gpio ``` The console output is as follows: ```shell sipeed@lpi4a:~/gpio$ ./gpio IO1 5 1 IO1 3 1, IO1 4 0 IO1 5 1 IO1 3 0, IO1 4 1 IO1 5 1 IO1 3 1, IO1 4 0 IO1 5 1 IO1 3 0, IO1 4 1 IO1 5 1 IO1 3 1, IO1 4 0 IO1 5 1 IO1 3 0, IO1 4 1 IO1 5 1 IO1 3 1, IO1 4 0 IO1 5 1 IO1 3 0, IO1 4 1 IO1 5 1 IO1 3 1, IO1 4 0 IO1 5 1 IO1 3 0, IO1 4 1 ``` > ## UART ### System Serial Port The system serial port of the LicheePi 4A is UART0, which is shown on the side pins. You can use a USB to serial module to connect to this serial port, i.e. `U0 RX` and `U0 TX`, taking care of the cross connections and the GND connection. ![ttl_link](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/ttl_link.png) After the connection is completed, you can use serial tools to communicate, we recommend `XShell` and `mobaterm` for Windows and `minicom` for Linux. Set the serial port baud rate to `115200`, then you can log in the serial terminal and do the command operation: > Note: Just after connecting, you can hit several carriage returns to see if there is any response, if there is no response, then check the wiring or serial port configuration. ![ttl_login](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/ttl_login.png) ### General serial port The LicheePi 4A also has UART1/2/3 on the side pins, which can also be operated. Only UART1 is enabled in the default image, other ports may need to reconfigure the device tree for operation. > Note: The SOC serial port level is 1.8V, which is just around the high level threshold of 3.3V, some serial modules may not be able to input/output correctly, we suggest to use our matching serial modules, or fine tune the 3.3V voltage of other serial modules to 2.8V. #### View Serial Devices ```bash ls /dev/ttyS* ``` #### View serial port baud rate and other information ```bash stty F /dev/ttyS1 a ``` #### Set serial port baud rate, data mode ```bash stty F /dev/ttyS1 ispeed 115200 ospeed 115200 cs8 ``` #### Viewing serial port data ```bash cat /dev/ttyS1 ``` #### Send serial port data ```bash echo \"12345\" > /dev/ttyS1 ``` #### Other methods You can also use ``minicom``, or pyserial library for serial port operation, please find the relevant information for users to use. ## I2C There are several I2C devices (I2C0/1/2/3) on the LicheePi 4A, where 0/1/3 is used to connect to the I2C IO expansion chip, and I2C2 is reserved on the external pin. Here we use i2c tools for i2c authentication, which are pre installed in the image. ```bash sipeed@lpi4a:/usr$ ls /sbin/i2c* /sbin/i2c stub from dump /sbin/i2cdetect /sbin/i2cdump /sbin/i2cget /sbin/i2cset /sbin/i2ctransfer ``` List all I2C buses: ```bash sipeed@lpi4a:~$ /sbin/i2cdetect l i2c 0 unknown Synopsys DesignWare I2C adapter N/A i2c 1 unknown Synopsys DesignWare I2C adapter N/A i2c 2 unknown Synopsys DesignWare I2C adapter N/A i2c 3 unknown Synopsys DesignWare I2C adapter N/A i2c 4 unknown Synopsys DesignWare I2C adapter N/A i2c 5 unknown Synopsys DesignWare I2C adapter N/A i2c 6 unknown Synopsys DesignWare I2C adapter N/A i2c 7 unknown DesignWare HDMI N/A ``` Detecting the device on the I2C bus, we can see that the I2C address of PCA9557PW is 0x18, which is consistent with the schematic: ```bash sipeed@lpi4a:~$ sudo /sbin/i2cdetect r y 0 0 1 2 3 4 5 6 7 8 9 a b c d e f 00: 10: UU 20: 30: 40: 50: 60: 70: ``` ![i2c_io](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/i2c_io.png) It is also possible to use `i2cdump` to dump all registers at the specified i2c address, `i2cget` to read the specified register value at the specified i2c address, and `i2cset` to write the specified register value at the specified i2c address. However, since the IO extension chip is already used by the kernel, it is not possible to verify these commands directly. Users can verify it by connecting peripheral devices to I2C2 by themselves. ## SPI There are two SPIs reserved on the LicheePi4A, one on the SPI Flash pads that are blanked out on the back, and one on the pins. ```bash sipeed@lpi4a:~$ ls /dev/spidev2.0 /dev/spidev2.0 ``` <! ### Start Pay attention to the IO drive capability. Licheepi4A requires an external level conversion chip and uses TXS10108E for its own use All programs of this routine are compiled on the board. If cross coding is necessary, the tool chain can be replaced during compilation. The GPIO operation of the following routine is based on the GPIOD library above. #### 1.Download the source code ```shell git clone https://github.com/fffdee/ST7735_for_Licheepi4A.git ``` #### 2.Building the GPIOD library Dependencies required for installation: ```shell sudo apt get install build essential pkg config m4 automake autoconf libtool autoconf archive sudo apt install gcc g++ gpiod cmake ``` Install the GPIOD library (the source file is already installed, and the library path needs to be changed. Please refer to the following steps): ```shell tar zxvf libgpiod 2.0.tar.gz cd libgpiod 2.0 export CC gcc export CXX g++ #Deploy the relevant files of the library to the project folder: The path after prefix should be changed to the path where the project is located for future operations ./autogen.sh enable tools yes prefix /home/sipeed/TFT_demo/ make sudo make install #Installation completed ``` #### 3.Compile and Run ```shell cd TFT_demo cmake . make j4 #授予设备权限，每次开机执行一次即可 . exec.sh ./tft_demo ``` #### Renderings ![效果图1](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/tft_demo.png) > Common ioctl commands for SPI: SPI_IOC_MESSAGE: sends and receives SPI messages. It can be used to read and write data and control devices SPI_IOC_WR_MODE: Set the working mode of the SPI device, such as CPOL and CPHA SPI_IOC_RD_MODE: Reads the working mode of the SPI device SPI_IOC_WR_LSB_FIRST: Sets the byte order of the SPI device, that is, whether the highest bit is transmitted first or the lowest bit is transmitted first SPI_IOC_RD_LSB_FIRST: reads the byte order of the SPI device SPI_IOC_WR_BITS_PER_WORD: sets the data bit width of the SPI device SPI_IOC_RD_BITS_PER_WORD: Used to read the bit width of the SPI device SPI_IOC_WR_MAX_SPEED_HZ: specifies the maximum clock frequency of an SPI device SPI_IOC_RD_MAX_SPEED_HZ: Reads the maximum clock frequency of an SPI device SPI_IOC_WR_MODE32: Sets the 32 bit mode of the SPI device, such as CPOL and CPHA SPI_IOC_RD_MODE32: indicates the 32 bit mode used to read the SPI device The above are some common SPI device ioctl commands, which can be used to configure and control various parameters of the SPI device. Turn on/off SPI device: ```c int open(const char *pathname, int flags); int close(int fd); ``` Header files needed: ```c #include<fcntl.h> #include<unistd.h> ``` Example code: ```c #include <stdint.h> #include <unistd.h> // C 语言标准头文件，定义了 POSIX API 的一部分，如文件操作、进程管理等 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <getopt.h> #include <fcntl.h> // C 语言头文件，定义了文件控制相关的宏和函数 #include <sys/ioctl.h> // C 语言头文件，定义了 ioctl 函数和相关宏 #include <linux/types.h> // Linux 内核头文件，定义了内核中使用的一些基本数据类型 #include <linux/spi/spidev.h> // Linux SPI 子系统头文件，定义了 SPI 设备驱动程序使用的数据结构和 ioctl 命令 #define DATA_NUM 2 // 自定义数据长度 #define CHECK(ret, str) if (ret < 0) {printf(\"%s\\r\\n\", str); return ret;} static uint8_t bits 8; static uint32_t speed 1000000; // 1M Hz static int mode 0; int main(int argc, char *argv[]) { int ret, fd; fd open(\"/dev/spidev2.0\", O_RDWR); CHECK(fd, \"can't open device\"); // 打开具体 spi 设备 mode SPI_MODE_0 SPI_CS_HIGH; ret ioctl(fd, SPI_IOC_WR_MODE32, &mode); //设置 SPI 模式 CHECK(ret, \"can't set spi mode\"); ret ioctl(fd, SPI_IOC_RD_MODE32, &mode); //获取 SPI 模式设置 CHECK(ret, \"can't get spi mode\"); ret ioctl(fd, SPI_IOC_WR_BITS_PER_WORD, &bits); //设置 SPI 的 bit/word CHECK(ret, \"can't set bits per word\"); ret ioctl(fd, SPI_IOC_RD_BITS_PER_WORD, &bits); //获取 SPI 的 bit/word 设置 CHECK(ret, \"can't get bits per word\"); ret ioctl(fd, SPI_IOC_WR_MAX_SPEED_HZ, &speed); //设置 SPI 的最大传输速度 CHECK(ret, \"can't set max speed hz\"); ret ioctl(fd, SPI_IOC_RD_MAX_SPEED_HZ, &speed); //获取 SPI 的最大传输速度设置 CHECK(ret, \"can't get max speed hz\"); printf(\"spi mode: %d\\n\", mode); printf(\"bits per word: %d\\n\", bits); printf(\"max speed: %d Hz (%d KHz)\\n\", speed, speed/1000); //数据传输 uint8_t tx[] {0x11, 0x22}; uint8_t rx[DATA_NUM] {0}; struct spi_ioc_transfer tr { .tx_buf (unsigned long)tx, //定义发送缓冲区指针 .rx_buf (unsigned long)rx, //定义接收缓冲区指针 .len DATA_NUM, .delay_usecs 0, .speed_hz speed, .bits_per_word bits }; ret ioctl(fd, SPI_IOC_MESSAGE(1), &tr); //执行 spidev.c 中 ioctl 的 default 进行数据传输 CHECK(ret, \"can't send spi message\"); printf(\"tx: %.2X %.2X\\r\\n\", tx[0], tx[1]); printf(\"rx: %.2X %.2X\\r\\n\", rx[0], rx[1]); close(fd); return ret; } ``` ## USB Connect the USB SSD: ![usb_ssd_connect](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/usb_ssd_connect.jpg) The corresponding device can be seen in the system: ![usb_ssd_use](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/usb_ssd_use.png) ### USB network card Connect the USB network card: ![usb_lan_connect](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/usb_lan_connect.jpg) 右上角的网络图标会变为已连接有线网的状态： ![usb_lan_use](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/usb_lan_use.png) 终端中使用`sudo ifconfig`命令，也可以看到相应设备的信息： ![check_usb_lan_ip](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/check_usb_lan_ip.png) ### USB Camera Connect the USB camera: ![usb_cam_connect](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/usb_cam_connect.jpg) After installing guvcview, use the appropriate commands to see the image stream from the USB camera: ```shell sudo apt get install guvcview guvcview ``` ![usb_cam_use](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/usb_cam_use.png) You can end the image stream by pressing Ctrl+C or by clicking the quit button on the guvcview window. You can also use fswebcam to dump the USB camera image directly from the command line. ```shell sudo apt get install fswebcam fswebcam /dev/video0 image.jpg ``` To allow the USB camera to automatically save images, a reference script is given below. The script uses the uvccapture tool, which makes it easy to adjust capture parameters as needed. Install this tool first ```shell sudo apt install uvccapture ``` This tool supports various parameters, use ` x y` to adjust the shooting resolution, ` B` to adjust the brightness, ` C` to adjust the contrast, ` S` to adjust the saturation, and ` o` to specify the shooting image storage Path, for specific use, refer to the following script code: ```shell #!/bin/bash # Check if the interval time parameter is passed in if [ z \"$1\" ]; then echo e \"The interval time parameter is not specified, and the default interval is 1 second\" interval 1 else interval $1 the fi # Check if the output file path parameter is passed in if [ z \"$2\" ]; then echo e \"The output file path parameter is not specified, the default output is to the current directory\" output_file \"$PWD\" else output_file $2 the fi # Check whether the number of shots parameter is passed in if [ z \"$3\" ]; then echo e \"The number of shots is not specified, the default is 10 shots\" num_executions 10 else num_executions $3 the fi echo e \"script started, press q to stop\" for ((i 1; i < num_executions; i++)); do echo e \"capture img $i\" uvccapture x640 y480 m o$output_file/$image$i.jpg # Take pictures at specified time intervals sleep $interval # Press the q key to exit read t 1 n 1 key if [[ $key \"q\" ]]; then break the fi done echo e \"Script execution ended\" ``` The above script can also be operated with fswebcam, just make corresponding changes. ### USB Sound Card TODO ## ETH The LicheePi4A has dual Gigabit Ethernet ports, of which Eth0 is also PoE capable. TODO ### PoE The Ethernet 0 interface of LicheePi 4A has PoE function and can be powered by PoE. The PoE power supply module needs to be purchased on its own, and can be found by searching for the keyword \"5V PoE pin\" in the 5V voltage, 35.6mm length specification. When the visual direction is facing the \"POE POWER\" logo, the four pins on the left side of the pin are defined from left to right as: VA1, VA2, VB1, VB2, and on the right side as: GND, 5VIN. ## Audio There are two analog silicon mics on the LicheePi 4A, using the ES7210 CODEC, as well as having on board speakers all the way, and stereo headphones, using the ES8156 CODEC. > Note: The on board speakers and stereo headphones use a mutually exclusive design; when headphones are plugged in, the audio output automatically switches to the headphones and the on board speakers are deactivated. Simple recording and playback tests can be performed using aplay and arecord, note that the onboard speakers are right channel. ```bash #!/bin/bash echo \"Play Test Audio\" aplay /usr/share/sounds/alsa/Side_Right.wav # Record Audio echo \"Start record auido, auto replay after 3 seconds\" arecord Dhw:0,1 d 3 r 48000 f S16_LE t wav test.wav & > /dev/null & sleep 4 # Play Audio aplay test.wav echo \"Start Play\" ``` You can also use alsa related tools, such as `alsamixer`, to do things like volume adjustments. ## HDMI Audio > Note: HDMI audio does not work for earlier mirrors, please upgrade to a newer version to enable HDMI audio function. Tap the speaker icon at the top right corner of the screen to enter Audio mixer, you can see the interface below: ![audiomixer](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/audiomixer.png) The name of the device is **Built in Audio**, i.e. HDMI audio, and you can switch between audio devices by clicking on its corresponding green checkmark icon in this interface, or you can switch between devices by clicking on the small speaker icon directly. If you confirm that the connection is correct and the HDMI monitor you are using supports HDMI audio, but you do not see the corresponding device in the device list, you can try to run the following command: ```shell systemctl user restart pulseaudio.service ``` ## MIPI CSI LicheePi 4A has three camera interfaces, CAM0/CAM1/CAM2, CAM0 is up to 4 lanes, CAM1/2 is 2 lanes, and the default is to use the CSI0 interface to connect to the OV5693 camera. Connections are made as shown below, using the CSI0 connector with the camera's gold finger facing down: ![mipi_csi_connect.jpg](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/mipi_csi_connect.jpg) Currently, we need to burn a dedicated mirror for testing for the time being, download /image/latest_20230714/LPI4A_YOCTO_CAM.zip from [Baidu.com](https://pan.baidu.com/e/1xH56ZlewB6UOMlke5BrKWQ) in the Documentation Mirror Collection page. image file. After burning, go to the /usr/share/csi_hal/ directory and run the following command: ```shell ./cam_demo_simple 2 0 1 0 640 480 1 30 ``` After the completion of the run, you can see in the current directory dump down to the shooting photos, typically named demo_save_img_OV5693_ch0_0_*, resolution of 640\\*480 (currently only supports 640 * 480 resolution), the format is YUV420SP (NV12), the format of the UV component of the interleaving of the storage, bit depth The format is YUV420SP(NV12), under this format, the UV components are interleaved, and the bit depth is 8bit. Under Linux, you can use YUView to set the relevant parameters to view the image; in addition, you can also use python to process the relevant parameters to view the image, the reference code is as follows: ```python import numpy as np import cv2 class nv12_to_jpg: def __init__(self): return def to_jpg(self, yuv_path, resolution): width, height resolution with open(yuv_path, 'rb') as f: yuvdata np.fromfile(f, dtype np.uint8) self.input_file yuv_path cv_format cv2.COLOR_YUV2RGB_NV21 bgr_img cv2.cvtColor(yuvdata.reshape((height*3//2, width)), cv_format) return bgr_img def save(self, img_data, output_path): cv2.imwrite(output_path, img_data) if __name__ \"__main__\": # Example: Convert an image in 10bit raw format to jpg format file_name input(\"Please enter the filename of the raw image:\") input_str input(\"width and hight, separated by spaces:\") width, height map(int, input_str.split()) img nv12_to_jpg() jpg_data img.to_jpg(file_name, (width, height)) img.save(jpg_data, file_name+'nv12tojpg.jpg') ``` ## MIPI DSI LicheePi 4A has MIPI DSI0 interface, supports 4K video output, and can be equipped with 10.1 inch 1280x800 or 1920x1200 screen. Connection method is shown below, both fpc cables are downward connected (the side of the metal contact at the end of the cable is facing downward), in which the adapter plate of the touch screen needs to pay attention to the direction when connecting, make sure that the end of ToLPi4A is connected to the touch soft cable of LPi4A, and the end of ToLcdTP is connected to the screen: FPC Schematic: ![fpc](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/fpc.jpg) Note that before connecting, first dial up the black flap on the interface used to fix the wires, and then dial down after confirming the connection. Touch panel FPC connection: ![tpconnector_on_touchscreen](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/tpconnector_on_touchscreen.jpeg) ![touchconnector_on_board](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/touchconnector_on_board.jpeg) MIPI screen FPC connection: ![mipi_dsi_connect](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/mipi_dsi_connect.jpeg) After confirming the connection is correct, use the firmware that supports MIPI screen, and power on the device to see the MIPI screen display. If you only use the MIPI screen, you can turn off the HDMI display and set the MIPI screen as the main screen in the system settings, or you can use the following command: ```shell xrandr output HDMI 1 off xrandr output DSI 1 rotate normal primary ``` In the above command, the `rotate` parameter is the rotation direction of the screen, `normal` means no rotation, i.e. vertical display, if you want to continue to display horizontal screen, you can change it to `left` or `right`. If you use both MIPI screen and HDMI screen, you can also set the relationship between the main screen and the two screens according to the above commands. For example, the following command sets the HDMI screen as the main screen, and sets the MIPI screen as the extended screen below the main screen, and displays the screen in landscape: ```shell xrandr output HDMI 1 auto primary xrandr output DSI 1 rotate left below HDMI 1 ``` The above screen identifiers and available resolutions can be viewed directly by entering the `xrandr` command. If you find that the coordinates of the touch screen are not correct after modifying the settings, you can follow the steps below to correct them: Check the corresponding ID of the touch screen device ```shell xinput ``` ![list_touchsreen](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/list_touchsreen.png) Here you can see that it is a touch screen device Goodix 7, then enter the following command to map the touch device to the correct screen: ```shell xinput map to output 7 DSI 1 ``` Similarly, depending on the ID, the following command can be used to turn off the appropriate touch device: ```shell xinput disable 7 ``` If you are using only the HDMI screen, first power down and unplug both the MIPI screen and the touchpad's flexible cable before powering up. Then run the following commands (you need to switch to root user to execute, direct sudo may encounter the problem of insufficient privileges): ```shell echo off > /sys/class/drm/card0 DSI 1/status ``` ## JTAG The JTAG interface is reserved on the core board, but you need to lead out the GND, TDI, TDO, TMS, TCK flying wires yourself. The schematic diagram of the wires that need to be led out is as follows: ![jtag_connect_out](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/jtag_connect_out.jpg) Before connecting the debugger, make sure the debugger is in CKLink mode. Next, take [SLogic Combo 8](https://en.wiki.sipeed.com/hardware/zh/logic_analyzer/combo8/index.html) and RV Debugger Plus as examples. For SLogic Combo 8, please refer to the [corresponding document](https://en.wiki.sipeed.com/hardware/en/logic_analyzer/combo8/use_cklink_function.html) to switch to CKLink mode. For RV Debugger Plus, please refer to [this repository](https://github.com/bouffalolab/bouffalo_sdk/tree/master/tools/cklink_firmware) to flash the CKLink dedicated firmware.**Note: it is better to connect a level conversion chip, direct connection has the risk of burning.** After completing the above steps, connect to the debugger using dupont wires through the pin headers. ![jtag_connect_pin](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/jtag_connect_pin.jpg) After connecting to the JTAG debugger, use the memtool in the serial port to set up pinmux(This step runs on the LPI4A board, the memtool is also installed on the LPI4A board): ```shell sudo apt install memtool sudo memtool mw 0xfffff4a404 0 ``` This pinmux setting will not work after shutdown. Because the JTAG pin is used as the USB route selection function, it is enough to set pinmux every time you debug. Next, download and install the debug server from [Pingtouge official website](https://xuantie.t head.cn/community/download?id 4209675990638596096). After the download is complete, refer to [Pingtouge Official Document](https://occ oss prod.oss cn hangzhou.aliyuncs.com/resource//1682234034575/T Head+Debugger+Server+User+Guide+%28ZH CN%29.pdf) installation. After confirming that the device is connected and pinmux is set correctly, take Linux as an example, use the command `DebugServerConsole` to open DebugServerConsole: ![open_debugserver](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/open_debugserver.png) You can see a successful connection: ![check_debugserver](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/check_debugserver.png) ## GPU Use the following command to view the status of the GPU in real time: ```shell sudo watch cat /sys/kernel/debug/pvr/status ``` Under the xfce desktop, the status of the GPU is as follows: ![gpu_status_desktop](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/gpu_status_desktop.png) When playing video with Chromium browser, the state of GPU is as follows: ![gpu_status_play_video](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/gpu_status_play_video.png) ## NPU > **Note**: To use the NPU driver, you need to upgrade to the [20230920](https://mega.nz/folder/phoQlBTZ#cZeQ3qZ__pDvP94PT3_bGA) or newer version image, this image will automatically load NPU related drivers on boot. LicheePi4A contains a 1GHz NPU supporting 4TOPS@INT8 general purpose NNA computing power. The Wiki contains examples of NPU support as follows: Example NameExample FunctionalityUsage ModelInterfaceHHB Version Mobilenetv2 do image classificationimage classificationmobilenetv2c/c++2.4 and above YOLOv5 do object detectionobject detectionYOLOv5python2.4 and above RTMPose do pose estimationpose estimationRTMPosepython2.6 and above In order to cross compile the models in the above examples into executables on LicheePi4A, we first need to set up the HHB development environment on our own computer. > Recommended environment: Ubuntu 20.04 system, Docker version 20.10.21.It is recommended to use the Docker image to set up the environment. ### Installation **LPi4A setup** #### SHL Library Installation To install the SHL library, you can use pip: ```shell pip3 install shl python ``` After the installation, you can use the ` whereis` option to check the installation location. For example: ```shell python3 m shl whereis th1520 # Replace with # python3 m shl whereis c920 # if using CPU inference only ``` Based on the printed location, copy the dynamic library files from that directory to the `/usr/lib` directory. For example, if the printed location is: ```shell /home/sipeed/ort/lib/python3.11/site packages/shl/install_nn2/th1520 ``` You can use the following copy command: ```shell sudo cp /home/sipeed/ort/lib/python3.11/site packages/shl/install_nn2/th1520/lib/* /usr/lib/ ``` #### Python Virtual Environment Before installing the Python package, you need to set up a Python virtual environment. Use the following commands to install the `venv` package for creating a Python virtual environment (here, creating a Python virtual environment in the root directory): ```shell sudo i apt install python3.11 venv cd /root python3 m venv ort source /root/ort/bin/activate ``` #### HHB onnxruntime Installation HHB onnxruntime is a ported backend (execution providers) for SHL, enabling onnxruntime to reuse the high performance optimization code for XuanTie CPUs. For CPU version: ```shell wget https://github.com/zhangwm pt/onnxruntime/releases/download/riscv_whl_v2.6.0/hhb_onnxruntime_c920 2.6.0 cp311 cp311 linux_riscv64.whl pip install hhb_onnxruntime_c920 2.6.0 cp311 cp311 linux_riscv64.whl ``` For NPU version: ```shell wget https://github.com/zhangwm pt/onnxruntime/releases/download/riscv_whl_v2.6.0/hhb_onnxruntime_th1520 2.6.0 cp311 cp311 linux_riscv64.whl pip install hhb_onnxruntime_th1520 2.6.0 cp311 cp311 linux_riscv64.whl ``` **x86 Hosts setup** First, we need to install Docker on our own computer. Uninstall any existing Docker version: ```shell sudo apt get remove docker docker engine docker.io containerd runc ``` Install the basic software Docker depends on: ```shell sudo apt get update sudo apt get install apt transport https ca certificates curl gnupg agent software properties common Add the official source: ```shell curl fsSL https://download.docker.com/linux/ubuntu/gpg sudo apt key add sudo add apt repository \"deb [arch amd64] https://download.docker.com/linux/ubuntu $(lsb_release cs) stable\" ``` Install Docker: ```shell sudo apt get update sudo apt get install docker ce docker ce cli containerd.io ``` After installation, get the Docker image of the HHB environment: ```shell docker pull hhb4tools/hhb:2.4.5 ``` Once the image is pulled, enter the Docker image using the following command: ```shell docker run itd name your.hhb2.4 p 22 \"hhb4tools/hhb:2.4.5\" docker exec it your.hhb2.4 /bin/bash ``` Once you are inside the Docker image, you can use the following command to verify the HHB version: ```shell hhb version ``` Once you are in the Docker image, you need to configure the cross compile environment. Note that you must use the toolchain here, otherwise the compiled binaries will not run on LicheePi4A. ```shell export PATH /tools/Xuantie 900 gcc linux 5.10.4 glibc x86_64 V2.6.1 light.1/bin/:$PATH ``` clone NPU example code： ```shell git clone https://github.com/zhangwm pt/lpi4a example.git ``` At this point, the HHB environment is preliminarily built. You can try the following NPU examples: [Mobilenetv2 for image classification](https://wiki.sipeed.com/hardware/eh/lichee/th1520/lpi4a/8_application.html#MobilenertV2) [YOLOv5 for object detection](https://wiki.sipeed.com/hardware/eh/lichee/th1520/lpi4a/8_application.html#Yolov5n) For further infomation please check [hhb tools doc](https://www.yuque.com/za4k4z). ## Other Contributions are welcome~ You can get ￥5~150 ($1~20) coupon if your contribution is accepted!"},"/hardware/en/lichee/th1520/lpi4a/7_develop_mainline.html":{"title":"Mainline Linux","content":" title: Mainline Linux keywords: Linux, Lichee, TH1520, SBC, RISCV, Kernel, SDK, Develop update: date: 2023 09 17 version: v1.1 author: ztd content: Update docs date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## Mainline Linux Note that mainstream Linux support is not yet complete, this documentation will also be updated accordingly as support improves. ### Preface The Linux mainline included some patches in v6.5 rc1 to provide support for the Lichee Pi 4A board. This article introduces the process of building and running Linux v6.5 rc1 for the LicheePi 4A development board, achieving the effect of: the kernel can successfully start and enter the initramfs command line interface. ### Software Versions SoftwareVersion Linux6.5 rc1 U Boot2020.01 OpenSBI0.9 Buildroot2023.02.2 ### Build U Boot、OpenSBI U Boot and OpenSBI mainly use the official versions provided by Sipeed, see the relevant sections on building U Boot and OpenSBI in the [RevyOS documentation](https://wiki.sipeed.com/hardware/en/lichee/th1520/lpi4a/7_develop_revyos.html). ### Build dtb When trying to boot with the device tree included in Linux v6.5 rc1, the system will error during PLIC initialization: ```shell [ 0.000000] Oops load access fault [#1] [ 0.000000] epc : __plic_toggle+0x6a/0x72 ``` Since it was not possible to verify if there were bugs in the device tree, the device tree compiled with the official Sipeed SDK was used instead. According to the [RevyOS documentation](https://wiki.sipeed.com/hardware/en/lichee/th1520/lpi4a/7_develop_revyos.html), after building the kernel, the device tree files are: arch/riscv/boot/dts/thead/light lpi4a.dtb (for 8GB RAM core board); arch/riscv/boot/dts/thead/light lpi4a 16gb.dtb (for 16GB RAM core board). ### Build initramfs It is relatively simple to build initramfs using Buildroot, just need some basic configuration and it can automatically compile and generate it. #### Configure processor architecture In the Buildroot directory, enter: ```shell make menuconfig ``` Check the RISC V： ```shell Target options > Target Architecture () > (X) RISCV ``` #### Configuration file system type Set the file system type to CPIO: ```shell Filesystem images > [*] cpio the root file system(for use as an initial RAM filesystem) ``` #### Configure kernel Once initramfs is built, you need to enable initramfs in the kernel configuration and specify the location of the generated CPIO file. ```shell General Setup > [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support () Initramfs source file(s) ``` ### Build Kernel The process of building the Linux v6.5 rc1 kernel is similar to [RevyOS documentation](https://wiki.sipeed.com/hardware/en/lichee/th1520/lpi4a/7_develop_revyos.html) in the process of building the kernel, It is only necessary to change the kernel configuration to use defconfig under RISC V architecture: ```shell make CROSS_COMPILE riscv64 unknown linux gnu ARCH riscv defconfig ``` #### Serial port fails to work When trying to start on the development board using the directly compiled Linux v6.5 rc1 kernel, the serial port output will jam and will not continue to display, the related log is as follows: ```shell [ 0.876673] Warning: unable to open an initial console. [ 0.884088] Freeing unused kernel image (initmem) memory: 3744K [ 0.895429] Run /init as init process ``` The following will introduce the solution of the problem and the solution. #### Troubleshooting The following steps consider the possible causes of the problem from the root file system, kernel startup parameters, device tree, and kernel driver, and then check them in turn. ##### root file system The most common reason for this problem is that the console file is missing from the root file system, so you need to enter the following command in the /dev directory of the root file system to create it: ```shell mknod m 660 console c 5 1 mknod m 660 null c 1 3 ``` Opening the /dev directory and finding that the console file is not missing does not solve the problem, and when running the built kernel file and initramfs on the QEMU emulator, the QEMU emulator can start up and enter the command line interface of initramfs, so we can infer that the built initramfs can be used. ##### kernel startup parameters When the kernel starts, it needs to be passed some command line parameters by the Bootloader.The console parameter specifies the output port used after the kernel starts, which is usually set to console ttyS0,115200.If the development board serial port provides a baud rate other than 115200, it needs to be changed. When using U Boot as the Bootloader, you can enter the U Boot command line interface by pressing the Enter key at the start countdown, and enter the printenv command to see the kernel boot parameters bootargs, and you can change the parameter by entering the setenv command. The boot parameters are also printed in the kernel's boot log, such as: ```shell [ 0.000000] Kernel command line: console ttyS0,115200 rootwait rw earlycon init /lib/systemd/systemd ``` It is also important to note that the bootconsole used at the kernel start is not affected by the boot parameter console. ```shell [ 0.000000] earlycon: uart0 at MMIO32 0x000000ffe7014000 (options '115200n8') [ 0.000000] printk: bootconsole [uart0] enabled ``` ##### device tree Then we considered whether there was a problem with the device tree, but the device tree used was provided by the development board manufacturer Sipeed, and it could successfully start the RevyOS provided by the manufacturer (based on Linux v5.10.113). Therefore, it was inferred that the device tree could be used normally. ##### kernel driver Other factors have been almost excluded, and only the kernel related factors may have problems.However, the built kernel can be successfully started by using QEMU, so the problem is basically locked in the factors related to the development board.We mainly suspect that there may be a problem with the correspondence between the kernel driver and the device tree, and the most suspicious is the serial port driver. After re analyzing the boot log, we found the following output: ```shell [ 0.674296] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled ``` This output can prove that the serial driver is properly loaded by the kernel. And the following output: ```shell [ 11.098262] platform ffe7014000.serial: deferred probe pending ``` Basically declared the real cause of the problem: the loading of the serial device failed. The Linux kernel driver uses the platform device driver model, where the driver and device are loaded into the kernel separately and then matched. Therefore, it is possible that the driver is successfully loaded, but the serial port fails to load. The reason for deferred probe pending may be that the driver that the device depends on has not been properly loaded by the kernel. Then analyze the serial port related part in the device tree file: ```shell uart0: serial@ffe7014000 { /* Normal serial, for C910 log */ compatible \"snps,dw apb uart\"; …… interrupt parent <&intc>; …… clocks <&clk CLKGEN_UART0_SCLK>; …… }; intc: interrupt controller@ffd8000000 { compatible \"riscv,plic0\"; …… }; clk: clock controller@ffef010000 { compatible \"thead,light fm ree clk\"; …… }; ``` Find out if there is a missing driver in the kernel by searching for the value of the compatible attribute in the code repository. The serial port uses the driver: \"snps, dw apb uart\" The serial port dependent interrupt controller intc uses the driver: \"riscv, PLIC0\" The serial port dependent clock clk uses the driver: \"thead, light fm ree clk\" Through the search found that the serial port dependent clock clk uses the driver \"thead, light fm ree clk\" missing. After the relevant drivers were transplanted from the kernel provided by Sipeed to Linux v6.5 rc1, it finally started normally. ##### Solution 1. Find the drivers/clk/thead folder in the kernel provided by Sipeed and add it to the drivers/clk folder of Linux v6.5 rc1 2. Modify the Kconfig file in the thead folder: replace all SOC_THEAD with ARCH_THEAD 3. Modify the Kconfig and Makefile files under drivers/clk to include the thead folder 4. Find the include/dt bindings/clock folder in the kernel provided by Sipeed and add the following header files to the same folder of Linux v6.5 rc1: light dspsys.h light fm ap clock.h light mpw clock.h light visys.h light vosys.h light vpsys.h 5. Modify the Linux v6.5 rc1 arch/riscv/configs/defconfig file to add ```shell CONFIG_THEAD_CLK y CONFIG_CLK_LIGHT_FM y ``` After the driver transplantation is completed, the kernel can be recompiled and burned to the development board for normal startup. ## Reference [Build Linux v6.5 rc1 for LicheePi 4A](https://tinylab.org/licheepi4a linux/) [How to troubleshoot deferred probe issues in Linux](https://blog.dowhile0.org/2022/06/21/how to troubleshoot deferred probe issues in linux/) [[PATCH v3 0/8] Add Sipeed Lichee Pi 4A RISC V board support](https://lore.kernel.org/linux riscv/20230617161529.2092 1 jszhang@kernel.org/) [Burn image](https://wiki.sipeed.com/hardware/en/lichee/th1520/lpi4a/4_burn_image.html)"},"/hardware/en/lichee/th1520/lpi4a/9_benchmark.html":{"title":"CPU Benchmarks","content":" title: CPU Benchmarks keywords: Linux, Lichee, TH1520, SBC, RISCV, benchmark update: date: 2023 07 21 version: v1.1 author: ztd content: Release English docs date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## Dhrystone The official data from Flathead, C910 is around 5.6 out of 10. ![dmips](./../../../../zh/lichee/th1520/lpi4a/assets/benchmark/dmips.png) ## CoreMarks Test parameter configuration: ` funroll all loops finline limit 500 fgcse sm fno schedule insns msignedness cmpiv fno code hoisting mno thread jumps1 mno iv adjust addr cost mno expand split imm` Test results (1.85GHz) using the public toolchain, GCC version `13.1.0`: ```txt 2K performance run parameters for coremark. CoreMark Size : 666 Total ticks : 11989 Total time (secs): 11.989000 Iterations/Sec : 9175.077154 Iterations : 110000 Compiler version : GCC13.1.0 Compiler flags : O2 DPERFORMANCE_RUN 1 lrt funroll all loops finline limit 500 fgcse sm fno schedule insns msignedness cmpiv fno code hoisting mno thread jumps1 mno iv adjust addr cost mno expand split im Memory location : Please put data memory location here (e.g. code in flash, data on heap etc) seedcrc : 0xe9f5 [0]crclist : 0xe714 [0]crcmatrix : 0x1fd7 [0]crcstate : 0x8e3a [0]crcfinal : 0x33ff Correct operation validated. See README.md for run and reporting rules. CoreMark 1.0 : 9175.077154 / GCC13.1.0 O2 DPERFORMANCE_RUN 1 lrt funroll all loops finline limit 500 fgcse sm fno schedule insns msignedness cmpiv fno code hoisting mno thread jumps1 mno iv adjust addr cost mno expand split im / Heap ``` Test results (1.85GHz) using the Thead toolchain, GCC version `10.4.0`: ```txt 2K performance run parameters for coremark. CoreMark Size : 666 Total ticks : 15129 Total time (secs): 15.129000 Iterations/Sec : 13219.644392 Iterations : 200000 Compiler version : GCC10.4.0 Compiler flags : O2 march rv64gv0p7_zfh_xtheadc O3 funroll all loops finline limit 500 fgcse sm fno schedule insns msignedness cmpiv fno code hoisting mno thread jumps1 mno iv adjust addr cost mno expand split imm DPERFORMANCE_RUN 1 lrt Memory location : Please put data memory location here (e.g. code in flash, data on heap etc) seedcrc : 0xe9f5 [0]crclist : 0xe714 [0]crcmatrix : 0x1fd7 [0]crcstate : 0x8e3a [0]crcfinal : 0x4983 Correct operation validated. See README.md for run and reporting rules. CoreMark 1.0 : 13219.644392 / GCC10.4.0 O2 march rv64gv0p7_zfh_xtheadc O3 funroll all loops finline limit 500 fgcse sm fno schedule insns msignedness cmpiv fno code hoisting mno thread jumps1 mno iv adjust addr cost mno expand split imm DPERFORMANCE_RUN 1 lrt / Heap ``` ![coremarks](./../../../../zh/lichee/th1520/lpi4a/assets/benchmark/coremarks.png) ## Geekbench5 > Note: The tests here use the public version of the toolchain, if you use the special toolchain of thead, the performance is expected to be improved by more than 50%. ![geekbench5](./../../../../zh/lichee/th1520/lpi4a/assets/benchmark/geekbench5.png) https://browser.geekbench.com/v5/cpu/compare/21100603?baseline 21092115 ## 7 Zip LZMA [7 Zip LZMA Benchmark](https://7 cpu.com/) ![7z](./../../../../zh/lichee/th1520/lpi4a/assets/benchmark/7z.png) ## OpenSSL ```bash openssl speed evp aes 256 cbc openssl speed evp aes 256 gcm openssl speed evp sha1 openssl speed evp sha256 ``` type 16bytes 64bytes 256bytes 1024bytes 8192bytes 16384bytes <p style \"white space:nowrap\">AES 256 CBC</p> 29206.05k 36957.73k 39648.85k 40407.72k 40624.13k 40768.21k <p style \"white space:nowrap\">AES 256 GCM</p> 24610.57k 28191.29k 29459.29k 29727.06k 29911.72k 29949.95k <p style \"white space:nowrap\">sha1</p> 9428.03k 30591.02k 72920.06k 113164.63k 135271.77k 137052.16k <p style \"white space:nowrap\">sha256</p> 6206.94k 17151.38k 34806.19k 47151.10k 52559.87k 53163.07k ## LLVM The scripts are compiled using `buildbot benchmark.bash` from the [scriptlets](https://github.com/AOSC Dev/scriptlets/tree/master/buildbot benchmark) repository, with a CPU frequency of 1.843 Ghz and 16G of RAM. Compilation time: ```text real 265m50.172s user 980m15.164s sys 60m51.329s ``` ## 其它 欢迎投稿～ 投稿接受后可得￥5～150（$1~20）优惠券！"},"/hardware/en/lichee/th1520/lpi4a/10_test_report.html":{"title":"Board Performance Test","content":" title: Board Performance Test keywords: Linux, Lichee, TH1520, SBC, RISCV, report update: date: 2023 07 21 version: v1.1 author: ztd content: Update English docs date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## Power Consumption Test ### Static Power Consumption Scene (Static) Voltage Current Power Consumption Note Standby 12V 0.3A 3.6W No peripheral connected Standby 12V 0.32A 3.84W Fan on, fan not turned off in all subsequent tests Single port to network cable 12V 0.36A 4.32W Dual port to network cable 12V 0.39A 4.68W Connecting an HDMI Display 12V 0.33A 3.96W ### Dynamic Power Consumption Scene (Dynamic) Voltage Current Power Consumption Note NPU Calculate 12V 0.39A 4.68W Connecting serial port, fan, NPU frequency upper limit 0.792GHz Standby 12V 0.43A 5.16W Connecting a monitor, keyboard, and mouse Using a network port STRESS NG Pressure testing <br>(CPU matrix operations) 12V 0.65A 7.8W CPU frequency limit 1.845GHz, voltage 1V Play video in browser 12V 0.6A 7.2W Using GPU, no hardware decoding, chromium browser ## eMMC ```bash #4k write dd if /dev/zero of test bs 4k count 100000 oflag direct #4k read dd if test of /dev/null bs 4k count 100000 iflag direct #Deleting test files rm test #Continuous Write(4MB) dd if /dev/zero of test bs 4096k count 100 oflag direct #Continuous Read(4MB) dd if test of /dev/null bs 4096k count 100 iflag direct #Deleting test files rm test #Continuous Write(64MB) dd if /dev/zero of test bs 65536k count 10 oflag direct #Continuous Read(64MB) dd if test of /dev/null bs 65536k count 10 iflag direct #Deleting test files rm test ``` **8GB eMMC** Test Item Result 4KB W 22.4 MB/s 4KB R 22.4 MB/s 4MB W 53.9 MB/s 4MB R 296 MB/s 64MB W 229 MB/s 64MB R 298 MB/s **32/128GB eMMC** Test Item Result 4KB W 24.0 MB/s 4KB R 40.3 MB/s 4MB W 209 MB/s 4MB R 296 MB/s 64MB W 229 MB/s 64MB R 298 MB/s ## LPDDR4X ![lpddr4x](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/lpddr4x.png) ## GbE `iperf3 c 192.168.3.18 t 15` ![iperf](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/iperf.png) ## WiFi Test Environment: Long open corridor Test method: using iperf3, laptop as server, LPi4A as client Test equipment: newifi D2 router, Acer Predator Tomahawk 300 laptop. The test results at different distances between the router and LPi4A are as follows: 5m ![wifi_test_5m.png](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/wifi_test_5m.png) 10m ![wifi_test_10m.png](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/wifi_test_10m.png) 15m ![wifi_test_15m.png](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/wifi_test_15m.png) 20m ![wifi_test_20m.png](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/wifi_test_20m.png) 25m ![wifi_test_25m.png](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/wifi_test_25m.png) 30m ![wifi_test_30m.png](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/wifi_test_30m.png) ## Bluetooth Test environment: indoor proximity Test Method: Mobile phone open bluetooth sharing network, pair with development board and connect bluetooth, use iperf3 test Test Equipment: Xiaomi 13, LPi4A ![bluetooth_phone](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/bluetooth_phone.jpg) ![bluetooth_1520](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/bluetooth_1520.png) ## Temperature Heat Sink: Fan + Aluminum Heat Sink(25*25*5) Silicon pad: Laird 500 Standby Status: ![temp_idle](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/temp_idle.png) End of pressure test: ![temp_press](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/temp_press.png) ## Browser Testing Fishbowl test in Chromium with results as shown: ![web_browser_fishbowl](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/web_browser_fishbowl.png) ## GPU The test results using `glmark2` are as follows: ```shell root@lpi4a:~# glmark2 es2 glmark2 2021.12 OpenGL Information GL_VENDOR: Imagination Technologies GL_RENDERER: PowerVR B Series BXM 4 64 GL_VERSION: OpenGL ES 3.2 build 1.16@6099580 Surface Config: buf 32 r 8 g 8 b 8 a 8 depth 24 stencil 8 Surface Size: 800x600 windowed [build] use vbo false: FPS: 460 FrameTime: 2.174 ms [build] use vbo true: FPS: 434 FrameTime: 2.304 ms [texture] texture filter nearest: FPS: 489 FrameTime: 2.045 ms [texture] texture filter linear: FPS: 493 FrameTime: 2.028 ms [texture] texture filter mipmap: FPS: 776 FrameTime: 1.289 ms [shading] shading gouraud: FPS: 1055 FrameTime: 0.948 ms [shading] shading blinn phong inf: FPS: 1049 FrameTime: 0.953 ms [shading] shading phong: FPS: 832 FrameTime: 1.202 ms [shading] shading cel: FPS: 781 FrameTime: 1.280 ms [bump] bump render high poly: FPS: 481 FrameTime: 2.079 ms [bump] bump render normals: FPS: 1056 FrameTime: 0.947 ms [bump] bump render height: FPS: 730 FrameTime: 1.370 ms [effect2d] kernel 0,1,0;1, 4,1;0,1,0;:1 FPS: 456 FrameTime: 2.193 ms [effect2d] kernel 1,1,1,1,1;1,1,1,1,1;1,1,1,1,1;:2 FPS: 184 FrameTime: 5.435 ms [pulsar] light false:quads 5:texture false: FPS: 585 FrameTime: 1.709 ms [desktop] blur radius 5:effect blur:passes 1:separable true:windows 4: FPS: 177 FrameTime: 5.650 ms [desktop] effect shadow:windows 4: FPS: 405 FrameTime: 2.469 ms [buffer] columns 200:interleave false:update dispersion 0.9:update fraction 0.5:update method map: FPS: 135 FrameTime: 7.407 ms [buffer] columns 200:interleave false:update dispersion 0.9:update fraction 0.5:update method subdata: FPS: 160 FrameTime: 6.250 ms [buffer] columns 200:interleave true:update dispersion 0.9:update fraction 0.5:update method map: FPS: 197 FrameTime: 5.076 ms [ideas] speed duration: FPS: 442 FrameTime: 2.262 ms [jellyfish] <default>: FPS: 433 FrameTime: 2.309 ms [terrain] <default>: FPS: 31 FrameTime: 32.258 ms [shadow] <default>: FPS: 275 FrameTime: 3.636 ms [refract] <default>: FPS: 45 FrameTime: 22.222 ms [conditionals] fragment steps 0:vertex steps 0: FPS: 775 FrameTime: 1.290 ms [conditionals] fragment steps 5:vertex steps 0: FPS: 484 FrameTime: 2.066 ms [conditionals] fragment steps 0:vertex steps 5: FPS: 819 FrameTime: 1.221 ms [function] fragment complexity low:fragment steps 5: FPS: 1048 FrameTime: 0.954 ms [function] fragment complexity medium:fragment steps 5: FPS: 694 FrameTime: 1.441 ms [loop] fragment loop false:fragment steps 5:vertex steps 5: FPS: 1093 FrameTime: 0.915 ms [loop] fragment steps 5:fragment uniform false:vertex steps 5: FPS: 678 FrameTime: 1.475 ms [loop] fragment steps 5:fragment uniform true:vertex steps 5: FPS: 438 FrameTime: 2.283 ms glmark2 Score: 551 ``` ![gpu_test_glmark2](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/gpu_test_glmark2.png) Running `glxgears` results in the following: ```shell es2gears_x11 ``` ![gpu_test_gears](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/gpu_test_gears.png) ## Other Contributions are welcome~ You can get ￥5~150 ($1~20) coupon if your contribution is accepted!"},"/hardware/en/lichee/th1520/lm4a.html":{"title":"LicheePi Module 4A","content":" title: LicheePi Module 4A keywords: LicheePi, Sodimm, TH1520, RISCV, SBC update: date: 2023 03 31 version: v0.1 author: wonder content: Create file ## Introduction The LicheePi 4A Module is the Core Module using the [T Head](https://www.t head.cn/) RISC V [TH1520](https://www.t head.cn/product/yeying) SOC, which contains 4 RISC V C910 based cores and a 4TOPS@int8 AI NPU. It supports 16GB of LPDDR4X RAM and 128GB of eMMC storage. The board features two Gigabit Ethernet controllers and up to 4K video output. The SOC also contains an additional C906 processor for audio processing. Because of the SODIMM style board, the LicheePi 4A Module can be used in various scenarios and is suitable for various types of baseboards. ## Parameters <table> <thead> <tr> <th colspan 2>Main Chip</th> </tr> </thead> <tbody> <tr> <td>Name</td> <td>TH1520</td> </tr> <tr> <td>CPU</td> <td>RISC V 64GCV C910*4@1.85GHz <br>· Each core contains 64KB I cache amd 64KB D Cache <br>· 1MB of Shared L2 Cache <br>· Support TEE and REE, configured during core booting<br>· Support multi core debugging framework of custom and RISC V compatible interface<br>· Independent power domain, supports DVFS</td> </tr> <tr> <td>GPU</td> <td>· OpenCL 1.1/1.2/2.0<br>· OpenGL ES 3.0/3.1/3.2<br>· Vulkan 1.1/1.2<br>· Android NN HAL</td> </tr> <tr> <td>NPU</td> <td>Support 4TOPS@INT8, up to 1GHz <br>· Support TensorFlow, ONNX, Caffe <br>· Support CNN, RNN, DNN </td> </tr> <tr> <td>Decode</td> <td>Real time decoder, support H.265/H.264/VP9/8/7/6/AVS/AVS+/AVS2.0/VC1/MPEG4 <br>· Supports H.264 BP/MP/HP@level 5.1 decoding, up to 4K resolution<br>· Supports H.265/HEVC Main Profile@level 5.1 decoding, up to 4K resolution<br>· Supports VP9 Profile 2 decoding, up to 4K resolution<br>· Supports AVS2.0 decoding, up to 4K resolution<br>· Supports VP6/7/8/AVS/AVS+/VC1/MPEG4 decoding, up to 1920x1080 resolution<br>· Decoding at 4K@75fps maximum</td> </tr> <tr> <td>Encode</td> <td>· Supports H.264 BP/MP/HP@level4.2 encoding, up to 4K resolution<br>· Supports H.265/HEVC Main Profile encoding, up to 4K resolution<br>· Only supports I frames and P frames<br>· Encoding at 4K@40fps maximum</td> </tr> <tr> <th colspan 2>Hardware information</th> </tr> <tr> <td>RAM</td> <td>· 8GB 64bit LPDDR4<br>· 16GB 64bit LPDDR4<br></td> </tr> <tr> <td>ROM</td> <td>eMMC: <br>· 0G<br>· 8G<br>· 32G<br>· 128G</td> </tr> <tr> <td>Ethernet</td> <td> 2x Gigabit PHY</td> </tr> </tbody> </table> ## Links [Github](https://github.com/sipeed/LicheePi4A) [Sipeed Download station](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/01_Specification)"},"/hardware/en/lichee/th1520/lcon4a/3_images.html":{"title":"Sipeed Official Image","content":"# Sipeed Official Image The Sipeed official image is modified and adapted based on the Debian system. The default image account and password configuration is as follows: Account: `sipeed`, Password: `licheepi`; Account: `debian`, Password: `debian`; The root account has no password set by default. Image Download: [Baidu Netdisk](https://pan.baidu.com/s/19ShinFf8FMtqSsJGSAMfpA) Extraction code: 6wqg [mega Netdisk](https://mega.nz/folder/p0oiwCqI#EFGgwRnoB9mX14pKI2pu4Q) Please refer to [Burning Image] for the burning method."},"/hardware/en/lichee/th1520/lcon4a/lcon4a.html":{"title":"LicheePi Console 4A","content":" title: LicheePi Console 4A keywords: LicheeConsole, TH1520, RISCV, SBC, Laptop update: date: 2023 10 27 version: v0.1 author: Zepan content: Initial Version ## 简介 Introduction Lichee Console 4A (hereinafter referred to as Console) is a high performance RISC V portable terminal developed by SiliconSpeed Technology. It is designed to allow RISC V developers to experience the application of RISC V products in real life in advance. Lichee Console 4A integrates a high performance RISC V TH1520 SOM (8+32/16+128 optional), a 7 inch 1280x800 capacitive touch screen, a 72 key keyboard, and USB A and USB C in a size smaller than an A5 notebook. , 2242 SSD card slot, TF card slot, miniHDMI, 3.5mm headphone jack, Ethernet port and other rich interfaces, truly putting the RISC V development terminal into your pocket~ The software support of Lichee Console 4A has also been relatively completed. It is equipped with the Debian operating system by default and supports Chrome browser, VSCode IDE, KiCAD PCB drawing software, Office software, 4K player, and various game simulators, which basically meets the needs of daily work. Learn to use. Lichee Console 4A uses a modular design. If you have purchased LicheePi4A before, you can reuse the SOM to the Console. > Note: High performance RISCV consumer electronics are still in a relatively early stage at present (2023). Lichee Console 4A is mainly for RISC V developers to experience development and use. It requires at least skilled Linux operating experience. Ordinary consumers cannot get started directly. in use. > If you are an ordinary user without Linux experience, please do not buy. ![lcon4a](./assets/lcon4a/lcon4a.jpg) ## Technical Specifications <table> <colgroup> <col class \"org left\" /> <col class \"org left\" /> </colgroup> <tr> <td class \"org left\">SOM</td> <td class \"org left\"> <a href \"https://wiki.sipeed.com/lm4a\">LM4A</a> </td> </tr> <tr> <td class \"org left\">CPU</td> <td class \"org left\"><strong>RISC V RV64GCV C910@1.85GHz * 4</strong> </td> </tr> <tr> <td class \"org left\">GPU</td> <td class \"org left\">IMG™ B Series BXM 4 64 </td> </tr> <tr> <td class \"org left\">NPU</td> <td class \"org left\">4TOPS@INT8 </td> </tr> <tr> <td class \"org left\">Memory</td> <td class \"org left\"> 8GB or 16GB LPDDR4X </td> </tr> <tr> <td class \"org left\">Storage</td> <td class \"org left\"> 32GB or 128GB eMMC, NGFF 2242 SATA SSD </td> </tr> <tr> <td class \"org left\">Display</td> <td class \"org left\"> 7 inch 1280 x 800 LCD, miniHDMI </td> </tr> <tr> <td class \"org left\">Inoput</td> <td class \"org left\"> Capacitive Touch, RedPoint, 72 Keyboard </td> </tr> <tr> <td class \"org left\">Camera</td> <td class \"org left\"> 2MP Front Camera </td> </tr> <tr> <td class \"org left\">Audio</td> <td class \"org left\"> 3.5mm Headphone, MEMS MIC, StereoSpeaker </td> </tr> <tr> <td class \"org left\">Network</td> <td class \"org left\"> WiFi6 + BT5.4, RJ45 GbE </td> </tr> <tr> <td class \"org left\">Interface</td> <td class \"org left\"> USB3.0 Type A, USB3.0 Type C, USB2.0 Type A, MicroSD Slot </td> </tr> <tr> <td class \"org left\"> Battery </td> <td class \"org left\"> 3000 mAh@7.6V </td> </tr> <tr> <td class \"org left\">Case</td> <td class \"org left\">Aluminum Alloy Case</td> </tr> <tr> <td class \"org left\">Size & Weight</td> <td class \"org left\">18.5 x 14 x 2 cm, 720g</td> </tr> <tr> <td class \"org left\">System</td> <td class \"org left\">Debian </td> </tr> </table> ## Getting Started Guide ### Unboxing Open the box, the upper layer is the LicheeConsole4A host ![unbox1](./assets/lcon4a/unbox1.png) After removing the upper host, the lower layer is the 12V3A power adapter and MiniHDMI cable. ![unbox2](./assets/lcon4a/unbox2.png) Take out the host and get to know the interfaces on the side of the host: ![unbox3](./assets/lcon4a/unbox3.png) (If you purchase a barebones package, you need to check the \"SOM Installation Guide\" later and install LM4A before proceeding with the following operations.) Turn on the host, press and hold the power button in the upper right corner for 3 seconds to turn it on (release it when you see the screen backlight lights up) ![unbox4](./assets/lcon4a/unbox4.png) If the backlight never lights up, the battery may be exhausted during transportation. You can try plugging in the power adapter and long pressing the power button to turn it on. After the backlight turns on for about 10 seconds, the screen will display the Linux penguin icon and the boot log (early image versions are displayed vertically at this stage) After the log is printed for about 20 seconds, the Debian desktop system starts to be entered. After entering the desktop system, you can test whether the screen touch, pointing stick, and keyboard are working. If you find that they are not working, you can contact customer service. The default system is Debian, which is pre installed with Chrome, VSCode, Office, KiCAD, KODI, Parole and other application software, you can experience them one by one. You can use sudo apt instal xxx to install the software. The default username and password are sipeed, licheepi For other general software usage, please refer to the relevant documentation chapters of LicheePi4A. ### SSD Installation Guide Console supports M.2 2242 SATA interface SSD, which can be installed after removing the SSD cover on the rear case. ![ssd1](./assets/lcon4a/ssd1.jpg) ### SOM Installation Guide If you choose the barebone package, you need to install the SOM module. You need to bring your own hexagonal screwdriver, remove the back cover, install the SOM module, install silicone grease above the CPU/DDR, place the heat pipe, place a long silicone grease sheet on the heat pipe, and reinstall the back cover. For detailed installation, please see the pictures in the following chapters. ## system The Console image is released together with the LicheePi4A image. The default is the Full image. It is recommended to use SOM with 8+32 and above configuration. If you use an 8+8 SOM, you need to tailor the file system yourself. download link: Baidu Netdisk: [Click me](https://pan.baidu.com/s/1xH56ZlewB6UOMlke5BrKWQ) Mega cloud disk: [Click me](https://mega.nz/folder/phoQlBTZ#cZeQ3qZ__pDvP94PT3_bGA) Common application displays: ![sys1](./assets/lcon4a/sys1.png) The Console system architecture is as follows. For details, please refer to the schematic diagram or device tree file. ![sys2](./assets/lcon4a/sys2.png) ## Power consumption ### Power Supply The maximum power consumption of the Console is about 11W, and about 7~8W when no load is used. It can be powered by 12V DC 3.5mm interface or 5V USB C port. ### Battery Life For the sake of Console battery life and heat generation, the current upper limit of the CPU frequency of the default image is limited to 1.5GHz. At this main frequency, the measured usage time is 2 to 3 hours. (stress ng stress test lasts for 2 hours, with the screen on and no load for 3 hours). The default screen brightness is 50%. If you need to extend the battery life, you can reduce the screen brightness: ``` sudo i cd /sys/class/backlight/pwm backlight@0 echo xxx > brightness # xxx is brightness you want, 0~100 ``` Power consumption composition (300MHz no load bright screen, 50% brightness) ![heat1](./assets/lcon4a/power1.png) ### Heat Dissipation Console uses a 3cm turbo fan + 10cm heat pipe to dissipate heat from the CPU. One end of the heat pipe is attached to the CPU, and the other end is dissipated by a turbo fan. The top surface uses thermal conductive silicone grease to contact the bottom case for heat dissipation. ![heat1](./assets/lcon4a/heat1.png) ![heat1](./assets/lcon4a/heat2.png) Under continuous high load work (such as browser video soft decoding), the CPU temperature can eventually reach 60 to 65 degrees, and the bottom case temperature can reach a maximum of about 50 degrees. ![heat1](./assets/lcon4a/heat3.png) If you have better cooling suggestions, you can send an email to support@sipeed.com > At present (2023.11), the browser hardware decoding has not yet been adapted, so it will occupy a lot of CPU when watching browser videos. It is expected that the browser hardware decoding function will be incorporated in December. ### Standby The hardware circuit design of the Console takes the standby situation into consideration and adds power control to each relevant peripheral. However, currently (2023.11) the low power consumption function of TH1520 has not been added to the SDK, so the standby function still needs to be updated. ### Shutdown The current shutdown power consumption of the Console is about 1.3mA, which can support the shutdown time for about 3 months. ## Download [Sipeed Download Station](https://dl.sipeed.com/shareURL/LICHEE/LicheeConsole4A) ## Other links [Taobao] [Aliexpress](https://www.aliexpress.us/item/3256805987954160.html) QQ group: 559614960 [Click me to automatically join the group](http://qm.qq.com/cgi bin/qm/qr?k 5YkapIhdtWHp8AEfM5_bFFYQIX3CUQN6) Telegram: https://t.me/linux4rv Forum: Maixhub.com/discussion Contact email: support@sipeed.com"},"/hardware/en/lichee/th1520/lcon4a/setup_guide.html":{"title":"setup—guide","content":" title: setup—guide keywords: Lichee, TH1520, Console, RISCV, update: date: 2023 12 19 version: v1.0 author: sinky content: Release docs For customers who purchased Package A, the following accessories are included. Please check whether all the product accessories have been received: Back case x1 SSD cover x1 SSD cover screw x1 Screwdriver x1 Thermal pad x2 Heat pipe x1 Back cover screws x6 ![Accessories](assets/lcon4a/配件.jpg) Please prepare the cross head screwdriver as shown in the picture on your own. ## Assembly Steps 1. Insert the core board into the motherboard. Place one of the thermal pads at the core position of TH1520 as shown in the picture below. ![Installing Thermal Pad 1](assets/lcon4a/安装导热垫1.jpg) 2. Peel off the release film from the thermal pad. ![Installing Thermal Pad 2](assets/lcon4a/安装导热垫2.jpg) 3. Cut another thermal pad in half for later use. 4. Place the heat pipe between the core board and the fan **(as close to the fan as possible to ensure the cooling effect)** as shown in the picture below. ![Placing Heat Pipe](assets/lcon4a/放置铜管.jpg) 5. Place the two cut thermal pads on the heat pipe to conduct the heat to the outer shell, as shown in the picture. ![Placing Heat Pipe for Cooling](assets/lcon4a/放置铜管散热.jpg) To ensure that the heat pipe is securely fixed, it is recommended to use tape to fix the middle part of the heat pipe. 6. Insert the battery connection ribbon **(pay attention to the direction of the battery ribbon)**. ![Connecting Battery Ribbon](assets/lcon4a/链接电池排线.png) 7. Cover the back case, it is recommended to align the back first and then press it for convenience. ![组装后盖1](assets/lcon4a/组装后盖1.jpg) ![Assembling Back Cover 2](assets/lcon4a/组装后盖2.jpg) **When buckling the other side, using a disassembly piece to assist can save more effort.** 8. After buckling the back case, take out the 6 back cover screws and the screwdriver that come with the package, tighten the back cover fixing screws. It is recommended to press the back cover at the same time when tightening the screws to ensure that the buckle will not pop open. ![Back Cover Fixing Screws](assets/lcon4a/后盖固定螺丝.jpg) **Please note that the screws for fixing the SSD cover and the back cover are of different sizes.** At this point, the assembly is complete, and you can start using it. ## SSD Installation 1. Use a cross screwdriver to remove the SSD cover. ![Removing SSD Cover Screws](assets/lcon4a/取下SSD盖板螺丝.jpg) 2. Prepare the NGFF interface 2242 size SSD. ![SSD](assets/lcon4a/ssd.png) 3. Unscrew the SSD fixing screw. ![Removing SSD Fixing Screw](assets/lcon4a/取下ssd固定.jpg) 4. Insert the SSD, **due to the small space, it is suggested to first put the SSD into the machine body, and then insert the SSD forcefully perpendicular to the interface**. ![Inserting SSD](assets/lcon4a/放入ssd.jpg) ![Inserting SSD](assets/lcon4a/插入ssd.jpg) 5. After it is in place, screw on the SSD fixing screw, cover the SSD cover, and screw on the cover fixing screw. ![Fixing SSD](assets/lcon4a/固定ssd.jpg) ![Replacing SSD Cover](assets/lcon4a/装回ssd盖板.JPG) ![Fixing SSD Cover](assets/lcon4a/固定SSD盖板.jpg)"},"/hardware/en/lichee/th1520/lcon4a/4_burn_image.html":{"title":"","content":"* # **Burning Image** 1. Remove the SSD back cover 2. Find the BOOT button and RST button ![boot_and_rst_key](burn_image/boot_and_rst_key.png) 1. Hold down the BOOT button, then press the power button on the keyboard to start up, and then connect the typec port to another machine. ![typec_connect](burn_image/typec_connect.png) 1. Download the image for burning on another machine: [Click here to download](https://wiki.sipeed.com/hardware/zh/lichee/th1520/lcon4a/3_images.html) 2. On another machine, execute `fastboot flash ram u boot with spl console.bin` 3. On another machine, execute `fastboot reboot` 4. On another machine, execute `fastboot flash uboot u boot with spl console.bin` 5. On another machine, execute `fastboot flash boot boot.ext4` 6. On another machine, execute `fastboot flash root root.ext4` 7. Press the RST button next to BOOT to restart the notebook."},"/hardware/en/lichee/RV/flash.html":{"title":"Lichee RV system image","content":"# Lichee RV system image There are two system images for Lichee RV and they are tina and debian. **Tina** is a small linux image while **Debian** is a desktop image. ## Prepare 1. Lichee RV Core board 2. TF card (It's suggested to use tf card provided by sipeed because other card might fail to burn or fail to boot system) 3. Burn tool [PhoenixCard](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/tool) 4. System image [Tina](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/SDK/image) Debian: Download from [mega](https://mega.nz/folder/lx4CyZBA#PiFhY7oSVQ3gp2ZZ_AnwYA) Image name Meaning Note LicheeRV RISCV D1 Linux image only for sipeed Tina Tina openwrt system image debian Riscv debian system image 86panel [taobao 86panel](https://item.taobao.com/item.htm?spm a230r.1.14.18.30b534187YMsRx&id 663345415205&ns 1&abbucket 7#detail) dock [taobao dock](https://item.taobao.com/item.htm?spm a1z10.3 c s.w4002 21410578028.20.35765d54K9XCOt&id 666274331852) hdmi Display to HDMI screen 800480 / 480P Display to LCD screen，it fits resolution 800*480 or 480P (640X480) 8723ds This image supports 8723ds WIFI / BLE driver xr829 This image supports xr829 WIFI / BLE driver waft Whether waft is built in image ## Burn image Connect you sd card reader inserted with sd card with your computer Use SD Card Formatter to format your TF card first: Click Refresh then choose your target disk carefully, click Format ![Format SD card](./../../../assets/maixII/V831/image 20210802102810041.png) Follow the steps below to complete burning ![burn image](./../../lichee/assets/RV/flash.png) Run PhoenixCard Click `Image` marked with ① to choose your target firmware We choose `Start up` marked with ② Click `Burn` marked with ③ to burn your target firmware into tf card From `Status bar` marked with ④ to see your progress；If it's red when finishing this means it fails burning, then we should rerun `SD Card Formatter` to format the TF card to increase its success possibility. Click `Close` to close PhoenixCard > Not each card can successfully be burned, if you can't do this we suggest you buy an image card we provide Waiting for finishing burning, It will be faster if flashing Tina OS and it will take about 10 minutes if flashing Debian ## Run OS The username and password are as follows: Tina OS username：`root` password：`tina` Debian OS username：`root` password：`licheepi` Insert tf card, and we can see the startup information in the serial port tool > Debian startup message <details> <summary><font color \"#4F84FF\">Click to see Debian startup log</font></summary> <pre><code class \"language shell\"> [270]HELLO! BOOT0 is starting! [273]BOOT0 commit : 27369ab OpenSBI v0.6 ____ _____ ____ _____ / __ \\ / ____ _ \\_ _ _ __ ___ _ __ (___ _) '_ \\ / _ \\ '_ \\ \\___ \\ _ < __ _) __/ ____) _) _ \\____/ .__/ \\____ ______/____/_____ _ </code></pre> </details> > Tina startup message <details> <summary><font color \"#4F84FF\">Click to see Tina startup log</font></summary> <pre><code class \"language shell\"> BusyBox v1.27.2 () built in shell (ash) __ ___ _ __ _ / / /__ _(_)_ __ / / (_)__ __ ____ __ / /_/ / _ `/ /\\ \\ / / /__/ / _ \\/ // /\\ \\ / /_/ /_/\\_,_/_//_\\_\\ /____/_/_//_/\\_,_//_\\_\\ Maix Linux (Neptune, 5C1C9C53) root@MaixLinux:/# </code></pre> </details> ## Qusetions [Questions](./problems.html)"},"/hardware/en/lichee/RV/RV.html":{"title":"Lichee RV - Nezha CM","content":"# Lichee RV Nezha CM > Edit on 2022.05.13 ## Overview Lichee RV Nezha CM is a compute module with modular design, equipped with Allwinner D1 chip (based on T Head XuanTie C906 core), 512MB DDR3 RAM. It can boot from TF card or SD NAND, uses two sets of M.2 b key 67 pin connectors to route all IO, making it convenient for wide use and easy to replace. ![](./../assets/RV/D1 4.jpg) ![](./../assets/RV/D1 back.jpg) ## Specifications Item Value CPU Allwinner D1 chip (Based on T Head XuanTie C906 core) up to 1GHZ RAM 16bits 512MB DDR3，Up to 792MHz Storage Onboard TF card slot，can use tf card for storing,1TB storage capacity have been tested ok <br>Reserve SD NAND pads (Conflict with 8pins lcd interface. using for business custom made ) Display **MIPI**：4 lane MIPI DSI <br>**RGB**：RGB888 interface(partially multiplexed with DSI) <br>**MCU** : I80 interface<br>**SPI**：Onboard 8pins SPI screen interface，can be used for 1.14 inch screen Audio Analog audio headphone output(HPOUT); <br>Analog audio line input(LINEIN); <br>Digital Audio (I2S/SPDIF); <br>Analog microphone interface(MIC3);<br>Digital microphone interface(DMIC);<br>All above pin out to connecting finger Ethernet Pin out RMII/RGMII to connecting finger (Multiplexed with some GPIOs) USB Onboard TYPE C USB OTG interface(USB0) <br>USB HOST pins out to connecting finger(USB1) GPIO Other GPIOs all pin out to connecting finger Key • FEL key (Enter to download mode) Led • A power led <br>• A user led (active high) PCB 4 layers Fixed<br> way Connect the core board and bottom board by two sets of M.2B connecting finger and fasten with a M2 screw Development language C/C++, Python, Golang, etc... System Mirrors Tina Linux (Based on OpenWRT 14.07), Debian, YoC (RTOS ) ![](./../assets/RV/D1 pin.png) ## Comparison between the bottom board Item Lichee RV Dock Lichee RV Panel : : SOC Allwinner D1（XuanTie C906 RISC V） Allwinner D1（XuanTie C906 RISC V） Ram 1GByte 1GByte Wireless network Choosable: <br> 2.4G WIFI+BT<br> none (You can weld other WiFi modules but need debug by yourself) 2.4G WIFI+BT Wired network None Support 100M Ethernet Video out HDMI connector; <br>SPI screen interface; <br>Screen convert board can be used for：<br> common RGB screen connector(include TP pins)(support 4.3inch/5.0inch screen we sell<br> MIPI screen interface connector(compatible with 8 inch screen of NeZha development board) sRGB screen interface connector(include TP pins)(support standard 4 inch ips screen with TP )<br> MIPI screen interface connector(compatible with 8 inch screen of NeZha development board) USB port One USB OTG(Type C port on core board) <br> One USB Host(USB A port on bottom board) One USB OTG(Type C port on core board) <br> One USB Host(USB C port on bottom board) Expand interface Support microphone arrays <br>Most GPIOs are connected with 2x20P pin pads Part GPIOs are connected to 2x20P pin pads出 Audio Onboard 3W Audio amplifier <br> Onboard electret microphone circuit Onboard 3W Audio amplifier <br> Onboard 2 MEMS digital microphones Key One FEL key(Enter to download mode)<br>One RST key(Reset)<br>One user key One FEL key(Enter to download mode) LED One power led<br>One 2812 RGB LED One power led Shell None 3D print shell Size 65.0mm x 40.0mm 86.0mm x 86.0mm ## Connect 1.14 inch screen ![](./../assets/RV/D1 1.png) ![](./../assets/RV/D1 2.png) ![](./../assets/RV/D1 3.png) > Up to now 1.14 inch screen is not able to display and need to wait for updating ## Burn system [Flash tutorial](./flash.html) ## Notice The USB TYPE C connector of the core board uses the CC pin as an automatic OTG identification pin, so it conflicts with the identification when using the USB C to C data line, and it only works with the USB A to C data line. There are two ways to solve this problem and the steps are as follows Type C work mode OTG (Factory default product) CC identification(Need to change hardware) : : : : Resistance R30 and resistance R31 Blank weld 5.1K 1% 0402 resistance Diode D3 and D4 weld 4148 diode Blank Compatible with C to C cables no yes Compatible with A to C cables yes yes Whether supports automatic OTG switching yes no To use C to C data line, a physical modification to the device is required to be made around the type c connector in order to use the corresponding CC identification mode. A manual switch to Host mode using OTG cables will be required from then on should you wish to attach the external USB devices, as automatic OTG switching is disabled. If you want to use USB C to C data line, you need do two things： > ① add two 5.1K 1% 0402 Resistances at R30 and R31 ，② Remove Diode ![](./../assets/RV/other.png) ![](./../assets/RV/D1Core2.png) ## Download Download the Debian system image from Mega netdisk: <https://mega.nz/folder/lx4CyZBA#PiFhY7oSVQ3gp2ZZ_AnwYA> If you want to build your own custom image, you can visit the BSP SDK in the following link. [BSP SDK](./user.html#BSP SDK development) ## Pre made images [**Sipeed Lichee RV** Archlinux 6.1.0 rc3 with LED and 1.14 Display support](https://github.com/miloserdev/sunxi_licheerv) Default login `root` and password `archriscv` ```console git clone https://github.com/miloserdev/sunxi_licheerv.git cd ./sunxi_licheerv ./create_sd.sh /dev/mmcblk0 ```"},"/hardware/en/lichee/RV/86_panel.html":{"title":"Lichee 86 Panel","content":"# Lichee 86 Panel ## Introduction Lichee RV 86 Panel is a development kit designed for smart home central control scene. It's equipped with LicheeRV Core board (Allwinner D1 chip with 512MB ddr3), 4 inch touch IPS screen, Wifi+BT module, Ethernet, two digital silicon mic and GPIO expansion interface. For software it can use Linux OS (OpenWrt or Debian) and Ali WAFT (WAFT is a high performance application research framework for AIoT based on WebAssembly and their own rendering engine) ![Basic board](./../assets/RV/86_2.png) ## Parameters Item Value Core board Sipeed LicheeRV Nezha compute bar Display Default Bundle for 4 inch 480\\*480 standard definition IPS capacitive touch screen <br> Optional upgrade to 4 inch 720\\*720 high definition IPS capacitive touch screen<br>Reserver 8 inch 1280\\*800 IPS capacitive touch screen interface Audio Onboard 1W mini speaker, Dual digital silicon microphone Network XR829 WIFI+BT wireless module <br>RTL8201F 100M Ethernet <br> Reserved RJ45 ethernet pad USB USB C OTG interface on core board <br> Reserved USB C HOST and USB uart interface Power Support 5V,12V power supply (Onboard DC DC ) Extension pins Double 2x8Pin 2.54mm Pin headers，Reserved FPCIO Shell Optional 86 panel 3D print shell，download 3D file [here](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV_86_panel/6_Shell_3D) source Dimension 86x86mm Usage situations Smart home center control unit，WAFT UI evaluation Development framework Support WAFT (WebAssembly Framework For Things）runtime Operating system Support OpenWRT and Debian [Development resource](./user.html#bsp sdk develpoment) Provide docker development image of the original SDK ![Functions map](./../assets/RV/86_pin.png) ## Related links [Download center](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV_86_panel) [Burn image](./flash.html) [Basic usage](./user.html) ## Support Email to support@sipeed.com for business cooperation or leave message on this page for help."},"/hardware/en/lichee/RV/ubuntu.html":{"title":"LicheeRV ubuntu","content":" title: LicheeRV ubuntu keywords: ubuntu, riscv, lichee update: date: 2022 12 01 version: v0.1 author: wonder content: Create file Ubuntu released the image file which can run on LicheeRV. But we can't flash this image file with PhoenixCard application, so here are steps. After booting this system on LicheeRV, we can use mouse and keyboard to operate this system if connecting this board with HDMI screen, otherwise we can only operate this system by serial communication. ## Ubuntu Introduction Ubuntu is based on another linux distribution Debian, and we can find many answers from internet when meet trouble, which is friendly to beginners and helps them find solutions quickly when they have trouble. Because of the limited performance, it's suggested running this system by command edition. If you need graphical interface, you need to do it by yourself. <img src \"./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_desktop.jpg\" alt \"d1_ubuntu_desktop\" width \"45%\"> <img src \"./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_desktop_picture.jpg\" alt \"d1_ubuntu_desktop_picture\" width \"45%\"> The photo above is D1 Dock Pro，and it's different with Dock board, Dock Pro board incorporates USB uart port, by which we can communicate the board card with the computer with only one USB TypeC cable. The relevant peripherals can be seen in the following figure. <img src \"./../../../zh/lichee/assets/RV/ubuntu/dock_pro_top_block.jpg\" alt \"dock_pro_top_block\" width \"45%\"> <img src \"./../../../zh/lichee/assets/RV/ubuntu/dock_pro_bottom_block.jpg\" alt \"dock_pro_bottom_block\" width \"45%\"> This board can be bought from [aliexpress](https://www.aliexpress.com/item/1005003741287162.html?). ## Steps ### Get image We upload this image file on [mega](https://mega.nz/folder/1FxlVKrA#nONEKgZWKBzeEkWKAq_AcQ). ### Software Visit [balenaEtcher](https://www.balena.io/etcher/) to download application. We have upload Windows edition software in our [Download station](https://dl.sipeed.com/shareURL/others/balenaEtcher), other edition can be downloaded from [balenaEtcher official site](https://www.balena.io/etcher/). ### Flash System Prepare a SD card over 8G, the card with better performance can have better experience. Connect the TF card with computer by SD card reader or SD card slot in the computer. Here is an example about SD card slot in computer, if your computer dose not have SD card slot, you need the SD card reader. <table> <tr> <th colspan \"2\"> Connect TF card with computer </th> </th> </tr> <tr> <td>Connect by SD card reader</td> <td>Connect by SD card slot</td> </tr> <tr> <td><img src \"./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_sdcard_reader.jpg\" alt \"d1_ubuntu_sdcard_reader\" ></td> <td><img src \"./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_sdcard_computer_reader.jpg\" alt \"d1_ubuntu_sdcard_computer_reader\" ></td> </tr> </table> Run balenaEtcher, choose the downloaded image file, choose your TF card, click Flash: ![d1_ubuntu_burn_image](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_burn_image.gif) Make sure you choose the correct SD card. ![d1_ubuntu_burn_image_sdcard_choose](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_burn_image_sdcard_choose.png) This will take a bit time, and after finishing this work it will be like as following figure. If there is no `Successful` shown after finishing this work, try to reburn this image. ![d1_ubuntu_finish_burn_image](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_finish_burn_image.png) ## Run System Finishing flashing system and seeing `successful` shown in the end, we can connect SD card with this board to start ubuntu. ![dock_pro_ubuntu](./../../../zh/lichee/assets/RV/ubuntu/dock_pro_ubuntu.jpg) View messages from UART, and we can operate this board by UART. <img src \"./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_boot_opensbi.jpg\" alt \"d1_ubuntu_boot_opensbi\" width \"45%\"> <img src \"./../../../zh/lichee/assets/RV/ubuntu/ubuntu_boot.jpg\" alt \"ubuntu_boot\" width \"45%\"> Wait a while, then the username and password are both `root`. ![d1_ubuntu_login](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_login.jpg) ## Connect wifi Use command `nmcli` to connect 2.4G wireless. Scan wifi ```bash nmcli dev wifi ``` ![d1_ubuntu_wifi_scan](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_wifi_scan.jpg) Connect wifi，by command `nmcli dev wifi connect wifi_name password wifi_password` ```bash nmcli dev wifi connect Sipeed_Guest password 12345678 ``` ![d1_ubuntu_wifi_connect](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_wifi_connect.jpg) See `successfully`, then we have already connected to the wifi, and commands like `apt` and others work fine. ![d1_ubuntu_install_tree](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_install_tree.jpg) ## Blink led We can blink led on our board by this Ubuntu system like what we have done on Tina, here are the codes: Tuen on LED : ```bash echo 1 > /sys/class/leds/\\:status/brightness ``` Note the `\\` in this command, without which you can't run this command successfully. ![d1_ubuntu_led_on](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_led_on.jpg) Turn off LED : ```bash echo 0 > /sys/class/leds/\\:status/brightness ``` ![d1_ubuntu_led_off](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_led_off.jpg) ## In the end Based in [Ubuntu LicheeRV image](https://wiki.ubuntu.com/RISC V/LicheeRV), we packed the wireless driver inside, which make user more convenient to experience this system. ## Questions ### No HDMI output The board will not display HDMI command line when booting, and after the HDMI related service starts LicheeRV displays the command line console on HDMI screen, and some screen is not fit LicheeRV ubuntu image output and will not display the command line console. Here is the login photo of UART (ttyS0) and HDMI command line console (tty1) of LicheeRV ubuntu image. ![d1_ubuntu_console_hdmi](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_console_hdmi.jpg)"},"/hardware/en/lichee/RV/user.html":{"title":"Basic usage","content":"# Basic usage ## Use Dock motherboard ### Connect Board We can easily note the TX and RX pins marked on the bottom of motherboard, so we can use serial port of the ttl level wo communicate with computer(Both Tina and Debian os are OK). For Tina OS we can use typeC cable to connect the core board with computer and use adb shell to communicate. For Debian OS we can use keyboard and mouse to control the system. #### Notes about Debian It may run slow because of the speed of TF card. The users name is `root` and password is `licheepi` **When using serial port connection board it always print kernel message, do following steps to stop it:** Edit `/etc/rsyslog.conf` by root and change `*.emerg` located in lht last line into `#*.emerg` in this file Restart rsyslog service by this command `/etc/init.d/rsyslog restart` **Want to use terminal in GUI** Use command `Alt+F2` to run \"run\", then input `termit` to open a terminal. ### Light LED After succeed login OS(Both Tina and Debian are OK), we can stat blink LED. There is an LED beside the screw fixing pad on the core board, This can be found in the dimension drawing: <details> <summary><font color \"#4F84FF\">Click to see dimension drawing</font></summary> <img src \"./../../../zh/lichee/assets/RV/rv_coreboard_dimension.png\"> </details> And from the [schematic](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/HDK/2_Schematic) we can know the led connects with PC0 pin, and we can figure out its siginal number is ('C' 'A')x32+0 2x32+0 64 We can also know the IO multiplexing table from pinmux pins file ```bash cat /sys/kernel/debug/pinctrl/2000000.pinctrl/pinmux pins ... pin 64 (PC0): device 2008000.ledc function ledc group PC0 #From this we know it connects with LED pin 65 (PC1): UNCLAIMED pin 66 (PC2): UNCLAIMED pin 67 (PC3): UNCLAIMED pin 68 (PC4): UNCLAIMED pin 69 (PC5): UNCLAIMED pin 70 (PC6): UNCLAIMED pin 71 (PC7): UNCLAIMED ... ``` We export this led GPIO first： ```bash echo 64 > /sys/class/gpio/export #export GPIO64 ``` Then we set this IO direction out, by which we can control its voltage level. ```bash echo out>/sys/class/gpio/gpio64/direction #Set IO direction out echo 1 > /sys/class/gpio/gpio64/value #Set IO high voltage level echo 0 > /sys/class/gpio/gpio64/value #Set IO low voltage level ``` This is the easiest way to control IO. We should cancel export if we don't use this IO. ```bash echo 64 > /sys/class/gpio/unexport # cancel export GPIO64 ``` Up to now we have succeeded Lighting led on RISC V 64 D1. You can also light on the serial RGB LED ws2812: ```bash echo 255 > /sys/class/leds/sunxi_led0r/brightness #Red led on echo 0 > /sys/class/leds/sunxi_led0r/brightness #Red led off echo 255 > /sys/class/leds/sunxi_led0g/brightness #Green led on echo 0 > /sys/class/leds/sunxi_led0g/brightness #Green led off echo 255 > /sys/class/leds/sunxi_led0b/brightness #Blue led on echo 0 > /sys/class/leds/sunxi_led0b/brightness #Blue led off ``` ### Peripheral verification #### Audio function Check recording device Use command `arecord l` ```bash root@MaixLinux:~# arecord l **** List of CAPTURE Hardware Devices **** card 0: audiocodec [audiocodec], device 0: SUNXI CODEC 2030000.codec 0 [] Subdevices: 1/1 Subdevice 0: subdevice 0 card 1: snddmic [snddmic], device 0: 2031000.dmic dmic hifi dmic hifi 0 [] Subdevices: 1/1 Subdevice 0: subdevice 0 card 2: sndhdmi [sndhdmi], device 0: 2034000.daudio audiohdmi dai 20340a4.hdmiaudio 0 [] Subdevices: 1/1 Subdevice 0: subdevice 0 ``` Check speaker device Use command `aplay l` ``` root@MaixLinux:~# aplay l **** List of PLAYBACK Hardware Devices **** card 0: audiocodec [audiocodec], device 0: SUNXI CODEC 2030000.codec 0 [] Subdevices: 1/1 Subdevice 0: subdevice 0 card 2: sndhdmi [sndhdmi], device 0: 2034000.daudio audiohdmi dai 20340a4.hdmiaudio 0 [] Subdevices: 1/1 Subdevice 0: subdevice 0 ``` Play recording： ```bash arecord D hw:1,0 f S16_LE t wav d 3 t.wav #Recording ``` ```bash aplay D hw:0,0 t.wav #Play recording ``` Besides, we can adjust volume by alsamixer application <details> <summary><font color \"#4F84FF\">Click to see alsamixer</font></summary> <pre><code class \"language shell\">┌────────────────────────────── AlsaMixer v1.2.4 ──────────────────────────────┐ │ Card: audiocodec F1: Help │ │ Chip: F2: System information │ │ View: F3:[Playback] F4: Capture F5: All F6: Select sound card │ │ Item: Headphone [dB gain: 24.00] Esc: Exit │ │ │ │ ┌──┐ ┌──┐ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ → │ │ │ │ │ → │ │ │ │▒▒│ → │ │ │ │▒▒│ → │ │ │ │▒▒│ → │ │ │ │▒▒│ → │ │▒▒│ │▒▒│ → │ │▒▒│ │▒▒│ │ │ │▒▒│ │▒▒│ │ │ ├──┤ ┌──┐ ┌──┐ Off ┌──┐ ┌──┐ ┌──┐ └──┘ │ │ │MM│ │MM│ │MM│ │MM│ │MM│ │MM│ │ │ └──┘ └──┘ └──┘ └──┘ └──┘ └──┘ │ │ 25 63 │ │ &lt;Headphon>FMINL ga FMINR ga ADC1 ADC ADC1 Inp ADC1 Inp ADC1 Inp ADC1 vol │ └──────────────────────────────────────────────────────────────────────────────┘</code></pre> </details> #### USB Function Default kernel incorporates driver for external USB flash disk. After Plug in the USB flash disk, you can use `fdisk l` command to see the new `/dev/sda` device If the USB flash disk has not been formatted, you can use `mkfs.vfat` command to format the USB disk, then mount it. #### Wireless network ##### **Use Tina OS** LicheeRV bottom board is equipped with XR829 or RTL8723BS wifi module, can connect network by following commands: Add following content into `wpa_supplicant.conf` file located in /etc/wifi/ to config wifi ```bash network { ssid \"WiFi_name\" psk \"WiFi_password\" } ``` Then restart board(Use command `reboot`), use these two commands `ifconfig wlan0 up`; `udhcpc iwlan0` to connect wifi. Then we can use ssh to remote login or use scp to transfer files by network. ##### **debian OS** It's not supported to use command line to connect network Click System menu > Preferences > Connman Settings，Enable Network Settings ，check whether the interface in the network property is wlan0. Double click the network name and input WiFi password to connect wifi. ![](./../../../zh/lichee/assets/RV/wifi 1.jpg) After succeeding connecting network, we can see the network IP ![](./../../../zh/lichee/assets/RV/wifi 2.jpg) #### Display and touch LicheeRV supports following screen： SPI screen\t\t 1.14 inch(TODO) RGB screen\t\t 4.3 inch 480x272；5.0 inch 800x480； RGB+SPI screen 4.0 inch 480x480(st7701s); 4.0 inch 720x720(nv3052c) MIPI screen \t8.0 inch 1280x720(ILI9881C) We can use following commands to view screen driver information The following message will be different due to different mirror system ```bash cat /sys/class/disp/disp/attr/sys screen 0: de_rate 300000000 hz, ref_fps:60 mgr0: 480x480 fmt[rgb] cs[0x204] range[full] eotf[0x4] bits[8bits] err[0] force_sync[0] unblank direct_show[false] iommu[1] dmabuf: cache[0] cache max[0] umap skip[0] overflow[0] \tlcd output\tbacklight( 50)\tfps:59.5\tesd level(0)\tfreq(60)\tpos(0)\treset(0)\t 480x 480 \terr:0\tskip:184\tirq:230715\tvsync:0\tvsync_skip:0 BUF enable ch[1] lyr[0] z[16] prem[N] a[globl 255] fmt[ 0] fb[ 480, 480; 480, 480; 480, 480] crop[ 0, 0, 480, 480] frame[ 0, 0, 480, 480] addr[ffe00000, 0, 0] flags[0x 0] trd[0,0] ``` Test screen color bar ：`echo 1 > /sys/class/disp/disp/attr/colorbar` #### Play video Now we can play BadApple On licheeRV [Click me to download video](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/MP4) FFmpeg has been built in Tina image, which is a powerful multimedia library, can be used for screen recording or play video. Recording command： ```bash ffmpeg f fbdev framerate 10 i /dev/fb0 record.avi ``` Play command (They are play audio from speaker and HDMI) ``` ffmpeg i /mnt/UDISK/badapple_640480_xvid.mp4 pix_fmt bgra f fbdev /dev/fb0 f alsa hw:0,0 ## speaker ffmpeg i /mnt/UDISK/badapple_640480_xvid.mp4 pix_fmt bgra f fbdev /dev/fb0 f alsa hw:2,0 ## hdmi ``` Because it's decoded by cpu, so the Maximum screen resolution test is 750x540 , and it will run slower if play higher screen resolution. <iframe src \"https://player.bilibili.com/player.html?aid 209723771&bvid BV1xa411r7PP&cid 457742249&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\"> </iframe> #### Microphone array(For debian OS only) Connect board with microphone array (make sure not reverse the cable or not reverse the pin ), then run `sudo ./micarr_0609` in terminal. If you need redevelop about microphone array, contact with support@sipeed.com ![](./../../../zh/lichee/assets/RV/mic_array_picture.jpg) <iframe src \"https://player.bilibili.com/player.html?aid 849734125&bvid BV1HL4y1H7nv&cid 457750392&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\"> </iframe> ## 86 Panel If your device display incorrectly, go to [Questions&Answers](./problems.html) to fix this. Here we just show simple usage about this board, the usage for [Dock](#use dock motherboard) also can be used for 86Panel (Except Light LED by PC0 pins) For tina os there is no GUI, so we use debian as example. After finishing burning debian OS, insert mirror card into the board, wait about 2 minutes to see the desktop displays on the screen, during which you can see log form uart port. ![attachmentId 2734](./../../../zh/lichee/assets/RV/LicheeRV_login_picture.png) Username `sipeed` and Password `licheepi`, use mouse and keyboard to operate it. ![attachmentId 2735](./../../../zh/lichee/assets/RV/desktop_appearance.png) Then we can de some basic operations. Use `Alt+F2` to run \"run\", then input `termit` to new a terminal command line. ![attachmentId 2736](./../../../zh/lichee/assets/RV/Basic_operation.png) Let's try to compile and run hello world ![attachmentId 2737](./../../../zh/lichee/assets/RV/Run_HelloWorld.png) We also provide 720P 720p high definition screen, you can try this if you have enough money。 When you use this you need to overwrite the board level configuration to set it in correct configurations to display.[Click here](problems.html#86 panel screen no display display wrong) to see more details. ![attachmentId 2738](./../../../zh/lichee/assets/RV/display_1.png) ![attachmentId 2739](./../../../zh/lichee/assets/RV/display_2.png) ### Light LED Because LED on the core board is reused with the 86Panel motherboard peripheral, We can't light it directly. After connecting the LED with the reserved IO pad, we can blink it by the same ways how we blink by [dock board](#light led). ### Connect Internet #### Connect by Cable 86 Panel supports 100 Megabit networks. And use following commands to connect to Internet after using the network cable included in the package to connect to the subnet port on the board. ```bash ifconfig eth0 up udhcpc ieth0 ``` #### Wireless network You can refer to [Dock wireless network](#wireless network) ### Others Same as operating dock motherboard. #### Touch screen test <font color #16B2C>Only tina OS incorporates touch demo</font> IF you buy 86panel package, just use command `ts_test` to test touch screen > There is a bug with touch driver,that is when you remove your finger during test, the cursor stops blink while the terminal still print messages ```bash root@MaixLinux:/# ts ts_calibrate ts_harvest ts_print_mt ts_test ts_verify ts_finddev ts_print ts_print_raw ts_test_mt tshowimg ``` ## USE BSP SDK To make it easy for user to develop custom function, Sipeed provide bsp docker image of LicheeRV. Download link:[Mega netdisk](https://mega.nz/folder/lx4CyZBA#PiFhY7oSVQ3gp2ZZ_AnwYA) After finishing downloading docker file, decompress into tar file. ```bash gzip d licheerv_d1_compile.tar.gz #Decompress into tar file docker import licheerv_d1_compile.tar licheerv_d1_compile:latest #import docker image ``` After succeed running it's suggested to relogin and username `nihao` password `sipeed123` ```bash sudo docker run it licheerv_d1_compile:latest /bin/bash # Start D1 compile docker image in interactive mode login # change user ``` You can use following commands to finish compiling. ```bash cd ~/sdk/tina d1 open_new/ source build/envsetup.sh lunch # choose 1 make menuconfig # unchoose alsa plugin, otherwise it fail to compile # alsa plugins path in menuconfig #. #└── Libraries # └── alsa plugins make j8 pack ``` There are some new dts file in this SDK, you can use them if necessary They are in device/config/chips/d1/configs/nezha/board_xxx.dts Other SDK developing manual can refer to relevant documents on the Allwinner development platform https://open.allwinnertech.com/ If you need other SDK please visit allwinner official website: https://d1.docs.aw ol.com/en ## WAFT developer's guide TODO"},"/hardware/en/lichee/RV/problems.html":{"title":"Questions&Answers","content":" title: Questions&Answers keywords: debian, Rv, Problem, apt, img, sipeed ## Apt trouble When execute apt command in debian system it may show error as follows > GPG error: http://ftp.ports.debian.org/debian ports sid InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY E852514F5DF312F6 This means built in key expires and need updating manually, here are two ways to download key. Download from web page：https://packages.debian.org/sid/all/debian ports archive keyring/download wget : `wget http://ftp.cn.debian.org/debian/pool/main/d/debian ports archive keyring/debian ports archive keyring_2022.02.15_all.deb` Copy downloaded key (usr scp or lrzsz tool) into LicheeRV board, then run following command to update key: > sudo dpkg i debian ports archive keyring_2022.02.15_all.deb Then run `sudo apt get update` to update apt. ## Not work Make sure you choose as what is shown below when burning card by yourself <details> <summary><font color \"#4F84FF\">Click to see burn requirement</font></summary> <img src \"./../assets/RV/flash.png\"> </details> We can use adb shell to communicate with computer by **Tina OS** Just connect the core board with computer for communication. ![](./../../../zh/lichee/assets/RV/adb shell.png) **Debian OS** only can use uart for communication with computer. ## 86 panel screen no display/ display wrong Here we need use corresponding fex file to overwrite the board level configuration by using following command in linux system Download fex file here https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/SDK/board Overwrite command: ```bash sudo dd if boot_package_XXX.fex of /dev/sdX bs 1K seek 16400 ``` The sdX in the command is the name of TF card in linux If you have other trouble, consult the seller or email to support@sipeed.com for help."},"/hardware/en/lichee/RV/Dock.html":{"title":"Lichee Dock","content":"# Lichee Dock ## Introduction Lichee RV Dock is a RISC V Linux development kits with high integration, small size and **affordable price** designed for opensource developer. It's equipped with **HDMI interface** and it supports many screen by its screen convert board. It's also equipped with many peripherals, including a USB A port, **2.4G Wifi BT module**, an analog microphone and a speaker jack interface. These means user can use it to develop or test linux application just by display device and input device like mouse and keyboard, which shortens developer's research and development time. ![Outlook](./../assets/RV/RV Dock.jpg) ## Parameters Item Value Core boardNezha compute bar Display port Onboard HDMI output interface; <br>RGB and MIPI screen interface connect to 2x20 Pins Header and <br> (We provide this screen converter board t) Network Onboard 2.4G WIFI+BT module, 2.4G Patch antenna and IPEX connector USB Onboard USB type A host Audio On board speaker driver circuit (supports 4Ω 3W speakers) and speaker; connector<br>On board electrical microphone circuit Memory Reserved a SOP8 pad, and the connection protocol is the SPI; <br> Consult for the customer service staff for more information Extra connector Onboard 30P FPC connector，supports our Mic Array R6 microphone array GPIO connector Reserved 2x20P 2.54mm pads(Default welding pin headers) LED An onboard WS2812 RGB LED<br> An onboard power LED KEY An onboard reset key<br>An user's key ## Links [Datasheet](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV Dock/1_Datasheet) [Schematic](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV Dock/2_Schematic) [Bitmap](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV Dock/3_Bitmap) [Dimensions](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV Dock/4_Dimensions) [3D file](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV Dock/5_3D) ## Support Email to support@sipeed.com for business cooperation or leave message on this page for help."},"/hardware/en/lichee/One/index.html":{"title":"","content":"敬请期待"},"/hardware/en/index.html":{"title":"Sipeed Open Source Products Overview","content":" title: Sipeed Open Source Products Overview Select your product in the left navigation bar. Or view [Home](/en/)."},"/hardware/en/tang/Tang-primer/Tang-primer-summary.html":{"title":"Tang Primer","content":"# Tang Primer Tang Primer series FPGA is a larger capacity board designed by Sipeed. <table> <thead> <tr> <th>Tang primer 20K</th> <th>Tang primer （Sold Out）</th> </tr> </thead> <tr> <td><a href \"./../tang primer 20k/primer 20k.html\"><img src \"./../tang primer 20k/assets/primer_20k.png\" width 320></a></td> <td><a href \"./Tang primer.html\"><img src \"./../../../assets/Tang/permier/Tang_permier.jpg\" width 320></a></td> </tr> </table>"},"/hardware/en/tang/Tang-primer/Tang-primer.html":{"title":"Tang Primer board","content":" title: Tang Primer board date: 2022 05 17 draft: false > Sold out ## The Tang Primer at a Glance ![Tang Primer at a Glance](./../../../zh/tang/assets/material.png \"Tang Primer at a Glance\") Tang Primer uses Anlogic's EG4S20 as the core unit, **20K logic unit (LUT4/LUT5 hybrid architecture), approximately 130KB SRAM, built in 32bit bit width 64MBit SDRAM, rich LVDS pin, built in 12 bit 1MSPS ADC** This provides unlimited possibilities for Tang Primer: ## Tang Primer features + FPC40P socket, can be connected to RGB LCD, VGA adapter board, high speed DAC module. + FPC24P socket, can be connected to DVP camera, high speed ADC module. + Resistive touch screen controller for I2C interface, used with RGB LCD. + 3 channel DCDC power supply chip, stable and efficient power supply, independent adjustment of Bank0 IO level. + FPGA configuration Flash, 8Mbit User Flash, nor/nand optional. + Onboard FPGA JTAG Download Debugger. + Onboard RGB LED + The adjacent pins LVDS are drawn in the same length, and 8 GCLKs are taken out, and 8 ADCs are all taken out. + The double row pin spacing is 900 mils and is compatible with breadboard development. + The half hole leads to an additional 40 IO and the entire board leads to 130+ IO. ## Pinouts Pinout for **New** Tang Primer Board. ![Tang Primer at a Glance](./../../../zh/tang/assets/Lichee tang_NewIoMap.png \"Tang Primer at a Glance\") Pinout for **Old** Tang Primer Board. ![Tang Primer at a Glance](./../../../zh/tang/assets/E203_pin.png \"Tang Primer at a Glance\") ## Resources #### Attachments: + [EG4S20_DataSheet_V1.5_english.pdf](https://github.com/kprasadvnsi/tang doc/releases/download/1.0.0/EG4S20_DataSheet_V1.5_english.pdf) + [Eagle_DataSheet_V2.8_english.pdf](https://github.com/kprasadvnsi/tang doc/releases/download/1.0.0/Eagle_DataSheet_V2.8_english.pdf) + [LicheeTang RV.pdf](https://github.com/kprasadvnsi/tang doc/releases/download/1.0.0/LicheeTang+RV.pdf) + [sipeed tang primer pins.pdf](https://github.com/kprasadvnsi/tang doc/releases/download/1.0.0/sipeed tang primer pins.pdf) + Schematic of Lichee Tang [Click me](https://dl.sipeed.com/shareURL/TANG/Primer/HDK) and choose `LicheeTang_RV(Schematic).pdf` Besides, its development environment IDE TD(Tang Dynasty) can be downloaded from following sites [https://dl.sipeed.com/shareURL/TANG/Primer/IDE](https://dl.sipeed.com/shareURL/TANG/Primer/IDE)"},"/hardware/en/tang/Tang-primer/get_started/install_linux.html":{"title":"INSTALL TD on Linux","content":"# INSTALL TD on Linux ## Install TD We can download TD install package and get its license from [Download station](https://dl.sipeed.com/shareURL/TANG). This may take a really long time to download. But we need it to development tang primer IDE File name : `TD_5.0.3_28716_NL_Linux.zip` License file：`Anlogic_20230606.lic` After finishing downloading, new a terminal and cd into where we extract `TD_5.0.3_28716_NL_Linux.zip ` and rename the license file Anlogic_20230606.lic to Anlogic.lic, then move the license file to the TD5.0.28716\\license folder in the extract path. ```bash cd <Application path > ``` The /opt directory is reserved for all software and add on packages that are not installed by default in Linux system, so we new a directory for TD. ```bash sudo mkdir /opt/TD_DECEMBER2018 ``` Extract TD into /opt/TD_DECEMBER2018 directory ```bash sudo tar xvf TD_5.0.3_28716_NL_Linux.zip d /opt/TD_DECEMBER2018/ ``` ## Check for default linux driver Plug in Tang Primer into your computer and execute lsusb to see the information. Make sure USB VID:PID is 0547:1002 as shown in image below ![](./../../../../zh/tang/Tang primer/get_started/assets/USB_VID.jpg) ## Create a new udev rule file Set udev rules to enable Tang Primer to be accessed by the plugdev group Execute the following command in terminal to create a new udev rules file. ```bash sudo nano /etc/udev/rules.d/91 anlogic jtag.rules ``` Copy the following code into text editor and save it, as shown in following image. ``` SUBSYSTEMS \"usb\", ATTRS{idVendor} \"0547\", ATTRS{idProduct} \"1002\", \\ GROUP \"plugdev\", \\ MODE \"0660\" ``` Execute the following command in terminal to restart the udev service. ```bash sudo service udev restart ``` ## Check if device detected by Tang Dynasty IDE Go to <TD installation directory>/bin/ and execute the following command to open TD IDE in GUI mode. ```bash ./td gui ``` Plugin Tang Primer into your computer and hit Refresh button on Download Dialog box. ![](./../../../../zh/tang/Tang primer/get_started/assets/td_linux_gui.jpg) Plugin Tang Primer into your computer and hit Refresh button on Download Dialog box. ![](./../../../../zh/tang/Tang primer/get_started/assets/refresh.jpg) > Due to some unknown bug, JTAG only works with 400kbps or lower speed."},"/hardware/en/tang/Tang-primer/get_started/fpga_download.html":{"title":"","content":"# Updating"},"/hardware/en/tang/Tang-primer/get_started/E203.html":{"title":"","content":"# Updating"},"/hardware/en/tang/Tang-primer/get_started/install_TD_win.html":{"title":"Install on Windows","content":"# Install on Windows > Edit on 2022.05.17 ## Install TD We can download TD install package and get its license from [Download station](https://dl.sipeed.com/shareURL/TANG). This may take a really long time to download. But we need it to development tang primer Install package ：`TD_5.0.4_27252_Win7_64bit_NL.msi` License file：`Anlogic_20230606.lic` Double click the Install package to install this software, and rename the license file Anlogic_20230606.lic as Anlogic.lic, then move the license file to the TD5.0.27252\\license folder in the installed path. Then we can run TD ## Install the USB serial port Connect Tang Primer with computer and open device manager to see device information. It may be named WinUsb Device or USB JTAG Cable duo to different Windows version. Make sure USB VID:PID is 0547:1002 Windows7 without installing driver ![no_driver](./../../../../zh/tang/assets/get_started/no_driver.png) Windows10 without installing driver ![no_driver_win10](./../../../../zh/tang/assets/get_started/no_driver_win10.png) ### Install driver on windows7 Double WinUsb Device and choose 更新驱动程序(P) ![update_drive1](./../../../../zh/tang/assets/get_started/update_driver1.png) ![update_drive2](./../../../../zh/tang/assets/get_started/update_driver2.png) Select the driver directory where the TD installed. Click 确定 to install the driver. ![choosefolder](./../../../../zh/tang/assets/get_started/choosefolder.png) After succeed installing,we can see this in device manager ![installsuccess](./../../../../zh/tang/assets/get_started/installsuccess.png) ### Install driver on windows10 > Before installing the driver itself, make sure you disable driver signature enforcement first, otherwise Windows 10 won’t allow you to install the unsigned driver from Anlogic. Double click on USB JTAG Cable to select update driver ![update_drive1](./../../../../zh/tang/assets/get_started/update_driver1_win10.png) ![update_drive2](./../../../../zh/tang/assets/get_started/update_driver2_win10.png) Browse the folder and select the driver\\win8_10_64 directory under the TD installation directory. Click OK. Then click on Let me pick from a list of available drivers on my computer. ![choosefolder](./../../../../zh/tang/assets/get_started/choosefolder_win10.png) Click on Have Disk..., then select the directory you selected in the last step, then click OK. ![install_from_disk_win10](./../../../../zh/tang/assets/get_started/install_from_disk_win10.png) The installation is successful and can be seen in the device manager. ![installsuccess](./../../../../zh/tang/assets/get_started/installsuccess.png) ## Check if device detected by Tang Dynasty IDE Click on Download button as shown in following image. ![](./../../../../zh/tang/assets/get_started/87078310026779781.jpg) Plugin Tang Primer into your computer and click Refresh button on Download Dialog box. ![](./../../../../zh/tang/assets/get_started/1823555291194601.jpg) Congratulations, you have setup the TD driver on Windows."},"/hardware/en/tang/Tang-primer/fpga/led.html":{"title":"Light LED","content":"# Light LED Get source code: https://github.com/Lichee Pi/Tang_FPGA_Examples/tree/master/0.LED Verilog code: ```verilog module led ( input wire CLK_IN, //时钟输入，24MHz input wire RST_N, //复位按键输入，低有效 output wire [2:0]RGB_LED //RGB led输出 ); parameter time1 24’d24_000_000;//晶振为24Mhz，这里表示计数一秒 reg [2:0]rledout; reg [23:0] count; reg [1:0]shift_cnt; initial begin count 24’b0; rledout 3’b1; shift_cnt 2’b0; end always @(posedge CLK_IN)begin if(RST_N 0)begin //复位按键按下就清空计数并清空输出 count < 24’b0; rledout < 3’b1; shift_cnt < 2’b0; end if(count time1) //计数时间到 begin count< 24’d0; //清空计数值 if(shift_cnt 2’b10)begin //移位3次 rledout < 3’b1; shift_cnt < 2’b0; end else begin rledout < {rledout[1:0],1’b0}; //led输出移位 shift_cnt < shift_cnt + 1’b1; end end else count < count + 1’b1; //计数累加 end assign RGB_LED rledout; endmodule ``` Saving this into project and run place&route to generate bit file to download into board. Then you will see the flow light."},"/hardware/en/tang/Tang-Nano-9K/examples/spi_lcd.html":{"title":"Spi_lcd","content":"# Spi_lcd Visit https://github.com/sipeed/TangNano 9K example/tree/main/spi_lcd to see this project. The relevant instructions will be shown after well edited. ![spi_lcd](./../../../../zh/tang/Tang Nano 9K/nano_9k/spi_lcd.jpg)"},"/hardware/en/tang/Tang-Nano-9K/examples/rgb_screen.html":{"title":"Drive RGB screen","content":" title: Drive RGB screen > Edit on 2022.04.12 ## Introduce timing RGB LCD display protocol is similar to VGA protocol, both have horizon synchronization signal line and vertical synchronization signal line. The main difference is that RGB LCD display protocol transfers by digital signal while VGA protocol transfers by analog signal. Here we introduce VGA timing. ![](./../../../../zh/tang/assets/examples/lcd_pjt_1.png) There shows horizon synchronization timing and vertical synchronization timing in the picture above. From the timing picture, we know both display a horizon of data or display a vertical of data, data transfers during the two synchronization signal pulses. Each horizon of data contains back porch, visible data **(this is normally thought as active data)** and front porch. The visible data is resolution we normally think, while the parameter of back porch and front porch depends on the resolution and frame rate. Its typical parameters can be found at <http://www.tinyvga.com/vga timing>. The timing of this 5 inch screen we sell is a bit different, its parameters can be downloaded [here (PDF)](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/5.0inch_LCD_Datashet%20_RGB_.pdf). For other size screen parameters, they can be downloaded [here](https://dl.sipeed.com/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/). The following picture shows the screenshot about this LCD timing. ![](./../../../../zh/tang/assets/examples/lcd_pjt_2.png) ![](./../../../../zh/tang/assets/examples/lcd_pjt_3.png) The first picture form shows parameters of the screen and the the following picture is its timing. From its timing picture, we can know we don't need to set front porch time and back porch time, we just need to set blanking time. ## Create project Please refer to this [article](./../led/led.html) to see how to create project. ## Generate screen clock Here we use gowin official IP The crystal oscillator onboard is 27MHz, but our screen needs 33.3MHZ clock, so we need to use the corresponding ip core to generate the corresponding clock. Here we use `IP Core Generate` which can be find in *Tools > IP Core Generate*. ![](./../../../../zh/tang/Tang Nano 1K/assets/Gowin_IP_rpll.png) Double click `rPLL` and select `Verilog` in the pop up window language, set CLKIN 27MHz, CLKOUT to 33.00MHz. Also config the tolerance. ![](./../../../../zh/tang/Tang Nano 1K/assets/lcd_rpll.png) After clicking OK it asks whether to add it to the current project choose `yes`. ![](./../../../../zh/tang/Tang Nano 1K/examples/led/assets/add_ip_file_in_project.png) Then a tmp file will appear, we can use it to generate the ip, like what is shown below. ![](./../../../../zh/tang/Tang Nano/examples/led/assets/ip_examples.png) ## Screen driver **To start this we should create a verilog file first** ### Port definition First define ports which are needed to drive screen ```verilog module VGAMod ( input CLK, input nRST, input PixelClk, output LCD_DE, output LCD_HSYNC, output LCD_VSYNC, \toutput [4:0] LCD_B, \toutput [5:0] LCD_G, \toutput [4:0] LCD_R ); ``` We use RGB565 driver mode. ### Timing constants Then we define the constants according to the timing form picture ```verilog localparam V_BackPorch 16'd6; //0 or 45 localparam V_Pluse \t 16'd5; localparam HightPixel 16'd480; localparam V_FrontPorch 16'd62; //45 or 0 localparam H_BackPorch 16'd182; \t localparam H_Pluse \t 16'd1; localparam WidthPixel 16'd800; localparam H_FrontPorch 16'd210; localparam PixelForHS WidthPixel + H_BackPorch + H_FrontPorch; \t localparam LineForVS HightPixel + V_BackPorch + V_FrontPorch; ``` First we define front porch, back porch and valid pixel data. As for the front porch timing and back porch timing which have been mentioned earlier, it can be combined into an erasing time, that is, one can be set to 0, and the other can be set to the erasing time. Anyway, the front porch timing and back porch timing can be added up to meet the timing requirements in the table is ok. ### Define variables Define some variables helps us to meet timing requirement ```verilog reg [15:0] LineCount; reg [15:0] PixelCount; reg\t[9:0] Data_R; reg\t[9:0] Data_G; reg\t[9:0] Data_B; ``` ### Synchronization signals This code generates synchronization signals. It should be noted that the synchronization signals of this screen enabled by negative polarity. ```verilog always @( posedge PixelClk or negedge nRST )begin if( !nRST ) begin LineCount < 16'b0; PixelCount < 16'b0; end else if( PixelCount PixelForHS ) begin PixelCount < 16'b0; LineCount < LineCount + 1'b1; end else if( LineCount LineForVS ) begin LineCount < 16'b0; PixelCount < 16'b0; end else PixelCount < PixelCount + 1'b1; end always @( posedge PixelClk or negedge nRST )begin if( !nRST ) begin \t\t\tData_R < 9'b0; \t\t\tData_G < 9'b0; \t\t\tData_B < 9'b0; end else begin \t\t\tend \tend //Here note the negative polarity of HSYNC and VSYNC assign LCD_HSYNC (( PixelCount > H_Pluse)&&( PixelCount < (PixelForHS H_FrontPorch))) ? 1'b0 : 1'b1; assign LCD_VSYNC ((( LineCount > V_Pluse )&&( LineCount < (LineForVS 0) )) ) ? 1'b0 : 1'b1; ``` ### Enable signal This code decides whether display image. This driver needs a port which is set to 1 when the 800*480 data of the image is valid to enable display. ```verilog assign LCD_DE ( ( PixelCount > H_BackPorch )&& ( PixelCount < PixelForHS H_FrontPorch ) && ( LineCount > V_BackPorch ) && ( LineCount < LineForVS V_FrontPorch 1 )) ? 1'b1 : 1'b0; //It will shake if there not minus one ``` ### Test color bars This code generate color bars to test LCD ```verilog localparam Colorbar_width WidthPixel / 16; assign LCD_R ( PixelCount < ( H_BackPorch + Colorbar_width * 0 )) ? 5'b00000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 1 )) ? 5'b00001 : ( PixelCount < ( H_BackPorch + Colorbar_width * 2 )) ? 5'b00010 : ( PixelCount < ( H_BackPorch + Colorbar_width * 3 )) ? 5'b00100 : ( PixelCount < ( H_BackPorch + Colorbar_width * 4 )) ? 5'b01000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 5 )) ? 5'b10000 : 5'b00000; assign LCD_G ( PixelCount < ( H_BackPorch + Colorbar_width * 6 )) ? 6'b000001: ( PixelCount < ( H_BackPorch + Colorbar_width * 7 )) ? 6'b000010: ( PixelCount < ( H_BackPorch + Colorbar_width * 8 )) ? 6'b000100: ( PixelCount < ( H_BackPorch + Colorbar_width * 9 )) ? 6'b001000: ( PixelCount < ( H_BackPorch + Colorbar_width * 10 )) ? 6'b010000: ( PixelCount < ( H_BackPorch + Colorbar_width * 11 )) ? 6'b100000: 6'b000000; assign LCD_B ( PixelCount < ( H_BackPorch + Colorbar_width * 12 )) ? 5'b00001 : ( PixelCount < ( H_BackPorch + Colorbar_width * 13 )) ? 5'b00010 : ( PixelCount < ( H_BackPorch + Colorbar_width * 14 )) ? 5'b00100 : ( PixelCount < ( H_BackPorch + Colorbar_width * 15 )) ? 5'b01000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 16 )) ? 5'b10000 : 5'b00000; ``` **Do not forget to add `endmodule` in the end of the driver file.** Up to now we have finished the driver module. ## Instantiated in the top **Create a new verilog file** Just copy the content below and save it. ```verilog module TOP //Name TOP module ( \tinput\t\t\tnRST, \tinput XTAL_IN, \toutput\t\t\tLCD_CLK, \toutput\t\t\tLCD_HYNC, \toutput\t\t\tLCD_SYNC, \toutput\t\t\tLCD_DEN, \toutput\t[4:0]\tLCD_R, \toutput\t[5:0]\tLCD_G, \toutput\t[4:0]\tLCD_B ); // list ports \twire\t\tCLK_SYS;\t \twire\t\tCLK_PIX; //instantiate pll Gowin_rPLL chip_pll( .clkout(CLK_SYS), //output clkout //200M .clkoutd(CLK_PIX), //output clkoutd //33.00M .clkin(XTAL_IN) //input clkin );\t \tVGAMod\tVGAMod_inst //instantiate vga driver \t( \t\t.CLK\t\t(\tCLK_SYS ), \t\t.nRST\t\t(\tnRST\t\t), \t\t.PixelClk\t(\tCLK_PIX\t\t), \t\t.LCD_DE\t\t(\tLCD_DEN\t \t), \t\t.LCD_HSYNC\t(\tLCD_HYNC \t), \t\t.LCD_VSYNC\t(\tLCD_SYNC \t), \t\t.LCD_B\t\t(\tLCD_B\t\t), \t\t.LCD_G\t\t(\tLCD_G\t\t), \t\t.LCD_R\t\t(\tLCD_R\t\t) \t); \tassign\t\tLCD_CLK\t\t \tCLK_PIX; endmodule ``` ## Synthesize, constrain, Place&Route ### Synthesize After finishing steps above, go to the \"Process\" interface, synthesize the edited file, which means running \"Synthesize\". ![](./../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_synthsize.png) If the result is the same as shown below ![](./../../../../zh/tang/Tang Nano/assets/LED.png) It means that there is no bug in our code, we can continue the next steps. If there is some thing wrong, please fix by yourself. ### Constrain Here we only constraint pins The corresponding pins and ports are as follows form shows The way to constain pins can refer to the [Light led](./../led/led.html), it contains a way to constrain pins. If you feel troublesome about the method above, you can copy the content from this [page](./../../../../zh/tang/Tang Nano 9K/examples/lcd_constrains.html)， and paste it in \".cst\" file in this project (if there is no \".cst\" file, just create a \"physicsl constrains file\"). PORT I/O PIN PORT I/O PIN LCD_B[4] output 41 LCD_B[3] output 42 LCD_B[2] output 51 LCD_B[1] output 53 LCD_B[0] output 54 LCD_G[5] output 55 LCD_G[4] output 56 LCD_G[3] output 57 LCD_G[2] output 68 LCD_G[1] output 69 LCD_G[0] output 70 LCD_R[4] output 71 LCD_R[3] output 72 LCD_R[2] output 73 LCD_R[1] output 74 LCD_R[0] output 75 LCD_DEN output 33 LCD_SYNC output 34 LCD_HYNC output 40 LCD_CLK output 35 XTAL_IN input 52 nRST input 4 ### Place&Route After constraining, we need to open IO mux to complete Place&Route. Tick *Project > Configuration > Place&Route > Dual Purpose Pin* in the Menu Bar. ![](./../../../../zh/tang/Tang Nano/examples/led/assets/enable_io_mux.png) Then we can run Place&Route. ## Program Finishing Place&Route, we can download the generated `.fs` file to the development board to see color bar. ## End If you have any suggestions, just leave a message. <p id \"back\"> <a href \"#\" onClick \"javascript :history.back( 1);\">Back to the previous page</a> </p>"},"/hardware/en/tang/Tang-Nano-9K/examples/neorv32.html":{"title":"NeoRV32 on nano 9K","content":"# NeoRV32 on nano 9K ## Preface NeoRV32 is a powerful RISCV5 core ![](https://github.com/stnolting/neorv32/raw/main/docs/figures/neorv32_processor.png) There is an example neorv32 project using the built in 72kb of user flash as instruction memory and with GPIO and JTAG enabled for debugging: [Tang Nano 9K github repository](https://github.com/jimmyw/tang_nano_9k_neorv32). ## Environment [Gowin IDE](./../../common doc/install the ide.html) [GCC Toolchain](https://stnolting.github.io/neorv32/ug/#_software_toolchain_setup) ## Steps ### Program FPGA Clone example repo `git clone git@github.com/jimmyw/tang_nano_9k_neorv32` Open tang_nano_9k project by `tang_nano_9k.gprj` file in `src` directory Right click Place&Route which is in Process interface and choose Clean&Rerun All Compile the userspace code in `hello_world` using `make all` Download the generated .fs file to the Embedded Flash of Nano 9K using `openFPGALoader f impl/pnr/tang_nano_9k.fs user flash hello_world/neorv32_raw_exe.bin` You can at a later state update the user space flash directly from the bootloader using `python uart_upload.py /dev/ttyUSB0 neorv32_exe.bin`"},"/hardware/en/tang/Tang-Nano-9K/examples/picorv.html":{"title":"PicoRV on nano 9K","content":"# PicoRV on nano 9K > Edit on 2022.07.13 ## Preface There ia an example about picoRV : [Tang Nano 9K github repository](https://github.com/sipeed/TangNano 9K example/tree/main/picotiny). In this tutorial we just describe how to run the example simply . ## Environment Python [Gowin IDE](./../../common doc/install the ide.html) ## Steps ### Program FPGA Open picotiny project by `picotiny.gprj` file in TangNano 9K example\\picotiny\\project directory Tick `Use MSPI as regular IO` in Project >Configuration >Place&Route >Dual Purpose Pin which can be found in the top menu bar Right click Place&Route which is in Process interface and choose Clean&Rerun All Download the generated .fs file to the Embedded Flash of Nano 9K Then we can use the FPGA like a mcu. ### Download firmware Execute the following command in TangNano 9K example\\picotiny directory ```python python .\\sw\\pico programmer.py .\\example fw flash.v COM13 ``` The COM13 at the end of command line refers to the serial port number of the development board in the system. For example, if it is allocated COM14 in your system, you need change it into COM14. There is a countdown shows ` Waiting for reset ` when you succeed execute the command, in which time it's required to press the S1 button of the development board to complete the programming. The succeed done log is as below: ```powershell \\TangNano 9K example\\picotiny> python .\\sw\\pico programmer.py .\\example fw flash.v COM13 Read program with 11760 bytes Waiting for reset ... Total sectors 3 Total pages 46 Flashing 1 / 3 Flashing 2 / 3 Flashing 3 / 3 Flashing completed ``` Then we can use serial port tools to execute command and use HDMI to display the code interface. ![](./../../../../../zh/tang/Tang Nano 9K/nano_9k/picorv.jpg) ## End Other knowledge like cross compile is not mentioned here, so you should learn to use it by yourself."},"/hardware/en/tang/Tang-Nano-9K/examples/led.html":{"title":"Light LED","content":" title: Light LED > Edit on 2022.07.13 This tutorial will walk you through the basics of the Gowin IDE, which we'll use to create a simple program to flash the onboard LEDs. ## Create Project Create Project：File >NEW >FPGA Design Project >OK ![Create Project](./../../../../zh/tang/Tang Nano/assets/LED 1.png) Set project name and project path (File name and project path should be English) ![Set project name](./../../../../zh/tang/Tang Nano/assets/LED 2.png) Choose the correct device: ![Tang_nano_9k_device_choose](./../../../../zh/tang/Tang Nano 9K/nano_9k/Tang_nano_9k_Device_choose.png) ## Prepare the code After creating the project, we can start editing the code. To create a new file, we can either click the marked icon (top left of the window) or use Ctrl+N. Choose Verilog File in the pop up window. ![Create file](./../../../../zh/tang/Tang Nano/assets/LED 5.png) Name the file (it's best to use English for this) ![Name the file](./../../../../zh/tang/Tang Nano/assets/LED 6.png) Double click the created file to open it, then edit it in right window. ![OPen file](./../../../../zh/tang/Tang Nano/assets/LED 7.png) Here's all the code we're using for this example, either copy/paste it into your file or enter it manually. ~~~v module led ( input sys_clk, // clk input input sys_rst_n, // reset input output reg [5:0] led // 6 LEDS pin ); reg [23:0] counter; always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) counter < 24'd0; else if (counter < 24'd1349_9999) // 0.5s delay counter < counter + 1'b1; else counter < 24'd0; end always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) led < 6'b111110; else if (counter 24'd1349_9999) // 0.5s delay led[5:0] < {led[4:0],led[5]}; else led < led; end endmodule ~~~ Once we're done with the code, we need to tick `Use DONE as regular IO` in Project >Configuration >Place&Route >Dual Purpose Pin which can be found in the top menu bar to avoid an error. ![img_configuration](./../../../../zh/tang/Tang Nano 9K/nano_9k/LED_Configuration.png) ## Synthesize, constrain, place&route ### Synthesize After finishing the steps above, go to the \"Process\" interface and double click \"Synthesize\" to synthesize our code. You can also right click \"Synthesize\" to see its other function ![Synthesize](./../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_synthsize.png) If the result is the same as shown below, then we can move on to setting our constraints. ![Finish_Synthesize](./../../../../zh/tang/Tang Nano/assets/LED.png) If your synthesis fails, then check the console it should tell you where the error is. ### Constrain > Clock constraint is not involved here For our code to actually do anything, we must bind the ports we defined to the actual pins of the FPGA chip. Double click the FloorPlanner in the Process interface to set pin constraints (If synthesis fails we can't do this step). ![FloorPlanner](./../../../../zh/tang/assets/examples/led_pjt_2.png) The first time we open FloorPlanner it will prompt lack of a \".cst\" file, we'll just click ok. ![cst_file](./../../../../zh/tang/Tang Nano/assets/LED 9.png) You can download the full schematic [here](https://dl.sipeed.com/shareURL/TANG/Nano%209K/2_Schematic). Here is the part of schematic about LEDs on the nano 9k: ![LED_schematic](./../../../../zh/tang/Tang Nano 9K/nano_9k/LED_Pins.png \"nano 9k led pins\") In this GUI interface we have two ways to constrain pins: Drag the corresponding port to the pin of the chip Enter the pin number corresponding to the port in IO constraints Refer to this guide for more information about FloorPlanner : [SUG935 1.3E_Gowin Design Physical Constraints User Guide.pdf](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide/SUG935 1.3E_Gowin%20Design%20Physical%20Constraints%20User%20Guide.pdf) Don't forget bind the clock port and reset port to their pins marked in the [schematic](https://dl.sipeed.com/shareURL/TANG/Nano%209K/2_Schematic) The following figure shows the example pin constraint of this project ![constraints](./../../../../zh/tang/Tang Nano 9K/nano_9k/LED_FloorPlanner.png) ### Place&Route > If it shows error2017, make sure you have enabled `Use DONE as regular IO` (see [prepare the code](#Prepare the code)) Double click Place&Route to run it, it will shows as following: ![Finish_place&route](./../../../../zh/tang/Tang Nano 9K/nano_9k/LED_Place&Route.png) ## Download to device Visit [here](https://dl.sipeed.com/shareURL/TANG/programmer/docs) to see docs about programmer if you need. ### Start to download Connect your board to your PC, and select the device as shown in the picture: ![Choose_device](./../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_device_scan.png) We'll use download to SRAM as an example. Follow the steps in the figure below to select that operation: ![SRAM_download](./../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_sram_program.png \"configure sram download mode\") Click the button shown in the figure to start the firmware download process: ![Verify](./../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_sram_download.png \"start sram download\") ### Result Once that's complete, the LEDs start flashing like this： ![Finish](./../../../../zh/tang/Tang Nano 9K/nano_9k/blink.gif) ## Other If you need to store firmware with no power, just change Access mode and choose your target .fs file . ![Access_mode](./../../../../zh/tang/Tang Nano 9K/nano_9k/access_mode.png) Visit [Questions&Answers](./../../common doc/questions.html) if you have trouble ## End You've reached the end of the tutorial. If you have any suggestion, just leave your message."},"/hardware/en/tang/Tang-Nano-9K/Tang-nano-9k.html":{"title":"Tang Nano 9k examples","content":" title: Tang Nano 9k examples ~~Before reading, we suggest using this [Programmer](https://dl.sipeed.com/shareURL/TANG/programmer/archived) not that installed with IDE~~ > The above requirements are not necessary, version 1.9.9 can also work fine. > If you want, you can also try the latest version of the IDE. [Blink](./examples/led.html) [LCD screen](./examples/rgb_screen.html) [Run examples of PicoRV](./examples/picorv.html) [⭐ **Lumorphix** ⭐](https://brisbanesilicon.com.au/products/lumorphix/beta releases/#beta release 02.0001) [litex running on 9K](https://github.com/curliph/tang_nano_9k_test) [FPGA drives SPI screen](https://github.com/sipeed/TangNano 9K example/tree/main/spi_lcd) [HDMI display](https://github.com/sipeed/TangNano 9K example/tree/main/hdmi) [Picotiny running on 9K](https://github.com/sipeed/TangNano 9K example/tree/main/picotiny) ~~ MIPI Screen(Preparing, please wait)~~ (*Additional PCB board required, plan temporarily canceled, Please look forward to the demo of 25K*) others(Any ideas could be come up, and will be accepted if feasible)"},"/hardware/en/tang/Tang-Nano-9K/Nano-9K.html":{"title":"Tang Nano 9K","content":"# Tang Nano 9K ## Introduction The Tang Nano 9K, powered by [Gowin's](https://www.gowinsemi.com/en/) GW1NR 9 FPGA chip, is a versatile and feature rich development board. It features several often used connectors, including HDMI, RGB screen, and SPI screen interfaces, as well as a 32Mbit SPI flash and six LEDs. It has 8640 LUT4 logic units, an onboard 27MHz clock and 2 PLLs meaning, as well as basic FPGA designs, it can also be used for full risc v softcores such as PicoRV. ![](./../../../assets/Tang/Nano 9K/9K.png) ## Comparison Tang Nano 9K is the 5th product of Sipeed Tang series. Several Tang FPGA products are compared in the table below, if you need a more feature rich board consider the [Tang Nano 20K](../tang nano 20k/nano 20k.html). Model Tang Nano 1K Tang Nano 4K Tang Nano 9K : : : : Appearance <img src \"./../../../zh/tang/Tang Nano/assets/clip_image002.gif\" width \"180\" > <img src \"./../../../zh/tang/Tang Nano/assets/clip_image004.gif\" width \"180\" > <img src \"./../../../zh/tang/Tang Nano/assets/clip_image006.gif\" width \"180\" > Logic Units (LUT4) 1152 4608 8640 Hard core processor / Cortex m3 / Crystal oscillator 27MHZ 27MHZ 27MHZ Display interface RGB screen interface HDMI HDMI, <br>RGB screen interface,<br>SPI screen interface Camera / Support OV2640 / External SPI FLASH Reserved pads only 32Mbits SPI flash 32Mbits SPI flash TF card slot / / Yes Debugger Onboard USB JTAG Onboard USB JTAG Onboard USB JTAG & USB UART ## Specifications Indepth specifications of the tang nano 9k. Item value Logic units(LUT4) 8640 Registers(FF) 6480 ShadowSRAM SSRAM(bits) 17280 Block SRAM BSRAM(bits) 468K Number of B SRAM 26 User flash(bits) 608K SDR SDRAM(bits) 64M 18 x 18 Multiplier 20 SPI FLASH 32M bit Number of PLL 2 Display interface HDMI interface, SPI screen interface and RGB screen interface Debugger Onboard BL702 chip provides USB JTAG and USB UART functions for GW1NR 9 IO • support 4mA、8mA、16mA、24mA other driving capabilities <br>• Provides independent Bus Keeper, pull up/pull down resistors, and Open Drain output options for each I/O Connector TF card slot, 2x24P 2.54mm Header pads Button 2 programmable buttons for users LED Onboard 6 programmable LEDs ### On board Function block ![Generated](./../../../zh/tang/Tang Nano 9K/assets/clip_image008.jpg) ### Pinmap ![Generated](./../../../zh/tang/Tang Nano 9K/assets/clip_image010.gif) Usage FPGA MCU FPGA+MCU : : : : Language Verilog HDL/Verilog C/C++ Verilog HDL/Verilog ， C/C++ Introduction verify HDL design After flashing the softcore bitstream, <br>this board can be used as a normal microcontroller unit After flashing the softcore bitstream,<br>it can be used as two chips User Beginner，FPGA developer RISC V developers，Cortex M developers Senior engineer ## Getting Started 1. **[Download User Guide](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide)**: Access all necessary PDF documents by downloading our comprehensive user guide package. 2. **[Install IDE & License Configuration](./../common doc/install the ide.html)**: Set up your Integrated Development Environment (IDE) and configure your license by following this guide. 3. **[Software User Guide](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide/SUG100 2.6E_Gowin%20Software%20User%20Guide.pdf)**: Refer to the \"SUG100 2.6E_Gowin Software User Guide.pdf\" in the downloaded package for detailed software instructions. 4. **[LED Tutorial](./examples/led.html)**: A simple project to get you acquainted to FPGAs and the tangnano9k. **Verilog Code Standards**: It's crucial to adhere to good coding practices. **Recommended Reading**: SUG949 1.1E_Gowin HDL Coding User Guide.pdf UG286 1.9.1E_Gowin Clock User Guide.pdf These, and other important, documents are available at our [Download Station](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide). **Online Resources**: We recommend two excellent learning sites for Verilog: [HDLBITs](https://hdlbits.01xz.net/wiki/Main_Page) and [ASIC World's Verilog Page](https://www.asic world.com/verilog/index.html). 5. **[RGB Screen Tutorial](./examples/rgb_screen.html)**: Follow this step by step guide for setting up a 5 inch RGB screen display. If you encounter difficulties, refer to our [9K examples](https://github.com/sipeed/TangNano 9K example) adapted for 9K + 5 inch screens. **Screen Wiring Note**: Ensure correct alignment of the 1 pin silk screen on the connector with the 1 pin of the cable. **Key Documents for Reference**: rPLL IP core reference: Navigate to Tools > IP Core Generator > Hard Module > CLOCK > rPLL. [SUG284 2.1E_Gowin IP Core Generator User Guide.pdf](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide/SUG284 2.1E_Gowin%20IP%20Core%20Generator%20User%20Guide.pdf) (Page 28) [Datasheet of 5 inch Screen](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/5.0inch_LCD_Datashet%20_RGB_.pdf) 6. **Examples in the source code [repository](https://github.com/sipeed/TangNano 9K example)** includes a PicoRV softcore and a HDMI display example, among other examples. ## Reference and Examples You can access several example projects on our [Examples Page](./../common doc/examples.html). ## Hardware Resources Access all necessary hardware files at [Hardware Files](https://dl.sipeed.com/shareURL/TANG/Nano%209K/). [Datasheet](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/EN) [Schematic](https://dl.sipeed.com/shareURL/TANG/Nano%209K/2_Schematic) [Bit map](https://dl.sipeed.com/shareURL/TANG/Nano%209K/3_Bit_number_map) [Size](https://dl.sipeed.com/shareURL/TANG/Nano%209K/4_Dimensional_drawing) [3D file](https://dl.sipeed.com/shareURL/TANG/Nano%209K/5_3D_file) [Some manuals](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual) ## Attention and Best Practices 1. **Support and Community**: For assistance, join our Telegram group (t.me/sipeed) or contact us on Twitter ([@SipeedIO](https://twitter.com/SipeedIO)). You can also leave a message below. 2. **Troubleshooting**: If you encounter any issues, consult our [Tang Questions](https://wiki.sipeed.com/hardware/en/tang/common doc/questions.html) page first. 3. **Avoid using JTAG, MODE0/1, and DONE pins unless necessary**. For details, refer to [SUG100 2.6E_Gowin Software User Guide.pdf](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide/SUG100 2.6E_Gowin%20Software%20User%20Guide.pdf). 4. **Static Electricity Precautions**: Always discharge static electricity before handling the PCBA to prevent damage. 5. **GPIO Voltage Compliance**: Ensure that the actual working voltage of GPIOs does not exceed their rated value as indicated in the schematic. Exceeding these limits can cause permanent damage to the PCBA. 6. **FPC Cable Connection**: When connecting FPC flexible cables, ensure that the cable is fully inserted into its base without any offset. 7. **Avoid Short Circuits**: Prevent liquids or metals from coming into contact with the component pads on the PCBA while it's operating, as this could cause a short circuit and damage the PCBA. 8. **Handling Multiplexed IO and HDMI Ports**: Be aware that the HDMI IO ports are pulled up. When using IOs routed to pin headers, they may not operate as intended. ![HDMI IO Port Configuration](./../../../zh/tang/Tang Nano 9K/assets/nano_9k_hdmi_io.png)"},"/hardware/en/tang/tang-nano-20k/nano-20k.html":{"title":"Tang Nano 20K","content":" title: Tang Nano 20K keywords: FPGA, Tang, Nano, 20K update: date: 2023 02 27 version: v0.1 author: wonder content: Create file ## Introduction Tang Nano 20K is a development board, using the [GW2AR 18 QN88](http://www.gowinsemi.com.cn/prod_view.aspx?TypeId 10&FId t3:10:3&Id 167#GW2AR) FPGA, containing 20736 LUT4 logic cells and 15552 Flip Flops. There are 2 PLL in this FPGA chip, and many DSP units supporting 18 bit x 18 bit multiplication. Onboard [BL616](https://bouffalolab.com/product/?type detail&id 21) is used for downloading bitstream into FPGA, and it's also used as USB to serial convertor to communicate FPGA with computer via UART. The 27MHz crystal generates the clock for HDMI display, onboard MS5351 clock generating chip also provides multiple clocks. ## Rendering appearance <img src \"./../../../../hardware/zh/tang/tang nano 20k/assets/nano_20k/tang_nano_20k_3920_top.png\" width \"40%\"> <img src \"./../../../../hardware/zh/tang/tang nano 20k/assets/nano_20k/tang_nano_20k_3920_bot.png\" width \"40%\"> ## Parameters <table> <thead> \t<tr> \t\t<th style \"text align:center\">Item</th> \t\t<th style \"text align:center\">Detail</th> \t\t<th style \"text align:center\">Others</th> \t</tr> </thead> <tbody> \t<tr> \t\t<td style \"text align:left\">FPGA Chip</td> \t\t<td style \"text align:left\"><a href \"http://www.gowinsemi.com.cn/prod_view.aspx?TypeId 10&amp;FId t3:10:3&amp;Id 167#GW2AR\">GW2AR LV18QN88C8/I7</a> \t\t</td> \t\t<td style \"text align:left\"> \t\t\t<table> \t\t\t\t<tbody> \t\t\t\t\t<tr> \t\t\t\t\t<td>Logic units(LUT4)</td> \t\t\t\t\t<td>20736</td> \t\t\t\t</tr> \t\t\t\t<tr> \t\t\t\t\t<td>Flip Flop(FF)</td> \t\t\t\t\t<td>15552</td> \t\t\t\t</tr> \t\t\t\t<tr> \t\t\t\t\t<td>Shadow SRAM (S SRAM)(bits)</td> \t\t\t\t\t<td>41472</td> \t\t\t\t</tr> \t\t\t\t<tr> \t\t\t\t\t<td>Block SRAM (B SRAM)(bits)</td> \t\t\t\t\t<td>828K</td> \t\t\t\t</tr> \t\t\t\t<tr> \t\t\t\t\t<td>Numbers of B SRAM</td> \t\t\t\t\t<td>46</td> \t\t\t\t</tr> \t\t\t\t<tr> \t\t\t\t\t<td>32bits SDR SDRAM</td> \t\t\t\t\t<td>64M bits</td> \t\t\t\t</tr> \t\t\t\t<tr> \t\t\t\t\t<td>Numbers of 18x18 Multiplier</td> \t\t\t\t\t<td>48</td> \t\t\t\t</tr> \t\t\t\t<tr> \t\t\t\t\t<td>Numbers of PLLs</td> \t\t\t\t\t<td>2</td> \t\t\t\t</tr> \t\t\t\t<tr> \t\t\t\t\t<td>I/O Bank</td> \t\t\t\t\t<td>8</td> \t\t\t\t</tr> \t\t\t</tbody></table> \t\t</td> \t</tr> \t<tr> \t\t<td style \"text align:left\">Onboard debugger</td> \t\t<td style \"text align:left\">BL616</td> \t\t<td style \"text align:left\">· JTAG for FPGA<br>· USB to UART for FPGA<br>· USB to SPI for FPGA communication<br>· Control MS5351 generate frequency</td> \t</tr> \t<tr> \t\t<td style \"text align:left\">Clock generator</td> \t\t<td style \"text align:left\">MS5351</td> \t\t<td style \"text align:left\">Provide extra 3 clocks for FPGA<br> \t\t\t<a href \"https://wiki.sipeed.com/hardware/en/tang/tang nano 20k/example/unbox.html#pll_clk\">CLick me to see how to config MS5351</a> \t\t\t</td></td> \t</tr> \t<tr> \t\t<td style \"text align:left\">Display interface</td> \t\t<td style \"text align:left\">· 40Pins RGB lcd connector<br>· HDMI interface</td> \t\t<td style \"text align:left\"></td> \t</tr> \t<tr> \t\t<td style \"text align:left\"> LED </td> \t\t<td style \"text align:left\"> 6 </td> \t\t<td style \"text align:left\"> Low voltage level enable</td> \t</tr> \t<tr> \t\t<td style \"text align:left\"> RGB LED </td> \t\t<td style \"text align:left\"> 1 </td> \t\t<td style \"text align:left\"> WS2812 </td> \t</tr> \t<tr> \t\t<td style \"text align:left\"> User key </td> \t\t<td style \"text align:left\"> 2 </td> \t\t<td style \"text align:left\"> </td> \t</tr> \t<tr> \t\t<td style \"text align:left\"> TF Card Slot </td> \t\t<td style \"text align:left\"> 1 </td> \t\t<td style \"text align:left\"> </td> \t</tr> \t<tr> \t\t<td style \"text align:left\"> PCM Amplifier </td> \t\t<td style \"text align:left\"> 1 </td> \t\t<td style \"text align:left\"> MAX98357A，for audio driving</td> \t</tr> \t<tr> \t\t<td style \"text align:left\"> Storage </td> \t\t<td style \"text align:left\"> 64Mbits Flash </td> \t\t<td style \"text align:left\"> To save bitstream </td> \t</tr> \t<tr> \t\t<td style \"text align:left\"> Size </td> \t\t<td style \"text align:left\"> 22.55mm x 54.04mm </td> \t\t<td style \"text align:left\"> Visit 3D file for more information </td> \t</tr> </tbody> </table> ## Function diagram ![tang_nano_20k_functionalannotation](./../../../../hardware/zh/tang/tang nano 20k/assets/nano_20k/tang_nano_20k_functionalannotation.jpg) Detailed Function diagram <img src \"./../../../../hardware/zh/tang/tang nano 20k/assets/nano_20k/tang_nano_20k_functionalannotation_top.png\" width \"40%\" alt \"tang_nano_20k_functionalannotation_top\"> <img src \"./../../../../hardware/zh/tang/tang nano 20k/assets/nano_20k/tang_nano_20k_functionalannotation_bot.png\" width \"40%\" alt \"tang_nano_20k_functionalannotation_bot\"> ## Pin diagram ![tang_nano_20k_pinlabel](./../../../../hardware/zh/tang/tang nano 20k/assets/nano_20k/tang_nano_20k_pinlabel.png) ## FPGA Jtag test point We reserved jtag test point on Tang Nano 20K, for those who want to use their own debugger. Note: There is onboard Jtag for download FPGA firmware, so this Jtag test point is only for those who want to use their own debugger. ![tang_nano_20k_testpointlannotation](./../../../../hardware/zh/tang/tang nano 20k/assets/nano_20k/tang_nano_20k_testpointlannotation.png) ## Hardware information [Datesheet](https://dl.sipeed.com/shareURL/TANG/Nano_20K/1_Datasheet) [Schematic](https://dl.sipeed.com/shareURL/TANG/Nano_20K/2_Schematic) [PCB BOM](https://dl.sipeed.com/shareURL/TANG/Nano_20K/3_Bit_number_map)(Visit the `html` file in your board version) [Board Size](https://dl.sipeed.com/shareURL/TANG/Nano_20K/4_Dimensional_drawing) [Bosrd 3D File](https://dl.sipeed.com/shareURL/TANG/Nano_20K/4_Dimensional_drawing) [Part of chip datasheet](https://dl.sipeed.com/shareURL/TANG/Nano_20K/6_Chip_manual) ## Using guide Install IDE > Prepare your code > Burn into board Install IDE [Click me](https://wiki.sipeed.com/hardware/en/tang/common doc/install the ide.html) [Unbox](https://wiki.sipeed.com/hardware/en/tang/tang nano 20k/example/unbox.html) Blink the leds [Click me](https://wiki.sipeed.com/hardware/en/tang/tang nano 20k/example/led.html) More example codes [Github](https://github.com/sipeed/TangNano 20K example) ### Studying resource Verilog tutorial:[Verilog](https://www.asic world.com/verilog/index.html) Verilog Practice：[HDLBits](https://hdlbits.01xz.net/wiki/Main_Page) ## Contact **Reddit** : [reddit.com/r/GowinFPGA/](reddit.com/r/GowinFPGA/) **Telegram** : [t.me/sipeed](t.me/sipeed) Discussion forum: [maixhub.com/discussion](https://maixhub.com/discussion) QQ discussion group: [834585530](https://jq.qq.com/?_wv 1027&k wBb8XUan) Leave message in the end of this page Business email : [support@sipeed.com](support@sipeed.com) ## Questions ### The system does not recognize the onboard debugger Try connecting directly to the computer instead of through a USB HUB. Try using a better quality USB cable. Try another computer to rule out the computer being the problem. Try [update to the latest firmware](#how to update the firmware for the onboard debugger) and try again. ### The UART of the onboard debugger cannot be used Try reinstall FTDI drivers. IF the actual baudrate is always four times the set baudrate or the UART continuously outputs garbled characters. try [update to the latest firmware](#how to update the firmware for the onboard debugger) and try again. ### OpenFPGAloader not work Try [update to the latest firmware](#how to update the firmware for the onboard debugger) and try again. ### How to update the firmware for the onboard debugger See [Update the debugger](./../common/update_debugger.html) for details. ### How to store bitstream Tang Nano 20K uses the external Flash to save the firmware, we need to download the bitstream to store the firmware. ### Visit [Tang Questions](/hardware/en/tang/common doc/questions.html) to find more solutions"},"/hardware/en/tang/tang-nano-20k/example/unbox.html":{"title":"Tang Nano 20K Unbox","content":" title: Tang Nano 20K Unbox keywords: FPGA, Tang, Nano, 20K update: date: 2023 05 23 version: v0.1 author: wonder content: Release docs Tang Nano 20K is mainly available as two purchase options: `Retro Game kits` and `development board kits` ## Primary power on The default firmware in Tang Nano 20K is [litex](https://github.com/litex hub), and it can be download from [github](https://github.com/sipeed/TangNano 20K example/tree/main/litex). Power on Tang Nano 20K, leds flow. ![unbox_nano_20k_led_water_flow](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_nano_20k_led_water_flow.gif) Windows 10 and Windows 11 can install the driver automatically, and there is at least one USB Serial Port in the device manager. We can open this serial port via the serial port available application like [Mobaxterm](https://mobaxterm.mobatek.net/). ![unbox_device_manager_serial_port](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_device_manager_serial_port.png) Set baudrate 115200, open the serial port, and we succeed opening the litex terminal. ![unbox_uart_litex_terminal](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_litex_terminal.png) Tap the `tab` on your serial terminal via keyboard to see all commands we can use. ![unbox_uart_litex_command_list](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_litex_command_list.png) Here we take leds as example, type `leds` command. ![unbox_uart_litex_leds_command_help](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_litex_leds_command_help.png) We can see it requires a value with `leds` command. Here we type `leds 62` via serial terminal and see the state of onboard leds. ![unbox_uart_litex_leds_command_control](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_litex_leds_command_control.png) There is only one led on. ![unbox_uart_litex_leds_command](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_litex_leds_command.jpg) If the value we type is too big, this command will set the value to `0xffffffff`. ![unbox_uart_litex_leds_max_value](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_litex_leds_max_value.png) ## Advanced usage All commands above we run are on FPGA, apart from the GW2AR 18C FPGA chip, there is an onboard BL616 chip on this board, we can open its terminal and run its built in commands. Similar to the previous steps, open the serial port via Mobaxterm, then use shortcut key combinations `Ctrl + x` and `Ctrl + c`, then tap `Enter` key to open the BL616 inside terminal. ![unbox_uart_bl616_terminal](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_terminal.png) Tap `Enter` key to test the terminal, and it supports commands auto completion. ![unbox_uart_bl616_command_list](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_command_list.png) Here we take `pll_clk` and `choose` these two commands as example. ### pll_clk There is a MS5351 configurable clock generator on Tang Nano 20K, it's configured by BL616 chip, and we set the generated clock via `pll_clk` command. ![unbox_uart_bl616_pllclk_command](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_pllclk_command.png) MS5351 can generate 3 clock output, we can see its clock output pin via the schematic. ![unbox_uart_bl616_ms351_clk_pin](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_ms351_clk_pin.png) The CLK0 clock is connected with the PIN10 of FPGA, and CLK1 clock is connected with the PIN11 of FPGA, CLK2 clock is connected with the PIN13 of FPGA. Set CLK1 output 50M clock `pll_clk O1 50M` <table> <tr> <td><img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_ms351_set_o1_clk_50m.png\" alt \"unbox_uart_bl616_ms351_set_o1_clk_50m\"></td> <td> ① Type the command, we can see the log <br> ② Type `pll_clk` again, we can see the current configuration <br> ③ This means O1 output 50M clock <br> ④ [EN] means O1 enabled, [DIS] means disabled. </td> </tr> </table> Disable CLK1 `pll_clk O1` <table> <tr> <td><img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_ms351_disable_o1_clk.png\" alt \"unbox_uart_bl616_ms351_disable_o1_clk\"></td> <td> ① View the current configuration <br> ② CLK1 enabled <br> ③ Run command to disable CLK1 <br> ④ CLK1 disabled </td> </tr> </table> Save configuration `pll_clk s` ![unbox_uart_bl616_ms351_save](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_ms351_save.png) Set CLK2 output 100M clock and save configuration `pll_clk O2 100M s` ![unbox_uart_bl616_ms351_clk2_100m](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_ms351_clk2_100m.jpg) ### choose `choose` command is used to choose the communication methods between FPGA and BL616 Chip. ![unbox_uart_bl616_choose_list](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_choose_list.png) The default communication method between FPGA and BL616 Chip is `uart` mode. Use shortcut key combinations `Ctrl + x` and `Ctrl + c`, then tap Enter to quit serial communication mode, and get into BL616 terminal. `uart` mode test Run `choose uart` in BL616 terminal, the BL616 communicates with FPGA via serial pins. ![unbox_uart_bl616_choose_uart](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_choose_uart.png) Type Enter to test the FPGA default litex terminal if you did not flash any firmware for FPGA. To quit serial communication mode, use command `Ctrl + x` and `Ctrl + c`, then tap Enter to open the BL616 terminal. ![unbox_uart_bl616_quit_uart_mode](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_quit_uart_mode.png) `spi` Mode When in SPI mode, BL616 is the SPI slave device, and receives the SPI data from FPGA. However, the default FPGA firmware does not contain the test. ## Retro Game kits Tang Nano 20K can act as NES [NESTang](https://github.com/nand2mario/nestang), here we tell how to build your Tang Nano 20K a Retro Game. Visit [Tang Nano 20K nestang github example](https://github.com/sipeed/TangNano 20K example/tree/main/nestang) or [NESTang](https://github.com/nand2mario/nestang) if you want to know more. ### Hardware Preparation One Tang Nano 20K One or two Joystick and Joystick convertor board One TF card and a card reader One breadboard (To tie the FPGA board and Joystick) HDMI monitor ### Software Preparation Windows：[Gowin Programmer](http://www.gowinsemi.com.cn/faq.aspx) , [balenaEtcher](https://etcher.balena.io/) and `python` Linux: [Openfpgaloader](https://github.com/trabucayre/openFPGALoader) and `python` Linux users can visit [Tang Nano 20K nestang github example](https://github.com/sipeed/TangNano 20K example/tree/main/nestang) to see how to build this game kit, here we use Windows as the example to tell the steps of building the game kit. ### Flash FPGA firmware Run [Gowin Programmer](http://www.gowinsemi.com.cn/faq.aspx) to flash [this firmware](https://dl.sipeed.com/shareURL/TANG/Nano_20K/7_Nestang/firmware) into FPGA external Flash. ![unbox_burn_nestang_firmware_into_flash](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_firmware_into_flash.png) ### Make games image Use these [scripts](https://dl.sipeed.com/shareURL/TANG/Nano_20K/7_Nestang/script)(All scripts need downloading), to generate your NES games into the file image which can be loaded by FPGA NES Emulator. The following command converts `1.nes` `2.nes` `3.nes` these three NES games into the game image file(games.img). ```bash python nes2img.py o games.img 1.nes 2.nes 3.nes ``` > If it tells PIL not found. Install PIL via pip manually. Then the game image file(games.img) is generated. ### Burn game image file We need a TF card to store the game, with this we can load the game on Tang Nano 20K. Here we use [balenaEtcher](https://etcher.balena.io/) to flash the game image file. Open this program, choose `Flash from file`, select the generated game image file `games.img` <img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_image_select_file.png\" alt \"unbox_burn_nestang_game_image_select_file\" width \"48%\"> <img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_image_choose_game_image.png\" alt \"unbox_burn_nestang_game_image_choose_game_image\" width \"48%\"> A warning comes out, but we click Continue. <img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_warn_no_partition_table.png\" alt \"unbox_burn_nestang_game_warn_no_partition_table\" width \"48%\"> Tick your TF card, make sure you choose the right TF card, not the other disk. Click Select. <img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_change_tfcard_select.png\" alt \"unbox_burn_nestang_game_change_tfcard_select\" width \"48%\"> <img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_select_tf_card.png\" alt \"unbox_burn_nestang_game_select_tf_card\" width \"48%\"> Click Flash. <img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_burn_game_image.png\" alt \"unbox_burn_nestang_game_burn_game_image\" width \"48%\"> <img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_finish_burn_game_image.png\" alt \"unbox_burn_nestang_game_finish_burn_game_image\" width \"48%\"> ### Assemble board Insert TF card into board. ![unbox_burn_nestang_game_tf_card_onsert](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_tf_card_onsert.jpg) Tie joystick convertor board and FPGA board on breadboard. ![unbox_burn_nestang_game_breadboard_connecting](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_breadboard_connecting.jpg) Note the read line in the picture above, it shows the relative position of FPGA pin and convertor board. Connect the joystick and HDMI cable ![unbox_burn_nestang_game_connect_hdmi_cable](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_connect_hdmi_cable.jpg) > When connected 2 joysticks, player ① is the right one in the picture above. ### Start game Power on Tang Nano 20K, we can see the game menu. The number of games and the name of games depends on your NES game name and quantity when generating the game image file. ![unbox_burn_nestang_power_game](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_power_game.jpg) Press `②` or `O` to start the game Press `S1` on the FPGA board to go back to the game menu ## FPGA Development guide [Blink the LED](https://wiki.sipeed.com/hardware/en/tang/tang nano 20k/example/led.html)"},"/hardware/en/tang/tang-nano-20k/example/led.html":{"title":"Tang Nano 20K Blink led","content":" title: Tang Nano 20K Blink led keywords: FPGA, Tang, Nano, 20K update: date: 2023 05 24 version: v0.1 author: wonder content: Release doc Here we take blinking a led on Tang Nano 20K as the example to know the usage of GOWIN IDE. To know a programming language, we start with `hello world`. But in hardware development, we start by blinking a led. ## Install IDE Visit [install IDE](https://wiki.sipeed.com/hardware/en/tang/common doc/install the ide.html) to prepare the development environment. For linux user we suggest using [openfpgaLoader](https://wiki.sipeed.com/hardware/zh/tang/common doc/get_started/flash_in_linux.html) to burn the firmware into fpga. ## New Project New Project：File >NEW >FPGA Design Project >OK <img src \"./../../Tang Nano 1K/assets/LED 1.png\" width 58% alt \"new_project\"> Set Project Name and path, Project Name and project path should be English. ![project_path](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/project_path.png) Select Device we choose GW2AR LV18QN88C8/I7, use filter like below to help us choose device more easily. Note that the Device is GW2AR 18C. ![nano_20k_device_device_choose](./../../../../zh/tang/tang nano 20k/assets/led/nano_20k_device_device_choose.png) Then click OK to preview the project. After confirming no error, the project is created. ## New file Gowin IDE contains 3 ways to create file. Here we use shortcut keys `Ctrl + N` to new a file. The other 2 ways to new file are not mentioned here, In the pop up windows, we choose `Verilog File`, you can also choose `VHDL File` if you are good at it. Here we just use Verilog as example. <img src \"./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/new_verilog_file.png\" width 50% alt \"new_verilog_file\"> Then click OK to set the file name, here we take `led` as the verilog file name as example. <img src \"./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/file_name.png\" width 75% alt \"file_name\"> Up to now we have finished creating file, then we need to prepare our code. ![created_file](./../../../../../hardware/zh/tang/tang nano 20k/assets/led/nano_20k_created_file.png.png) ### Verilog introduction Verilog is a kind of Hardware Description Language(HDL), it's used to describe digital circuits. The basic unit in Verilog is module. A module is composed of two parts: one describes the interface, and the other describes the internal logic function, that is, defines how the input affects the output. A module is like this: ```v module module_name #(parameter) (port) ; function endmodule ``` The module starts from module and ends by endmodule. The module is followed by the module name (module_name), transitable variable parameters (parameter), port and direction declaration (port), followed by internal logic function description (function), and finally, endmodule is used to represent this module. The internal logic function is usually composed by the assign and always blocks; The assign statement describes logical circuit, and the always block is used to describe timing circuit. ### Blocking and Non blocking assignments In timing logic, there are two assignment symbols: ` ` and `< `. Note that `< ` means less than or equal to in the if statement, and is not an assignment symbol in the if statement. Visit the [difference between Blocking and Non blocking assignments](#difference between blocking and non blocking assignments) ### Think storm Before coding, we need to think our purpose: The led flashes every 0.5S. Then we draw a demand block diagram as follows: ![block_method](./../../tang primer 20k/examples/lite/assets/block_method.png) Then we need a counter to time of every 0.5S, LED flashes means IO flip. ![count_block](./../../tang primer 20k/examples/lite/assets/time_count.png) Put the thought diagram into practical use, then it will look like this: ![clock_time_count](./../../tang primer 20k/examples/lite/assets/clock_time_count.png) The Clock is the clock source, providing the accurate time for the time counter. ### Code description From the verilog introduction and think storm diagram above, we can see the module we will create contains 2 ports: ```v module led( input Clock, output IO_voltage ); endmodule ``` For time counter inside module, crystal oscillator on the Primer 20K core board is 27MHZ, so we have 27 million times rising edges per second, and we just need to count 13500000 times rising edges to get 0.5 seconds. The counter starts from `0`, and to count 13500000 times rising edges, we count to 13499999. When counted to 0.5S, we set a flag to inform LED IO to flip its voltage. The overall count code is as follows: ```v //parameter Clock_frequency 27_000_000; // Crystal oscillator frequency is 27Mhz parameter count_value 13_499_999; // The number of times needed to time 0.5S reg [23:0] count_value_reg ; // counter_value reg count_value_flag; // IO chaneg flag always @(posedge Clock) begin if ( count_value_reg < count_value ) begin //not count to 0.5S count_value_reg < count_value_reg + 1'b1; // Continue counting count_value_flag < 1'b0 ; // No flip flag end else begin //Count to 0.5S count_value_reg < 23'b0; // Clear counter,prepare for next time counting. count_value_flag < 1'b1 ; // Flip flag end end ``` The code to change IO voltage are as follows: ```v reg IO_voltage_reg 1'b0; // Initial state always @(posedge Clock) begin if ( count_value_flag ) // Flip flag IO_voltage_reg < ~IO_voltage_reg; // IO voltage flip else // No flip flag IO_voltage_reg < IO_voltage_reg; // IO voltage constant end ``` Combined with the codes above, it goes like this: ```v module led( input Clock, output IO_voltage ); /********** Counter **********/ //parameter Clock_frequency 27_000_000; // Crystal oscillator frequency is 27Mhz parameter count_value 13_499_999; // The number of times needed to time 0.5S reg [23:0] count_value_reg ; // counter_value reg count_value_flag; // IO change flag always @(posedge Clock) begin if ( count_value_reg < count_value ) begin //not count to 0.5S count_value_reg < count_value_reg + 1'b1; // Continue counting count_value_flag < 1'b0 ; // No flip flag end else begin //Count to 0.5S count_value_reg < 23'b0; // Clear counter,prepare for next time counting. count_value_flag < 1'b1 ; // Flip flag end end /********** IO voltage flip **********/ reg IO_voltage_reg 1'b0; // Initial state always @(posedge Clock) begin if ( count_value_flag ) // Flip flag IO_voltage_reg < ~IO_voltage_reg; // IO voltage flip else // No flip flag IO_voltage_reg < IO_voltage_reg; // IO voltage constant end /***** Add an extra line of code *****/ assign IO_voltage IO_voltage_reg; endmodule ``` Because the `IO_voltage` is declared in the port position, which is wire type by default. To connect it to the reg variable `IO_voltage_reg`, we need to use assign. ## Synthesize, constrain, place&route ### Synthesize After finishing the code, go to the \"Process\" interface and double click \"Synthesize\" to synthesize our code to convert the verilog code content to netlist. ![Synthesize](./../../../../../../news/others/20k_lite_start/assets/synthesize.png) ### Constraint After Synthesizing our code, we need to set constrains to bind the ports defined in our code to fpga pins, by which we can realize our module function on fpga. Click the FloorPlanner in the top of Synthesize to set constrains. ![floorplanner](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/floorplanner.png) Since this is the first time we create it, the following dialog box will pop up. Click OK and the graphical constraint interface will pop up. ![create_constrain_file](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/create_constrain_file.png) ![floorplanner_interface](./../../../../zh/tang/tang nano 20k/assets/led/nano_20k_floorplanner_interface.png) The ways to constraint the file can be get from this docs: [SUG935 1.3E_Gowin Design Physical Constraints User Guide.pdf](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide/SUG935 1.3E_Gowin%20Design%20Physical%20Constraints%20User%20Guide.pdf) Here we only use the IO Constrains method shown below to constrain the pins: ![floor_planner_ioconstrain](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/floor_planner_ioconstrain.png) According to [Schematic of core board](https://dl.sipeed.com/fileList/TANG/Primer_20K/02_Schematic/), we can know the input pin of crystal oscillator is PIN04。 <img src \"./../../../../zh/tang/tang nano 20k/assets/led/nano_20k_crystal_port.png\" alt \"nano_20k_crystal_port\" width 45%> Here we only blink LED0, and we can see it's connected with FPGA PIN15. ![nano_20k_led_port](./../../../../zh/tang/tang nano 20k/assets/led/nano_20k_led_port.png) So for the IO Constrains under the FloorPlanner interactive window, we fill in the following values for PORT and Location:： ![nano_20k_io_constrain_value](./../../../../zh/tang/tang nano 20k/assets/led/nano_20k_io_constrain_value.png) Finishing filling, use `Ctrl + S` to save constraints file, then close FloorPlanner interactive graphical interface. Then we see there is a .cst file in our project, and its content are easy to understand. ![nano_20k_cst_content](./../../../../zh/tang/tang nano 20k/assets/led/nano_20k_cst_content.png) ### Place & Route After finishing constraining, we run Place & Route. The purpose is to synthesize the generated netlist and our defined constraints to calculate the optimal solution through IDE, then allocate resources reasonably on the FPGA chip. Double click Place&Route marked with red box to run. ![nano_20k_place_route](./../../../../zh/tang/tang nano 20k/assets/led/nano_20k_place_route.png)。 Then there is no error, everything works well, we can burn our fpga. ## FPGA bitstream There is a BL616 Chip on Tang Nano 20K for Jtag, we can flash FPGA bitstream with this jtag chip. There is onboard programmer for downloading bitstream, and drivers have been installed when [install IDE](https://wiki.sipeed.com/hardware/en/tang/common doc/install the ide.html), we connect dock ext board with computer. ![nano_20k_led_connect_debug](./../../../../zh/tang/tang nano 20k/assets/led/nano_20k_led_connect_debug.png) ### Scan device Double click `Program Device` to run the Programmer program ![open_programmer](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/open_programmer.png) Click scan_device to scan device ![nano_20k_scan_device](./../../../../zh/tang/tang nano 20k/assets/led/nano_20k_scan_device.png) Click OK to finish selecting device. ### Burn to SRAM Normally this mode is used to verify biststream. Because of its fast burning characteristics so the use of more, but of course the power will lose data, so if you want to power on the running program you can't choose this mode. Click the function box below Operation to open the device configuration interface, then select the SRAM Mode option in Access Mode to set to download to SRAM, and finally click the three dots box below to select our generated `.fs` bitstream file . Generally speaking, bitstream firmware file is in the impl > pnr directory. ![sram_mode](./../../../../zh/tang/tang nano 20k/assets/led/nano_20K_sram_mode.png) Click where the red box is to burn firmware. ![nano_20k_sram_download](./../../../../zh/tang/tang nano 20k/assets/led/nano_20k_sram_download.png) Go to [Questions](https://wiki.sipeed.com/hardware/en/tang/common doc/questions.html) if you have any trouble。 Here we finished downloading into SRAM。 ### Burn into Flash Burnning into sram is used for verifying biststream, but can't store program. If we want to run application at startup, we need to burn into flash. This steps are similar to the steps above of burning to SRAM. Click the function box below Operation to open the device configuration interface, then select the External Flash Mode in the Access Mode to burn into external Flash. Finally click the three dots below to select the.fs we generated to download the firmware. Choose the three dots box below to select our generated `.fs` bitstream file. Generally speaking, bitstream firmware file is in the impl > pnr directory. Finally, select the Generic Flash device from the following external Flash options. ![nano_20k_flash_mode](./../../../../zh/tang/tang nano 20k/assets/led/nano_20k_flash_mode.png) Click where the red box is to burn firmware. ![nano_20k_flash_download](./../../../../zh/tang/tang nano 20k/assets/led/nano_20k_flash_download.png) Then we can run our program when power on. ## Result One led flashes like below. ![nano_20k_led_blink](./../../../../zh/tang/tang nano 20k/assets/led/nano_20k_led_blink.gif) ## End Up to now we have finished blinking led on fpga, and know how to use GOWIN IDE with fpga.。 ## Difference between Blocking and Non blocking assignments Write a simple codes and simulate it: ```v module test( input CLK, input [3:0] A, output reg [3:0] B,C,D,E ); always@(posedge CLK) begin B < A; C < B; D A; E D; end endmodule ``` ![simulation_result](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/simulation_result.png) According to the simulation results, we can see the difference between blocking and non blocking assignments by comparing the `B` `C` `D` `E` four results. `< ` is non blocking assignments, and all `< ` in a `always` run at the same time, this lead the result in green box, `B` is assigned the value of `A` while `C` is assigned the value of `B`, this happens at the same time, so `C` is assigned the old value of `B`, the value of `C` is one clock delay of `B`. ` ` is blocking assignments, all ` ` in a `always` runs sequentially. In this code, `D` is assigned the value of `A`, then `D` is assigned the value of `E`, so `D` and `E` are the same value. > In general, however, blocking assignment is not recommended in timing logic. And we get two results: Input data is not always valid, it depends on the clock edge. If the data is maintained for less than one clock cycle, it may regard useless data. Everytime Triggerring the edge clock, the `always` block runs from begin to the end, not runs from the middle. ## 常见问题 Visit [Gowin errors to solve this problem](https://wiki.sipeed.com/hardware/en/tang/common doc/questions.html)"},"/hardware/en/tang/tang-console/mega-console.html":{"title":"Tang Console","content":" title: Tang Console keywords: FPGA, Tang, Console, 60K, 138K update: date: 2025 01 23 version: v0.1 author: Serika content: Create document date: 2025 04 17 version: v0.2 author: Serika content: Add Retro Console date: 2025 09 25 version: v0.3 author: Serika content: Remove unused lic ip address Add describe of educational GOWIN IDE ## Overview **Tang Console** is an another dock board for **[Tang Mega 138k](./../tang mega 138k/mega 138k) SOM** and **[Tang Mega 60k](./../tang mega 60k/mega 60k) SOM**. It is designed to be small and compact, and is mechanically compatible with the **Raspberry Pi 5** **`PCIe HAT`**. In addition, it also contains two 5Gbps USB3 device interfaces and two **2x20 pin header connectors**, two **PMOD connectors**. It can meet the needs of IO expansion and high speed communication at the same time. At the same time, it is also specially designed for retro games. Maybe you can turn it into a retro game console, or even a handheld, whatever you like. Date to Release: Late April , 2025 **For Retro Console :** [**Click Here**](./retro console) ## Board Features Note: This page mainly introduces the board from the perspective of the **development board**. For the **Retro Console**, please [**Click here**](./retro console). Compatible with various SOMs (**[Mega 138k](./../tang mega 138k/mega 138k)** & **[Mega 60k](./../tang mega 60k/mega 60k)**) More compact size, more budget choice ~~Compatible with Raspberry Pi 5 PCIe HAT~~ (Due to compatibility issues between the PCIe hardcore and ARM's PCIe controller, this needs to be resolved in future software updates.) PCIe 2.0 x 1 USB3 x 2(5Gbps) HDMI TX x 1 Soft PHY USB2 x1(480Mbps) Onboard 3.7V Li on battery(1 Series) charge/discharge management **PMOD x 2** Standard spacing 800mil, supported dual PMOD modules ## Product Appearance <img src \"./assert/console_60k.jpg\" width \"45%\"> <img src \"./assert/console_138k.jpg\" width \"45%\"> ## Hardware Parameters ### Block Diagram <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assert/console_bdt.jpg\" width \"45%\"> <img src \"./assert/console_bdb.jpg\" width \"45%\"> </details> ### SOM Board Parameters Please refer to the link below: **[Tang Mega 138k](./../tang mega 138k/mega 138k#hardware parameters) SOM** **[Tang Mega 60k](./../tang mega 60k/mega 60k#hardware parameters) SOM** ### Dock board Parameters Item Quantity Remarks : LEDs 2(3+3) 3x Battery Indicator + 3x User LED (2x RGB LED) Buttons 2+1 2x User KEY + 1x Reconfig KEY PCIe 1 1 lane @ 8/5Gbps (Depends on SOM) USB3 2 SERDES lane, SuperSpeed @ 5Gbps (Device mode) USB2 1 IO Soft PHY, HighSpeed @ 480Mbps (Device mode) DVI(HDMI) 1 Compatible with HDMI, supports TX, can also be modified to RX PMOD 2 Standard spacing (800mil), Compatible with dual PMOD modules ADC 2 2x differential input channels (One is used to measure the battery voltage) RGB Interface 1 Supports RGB888 screen & RGB to VGA Converter microSD Slot 1 4 bit SDIO/MMC or SPI mode BATT CONN. 1 Supports 3.7V li on battery, with built in charge management FAN CONN. 1 Supports a 5V fan, maximum power: 1W Speaker CONN. 1 Support mono output, 1x 2W Speaker MS5351 1 Provides RefClk for Serdes: control output via onboard UART USB JTAG & UART 1 Supports FPGA programming and provides UART function 2x20P headers 2 Independent 2x20P pin header, providing up to 2x38 IOs, can be modified to be compatible with DE10 Nano Kit ## Hardware Resources ~~[Specification](https://dl.sipeed.com/shareURL/TANG/Console/01_Specification)~~ [Schematics](https://dl.sipeed.com/shareURL/TANG/Console/02_Schematic) [PCB BOM](https://dl.sipeed.com/shareURL/TANG/Console/03_Designator_drawing) [Dimension Diagram](https://dl.sipeed.com/shareURL/TANG/Console/04_Mechanical_drawing) [3D Model](https://dl.sipeed.com/shareURL/TANG/Console/05_3D_file) [Some Chip Manuals](https://dl.sipeed.com/shareURL/TANG/Console/07_Datasheet) [All PIN Constraints](https://dl.sipeed.com/shareURL/TANG/Console/08_Misc) ## Getting Started Note that 60K is currently supported by the educational version. You need to download the educational IDE version V1.9.11.03 or later. The commercial IDE requires V1.9.10.03 or later. To download the bitstream to flash memory, we recommend using **exFlash Erase, Program through GAO Bridge 5A** mode (V1.9.10.03 or later) or **exFlash Erase, Program through GAO Bridge Arora V** (V1.9.12 or later). We recommend using the standalone **1.9.12 SP1** Programmer (also known as Yunyuan Programmer), which can be found on the **Yunyuan Software Commercial Version** page. This standalone programmer offers better compatibility. If you need to use the commercial IDE, you can apply for a license on the Gaoyun official website or use the online license service provided by Sipeed. Select Floating License in the IDE and fill in the following information: ~~~ Server 01 ip: 106.55.34.119 port: 10559 ~~~ if the ip not work, try use \"gowinlic.sipeed.com\" domain's IP. Install IDE [Click me](https://wiki.sipeed.com/hardware/zh/tang/common doc/get_started/install the ide.html) Example code (Github): [60K](https://github.com/sipeed/TangMega 60K example) [138K](https://github.com/sipeed/TangMega 138K example) [TangCores](https://github.com/nand2mario/tangcores) Special Thanks: **[nand2mario](https://github.com/nand2mario)** *** Other Learning Resources Free online tutorial: [Verilog Tutorial](https://www.runoob.com/w3cnote/verilog tutorial.html) (Learn Verilog) Free online FPGA tutorial: [Verilog](https://www.asic world.com/verilog/index.html) (English website) Verilog practice website: [HDLBits](https://hdlbits.01xz.net/wiki/Main_Page) (English website) Online Gowin Semiconductor reference video tutorials: [Click here](http://www.gowinsemi.com.cn/video_complex.aspx?FId n15:15:26) ## Communication Methods **Reddit** : [reddit.com/r/GowinFPGA/](reddit.com/r/GowinFPGA/) **Telegram** : [t.me/sipeed](t.me/sipeed) Discussion forum: [maixhub.com/discussion](https://maixhub.com/discussion) QQ discussion group: [834585530](https://jq.qq.com/?_wv 1027&k wBb8XUan) Leave a message directly below this page Goto**[GitHub project page](https://github.com/sipeed/TangMega 60K example)**and submit issues Business email : [support@sipeed.com](support@sipeed.com) ## Precautions <table> <tr> <th>Item</th> <th>Precautions</th> </tr> <tr> <td>Chip Model</td> <td>The specific model of the FPGA chip used by Tang Console 60K is <b>GW5AT LV60PG484AC1/l0</b>, <br>and Tang Mega 138K is <b>GW5AST LV138FPG676AC1/l0</b>. <br>Please select the package model <span><b>PBG484A</b></span> & <span><b>Device Version: B</b></span> in the IDE.</td> </tr> <tr> <td>Static Electricity</td> <td>Please avoid static electricity hitting the PCBA; release the static electricity from your hands before touching the PCBA.</td> </tr> <tr> <td>Tolerance Voltage</td> <td>When using GPIO pin headers for external communication, ensure that the IO voltage is <b>3.3V</b>. Excessive voltage will permanently damage the PCBA.</td> </tr> <tr> <td>FPC Socket</td> <td>When connecting the FPC soft cable, please ensure that the cable is completely and correctly inserted into the socket without any deviation.</td> </tr> <tr> <td>Plug and Unplug</td> <td>Please completely power off before plugging and unplugging.</td> </tr> <tr> <td>Avoid Short Circuit</td> <td>Please avoid any liquid or metal touching the solder pads of the components on the PCBA during the power on process, otherwise it may cause a short circuit and burn the PCBA.</td> </tr> </table> ## Contact Tang Console can meet different needs of customers in various scenarios. For technical support and business cooperation, please contact [support@sipeed.com](support@sipeed.com) ## Frequently Asked Questions (FAQs) ### The system does not recognize the onboard debugger <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> Make sure the USB cable is connected to the port marked with ***MCU***. Try connecting directly to the computer instead of through a USB HUB. Try using a better quality USB cable. Try another computer to rule out the computer being the problem. Try [update to the latest firmware](#how to update the firmware for the onboard debugger) and try again. </details> ### The UART of the onboard debugger cannot be used <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> Try reinstall FTDI drivers. IF the actual baudrate is always four times the set baudrate or the UART continuously outputs garbled characters. try [update to the latest firmware](#how to update the firmware for the onboard debugger) and try again. </details> ### OpenFPGAloader not work <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> Try [update to the latest firmware](#how to update the firmware for the onboard debugger) and try again. </details> ### How to update the firmware for the onboard debugger <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> See [Update the debugger](./../common/update_debugger) for details. </details> ### IDE cannot find the model <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> 1. The GOWIN IDE version is too old. You must update to the commercial version IDE ≥ 1.9.10.03, or the educational version IDE ≥ 1.9.11.03. </details> ### How to burn the bitstream to FLASH {#burn_flash} <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> 1. Setting the **Programmer** as shown in the figure below: <img src \"./../assets/flash_mode_GAO.png\" alt \"flash_mode\" width 35%> </details> ### No Response or Undesirable Pin Phenomenon After Burning <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> 1. First, ensure that the IDE has selected the correct model For MEGA 60K, **GW5AT LV60PG484AC1/10**; every parameter in the figure below **MUST** be consistent. <img src \"../tang mega 60k/assets/partno_60K.png\" alt \"device_choose\" width 35%> For MEGA 138K, **GW5AST LV138PG484AC1/10**; every parameter in the figure below **MUST** be consistent. <img src \"../tang mega 138k/assets/partno_138K.png\" alt \"device_choose\" width 35%> 2. Then, check your code and the corresponding simulation waveforms to meet the requirements. The GAO tools in GOWIN IDE maybe helpful. For more information, please refer to the GOWIN document [SUG100](https://www.gowinsemi.com/upload/database_doc/1885/document/660bb2366d0b3.pdf)(require login). </details> ### PCB Errata <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> Record **Tang Console** Known PCB issues in each version If you find a design error, please leave a message on the **errata page** [**Click here**](./errata console) </details> </br> ### For more questions and solutions, go to [Related Questions](./../common doc/questions) to view"},"/hardware/en/tang/tang-console/errata-console.html":{"title":"Errata for Tang Console","content":" title: Errata for Tang Console keywords: FPGA, Tang, Console, 60K, 138K update: date: 2025 04 22 version: v0.1 author: Serika content: Create document ## Errata Record ### PCB Version: 32001 <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> 1. **BOT side** The silkscreen markings on the **battery connector** are wrong. The markings **`GND`** and **`BAT`** in the figure below should be swapped (the markings on the **TOP side** are correct); <img src \"./assert/errata/errata_GBL BAT.jpg\" alt \"flash_mode\" width 35%> </details> </br> ### PCB Version: 32001B <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> 1. **BOT side** The silkscreen markings on the **battery connector** are wrong. The markings **`GND`** and **`BAT`** in the figure below should be swapped (the markings on the **TOP side** are correct); <img src \"./assert/errata/errata_GBL BAT.jpg\" alt \"flash_mode\" width 35%> </details> </br> ### PCB Version: 32001C <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> 1. **BOT side** The silkscreen markings on the **battery connector** are wrong. The markings **`GND`** and **`BAT`** in the figure below should be swapped (the markings on the **TOP side** are correct); <img src \"./assert/errata/errata_GBL BAT.jpg\" alt \"flash_mode\" width 35%> </details> </br> ## Update Record ### PCB Version: 32001C TBD"},"/hardware/en/tang/tang-console/retro-console.html":{"title":"Tang Retro Console","content":" title: Tang Retro Console keywords: FPGA, Tang, Console, 60K, 138K update: date: 2025 04 17 version: v0.1 author: Serika content: Create document ## Product Overview Release Date: Late April 2025 ~~Pre order Link: [**Click Here**](https://sipeed.com/tangconsole)~~ (Pre order has ended, retail version coming soon) **Development Board Documentation:** [**Click Here**](./mega console) **Tang Core** Developer Documentation: [**Click Here**](https://nand2mario.github.io/tangcore/) ## Board Features <details> <summary><font color \"#4F84FF\">Click for Details</font></summary> <br> Compatible with multiple SOMs (**[Mega 138k](./../tang mega 138k/mega 138k)** & **[Mega 60k](./../tang mega 60k/mega 60k)**) Supports multiple [**Tang Core**](https://github.com/nand2mario/tangcore) emulator cores: **NESTang** Nintendo Entertainment System **SNESTang** Super Nintendo Entertainment System **GBATang** Game Boy Advance **MDTang** Sega Genesis/Mega Drive **SMSTang** Sega Master System **More cores are under development and will be released soon** Onboard BL616 MCU Runs [**TangCore firmware for BL616**](https://github.com/nand2mario/firmware bl616/) Supports quick emulator core switching ~~uSD card storage support~~ (currently under debugging) **Supports USB OTG** (currently requires OTG adapters or hubs with power pass through) **USB OTG Storage** (for storing game ROMs, emulator cores, and emulator BIOS) **USB HID Controller Support** Can be used as an FPGA debugger Two onboard USB A ports for direct connection with compatible USB controllers Supports DS2 controllers (requires [**PMOD_DS2x2**](../tang PMOD/FPGA_PMOD#pmod_ds2x2)) </details> ## Product Appearance <details> <summary><font color \"#4F84FF\">Click for Details</font></summary> <br> **Tang Retro Console Premium** (60k version) <img src \"./assert/retro console p_138k.jpg\" width \"45%\"> **Tang Retro Console** (60k version) <img src \"./assert/retro console_60k.jpg\" width \"45%\"> </details> ## Block Diagram <details> <summary><font color \"#4F84FF\">Click for Details</font></summary> <br> Here we take 60k SOM as an example, and the same is true for 138k <img src \"./assert/tangcores.drawio.svg\" width \"45%\"> <img src \"./assert/console_bdt.jpg\" width \"45%\"> <img src \"./assert/console_bdb.jpg\" width \"45%\"> </details> ## Hardware Specifications <details> <summary><font color \"#4F84FF\">Click for Details</font></summary> ### SOM Specifications Please refer to the following links based on the installed SOM: **[Tang Mega 138k](./../tang mega 138k/mega 138k#SOM Specifications)** **[Tang Mega 60k](./../tang mega 60k/mega 60k#SOM Specifications)** ### Baseboard Specifications Please refer to the **Development Board Documentation:** [**Click Here**](./mega console#Baseboard Specifications) </details> *** ## Getting Started Using the **Tang Retro Console** as an example, here’s how to play games with the Tang Console: ### Preparation Items needed: [x] Tang Console, either 138k or 60k version [x] USB 2.0 drive, or SD card + card reader (Recommended format: FAT32/exFAT, ≤32GB) [x] USB C OTG adapter with power pass through (Recommended: USB C card reader included in the bundle) [x] Available GBA BIOS (gba_bios.bin) [x] Latest [**TangCore Release Package**](https://github.com/nand2mario/tangcore/releases) [x] Game ROMs you want to play (Demo games are preloaded on the uSD card included in the Tang Retro Console Premium bundle) ### Installing MCU Firmware For users who purchased any Tang Console bundles, this step is not necessary, as it has been pre installed at the factory. If firmware updates are needed in the future, please refer to the guide here: [**Click Here**](../common doc/update_debugger#additional notes for tang core) ``` 📁 / ├── 📁 cores/ # `cores` directory from release │ ├── 📁 console60k/ │ └── 📁 console138k/ ├── 📁 nes/ # .nes rom files ├── 📁 snes/ # .smc/.sfc files ├── 📁 gba/ │ └── 🗎 gba_bios.bin # GBA BIOS ├── 📁 genesis/ # .bin/ files └── 📁 sms/ # .sms files ``` > ⚠ Console will filter the suffix of the game ROM, please be sure to change the game ROM to the corresponding suffix ⚠ ### Storage Media Content The contents of the storage media are not differentiated between the **138k console** and the **60k console**. However, the **`gba_bios.bin`** must be downloaded by the user and added manually. Place the game ROMs you wish to play into their corresponding directories. ### Hardware Assembly ❗Note: Please assemble all accessories before connecting the power! 1. **Early Bird Ver. Recommended Method** (All accessories for this method are included in the **Tang Console Retro Premium** package): <img src \"./assert/retro console_assembly 1.jpg\" width \"45%\"> > Left: USB OTG card reader + USB C power supply Bottom: USB controller **P1** Top: HDMI output **Pros**: Simple to setup. **Cons**: USB controller connection may be unstable in this configuration. If the USB controller is not recognized (especially after switching emulator cores), users may need to repeatedly reconnect the USB controller several times. ***Retail Ver.** of Tang Console does not need to use OTG card reader, just insert the uSD card into the built in card slot. Because the built in card slot of **Retail Ver.** is connected to **BL616** through a MUX.* <br> 2. **Recommended Method for Retail Version** <details> <summary><font color \"#4F84FF\">Click to View Details</font></summary> <br> <img src \"./assert/retro console_assembly 0.jpg\" width \"45%\"> > Bottom Left: USB OTG Top Left: USB C Power Supply Bottom: USB Controller **P1** Top Right: HDMI Output **Pros**: MOST Simple setup. **Cons**: USB controller connection may be unstable in this configuration. If the USB controller is not recognized (especially after switching emulator cores), users may need to repeatedly reconnect the USB controller several times. The controller can be connected directly to the Console's USB port or via USB OTG to the BL616. USB OTG is not necessary to assemble, depends on your use. </details> <br> 3. **The nand2mario Method** <details> <summary><font color \"#4F84FF\">Click to View Details</font></summary> <br> <img src \"./assert/retro console_assembly 2.jpg\" width \"45%\"> > Left: OTG USB drive + USB C power supply Right: DS2 PMOD + DS2 controller Top: HDMI output **Pros**: Stable configuration. **Cons**: Bulky setup. For a more compact connection, try using a wireless DS2 controller and replacing the USB drive with a smaller one. </br> </details> <br> 4. **USB OTG HUB Method** {#USB_OTG_HUB} <details> <summary><font color \"#4F84FF\">Click to View Details</font></summary> <br> <img src \"./assert/retro console_assembly 3.jpg\" width \"45%\"> > Left: USB C OTG HUB + USB drive + USB C power supply + USB controller **P1** Top: HDMI output **Pros**: Stable connection. **Cons**: Bulky setup & potential USB HUB compatibility issues. Tested USB HUB compatibility list: [Click Here](https://github.com/nand2mario/tangcore/wiki/Compatible USB Hubs) </br> </details> <br> ### Powering On & playing 1. Assemble the hardware as described in the previous step, then connect the power supply. 2. Wait a moment for the main menu to appear. <details> <summary><font color \"#4F84FF\">Click to View Details</font></summary> <br> <img src \"./assert/retro console_menu.jpg\" width \"45%\"> </details> <br> 3. Use the game controller to navigate the menu: Move the cursor up and down. Use left and right for page navigation. Press `B` or `3` to confirm. Press `A` or `2` to go back. Navigate cursor to on `..`, press `B` to return to the previous menu. <details> <summary><font color \"#4F84FF\">Click to View Details</font></summary> <br> <img src \"./assert/retro console_menu1.jpg\" width \"45%\"> </details> <br> 4. Select an emulator title, such as **SNES**, press `B` to access the submenu, select the game ROM you wish to play, and press `B` again to launch the game. <details> <summary><font color \"#4F84FF\">Click to View Details</font></summary> <br> <img src \"./assert/retro console_menu2.jpg\" width \"45%\"> </details> <br> 5. The HDMI output will briefly disappear. After a short moment, the ROM loading screen will appear, and the title at the bottom of the screen will switch to the corresponding emulator's name (e.g., **SnesTang** in this example). <details> <summary><font color \"#4F84FF\">Click to View Details</font></summary> <br> <img src \"./assert/retro console_menu3.jpg\" width \"45%\"> </details> <br> 6. Wait for the ROM to finish loading, then press the `start` button to begin the game. <details> <summary><font color \"#4F84FF\">Click to View Details</font></summary> <br> <img src \"./assert/retro console_game.jpg\" width \"45%\"> </details> <br> 7. During gameplay, press `→` + `select` to return to the main menu. 8. Some game ROMs may not be fully compatible with the emulator. If issues arise, power cycle the console to reset it. ### Additional Resources Original Installation Documentation: [**Click Here**](https://nand2mario.github.io/tangcore/user guide/installation/) Special Thanks: **[fjpolo](https://github.com/fjpolo/GBTang)** **[harbaum](https://github.com/harbaum/MiSTeryNano)** **[nand2mario](https://github.com/nand2mario)** **[pgate1](https://github.com/pgate1/SNES_on_FPGA)** > *Ranking in no particular order* ### Contact & Support For technical support and business inquiries, please contact us via email: [support@sipeed.com](mailto:support@sipeed.com) **Reddit** : [reddit.com/r/GowinFPGA/](reddit.com/r/GowinFPGA/) **Telegram** : [t.me/sipeed](t.me/sipeed) Discussion forum: [maixhub.com/discussion](https://maixhub.com/discussion) Discord: [https://discord.gg/V4sAZ9XWpN](https://discord.gg/V4sAZ9XWpN) QQ discussion group: [834585530](https://jq.qq.com/?_wv 1027&k wBb8XUan) Leave a message directly below this page Goto **[GitHub project page](https://github.com/sipeed/TangMega 60K example)** and submit issues Business email : [support@sipeed.com](support@sipeed.com) ### Important Notes Item Details **Power Supply** Use a power adapter with at least **5V/2A**. Avoid exceeding **+5.5V** or dropping below **+3.4V**. **Static** Avoid static discharge on the PCBA. Ground yourself before touching. **Voltage** Ensure GPIO pins are at **3.3V** levels; higher voltages can damage the PCBA. **FPC Connector** Insert FPC cables carefully. Ensure the 1st PIN direction is correct. **Connecting** Only handle connections with the device fully powered off, except USB A controller and drives. **USB Controller** If the controller is unresponsive, reconnect several times. **Short Circuits** Avoid liquid or metal contact with the PCBA during power on to prevent damage. ## FAQ ### USB Controller Not Responding <details> <summary><font color \"#4F84FF\">Click to View Details</font></summary> <br> 1. This is a known issue in *tangcore* *version* `0.8`, please unplug and replug the USB controller, then try again. 2. The stability issue with USB A controllers connected to the front of the Console will be resolved in future firmware updates. 3. The most stable connection method currently is the PMOD DS2 controller. 4. Please pay attention to the silkscreen mark on the USB port. The USB port on the right is marked as P2. Some games can only be operated with the P1 controller(The same applies when using a DS2 controller). </details> ### UI Disappears After Pressing the MODE Key <details> <summary><font color \"#4F84FF\">Click to View Details</font></summary> <br> 1. This is a known issue in *tangcore* *version* `0.8`, and will be resolved in future firmware updates. 2. If the cursor `>` is still visible, try using the controller to navigate pages or return to the previous menu to force a UI refresh. </details> ### \"Waiting for USB drive...\" Message After Powering On <details> <summary><font color \"#4F84FF\">Click to View Details</font></summary> <br> 1. If using a USB HUB, this might indicate HUB incompatibility. 2. Ensure the USB drive/card reader is properly connected. 3. Make sure the USB drive/card reader is **≤32GB** and formatted as **FAT32/exFAT**. <img src \"./assert/retro console_menu4.jpg\" width \"45%\"> </details> ### GBATang Error: `Cannot find /gba_bios.bin...` <details> <summary><font color \"#4F84FF\">Click to View Details</font></summary> <br> 1. This indicates that the **`/GBA` directory** on the USB drive or storage card is missing the original GBA BIOS, which may cause compatibility issues with certain ROMs. 2. Due to copyright restrictions, we cannot provide this file. You need to obtain the `gba_bios.bin` yourself and place it in the correct location. <img src \"./assert/retro console_menu5.jpg\" width \"45%\"> </details> ### The ***`Options`*** option in the main menu screen is inaccessible <details> <summary><font color \"#4F84FF\">Click to view details</font></summary> <br> 1. This is because **[nand2mario](https://github.com/nand2mario)** has not yet implemented this functionality in *tangcore* *version* `0.8` & `0.9`. 2. This feature will be gradually implemented in future updates. </details> ### For More Questions Refer to the [Troubleshooting](https://nand2mario.github.io/tangcore/user guide/troubleshooting/) page in the Tang Core documentation for additional solutions. If you encounter a new issue, please feel free to provide feedback. Feedback methods can be found [**here**](#contact support)."},"/hardware/en/tang/tang-mega-60k/mega-60k.html":{"title":"Tang Mega 60K Dock","content":" title: Tang Mega 60K Dock keywords: FPGA, Tang, Mega, 60K update: date: 2024 06 26 version: v0.1 author: Serika content: Create document date: 2024 09 26 version: v0.2 author: Serika content: Corrected description of PCIe bus widths Update content TBD before date: 2025 01 24 version: v0.3 author: Serika content: Add Secondary lic server ip addr. Corrected description of PCIe link width. date: 2025 09 25 version: v0.31 author: Serika content: Removed the unusable LIC server IP address Removed the incorrect description about the AE350 Removed the incorrect description about MIPI C PHY Corrected the description about the GT transceiver speed Corrected the description about the DDR3 speed Corrected the description about the Flash capacity ## Overview **Tang Mega 60K** uses the 22nm process **GW5AT LV60P484A** FPGA chip with 59904 lookup table units and 118 DSP units. It contains four high speed transceivers with speeds ranging from 270Mbps to 8.8Gbps, which is suitable for transmitting data on high speed ports such as PCIe. In addition, the chip contains hard core PCIe and MIPI D PHY controllers, which consume better resources and get better performance when using PCIe. It is suitable for high speed communication, protocol conversion, high performance computing and other occasions. The 60K Dock and 138K Dock share a set of dockboards(TANG MEGA NEO), so the peripherals of the two are exactly the same. Compared with the 138K Dock, the 60K Dock has fewer logic resources and a lower price, and includes a MIPI D PHY transceiver. This not only further reduces the cost of high speed communication, but also brings better compatibility for image processing system integration. aliexpress purchase link: [Click me](https://www.aliexpress.com/item/3256807078990410.html) ## Board Features Medium capacity LUT4 512MiB DDR3 memory PCIe 2.0 x 1* USB3.0 x 1(5Gbps) MIPI C PHY & D PHY RX/TX HDMI TX/RX x 1 Gigabit Ethernet x 1 Onboard 3.7V Li on battery(1 Series) charge/discharge management <a id \"target line\"></a> > **Note**: Since the pinouts of the **SERDES** parts of **`GW5AT LV60`** and **`GW5AST LV138`** are not exactly the same, the Dock board was originally designed for **`GW5AST LV138`**. Therefore, for **`GW5AT LV60`**, although the PCIe AIC gold finger has fanout all **SERDES** lanes, because lanes 1 and 3 are swapped on the **`GW5AT LV60`**, PCIe can only work in x1 mode at present. > *This problem may be fixed in the future with GOWIN software updates.* *** ## Product Appearance <img src \"./assets/mega_60k_top.png\" width \"45%\"> ## Block Diagram TBD ## Hardware Parameters ### SOM Board Parameters <table> \t<thead> \t\t<tr> \t\t\t<th style \"text align:center\">Item</th> \t\t\t<th style \"text align:center\">Parameter</th> \t\t\t<th style \"text align:center\">Supplement</th> \t\t</tr> \t</thead> \t<tbody> \t\t<tr> \t\t\t<td style \"text align:left\">FPGA Chip</td> \t\t\t<td style \"text align:left\"><a href \"https://www.gowinsemi.com.cn/prod_view.aspx?TypeId 74&FId t3:10:3&Id 188#GW5AT\">GW5AT LV60PG484A</a> \t\t\t</td> \t\t\t<td style \"text align:left\"> \t\t\t\t<table> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Logic Unit (LUT4)</td> \t\t\t\t\t\t<td>59904</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Register (FF)</td> \t\t\t\t\t\t<td>59904</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Distributed SRAM<br>(S SRAM) M(Kbits)</td> \t\t\t\t\t\t<td>468</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Block SRAM (B SRAM) (Kbits)</td> \t\t\t\t\t\t<td>2124</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Number of Block SRAMs (B SRAM) (pcs)</td> \t\t\t\t\t\t<td>118</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Multiplier (18x18 Multiplier)</td> \t\t\t\t\t\t<td>118</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Phase Locked Loop (PLLs)</td> \t\t\t\t\t\t<td>8</td> \t\t\t\t\t</tr> <tr> <td>Global Clock</td> <td>16</td> </tr> <tr> <td>High Speed Clock</td> <td>20</td> </tr> <tr> <td>Transceivers</td> <td>4</td> </tr> <tr> <td>Transceivers Rate</td> <td>270Mbps 8.8Gbps</td> </tr> <tr> <td>PCIe HardCore</td> <td>x1<br>Speed optional x1, <s>x2, x4</s> PCIe 2.0 <a href \"#target line\">(reason)</a></td> </tr> <tr> <td>LVDS (Gbps)</td> <td>1.25</td> </tr> <tr> <td>DDR3 (Mbps)</td> <td>1100</td> </tr> <tr> <td>MIPI D PHY HardCore</td> <td>2.5Gbps（RX/TX），<br>4x data lane，<br>1x clock lane</td> </tr> <tr> <td>Hardcore SoC</td> <td>None</td> </tr> <tr> <td>ADC</td> <td>2</td> </tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Total I/O Bank</td> \t\t\t\t\t\t<td>11</td> \t\t\t\t\t</tr> \t\t\t\t</table> \t\t\t</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Memory</td> \t\t\t<td style \"text align:left\">4Gb DDR3</td> \t\t\t<td style \"text align:left\">512MB x 1</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Flash</td> \t\t\t<td style \"text align:left\">64Mbits Flash x 1</td> \t\t\t<td style \"text align:left\">See <a href \"#burn_flash\">How to Burn to Flash</a></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Debug Interface</td> \t\t\t<td style \"text align:left\">JTAG + UART</td> \t\t\t<td style \"text align:left\">JST SH1.0 8 Pins CONN.</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Overall Package</td> \t\t\t<td style \"text align:left\">35mm x 45mm Size</td> \t\t\t<td style \"text align:left\">BTB CONN. Connects the SOM and the Dock Board</td> \t\t</tr> \t</tbody> </table> ### Dock board Parameters Item Quantity Remarks : LEDs 4+8 4x Battery Indicator+ 8x PMOD_LED WS2812 1 The WS2812 & aRGB strip CONN. share the same pin Buttons 3+1 3x User KEY + 1x Reconfig KEY PCIe 1 4 lane @ 5Gbps, but only 1 lane mode right now USB3 1 CH569 16bit HSPI, SuperSpeed @ 5Gbps Ethernet 1 1000Mbps Ethernet DVI(HDMI) 1 DVI supports both RX and TX PMOD 2 Multiplexed with the the DVP CONN. & 2x20P header at the top of the Dock board ADC 2 2x differential input channels DVP Interface 1 Multiplexed with the the PMOD & 2x20P header at the top of the Dock board RGB Interface 1 Supports RGB888 screen MIC ARRAY Interface 1 Supports Sipeed 6+1 microphone array SD Slot 1 1 bit SDIO/MMC or SPI mode BATT CONN. 1 Supports 3.7V li on battery, with built in charge management PWM FAN CONN. 1 Supports PWM fan with TACHO Speaker CONN. 2 Support stereo output, 2x 3W Speaker 3.5mm Headphone CONN. 1 Supports stereo output, without Mic MS5351 1 Provides RefClk for Serdes; control output via onboard UART USB JTAG & UART 1 Supports FPGA programming and provides UART function 2x20P headers 2 2x20P header at the top of the Dock board multiplexed with the the PMOD & DVP CONN. Power button 1 **Press and hold for 2 seconds to toggle power state** 12V DC 1 DC5521 ## Hardware Resources ~~ [Specification](https://dl.sipeed.com/shareURL/TANG/Mega_138K_60K/01_Specification)~~ [Schematics](https://dl.sipeed.com/shareURL/TANG/Mega_138K_60K/02_Schematic) [PCB BOM](https://dl.sipeed.com/shareURL/TANG/Mega_138K_60K/03_Designator_drawing) [Dimension Diagram](https://dl.sipeed.com/shareURL/TANG/Mega_138K_60K/04_Mechanical_drawing) [3D Model](https://dl.sipeed.com/shareURL/TANG/Mega_138K_60K/05_3D_file) [Some Chip Manuals](https://dl.sipeed.com/shareURL/TANG/Mega_138K_60K/07_Datasheet) [All PIN Constraints](https://dl.sipeed.com/shareURL/TANG/Mega_138K_60K/08_Misc) ## Getting Started Note that 60K is currently supported by the educational version. You need to download the educational IDE version V1.9.11.03 or later. The commercial IDE requires V1.9.10.03 or later. To download the bitstream to flash memory, we recommend using **exFlash Erase, Program through GAO Bridge 5A** mode (V1.9.10.03 or later) or **exFlash Erase, Program through GAO Bridge Arora V** (V1.9.12 or later). We recommend using the standalone **1.9.12 SP1** Programmer (also known as Yunyuan Programmer), which can be found on the **Yunyuan Software Commercial Version** page. This standalone programmer offers better compatibility. If you need to use the commercial IDE, you can apply for a license on the Gaoyun official website or use the online license service provided by Sipeed. Select Floating License in the IDE and fill in the following information: ~~~ Server 01 ip: 106.55.34.119 port: 10559 ~~~ if the ip not work, try use \"gowinlic.sipeed.com\" domain's IP. Install IDE [Click me](https://wiki.sipeed.com/hardware/zh/tang/common doc/get_started/install the ide.html) Example code [github](https://github.com/sipeed/TangMega 60K example) Other Learning Resources Free online tutorial: [Verilog Tutorial](https://www.runoob.com/w3cnote/verilog tutorial.html) (Learn Verilog) Free online FPGA tutorial: [Verilog](https://www.asic world.com/verilog/index.html) (English website) Verilog practice website: [HDLBits](https://hdlbits.01xz.net/wiki/Main_Page) (English website) Online Gowin Semiconductor reference video tutorials: [Click here](http://www.gowinsemi.com.cn/video_complex.aspx?FId n15:15:26) ## Communication Methods **Reddit** : [reddit.com/r/GowinFPGA/](reddit.com/r/GowinFPGA/) **Telegram** : [t.me/sipeed](t.me/sipeed) Discussion forum: [maixhub.com/discussion](https://maixhub.com/discussion) QQ discussion group: [834585530](https://jq.qq.com/?_wv 1027&k wBb8XUan) Leave a message directly below this page Goto**[GitHub project page](https://github.com/sipeed/TangMega 60K example)**and submit issues Business email : [support@sipeed.com](support@sipeed.com) ## Precautions <table> <tr> <th>Item</th> <th>Precautions</th> </tr> <tr> <td>Chip Model</td> <td>The specific model of the FPGA chip used by Tang Mega 60K is <b>GW5AT LV60PG484A</b> <br>Please select the package model <span><b>PBG484A</b></span> & <span><b>Device Version: B</b></span> in the IDE.</td> </tr> <tr> <td>Static Electricity</td> <td>Please avoid static electricity hitting the PCBA; release the static electricity from your hands before touching the PCBA.</td> </tr> <tr> <td>Tolerance Voltage</td> <td>When using GPIO pin headers for external communication, ensure that the IO voltage is <b>3.3V</b>. Excessive voltage will permanently damage the PCBA.</td> </tr> <tr> <td>FPC Socket</td> <td>When connecting the FPC soft cable, please ensure that the cable is completely and correctly inserted into the socket without any deviation.</td> </tr> <tr> <td>PCIE Gold Finger</td> <td>When testing the PCIE gold finger, ensure that both the host and the board are in the off or unpowered state to avoid short circuiting the gold finger due to displacement during the insertion process.</td> </tr> <tr> <td>Plug and Unplug</td> <td>Please completely power off before plugging and unplugging.</td> </tr> <tr> <td>Avoid Short Circuit</td> <td>Please avoid any liquid or metal touching the solder pads of the components on the PCBA during the power on process, otherwise it may cause a short circuit and burn the PCBA.</td> </tr> </table> ## Contact Tang Mega 60K can meet different needs of customers in various scenarios. For technical support and business cooperation, please contact [support@sipeed.com](support@sipeed.com) ## Frequently Asked Questions (FAQs) ### The system does not recognize the debugger Try connecting directly to the computer instead of through a USB HUB. Try using a better quality USB cable. Try another computer to rule out the computer being the problem. Try [update to the latest firmware](#How to update the firmware for the onboard debugger) and try again. ### The UART of the onboard debugger cannot be used Try reinstall FTDI drivers. IF the actual baudrate is always four times the set baudrate or the UART continuously outputs garbled characters. try [update to the latest firmware](#How to update the firmware for the onboard debugger) and try again. ### OpenFPGAloader not work Try [update to the latest firmware](#How to update the firmware for the onboard debugger) and try again. ### How to update the firmware for the onboard debugger See [Update the debugger](./../common/update_debugger) for details. ### After powering on the board, only four indicator lights on the dockboard are on, the SOM indicator light is not on 1. Please check if the board’s power has been turned on, press and hold the PWR button (next to the HDMI port) for 2 seconds to turn on the power. ### After powering on the board, the Battery Indicator light on the dcokboard is flashing 1. This is normal behavior, usually, the last LED (near the 12V DC connector) is flashing; 2. When the board is connected to a 3.7V lithium battery, these LEDs will serve as battery level indicators. ### After pressing and holding the PWR button for 2 seconds, all the indicator lights on the dockboard turn off and then light up in sequence 1. Check your power supply method, this situation means that the power supply is insufficient; 2. Solutions (choose one): a. Connect both the board’s **USB 3.0** and **USB DEBUG** for power supply, i.e., dual 5V USB power supply; b. Connect a 12V DC power supply to the board, if using the USB C to 12V DC connector from the accessories, a PD power source with 12V output capability is required; c. Connect a 3.7V lithium battery to power the board, note that the battery voltage must be ≥3.6V and the continuous discharge capacity must be ≥600mA. ### IDE cannot find the model GW5AT LV60PG484A 1. The GOWIN IDE version is too old. You must update to the commercial version IDE ≥ 1.9.10.03, or the educational version IDE ≥ 1.9.11.03. ### How to burn the bitstream to FLASH {#burn_flash} 1. Setting the **Programmer** as shown in the figure below: <img src \"./../assets/flash_mode_GAO.png\" alt \"flash_mode\" width 35%> 2. Check the position of the DIP switch; the correct position is shown in the figure below: <img src \"./assets/dip key_defualt.png\" alt \"dip key_defualt\" width 35%> ### No Response or Undesirable Pin Phenomenon After Burning 1. First, ensure that the IDE has selected the correct model **GW5AT LV60PG484AC1/10**; every parameter in the figure below **MUST** be consistent. <img src \"./assets/partno_60K.png\" alt \"device_choose\" width 35%> 2. Then, check your code and the corresponding simulation waveforms to meet the requirements. The GAO tools in GOWIN IDE maybe helpful. For more information, please refer to the GOWIN document [SUG100](https://www.gowinsemi.com/upload/database_doc/1885/document/660bb2366d0b3.pdf)(require login). ### For more questions and solutions, go to [Related Questions](./../common doc/questions) to view"},"/hardware/en/tang/tang-PMOD/FPGA_PMOD.html":{"title":"TANG PMOD","content":"# TANG PMOD ## Overview The TANG PMOD module is a FPGA expansion module compatible with the **Digilent Pmod™** interface standard. It can be used to extend the capabilities of FPGA development boards that include this interface, such as the [Tang Mega 138K Pro Dock](../tang mega 138k/mega 138k pro.html) and [Tang Primer 25K Dock](../tang primer 25k/primer 25k.html). Different modules provide various expansion functions, and they can be combined freely to achieve the required functionalities. <div> <img src \"./assets/PMOD all.jpg\" width 45%> <img src \"./assets/25K_PMOD.jpg\" width 45%> <img src \"./assets/138K_PMOD.jpg\" width 45%> </div> Purchase link: [AliExpress](https://www.aliexpress.us/item/1005006265716790.html?pdp_npi) ## PMOD_LEDx8 ### Introduction This module features 8 LEDs, each corresponding to one of the 8 IOs. Example: [pmod_digitalTube 2bit](https://github.com/sipeed/TangPrimer 25K example/tree/main/pmod_digitalTube 2bit) <div> <img src \"./assets/PMOD_LEDx8_top.jpg\" width 45%> <img src \"./assets/PMOD_LEDx8_bot.jpg\" width 45%> </div> ## PMOD_BTN4+4 ### Introduction The module includes 4 push buttons and a 4 position DIP switch. Example: [pmod_digitalTube 2bit](https://github.com/sipeed/TangPrimer 25K example/tree/main/pmod_digitalTube 2bit) <div> <img src \"./assets/PMOD_BTN4+4_top.jpg\" width 45%> <img src \"./assets/PMOD_BTN4+4_bot.jpg\" width 45%> </div> ## PMOD_DTx2 ### Introduction A 2 digit 7 segment display module. Example: [pmod_digitalTube 2bit](https://github.com/sipeed/TangPrimer 25K example/tree/main/pmod_digitalTube 2bit) <div> <img src \"./assets/PMOD_DTx2_top.jpg\" width 45%> <img src \"./assets/PMOD_DTx2_bot.jpg\" width 45%> </div> ## PMOD_DVI ### Introduction A module for HDMI output/input, which requires the use of LVDS differential pairs. Example: [nestang 25k](https://github.com/sipeed/TangPrimer 25K example/tree/main/nestang 25k) <div> <img src \"./assets/PMOD_DVI_top.jpg\" width 45%> <img src \"./assets/PMOD_DVI_bot.jpg\" width 45%> </div> ## PMOD_DVP ### Introduction An 8 bit Digital Video Port (DVP) module compatible with M12 lenses. Example: [Coming soon..](https://github.com/sipeed/TangPrimer 25K example/tree/main) <div> <img src \"./assets/PMOD_DVP_top.jpg\" width 45%> <img src \"./assets/PMOD_DVP_bot.jpg\" width 45%> </div> ## PMOD_TF CARD ### Introduction A module that supports standard TF cards and includes card detection functionality. Example: [nestang 25k](https://github.com/sipeed/TangPrimer 25K example/tree/main/nestang 25k) <div> <img src \"./assets/PMOD_TF CARD_top.jpg\" width 45%> <img src \"./assets/PMOD_TF CARD_bot.jpg\" width 45%> </div> ## PMOD_HUB75E ### Introduction A module that supports the HUB75E standard for LED matrix displays. Example: [pmod_hub75e](https://github.com/sipeed/TangPrimer 25K example/tree/main/pmod_hub75e) <div> <img src \"./assets/PMOD_HUB75E_top.jpg\" width 45%> <img src \"./assets/PMOD_HUB75E_bot.jpg\" width 45%> <img src \"./assets/PMOD_HUB75E_sample1.jpg\" width 45%> <img src \"./assets/PMOD_HUB75E_sample2.jpg\" width 45%> </div> ## PMOD_DS2x2 ### Introduction A module that supports two DS2 controllers (without vibration). Example: [nestang 25k](https://github.com/sipeed/TangPrimer 25K example/tree/main/nestang 25k) <div> <img src \"./assets/PMOD_DS2x2_top.jpg\" width 45%> <img src \"./assets/PMOD_DS2x2_bot.jpg\" width 45%> </div> # TANG 40P MODULE ## Overview The TANG 40P MODULE is a FPGA expansion module that is **partially compatible** with the DE10 Nano 40P interface standard. It can be used to extend the capabilities of FPGA development boards that include this interface. With more pins available, it allows the connection of more complex modules such as dual particle SDRAM modules and *DVP stereo camera modules. ## TANG_SDRAM ### Introduction 32MB x2 16bit 143MHz SDRAM modules. Example: [nestang 25k](https://github.com/sipeed/TangPrimer 25K example/tree/main/nestang 25k) Schematic: [Tang_sdram_xsds_V1.1_Schematic](https://github.com/sipeed/TangPrimer 25K example/tree/main/Tang_sdram_xsds_V1.1_Schematic) <div> <img src \"./assets/TANG_SDRAM_top.jpg\" width 45%> <img src \"./assets/TANG_SDRAM_bot.jpg\" width 45%> </div> *Note: This module is not compatible with Mister SDRAM V3.0, please carefully check the corresponding schematic. (The difference lies in pins 29 and 30 of the 40P female connector) <div> <img src \"./assets/TANG_SDRAM_diff.jpg\" width 45%> </div> ## Hardware Information Schematics and other documentation can be found here: [Click here](https://dl.sipeed.com/shareURL/TANG/PMOD) ### Public Examples GitHub link: https://github.com/sipeed/TangPrimer 25K example ## Communication Channels **Discussion Forum: [maixhub.com](https://maixhub.com/discussion)** **QQ Group: [834585530](https://jq.qq.com/?_wv 1027&k wBb8XUan)** Leave a message at the bottom of this page Business Email: [support@sipeed.com](mailto:support@sipeed.com) ## Related Issues For more questions and their solutions, visit [Related Issues](https://github.com/sipeed/TangPrimer 25K example/tree/main/common doc/questions.md)."},"/hardware/en/longan/Nano/Longan_nano.html":{"title":"Longan nano ","content":"# Longan nano ## Introduction Longan Nano is a minimalist RISC V development board based on GigaDevice GD32VF103CBT6. The development board draws out all the IOs of the chip, with a small and exquisite design, and has on board USB C, LCD, SD card, JTAG and other interfaces, which is convenient for students, engineers, and enthusiasts to learn the latest generation of RISC V processors. ![Longan_nano_pin](./../../../assets/Longan/nano/Longan_nano.124.jpg) ## Specification Feature Description CPU GD32VF103CBT6 based on RISC V 32 bit core Core power consumption 1/3 of a traditional Cortex M3 Storage 128KB Flash, 32KB SRAM Peripherals 4 x general purpose 16 bit timer, 2 x basic 16 bit timer, 1 x advanced 16 bit timer,<br>Watchdog, RTC, Systick<br>3 x USART, 2 x I2C, 3 x SPI, 2 x I2S, 2 x CAN, 1 x USBFS (OTG), 2 x ADC (10 channel), 2 x DAC Buttons 1x Reset button, 1x BOOT button (connected to GPIO） Display Interface SPI interface (standard 0.96 inch 160x80 RGB IPS LCD） Storage Interface Onboard TF card slot Debug Interface 2x 4 pin headers connected to JTAG debug interface and serial port Crystal Oscillator 8MHz passive crystal + 32.768KHz RTC passive crystal LED 1x RGB LED Number of GPIOs 2 Lead out 28 GPIOs to pin headers ### New Photo ![](./../../../assets/Longan/nano/Longan nano_PINOUT.svg) ![](./../../../assets/Longan/nano/longan nano 1.png) ### Old Photo ![](./../../../assets/Longan/nano/longan_nano_pinout_old.png) ![](./../../../assets/Longan/nano/longan nano old.png) ## User Guide [Longan User Guide](/soft/longan/en/README.md) ## Product technical support The Longan Nano development board can meet the needs of customers in various scenarios. It has been widely used in AIoT, and its quality and performance have a very good reputation in the industry. The professional technical team solves hardware design and software functions for our customers. For professional technical support and more detailed product information, please contact us via e mail <support@sipeed.com>。"},"/hardware/en/longan/Nano/blink.html":{"title":"Blink 闪灯程序","content":"Blink 闪灯程序 ## 创建 Blink 工程 * 打开 PIO 主页 选择 `Project Examples` ![](http://blog.sipeed.com/wp content/uploads/2019/04/d977e844490e6ccc4625f701883a29f5.png) * 选择 `arduino blink` 点击 `Import` 导入示例程序 （初次导入需要下载架构文件及工具，需要等待较长时间） ![](http://blog.sipeed.com/wp content/uploads/2019/04/82943a6b74077e6210e2d9421cb5438f.png) * 导入成功后即可见到示例工程 ![](http://blog.sipeed.com/wp content/uploads/2019/04/1262373ca7b0b483e30dac1124adaabf.png) ## 工程配置文件 * 我们首先需要编辑工程配置文件 `platformio.ini` 根据自己的开发板型号，删掉其他开发板环境。 ![](./../../assets/pio_ini_cfg.png) 配置示例 ```ini [env:sipeed longan nano] platform gd32v ;平台，选择gd32v framework arduino ;可选 gd32vf103 sdk 或 arduino board sipeed longan nano ; 开发板 monitor_speed 115200 ; 串口监视器波特率 upload_protocol serial ; 下载工具 默认串口， 可选 dfu、jlink、gd link 等 debug_tool jlink ; 调试工具 默认jlink ，可选 sipeed rv debugger 等 ``` PIO 可以在配置文件中实现设置宏定义， 控制编译流程等自定义功能，高级用法请参阅 [PIO 官方文档](https://docs.platformio.org/en/latest/projectconf.html). ## 一键编译 点击左下角的 `Build` 即可构建项目 ![](../../assets/pio_complie.png) ## 连接开发板 ### 串口 ISP 下载 * 准备 USB 转 串口下载器 * 连接开发板与下载器 * 修改 `platformio.ini` 文件， 添加下面一行内容： ```ini upload_protocol serial ``` * 开发板按住 `BOOT` 键，再按 `RESET` 键重启开发板后再松开 `BOOT` 键，进入下载模式。 ### JTAG 下载 * 准备J link 或 Sipeed RV 调试器 * 连接开发板 * 修改 `platformio.ini` 文件， 添加下面一行内容： ```ini upload_protocol jlink ``` 或者 ```ini upload_protocol sipeed rv debugger ``` ### USB DFU 下载 * **首次** 使用需要安装 libusb 驱动程序， 请参考此步骤 [使用 Zaidig 安装驱动](#使用zadig安装驱动). * 准备 USB Type c 数据线 * 使用数据线连接电脑与开发板 * 修改 `platformio.ini` 文件， 添加下面一行内容： ```ini upload_protocol dfu ``` * 开发板按住 `BOOT` 键，再按 `RESET` 键重启开发板后再松开 `BOOT` 键，进入 DFU 模式。 ## 一键下载 按照上面步骤选择好下载方式后，即可使用 PIO 内置工具一键下载。 点击左下角的 `Upload` 即可向开发板上传程序。 ![](../../assets/pio_upload.png) ## 使用Zadig安装驱动 PIO 内置 dfu util 下载工具，使用此工具需要为开发板安装 libusb 驱动。（注意： 与 GD 官方驱动不同） 建议通过 Zadig 安装 winusb 驱动。[下载地址](https://github.com/pbatard/libwdi/releases/download/b721/zadig 2.4.exe) 下载成功后打开 Zadig 在下拉栏中选择 GD32V， 替换驱动选择 WinUSB, 点击替换按钮，即可替换成功。 ![](../../assets/dfu_zadig.png) ## DFU 图形界面下载 下载DFU工具：http://dl.sipeed.com/LONGAN/Nano/Tools/GD32_MCU_Dfu_Tool_V3.8.1.5784_1.rar 解压出两个文件夹： GD32 MCU Dfu Drivers_v1.0.1.2316 和 GD32 MCU Dfu Tool_v3.8.1.5784 先进入driver文件夹，安装对应的驱动文件，注意使用管理员权限运行 ![](../../assets/examples/how_to_install_dfu.png) 运行 GD32 MCU Dfu Tool.exe 将 Longan Nano 插到电脑，按住 Boot0 键，短按 Reset 键，再松开 Boot0 键， 可以看到 DFU 工具中识别到了 GD32VF 芯片 选择对应的固件文件，并勾选烧录后校验，点击OK，即可进行烧录 烧录完成之后不会自动复位，需要自己手工按下复位按键，查看运行效果 ![](../../assets/examples/how_to_use_dfu.png)"},"/hardware/en/longan/Nano/pio.html":{"title":"PIO 配置","content":"PIO 配置 ## 安装 VS CODE VS CODE 是一款比较常用的开发工具。前往[VScode官网](https://code.visualstudio.com/ \"VScode官网\")，下载安装对应操作系统版本的安装包即可。 ## 安装 PIO 插件 打开 VSCode > 点击左侧扩展 > 搜索 PlatformIO > 点击安装插件 > 等待安装完成 > 重启 VSCODE ![](http://blog.sipeed.com/wp content/uploads/2019/04/0d501a8515a735fba54e2f5de908cd1e.png) ## 安装 GD32V 平台定义 PIO 目前提供**命令行**与**图形界面**两种方式来安装。下面将分别介绍： （PS : 推荐命令行，因为能看到下载进度条。） ### 命令行 点击左侧PIO标志 > 点击左下方的新建终端 > 在终端窗口中执行下面的安装指令 * 发布版 （稳定版本） ``` platformio platform install gd32v ``` * 开发版（与Github同步） ``` platformio platform install https://github.com/sipeed/platform gd32v ``` ![](../../assets/pio_install_gd32v.png) 注：受国内网络环境影响，安装过程需要较长时间，请耐心等待。 ### 图形界面 打开VS CODE > 点击左侧 PIO 图标 > 点击左下方的 Open 选项 > 点击 Platforms 页面 > 点击 Advanced Installation 打开添加窗口 ![](../../assets/pio_install_add_gd32v_step1.png) 在打开的窗口中输入下面的网址 ``` https://github.com/sipeed/platform gd32v.git ``` 点击 Install 即可添加完成。 ![](../../assets/pio_install_add_gd32v_step2.png) 耐心等待即可安装成功。 （安装失败多为网络原因， 请更换网络环境后再次尝试） ![](../../assets/pio_install_add_gd32v_step3.png)"},"/hardware/en/longan/Zero/index.html":{"title":"","content":"敬请期待"},"/hardware/en/longan/index.html":{"title":"","content":"# Updating"},"/hardware/en/longan/h618/lpi3h/3_images.html":{"title":"Images","content":" title: Images keywords: Linux, Longan, H618, SBC, ARM, image update: date: 2023 04 07 version: v1.1 author: ztd content: Add Debian CLI image date: 2023 12 08 version: v1.0 author: ztd content: Release docs ## Sipeed official images ### Debian Sipeed Official Image is based on the modified and adapted Debian system. The default account and password configuration for the image are as follows: Account: `root`, Password: `root`; Account: `sipeed`, Password: `licheepi`. **Please note that it is not recommended to log in to the desktop environment using the root user.** ![debian](./../../../../zh/longan/h618/lpi3h/assets/images/debian.png) ![debian_neofetch](./../../../../zh/longan/h618/lpi3h/assets/images/debian_neofetch.png) #### Changelog 20231220: Release of the first version of the image 20240106: Update EMMC boot support 20240110: Add SD, EMMC bootable burnable image files Fix DNS issues 20240226: Add GPIO sysfs Allow SSH login as root user Add USB gadget functionality 20240407： Add Debian CLI image Download: BaiduNetdisk: [Click me](https://pan.baidu.com/s/1VGaARAq6dbicFy4VOytRuw) 提取码: cd68 Mega: [Click me](https://mega.nz/folder/gt50zDoC#LgRvHVCzWTUgGohKoMtlqA) ### Android 12 20240226： Release of the first version of the image (without wifi/bt support) Download: BaiduNetdisk: [Click me](https://pan.baidu.com/s/1t cNlIIU0P8VDmkC518W6Q) 提取码: rb4d Mega: [Click me](https://mega.nz/folder/Z14klTRI#l4aMYdxgFzUf SirkvdOhg)"},"/hardware/en/longan/h618/lpi3h/1_intro.html":{"title":"Board Introduction","content":" title: Board Introduction keywords: Linux, Longan, H618, SBC, ARM update: date: 2023 12 08 version: v1.0 author: ztd content: Release docs ## Board Introduction Longan Pi 3H is an ARM Linux development board based on the Longan Module 3H core board. It is powered by the H618 (Quad core ARM Cortex A53 @ 1.5GHz, 64 bit) as the main control core and has a maximum onboard 4GB 64 bit LPDDR4 memory. It supports HDMI 4K display output and features a Gigabit Ethernet port. Additionally, it comes with onboard Wi Fi 6 and Bluetooth capabilities. ## Basic Specifications <table> <thead> <tr> <th colspan 2>Specifications</th> </tr> </thead> <tbody> <tr> <td>Main Chip</td> <td>H618</td> </tr> <tr> <td>CPU </td> <td>ARM Cortex A53@1.5Ghz <br>· Each core supports a 32 KB L1 I cache and a 32 KB L1 D cache. <br>· The quad core configuration shares a 1MB L2 cache.</td> </tr> <tr> <td>GPU</td> <td>Arm Mali G31 <br>· OpenCL 2.0<br>· OpenGL ES 1.0/2.0/3.2<br>· Vulkan 1.1</td> </tr> <tr> <td>Video Decoder</td> <td>· Supports H.264 BP/MP/HP@L4.2 decoding, with a maximum resolution of 4K<br>· Supports AVS2 JiZhun 10 bit decoding, with a maximum resolution of 4K <br>· The maximum decoding performance is 4K@60fps </td> </tr> <tr> <td>Video Encoder</td> <td>· Supports H.264 BP/MP/HP encoding, with a maximum resolution of 4K<br>· Only supports I frames and P frames for video encoding<br>· The maximum encoding performance is 4K@25fps </td> </tr> <tr> <th colspan 2>Hardware Specifications</th> </tr> <tr> <td>RAM</td> <td>· 1/2/4 GB 64bits LPDDR4<br></td> </tr> <tr> <td>Storage</td> <td>· eMMC: empty/32G<br>· Supports TF (microSD) card</td> </tr> <tr> <td>Ethernet</td> <td>· Gigabit Ethernet interface</td> </tr> <tr> <td>USB</td> <td>· 2 x USBA Host <br>· 1 x USBC OTG</td> </tr> <tr> <td>Display Interface</td> <td>· 1 x Standard HDMI interface </td> </tr> <tr> <td>GPIO</td> <td>· UART<br>· IIC<br>· SPI</td> </tr> </tbody> </table> ### Hardware Documentation Download [LonganPi3H Hardware Documentation](https://dl.sipeed.com/shareURL/LONGAN/LonganPi3H) ## Other links [Github](https://github.com/sipeed/LonganPi 3H SDK) [Aliexpress](https://www.aliexpress.us/item/3256806204597847.html) Forum：Maixhub.com/discussion Email：support@sipeed.com"},"/hardware/en/longan/h618/lpi3h/7_develop_android.html":{"title":"Android Development","content":" title: Android Development keywords: Android, Longan, H618, SBC, ARM, Kernel, SDK, Develop update: date: 2024 02 26 version: v1.0 author: ztd content: Release docs ## Android SDK TODO"},"/hardware/en/longan/h618/lpi3h/5_desktop.html":{"title":"Desktop","content":" title: Desktop keywords: Linux, Longan, H618, SBC, ARM, Debian, Desktop update: date: 2023 12 08 version: v1.0 author: ztd content: Release docs ## Logging into the System In this document, we'll use the default Debian desktop system as an example to explain basic system usage. The default credentials for the image are as follows: User: `sipeed`, Password: `licheepi`; User: `root`, licheepi `root`; The image has automatic login enabled, and the user sipeed is automatically logged in. If you don't want automatic login, you can comment out the line `autologin user sipeed` in the file `/usr/share/lightdm/lightdm.conf.d/01_debian.conf`. ## Opening the Command Line In the Debian graphical system of LonganPi 3H, you can open the command line terminal quickly and conveniently by pressing the key combination Ctrl + Alt + T. ## Connecting to the Network The desktop system uses ConnMan to manage network connections by default. You can find `ConnMan Settings` in the application menu at the top left corner. After clicking it, a network icon will appear at the top right corner of the desktop. Clicking the network icon allows you to create new network connections and view network connection information: ![connman_enable](./../../../../zh/longan/h618/lpi3h/assets/desktop/connman_enable.png) ### Connecting to Wired Network In the terminal, you can enable a wired network connection and view related information using: ```shell connmanctl enable ethernet ``` LonganPi 3H has a Gigabit Ethernet interface. To connect to a wired network, plug in an Ethernet cable that is already connected to the network into the network interface of LonganPi 3H. You can see the connection information by clicking the network icon at the top right corner: ![connman_connect_eth](./../../../../zh/longan/h618/lpi3h/assets/desktop/connman_connect_eth.png) ### Connecting to Wireless Network LonganPi 3H has an onboard wireless module that supports Bluetooth and Wi Fi. Graphical Interface Method: Click the network icon at the top right corner and switch to the Wi Fi connection page. Select the desired Wi Fi network and click \"Connect\": ![connman_connect_wifi](./../../../../zh/longan/h618/lpi3h/assets/desktop/connman_connect_wifi.png) Commandline Interface Method: We can use connmanctl to enable wifi connections and other information: ```shell connmanctl enable wifi ``` Open the command line and use wpa_supplicant to connect to Wi Fi. The following steps need to be executed as the root user: ```shell sudo i nano /etc/wpa_supplicant.conf ``` Create the wpa_supplicant.conf file and enter the SSID and passphrase of the Wi Fi network: ```txt network { ssid \"your_wifi_name\" #psk \"your_wifi_password\" } ``` After filling in the information, run the following command to connect to Wi Fi: ```shell wpa_supplicant D nl80211 i 网卡名 c /etc/wpa_supplicant.conf & ``` If there's no IP address, use dhcp to get a ip address: ```shell dhclient ``` ## Connecting to Bluetooth In the terminal, you can enable Bluetooth connection and view related information using: ```shell connmanctl enable bluetooth ``` The desktop system uses `blueman` to manage Bluetooth connections by default. Find the Bluetooth icon at the top right corner of the desktop and make sure that Bluetooth is turned on. If it's not, right click the Bluetooth icon to turn it on: ![bluetooth_icon.png](./../../../../zh/longan/h618/lpi3h/assets/desktop/bluetooth_icon.png) After turning it on, left click the Bluetooth icon to see the Bluetooth device scanning interface. Click the \"Search\" button in the top left corner of that interface to search for Bluetooth devices. Make sure that Bluetooth devices such as keyboards, mice, and headphones are in pairing mode and can be discovered. Right click the desired device and select \"Connect\" to establish the connection. After a successful connection, you can also right click the device and click \"Trust\" to enable automatic connection in the future. ![bluetooth_devices.png](./../../../../zh/longan/h618/lpi3h/assets/desktop/bluetooth_devices.png) If the Bluetooth graphical management interface cannot find devices, you can use `bluetoothctl` in the command line interface to pair devices. The steps are as follows: ```shell bluetoothctl scan on # Find the MAC address of the device you want to pair with pair MAC_address_of_target_deviceconnect connect MAC_address_of_target_device ``` ## Software Installation After connected to the network, you can update and install software packages. ### Software Sources In Debian, apt (Advanced Packaging Tool) can be used to install software. When installing software, it will search and download the target software from the system specified software website. When the target website is difficult to access (such as the server is too far away or the server network is not good), you can manually set up and edit the software source website to change it to the nearest source to reduce the download time. The default software source is the content of the `/etc/apt/sources.list` file, which can be changed by yourself if there is additional need. ### Upgrading Software Using `sudo apt update` can update the software list, which is generally needed after changing the software source. Before using this command, use the `date` command to check the time. If the system time is wrong or there is no automatic update time after connecting to the network, you can update it manually to ensure that the software package in the software source is the latest version: ```shell sudo date s \"20230717 12:00:00\" ``` Then you can update the software named `package_name` with `sudo apt upgrade package_name`. ### Install Software can be installed with the apt command;for example, `sudo apt install package_name` to install `package_name`, replacing `package_name` with the name of the software package you want to install. ## SSH If you don't have ssh or sshd in your image, you can install them first with the following command: ```bash sudo apt install ssh openssh server ``` Once installed, you can use ssh to log in to other machines or log in to the LicheePi 4A from other machines. You can also use scp to transfer files: ```bash scp demo.zip sipeed@192.168.1.9:~/ ``` ## Input Languages If you need to input non ascii characters, you need to install input languages. Here I use Chinese input language as an example, please find related tutorials for other languages. First, install ibus libpinyin: ```bash sudo apt install y ibus libpinyin ``` > Note that this will consume about 200MB of disk space After installation, reboot the board, you will see the `IBus Preference` option under Applications, click to enter the settings. ![pinyin_cfg0](./../../../../zh/longan/h618/lpi3h/assets/desktop/pinyin_cfg0.png) Click `Input Method` in the appearing interface, click `Add`, select `Chinese`, select `Intelligent Pinyin`, click `Add` to add Chinese Pinyin input method. ![pinyin_cfg1](./../../../../zh/longan/h618/lpi3h/assets/desktop/pinyin_cfg1.png) Click the input icon in the upper right corner, you will see the following options, select `Chinese Intelligent Pinyin`. ![pinyin_cfg2](./../../../../zh/longan/h618/lpi3h/assets/desktop/pinyin_cfg2.png) At this point, you can input Chinese successfully in the system. ## Browser The system has built in Firefox browser, which can be used by clicking the browser icon at the bottom of the desktop: ![browser_location](./../../../../zh/longan/h618/lpi3h/assets/desktop/browser_location.png) The effect is as follows: ![firefox_usage](./../../../../zh/longan/h618/lpi3h/assets/desktop/firefox_usage.png) ## Player You can install the VLC player by using the command: ```shell sudo apt install vlc ``` After installation, the video playback effect is as follows: ![vlc_player_usage](./../../../../zh/longan/h618/lpi3h/assets/desktop/vlc_player_usage.png) ## Programming Development ### Python The python3 environment is installed in the system, so you can run `python3` directly in the terminal: ![python_usage](./../../../../zh/longan/h618/lpi3h/assets/desktop/python_usage.png) If you need to install Python packages, use: `sudo apt install python3 XXX` For example, to install the pyserial package: `sudo apt install python3 serial`. ### C The `build essential` package needs to be installed, which takes up about 800MB of disk space. ```bash sudo apt install build essential ``` Then you can use gcc to do the relevant operations: ![gcc_usage](./../../../../zh/longan/h618/lpi3h/assets/desktop/gcc_usage.png) ## More Welcome to submit your submissions! You can get ¥5~150 ($1~20) coupons after your submissions are accepted!"},"/hardware/en/longan/h618/lpi3h/4_burn_image.html":{"title":"Burn images","content":" title: Burn images keywords: Linux, Longan, H618, SBC, ARM, image update: date: 2023 12 08 version: v1.0 author: ztd content: Release docs ## Preparation ### Get the Image Refer to the previous section[images](https://wiki.sipeed.com/hardware/en/longan/h618/lpi3h/3_images.html), and download the desired image. ### Get the Flashing Tool The commonly used tools for flashing images to an SD card are balenaEtcher, Rufus, etc. Here, we'll use balenaEtcher as an example. First, go to the [balenaEtcher official website](https://etcher.balena.io/#download etcher) to download and install the software. For Linux, you can also use the dd command to write the image directly. ### Flashing the Linux Image to SD cards After preparing the image to be flashed, open balenaEtcher. First, select the image file you want to flash: ![select_image](./../../../../zh/longan/h618/lpi3h/assets/burn_image/select_image.png) Then, select the target device: ![select_device](./../../../../zh/longan/h618/lpi3h/assets/burn_image/select_device.png) Finally, click on \"Flash\" and wait for the flashing process to complete. Once it's done, you'll have an SD card with the bootable image: ![flash_image](./../../../../zh/longan/h618/lpi3h/assets/burn_image/flash_image.png) The steps for Windows and Linux are similar. ### Flashing the Linux image to EMMC **Note that you need to use the image version 20240106 and above** First prepare a boot TF card, login to the system, and then use SCP or other tools to copy the EMMC image file to the system running on the TF card , and then use the dd command to write the image file to EMMC: ```shell # Assuming the image file is copied to /opt/ directory dd if /opt/your_image_file of /dev/mmcblk1 sync ``` When the burning is finished, unplug the SD card and you can enter the system from the EMMC. If you want to boot with EMMC and use SD card for expansion, you need to make sure that the SD card is formatted and does not contain a boot image, otherwise it may be changed to SD card boot due to priority issues. ### Flashing the Android image to SD card **Note: Android images cannot be flashed using balenaEtcher. Please use PhoenixCard to flash the image before it can be booted.** First, download the PhoenixCard tool from the cloud storage. Once downloaded, open the tool and select the second option: 启动卡. Then click the 烧卡 button to burn the Android image to the TF card, and it will be ready for use. ![flash_to_sd](./../../../../zh/longan/h618/lpi3h/assets/burn_image/flash_to_sd.png) ### Flashing the Android image to EMMC Open PhoenixCard and select the first option: 量产卡. Then click the 烧卡 button to burn the Android image to the TF card, and then insert the TF card into the board. Power on the board, and the Android image will be automatically flashed to the eMMC. After the flashing process is complete, remove the TF card, and the Android image in the eMMC will be ready for use. ![flash_to_emmc](./../../../../zh/longan/h618/lpi3h/assets/burn_image/flash_to_emmc.png)"},"/hardware/en/longan/h618/lpi3h/8_test_report.html":{"title":"Test Report","content":" title: Test Report keywords: Linux, Longan, H618, SBC, ARM, test update: date: 2023 12 08 version: v1.0 author: ztd content: Release docs "},"/hardware/en/longan/h618/lpi3h/6_peripheral.html":{"title":"Peripheral","content":" title: Peripheral keywords: Linux, Longan, H618, SBC, ARM, Peripheral update: date: 2023 12 08 version: v1.0 author: ztd content: Release docs ## SoC ### CPU frequency ```shell sudo cat /sys/devices/system/cpu/cpu*/cpufreq/cpuinfo_cur_freq ``` Unit: KHz Note that the system has a temperature control strategy, which will reduce the frequency when the system is too idle or the temperature is too high. ## PWM TODO ## GPIO ![io_map](./../../../../zh/longan/h618/lpi3h/assets/peripheral/io_map.jpeg) ![pin_num](./../../../../zh/longan/h618/lpi3h/assets/peripheral/pin_num.png) Referring to the two tables above, you can find the position and number of the GPIO to be used. Taking the example of lighting up the two LEDs on the board, you can use the following command to manipulate the corresponding GPIO in the user space: ```shell num 194 echo ${num} > /sys/class/gpio/export echo out > /sys/class/gpio/gpio${num}/direction echo 0 > /sys/class/gpio/gpio${num}/value num 196 echo ${num} > /sys/class/gpio/export echo out > /sys/class/gpio/gpio${num}/direction echo 0 > /sys/class/gpio/gpio${num}/value ``` In addition to the above methods, GPIO can also be controlled using the libgpiod library in the C language. The following example still uses the LED lights on the board: ```c #include <gpiod.h> #include <stdio.h> #include <unistd.h> #include <stdlib.h> int main(int argc, char **argv) { int i; int ret; struct gpiod_chip * chip; struct gpiod_line * line; chip gpiod_chip_open(\"/dev/gpiochip0\"); if(chip NULL) { printf(\"gpiod_chip_open error\\n\"); return 1; } line gpiod_chip_get_line(chip, 194); if(line NULL) { printf(\"gpiod_chip_get_line error\\n\"); gpiod_line_release(line); } ret gpiod_line_request_output(line,\"gpio\",0); if(ret < 0) { printf(\"gpiod_line_request_output error\\n\"); gpiod_chip_close(chip); } for(i 0; i < 10; i++) { gpiod_line_set_value(line,1); sleep(1); gpiod_line_set_value(line,0); sleep(1); } gpiod_line_release(line); gpiod_chip_close(chip); return 0; } ``` To install the required dependencies: ```shell sudo apt update sudo apt install build essential libgpiod dev gpiod ``` After compiling, you need to execute the program with root privileges: ```shell gcc gpio.c I /usr/include/ L /usr/lib/aarch64 linux gnu/ lgpiod o gpio sudo ./gpio ``` The libgpiod library also provides some commands to manipulate GPIO. Here are some commonly used commands: gpiodetect: List all GPIO controllers ```shell sudo gpiodetect ``` gpioinfo: Display the pin information of a GPIO controller, showing which pins are already in use. ```shell sudo gpioinfo gpiochip0 ``` gpioset: Set the state of a GPIO pin. ```shell sudo gpioset gpiochip0 196 0 ``` gpioget: Get the state of a GPIO pin. ```shell sudo gpioget gpiochip0 196 ``` ## UART ### System serial port The system serial port of the LonganPi 3H is UART0, which is provided in the side pins. ![uart_pin](./../../../../zh/longan/h618/lpi3h/assets/peripheral/uart_pin.png) You can use USB to serial module to connect the serial port, namely `U0 RX` and `U0 TX`, pay attention to cross connection, as well as GND connection (there is also an extra power line in the following picture, if you use typeC port to power, you can not connect this power line). ![uart_connect](./../../../../zh/longan/h618/lpi3h/assets/peripheral/uart_connect.png) After the connection is completed, you can use the serial port tool for communication, recommended `XShell` and `mobaterm` under Windows, and `minicom` under Linux. Set the serial port baud rate to `115200`, and you can log in and operate the commands under the serial terminal: > Note: After the connection, you can knock several enters to see if there is a response, if there is no response, check the wiring or serial port configuration. ### General serial port In addition to the system serial port UART0, the device tree also enabled UART1, UART2, UART3, UART4 serial ports by default, which can be used as needed. #### List serial devices ```bash ls /dev/ttyS* ``` #### Viewing serial port information such as baud rate ```bash stty F /dev/ttyS1 a ``` #### Set serial port baud rate and data mode ```bash stty F /dev/ttyS1 ispeed 115200 ospeed 115200 cs8 ``` #### Check serial data ```bash cat /dev/ttyS1 ``` #### Sending serial data ```bash echo \"LonganPi3H\" > /dev/ttyS1 ``` #### Other tools You can also use `minicom` or pyserial library for serial operation, please find relevant information for yourself.If you want to use unusual baud rate, you can use `picocom`. ## I2C TODO ## SPI TODO ## HDMI display LonganPi 3H supports a display with a maximum resolution of 4k, as shown in the following image: ![hdmi_connect](./../../../../zh/longan/h618/lpi3h/assets/peripheral/hdmi_connect.jpg) If you don't see anything when you plug in an HDMI display, try changing the display configuration parameters using xrandr from the command line. First export the DISPLAY variable: ```shell export DISPLAY :0.0 ``` Then use xrandr to see the available arguments: ```shell sipeed@lpi3h ce8e:~$ xrandr Screen 0: minimum 320 x 200, current 1920 x 1080, maximum 8192 x 8192 HDMI 1 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 255mm x 220mm 1920x1080 60.00*+ 60.00 59.94 1400x1050 59.95 1280x1024 75.02 60.02 1440x900 59.90 1280x960 60.00 1152x864 75.00 1280x720 60.00 59.94 1024x768 75.03 70.07 60.00 832x624 74.55 800x600 72.19 75.00 60.32 56.25 640x480 75.00 72.81 66.67 60.00 59.94 720x400 70.08 ``` Based on the output of the above command, we can try to change the resolution, frame rate and other configurations, such as changing to 1440x900 resolution: ```shell xrandr xrandr output HDMI 1 mode 1440x900 ``` Some parameters may cause the screen to not light up. When you have no display when you plug in an HDMI display, you can use this command to adjust the display parameters to light up, or you can adjust them in the display graphical menu in the system settings. If you find that you have flickering problems with higher resolutions, try lowering the refresh rate in the graphical settings display menu. ## HDMI audio TODO ## GPU TODO ## Others Welcome to submit! You can get ¥5~150 ($1~20) coupons after your submission is accepted!"},"/hardware/en/longan/h618/lpi3h/7_develop_mainline.html":{"title":"Mainline Linux","content":" title: Mainline Linux keywords: Linux, Longan, H618, SBC, ARM, Kernel, SDK, Develop update: date: 2024 04 07 version: v1.1 author: ztd content: Add Debian & Ubuntu CLI image build instructions. date: 2023 12 08 version: v1.0 author: ztd content: Release docs This document takes Ubuntu 22.04 as an example to demonstrate how to build a LonganPi 3H development environment and develop mainline Linux. Before the official merger into the mainline, it is necessary to pull the Github repository to obtain patch development, which is expected to be merged into the mainline Linux in 2024Q1. ## Environment Configuration First, use git to pull the repository to the local, and install the toolchain: ```shell sudo apt install gcc aarch64 linux gnu mmdebstrap git git clone https://github.com/sipeed/LonganPi 3H SDK.git ``` ## Build Then go to the directory where the repository is located and run the script to get the uboot, kernel, dtb and rootfs built. ```shell cd LonganPi 3H SDK ./mkatf.sh ./mklinux.sh ./mkuboot.sh sudo ./mkrootfs debian gui.sh ``` The generated Image files, device tree files will be copied to the overlay/boot/ folder under the repository directory. The generated kernel modules will be copied to the overlay/usr/ folder under the repository directory. Next, we will introduce the main files and their functions in the SDK repository: The `linux` folder stores the kernel patch files, which will be automatically applied to the kernel source code when running mklinux.sh. The `uboot` folder stores the U Boot patch files, which will be automatically applied to the U Boot source code when running mkuboot.sh. The `overlay` folder contains some necessary files that will be automatically overlayed to the constructed rootfs when running mkrootfs.sh. mkrootfs.sh is used to build the required root file system for burning, you can choose whether to skip the construction of the Debian rootfs according to actual needs, see the script comments for details. The `mkrootfs*.sh` is used to build the root file system required for flashing. You can choose the version of the root file system according to your needs: **mkrootfs debian gui.sh** will build the rootfs of the Debian distribution with a desktop environment included; **mkrootfs debian cli.sh** will build the rootfs of the Debian distribution without a desktop environment; **mkrootfs ubuntu cli.sh** will build the rootfs of the Ubuntu distribution without a desktop environment; After the construction is complete, the next step is to introduce how to make a TF card for booting and how to package the burnable TF card boot image. ## Make a boot TF card To prepare a TF card, first format it. Then partition the TF card (please modify the commands below to the proper drive letter for your own TF card, carefully verify and operate prudently), the following steps use fdisk to add two partitions to the TF card, the boot partition size is 64M, and the remaining space is allocated to the root file system (U Boot is burned to the raw partition, which is usually located in the first 1M of the TF card space): ```shell sudo fdisk /dev/sdc n p 1 2048 +64M n p 2 # 完整交互信息如下： ztd@ztd desktop:~$ sudo fdisk /dev/sdc Welcome to fdisk (util linux 2.37.2). Changes will remain in memory only, until you decide to write them. Be careful before using the write command. Device does not contain a recognized partition table. Created a new DOS disklabel with disk identifier 0x0d923c5e. Command (m for help): n Partition type p primary (0 primary, 0 extended, 4 free) e extended (container for logical partitions) Select (default p): p Partition number (1 4, default 1): 1 First sector (2048 60506111, default 2048): Last sector, +/ sectors or +/ size{K,M,G,T,P} (2048 60506111, default 60506111): +64M Created a new partition 1 of type 'Linux' and of size 64 MiB. Command (m for help): n Partition type p primary (1 primary, 0 extended, 3 free) e extended (container for logical partitions) Select (default p): p Partition number (2 4, default 2): 2 First sector (133120 60506111, default 133120): Last sector, +/ sectors or +/ size{K,M,G,T,P} (133120 60506111, default 60506111): Created a new partition 2 of type 'Linux' and of size 28.8 GiB. ``` Then pressing Enter twice, the remaining space will be allocated to the root file system. After partitioning is complete, do not exit fdisk yet, and still need to set the first partition as the boot partition: ```shell t 1 c a 1 # 完整交互信息如下： Command (m for help): t Partition number (1,2, default 2): 1 Hex code or alias (type L to list all): c Changed type of partition 'Linux' to 'W95 FAT32 (LBA)'. Command (m for help): a Partition number (1,2, default 2): 1 The bootable flag on partition 1 is enabled now. ``` After setting, input p to check if the partition information just set is correct: ```shell Command (m for help): p Disk /dev/sdc: 28.85 GiB, 30979129344 bytes, 60506112 sectors Disk model: Storage Device Units: sectors of 1 * 512 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x0d923c5e Device Boot Start End Sectors Size Id Type /dev/sdc1 * 2048 133119 131072 64M c W95 FAT32 (LBA) /dev/sdc2 133120 60506111 60372992 28.8G 83 Linux ``` Once verified the partition information is correct, input w and press Enter to write the partition table configuration: ```shell Command (m for help): w The partition table has been altered. Calling ioctl() to re read partition table. Syncing disks. ``` Next, format the **partitions**: ```shell sudo mkfs.vfat F 32 n \"boot\" /dev/sdc1 sudo mke2fs t ext4 F L \"rootfs\" /dev/sdc2 ``` Then flash uboot： ```shell sudo dd if build/u boot sunxi with spl.bin of /dev/sdc bs 1k seek 8 conv fsync ``` Flash kernel： ```shell mkdir p /tmp/kernel sudo mount /dev/sdc1 /tmp/kernel sudo cp r overlay/boot/* /tmp/kernel sync sudo umount /tmp/kernel ``` Flash rootfs： ```shell mkdir p /tmp/rootfs sudo mount /dev/sdc2 /tmp/rootfs sudo tar vxf build/rootfs_debian_gui.tar C /tmp/rootfs/ sync sudo umount /tmp/rootfs ``` Now we get a boot TF card. ## Make a boot TF card image First, create an empty img file: ```shell export DATE $(date +\"%Y%m%d\") dd if /dev/zero of LPI3H_${DATE}.img bs 1M count 3072 ``` Then partition the img file. Similarly, use the fdisk command to divide it into a boot partition and a rootfs partition: ```shell # 过程类似，此处不再赘述 fdisk LPI3H_${DATE}.img n p 1 2048 +64M n p 2 # 两次回车 t 1 c a 1 w ``` Use fdisk l LPI3H_${DATE}.img to view the partition information: ```shell Disk LPI3H_20231215.img: 2.5 GiB, 2684354560 bytes, 5242880 sectors Units: sectors of 1 * 512 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0xf417d095 Device Boot Start End Sectors Size Id Type LPI3H_20231215.img1 * 2048 133119 131072 64M c W95 FAT32 (LBA) LPI3H_20231215.img2 133120 5242879 5109760 2.4G 83 Linux ``` After partitioning, use the losetup command to set up the loop device: ```shell sudo losetup f LPI3H_${DATE}.img # fdisk 查看的分区信息用于挂载 # sudo losetup f o $[Start*512] sizelimit $[Sectors*512] LPI3H_${DATE}.img sudo losetup f o $[2048*512] sizelimit $[131072*512] LPI3H_${DATE}.img sudo losetup f o $[133120*512] sizelimit $[6158336*512] LPI3H_${DATE}.img ``` `sudo losetup l grep LPI3H` to check the loop device information: ```shell /dev/loop23 67108864 1048576 0 0 LPI3H_20231215.img 0 512 /dev/loop24 2616197120 68157440 0 0 LPI3H_20231215.img 0 512 /dev/loop3 0 0 0 0 LPI3H_20231215.img 0 512 ``` According to the loop device information found above, continue with the following operations. Next, format the **partitions**: ```shell sudo mkfs.fat /dev/loop23 sudo mkfs.ext4 /dev/loop24 ``` And flash the uboot, kernel, rootfs into the img files: ```shell # 写入 uboot sudo dd if build/u boot sunxi with spl.bin of /dev/loop3 bs 1k seek 8 conv fsync # 写入 kernel： mkdir p /tmp/kernel sudo mount /dev/loop23 /tmp/kernel sudo cp r overlay/boot/* /tmp/kernel # 写入 rootfs： mkdir p /tmp/rootfs sudo mount /dev/loop24 /tmp/rootfs sudo tar vxf build/rootfs_debian_gui.tar C /tmp/rootfs/ # 取消挂载 sync sudo umount /tmp/rootfs sudo umount /tmp/kernel sudo losetup d /dev/loop23 # 删除 kernel 分区对应的的循环设备 sudo losetup d /dev/loop24 # 删除 rootfs 分区对应的循环设备 sudo losetup d /dev/loop3 # 删除 img 文件对应的循环设备 ``` According to the instructions on the [burn image](https://wiki.sipeed.com/hardware/en/longan/h618/lpi3h/4_burn_image.html) page, here are the steps to burn the obtained img image file to the TF card:"},"/hardware/en/longan/One/index.html":{"title":"","content":"敬请期待"},"/hardware/en/maixface/core_modules/k210_core_modules.html":{"title":"K210 core module","content":"# K210 core module There are four AIOT modules developed based on K210: M1, M1w, M1n, MF0 Feature description: These four modules are based on Canaan Kanzhi Technology's edge intelligent computing chip K210 (RISC V architecture). The main control chip has a built in 64 bit dual core high performance low power processor, each core has a floating point unit (FPU), a convolutional artificial neural network intelligent hardware accelerator (KPU) and a fast Fourier transform accelerator (FFT) , Equipped with Field Programmable IO Array (FPIOA), supports a variety of mainstream AI programming frameworks. ### Maix AIOT module difference comparison M1 M1w M1n MF0 Exterior ![M1 module](../../assets/mf_module/m1_m1w/sipeed_m1_module.png) ![M1W module](../../assets/mf_module/m1_m1w/sipeed_m1w_module.png) ![M1n module](../../assets/mf_module/m1n/sipeed_m1n_module.png) ![MF0 module](../../assets/mf_module/mf0_mf0dock/sipeed_mf0_module.png) size 25.4x25.4x3.3（mm） 25.4x25.4x3.3（mm） 25.0x22.0x2.7（mm） 20.0x20.0x4.5（mm） Voltage output (provided to the bottom board) 1.8V and 3.3V 1.8V and 3.3V 1.8V and 3.3V 3.3V Maximum power consumption (non transient) 1.5W 3W 1.5W 1.5W WIFI None K210 and ESP8285 are connected through SPI interface and serial port None None Onboard camera connector None None Yes (only compatible with single camera) Yes (only compatible with single camera) Pin form Stamp hole Stamp hole NGFF B KEY 2.54mm pitch through pad + SMD pad camera signal All leads All leads All leads None screen signal All leads All leads All leads None Lead out ordinary IO port Quantity 48 (all lead out) Quantity 48 (all lead out) 44 (not drawn by IO0 3) 9 ## Module pin definition Specific downloadable specifications M1/M1w: https://dl.sipeed.com/MAIX/HDK/Sipeed M1&M1W/Specifications M1n: https://dl.sipeed.com/MAIX/HDK/Sipeed M1n MF0: https://dl.sipeed.com/MAIX/HDK/Sipeed MF0/MF0 2802"},"/hardware/en/maixface/mf_ml_module/mf_precautions.html":{"title":"MF PCB design considerations","content":"# MF PCB design considerations Precautions: 1. For the 850nm infrared fill light, 1W or 3W power lamp beads can be considered, because the lamp beads with higher power can extend the service life, reduce the failure rate and improve the recognition effect 2. The driving circuit and component parameters of infrared lamp beads and white light lamp beads must be determined according to the actual lamp beads selection and quantity. Because the cost of different circuits is different, the brightness feels different, and the needs of different customers are different, so customers need to choose and adjust parameters according to the actual situation. 3. 850nm light has certain penetrability. It has been confirmed that the 850nm light of the infrared fill light will penetrate from the periphery and back of the camera module, affecting the imaging, and then affecting the screen image or the recognition effect. Therefore, it is necessary to use 850nm impenetrable materials/paint/tape to block the infrared light scattered from the lamp beads to the inside of the camera between the camera and the fill light. In addition, you can also open the distance between the infrared lamp beads and the camera. Keep the distance above 15mm to reduce the negative impact by 80%. Keep the distance above 20mm, and the infrared rays will not be transmitted into the camera. 4. The heat dissipation pad on the bottom of the M1/M1w module needs to be connected to the largest possible copper skin to improve the heat dissipation performance 5. The pads of white light lamp beads and infrared lamp beads need to be connected to the largest possible copper skin to improve heat dissipation performance 6. The capacitor to the ground of the white light fill light should be removed, otherwise it will reset when the light is turned on 7. If capacitive touch is needed, try to put the touch chip under the position close to the finger touch. Because of the trace length between the touch chip and the touch panel, the longer the length, the more difficult it is to grasp the sensitivity and the easier it is to be interfered. 8. For each K210 module pin and power pin used, try to add ESD diodes. The location of the ESD diode is selected according to the actual situation 9. If there is a requirement for certification, all data lines D0 D7 of the screen/camera and 4 control signals, as well as other communication signal lines, need to add RC filtering to eliminate overshoot and ringing according to the actual measurement conditions. The parameter is 100R+100PF (It is best to decide according to the actual test), low pass RC form (the signal output first passes through the resistor and then the capacitor, and the RC component is placed close to the M1 module). Try to add RC filtering to other output signals (resistance and capacitance are determined according to the actual signal frequency) 10. Try to connect 200R resistors and ESD diodes to each IO to protect the IO ports 11. The working voltage and tolerance voltage of RST, BANK6/7, camera 8 bit data and screen 8 bit data of M1/M1w module are 1.8V, and the working voltage and tolerance voltage of BANK0/1/2/3/4/5 All are 3.3V withstand voltage, and must not exceed the withstand voltage range. If you want to use the RST pin, it is recommended to use a MOS tube to form a level conversion circuit. 12. The 5V of the module is the input, and the external power supply is used for the module; the 1.8V and 3.3V of the module are generated by the internal DC DC of the module, which are mainly used for the internal core components of the module, and secondly for the small current components outside the module. (For example, as a 1.8V reference voltage for screens and cameras, and other small current requirements. It is not recommended to provide large current components outside the module) 13. If you use the M1w module, you need to follow the antenna placement principle to place the IPEX 2.4G antenna, otherwise the signal will have a greater degree of loss 14. IO16 (BOOT) needs to add a 10K pull up resistor to 3.3V on the bottom board 15. FPIOA allows users to map 255 internal functions to 48 free IOs on the periphery of the chip"},"/hardware/en/maixface/mf_ml_module/mf5_product.html":{"title":"MF5","content":"# MF5 ## MF5 外观一览 ## MF5 板载接口 <table border \"2\"> <tr> <th colspan 6>MaixFace 5 引脚信息</th> </tr> <tr> <td colspan 3><img src \"./../../../zh/maixface/assets/mf_module/mf5/mf5_if_1.png\" height 400></td> <td colspan 3><img src \"./../../../zh/maixface/assets/mf_module/mf5/mf5_if_2.png\" height 400></td> </tr> <tr> <td>Maix Face Slik</td> <td>K210 IO</td> <td>ESP8285 IO</td> <td>Function</td> <td>Remark</td> <td>IO Voltage</td> </tr> <tr> <td>VIN</td> <td> </td> <td> </td> <td>电源输入正极</td> <td>12V</td> <td rowspan 22>3.3V</td> </tr> <tr> <td>GND</td> <td> </td> <td> </td> <td>电源输入负极</td> <td>电源GND</td> </tr> <tr> <td>NC</td> <td> </td> <td> </td> <td>继电器常闭触点</td> <td rowspan 3>继电器</td> </tr> <tr> <td>COM</td> <td> </td> <td> </td> <td>继电器公共触点</td> </tr> <tr> <td>NO</td> <td> </td> <td> </td> <td>继电器常开触点</td> </tr> <tr> <td>GND</td> <td> </td> <td> </td> <td>韦根接口RETURN</td> <td rowspan 3>韦根接口</td> </tr> <tr> <td>WGD0</td> <td>IO14</td> <td> </td> <td>韦根接口 D0</td> </tr> <tr> <td>WGD1</td> <td>IO15</td> <td> </td> <td>韦根接口 D1</td> </tr> <tr> <td>GND</td> <td> </td> <td> </td> <td>开门信号地</td> <td rowspan 2>开门信号 低电平: Open</td> </tr> <tr> <td>OPEN</td> <td>IO16</td> <td> </td> <td>开门信号输入</td> </tr> <tr> <td>3V3</td> <td> </td> <td> </td> <td>3.3V</td> <td rowspan 6>以太网/刷卡接口</td> </tr> <tr> <td>CS</td> <td>IO24</td> <td> </td> <td>SPI CS</td> </tr> <tr> <td>MISO</td> <td>IO2</td> <td> </td> <td>SPI MISO</td> </tr> <tr> <td>SCLK</td> <td>IO1</td> <td> </td> <td>SPI SCLK</td> </tr> <tr> <td>MOSI</td> <td>IO3</td> <td> </td> <td>SPI MOSI</td> </tr> <tr> <td>GND</td> <td> </td> <td> </td> <td>GND</td> </tr> <tr> <td>5V</td> <td> </td> <td> </td> <td>5V</td> <td rowspan 6>串口/K210下载</td> </tr> <tr> <td>RST</td> <td>IO54</td> <td> </td> <td>K210复位</td> </tr> <tr> <td>BOOT</td> <td>IO16</td> <td> </td> <td>K210进入ISP模式</td> </tr> <tr> <td>ISPTX</td> <td>IO5</td> <td> </td> <td>ISPTX</td> </tr> <tr> <td>ISPRX</td> <td>IO4</td> <td> </td> <td>ISPRX</td> </tr> <tr> <td>GND</td> <td> </td> <td> </td> <td>GND</td> </tr> </table> ## MF5 固件说明 MF5 为人脸识别门禁成品，默认烧录的固件不支持串口协议； 在烧录串口协议固件之后，协议串口为 WGD0 IO14(RX)，WGD1 1O15(TX)。"},"/hardware/en/maixface/mf_ml_module/mf0_ml_module.html":{"title":"MF0 Machine Learning Core Module","content":"# MF0 Machine Learning Core Module ## Software and hardware overview MF0 face recognition module appearance at a glance <table border \"3\"> <tr> <th colspan 3>MF0</th> </tr> <tr> <td width \"100\">Description</td> <td>Front view</td> <td>Back view</td> </tr> <tr> <td width \"100\">MF0</td> <td> <img src \"./../../../zh/maixface/assets/mf_module/mf0_mf0dock/mf0_pin_map.png\" width \"600\" alt \"MF0 front\"> Pin Map</br> </td> <td> <img src \"./../../../zh/maixface/assets/mf_module/mf0_mf0dock/mf0_buttom.png\" width \"600\" alt \"MF0 back view\"> </td> </tr> <tr> <td>MF0 Dock</td> <td> <! <img src \"../assets/mf_module/mf1_bottom_v2(nand).png\" width \"600\" alt \"MF1(NAND Flash) back view\"> > </td> <td> </td> </tr> </table> ### Module features: CPU: RISC V 64bit dual core processor, 400Mhz standard frequency (overclockable) Image recognition: QVGA@60FPS/VGA@30FPS Deep learning framework: TensorFlow/Keras/Darknet Peripherals: FPIOA, UART, GPIO, SPI, I²C, I²S, WDT, TIMER, etc 2.54mm pitch DIP/SMT pad Can be connected to a breadboard Onboard camera connector ROM: 4MByte RAM: 6MByte (General purpose) + 2MByte (KPU dedicated) ### Hardware pin No. Description 24 User IO24 25 User IO25 26 User IO26, MF0_Dock(LCD_RST) 27 User IO27, MF0_Dock(LCD_CLK) 28 User IO28, MF0_Dock(LCD_DC) 29 User IO29, MF0_Dock(LCD_SDA) BOOT Power on boot mode selection (user IO16, not recommended for users) IO5 User IO5 (ISP_TX) IO4 User IO4 (ISP_RX) EN MF0 power enable pin, default high level enable RST K210 reset pin VIN External power supply 3.4 5.9V (5.0V recommended) GND External power supply ground 3V3 Module power supply 3.3V output ## Agreement Serial port protocol: MFO burns HEX protocol firmware by default MF0 has two protocol firmware, which is convenient for users to use according to specific needs HEX format serial protocol firmware JSON format serial protocol firmware HEX example ### Serial Protocol Assistant ## Update MF0 firmware MF0 hardware connection: No. USB to serial port module MF0 IO Remarks 1 5V VIN 2 GND GND 3 TX IO4 4 RX IO5 5 DTR BOOT 6 RTS RST ![](./../../../zh/maixface/assets/mf_module/mf0_mf0dock/mf0_flash.png) MF0 Dock hardware connection: After connecting according to the following table, when downloading using kflash_gui, you need to press the boot and rst buttons, and release the rst and then the boot button to ensure that the K210 enters the download mode (ISP mode) No. USB to serial port module MF0 Dock IO Remarks 1 5V VIN 2 GND GND 3 TX IO4 4 RX IO5 ![](./../../../zh/maixface/assets/mf_module/mf0_mf0dock/mf0_dock_flash.png) Then use kflash_gui to download the MF0 firmware ![](./../../../zh/maixface/assets/mf_module/mf0_mf0dock/mf0_upgrade_firmwave.png)"},"/hardware/en/maixface/mf_ml_module/mf1_ml_module.html":{"title":"MF Face recognition module MF1","content":"# MF Face recognition module MF1 ## **Modification Record** VersionTimeModified content 1.02019.07.30Initial version 1.22020.08.1 ## table of Contents [**Introduction to hardware resources**](#Introduction to hardware resources) [**Function Introduction**](#Function Introduction) [Module Features](#Module Features) [Instructions for use](#Instructions for use) [**Application plan**](#Application plan) [Serial Module](#Serial Module) <! [WeChat Mini Program Module](#微信小程序 Module) > <! [Second Development](#Second Development) > <! [**Q&A**](#qa) > ## **Introduction to Hardware Resources** <center class \"half\"> <img src \"../../assests/front.png\" width 50% /><img src \"assests/bottom.jpg\" width 50% /> </center> * CPU: **RISC V** dual core 64bit, built in FPU, frequency 400Mhz 500Mhz * Image recognition: living body recognition * Dual cameras: infrared + visible light * Infrared filling light: 3W infrared light emitting diode * Display: 1.33 inches TFT, resolution 240*320 display * Other peripherals: capacitive touch button/support 3W speaker/MEMS microphone/SD NAND/RGB LED * Wireless function (optional): Support 2.4G 802.11.b/g/n, SPI connection * [Buy on Taobao](https://item.taobao.com/item.htm?spm a1z10.1 c.w4004 21231188695.25.27ba52b1bsusf7&id 599138281058) <div STYLE \"page break after: always;\"></div> ## **Function Introduction** ![MF1 pin map](../../assets/mf_module/mf1/mf1_pin_map.png)"},"/hardware/en/maixface/mf_ml_module/mf_update_firmwave.html":{"title":"MF Firmware related upgrade instructions","content":"# MF Firmware related upgrade instructions In the process of using the **MF face recognition module**, if there is a firmware bug, a new function firmware release, a mistakenly erased firmware, font resources, and image resources, then the firmware needs to be restored by burning. ## MF face recognition module firmware, resource description **MF Face Recognition Module** The firmware, font resources, picture resources, descriptions are as follows: Type Burning Address Length Description Firmware 0x000000 Face Model Font Resources Picture Resources Board level configuration 0x7FF000 4 KB Face Information 0x800000 64 KB > After getting the MF module, the general developer does not need to care about the resource distribution MF firmware description VIS: Visible light (VIS) IR: infrared light (IR) Firmware classification Direction Protocol Identification method wechat Number of firmware types : : : : : : MF0 trial version module horizontal version, vertical version bin vis 2 MF1 offline module horizontal and vertical bin/json vis+ir 8 MF2 WeChat semi finished product Horizontal version, vertical version bin vis Support 2 MF4 WeChat (finished product) Vertical version bin vis Support 1 MF5 WeChat (finished product) Vertical version bin/json vis Support 2 Font resources Picture resources ## MF firmware burning (upgrade, restore factory configuration) steps In the process of using the **MF face recognition module**, if there is a firmware bug, a new function firmware release, a mistakenly erased firmware, font resources, and image resources, then the firmware needs to be restored by burning. ### Preparation: Before upgrading and restoring the factory configuration **MF face recognition module**, we need to prepare software and hardware. **Hardware preparation:** **MF Face Recognition Module** USB Type C data cable **Software preparation:** Burning software: kflash_gui (Kflash_gui v1.6.5 version is used here) **Download link:** Github: [kflash_gui](https://github.com/Sipeed/kflash_gui) Sipeed: [Sipeed official download site kflash_gui](https://dl.sipeed.com/MAIX/tools/kflash_gui/kflash_gui_v1.6.5) Burn resource files (burn according to the situation): **MF face recognition module firmware**, algorithm model files, font resource files, image resource files Get the resource files and send a unified email to: Email: Support@sipeed.com The recommended email format is as follows: > Problem type: [MF firmware resource acquisition] > > Use hardware/firmware version: [MF0/MF1/MF2/MF4/MF5] > > Content: [Get the latest firmware/Firmware is missing/Model is missing (describe the relevant situation)] > > Machine code: [xxxxxxxxxxxxxxxxxxxxx (only required when the model is lost)] ### Burn firmware, resource files Use the USB Type C data cable to connect the **MF face recognition module** to the computer ![MF1 connect USB](../../assets/mf_module/mf1/mf1_view.png) Open Kflash_gui, select the file to be burned, select the version (default is `automatic selection`, if the burn fails, select `MaixDuino`), select the serial port number (CH522 has two serial ports, try the other one if it fails), configure the wave Special rate (default is `150000`, if programming fails, reduce the baud rate appropriately, such as `115200`) ![image 20200806103433410](../../../en/maix/assets/kflash_gui/image 20200806103433410.png) ![image 20200806105056527](../../../en/maix/assets/kflash_gui/image 20200806105056527.png) ## How to get Key (Machine Code) During use, if the model of the module is lost or needs to be replaced, you need to send the `Key` to <Support@sipeed.com> The recommended email format is as follows: First download [key_gen.bin](https://fdvad021asfd8q.oss cn hangzhou.aliyuncs.com/Sipeed_M1/firmware/key_gen_v1.2.bin) After using the `kflash_gui` to burn the firmware `key_gen.bin` into the module, open the serial port and the baud rate is `115200,8,N,1` > **[kflash_gui](https://github.com/Sipeed/kflash_gui/releases)** is K210 firmware burning tool, source code: [**Sipeed/kflash_gui**](https://github.com/Sipeed/kflash_gui) It is recommended to use [`XCOM`](tools/XCOM_V2.2.exe) to view the serial port information Tap `DTR` and release it to reset the module and see the startup information <center class \"half\"> <img src \"../../../en/maix/assets/other/how_to_get_key.png\" height 50% width 80% /> </center> ## MF Firmware Version Description Due to the different imaging directions of the cameras, there are two firmware versions: horizontal and vertical versions; How to confirm the firmware corresponding to the camera: (identified by the camera silkscreen) Horizontal board Vertical board ![](../../assets/mf_module/mf1/mf_dual_camera_1.jpg) ![](../../assets/mf_module/mf1/mf_dual_camera_2.png) "},"/hardware/en/maixzero/sense/start.html":{"title":"M0sense guide","content":" title: M0sense guide keywords: M0sense update: date: 2023 02 03 version: v0.2 author: wonder content: Add the previous firmware note. date: 2022 12 15 version: v0.1 author: wonder content: Create file > Because of the different firmware, there is no u disk in computer after connecting computer with m0sense, visit [Burn bin file](#burn bin file) to solve this. ## Power On > Because of the different firmware, there may not be spectrum diagram of ambient sound on the screen, The led lights up when M0sense is powered on, and the screen displays spectrum diagram of ambient sound. <img src \"./../../../zh/maixzero/sense/assets/start/m0sense_start.jpg\" alt \"m0sense_start\" width \"45%\"> <img src \"./../../../zh/maixzero/sense/assets/start/m0sense_start_screen.jpg\" alt \"m0sense_start_screen\" width \"45%\"> ## Burn by U Disk M0sense can be burned by dragging and dropping firmware to u disk. > There maybe no u disk because of diferent firmware, visit [Burn bin file](#burn bin file) to solve this. Hold BOOT key, then click RESET key once, a removable disk is shown in computer. ![m0sense_udisk](./../../../zh/maixzero/sense/assets/start/m0sense_udisk.jpg) Just drag the firmware you want to burn and drop it in the removable disk, the removable disk will be automatically removed and M0sense will be automatically burned with this firmware. ![m0sense_drag_burn](./../../../zh/maixzero/sense/assets/start/m0sense_drag_burn.gif) Here are some demos [Click me](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos), just use them by dragging and dropping firmware to u disk to see their result, the source codes are in [github](https://github.com/sipeed/M0sense_BL702_example). And the result of each demo is as follows: ### hello_world.uf2 [Click me to download](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/hello_world) Burn it into m0sense via u disk burn. Run serial application, and open the serial port, `Hello, World` is being printed. ![m0sense_hello_world](./../../../zh/maixzero/sense/assets/start/m0sense_hello_world.gif) ### blink_baremetal.uf2 [Click me to download](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/blink_baremetal) Dragging and dropping this file to u disk, then repower M0sense, LED flashes, open the serial port and the LED states are printed. Open the serial port ![m0sense_blink_baremetal_uart](./../../../zh/maixzero/sense/assets/start/m0sense_blink_baremetal_uart.gif) LED flashes ![m0sense_blink_baremetal_led](./../../../zh/maixzero/sense/assets/start/m0sense_blink_baremetal_led.gif) ### blink_rtos.uf2 [Click me to download](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/blink_rtos) This demo has the same effect as the previous one, but this demo is based on RTOS. Open the serial port ![m0sense_blink_baremetal_uart](./../../../zh/maixzero/sense/assets/start/m0sense_blink_baremetal_uart.gif) LED flashes ![m0sense_blink_baremetal_led](./../../../zh/maixzero/sense/assets/start/m0sense_blink_baremetal_led.gif) ### lcd_flush.uf2 [Click me to download](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/lcd_flush) Burn this demo to M0sense, lcd background color flushes, and the color of screen is printed by serial port. ![m0sense_lcd_flush](./../../../zh/maixzero/sense/assets/start/m0sense_lcd_flush.gif) ![m0sense_lcd_flush_uart](./../../../zh/maixzero/sense/assets/start/m0sense_lcd_flush_uart.gif) ### imu.uf2 [Click me to download](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/imu) Burn this demo to board, the data of onboard 6 axi IMU is printed by serial port. 烧录进板子后，从串口可以看到板子上面 6 轴 IMU (惯性传感器)的数据。 ![m0sense_imu_uart](./../../../zh/maixzero/sense/assets/start/m0sense_imu_uart.gif) ### single_button_control.uf2 [Click me to download](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/single_button_control) Burn this demo to M0sense, press BOOT key, LED changes the color, and the state of LED is printed by serial port. The detailed usage can be analyzed by reading <a href \"https://github.com/Sipeed/M0sense_BL702_example/blob/main/m0sense_apps/rtos_demos/single_button_control/main.c\">source code</a>. ![single_button_control](./../../../zh/maixzero/sense/assets/start/single_button_control.gif) ![single_button_control_uart](./../../../zh/maixzero/sense/assets/start/single_button_control_uart.gif) ### audio_recording.uf2 [Click me to download](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/audio_recording) Burn this demo to M0sense, the 16bit pcm format data of the onboard microphone is printed by serial port. ![audio_recording](./../../../zh/maixzero/sense/assets/start/audio_recording.gif) ## SDK usage M0sense can be compiled in Linux. ### Get example ```bash git clone https://github.com/Sipeed/M0sense_BL702_example.git ``` Then the file tree should be like this: ```bash sipeed@DESKTOP:~$ tree L 1 M0sense_BL702_example/ M0sense_BL702_example/ ├── LICENSE # License file ├── README.md # guide ├── bl_mcu_sdk # Folder of SDK ├── build.sh # Compile script ├── m0sense_apps # Folder of example codes ├── misc # Other utils └── uf2_demos # Example demo ``` ### Get SDK Get sdk in the path of example folder. It's about 400MB memory storage. ```bash cd M0sense_BL702_example git clone https://github.com/bouffalolab/bouffalo_sdk ``` Then the file tree should be like this(The main folder and files): ```bash sipeed@DESKTOP:~$ tree L 2 M0sense_BL702_example/ M0sense_BL702_example/ ├── LICENSE # License file ├── README.md # guide ├── bl_mcu_sdk # Folder of SDK │ ├── README.md # SDK guide │ ├── ReleaseNotes # SDK history │ ├── bsp │ ├── cmake │ ├── components │ ├── docs │ ├── drivers │ ├── examples │ ├── project.build │ ├── tools │ └── utils ├── build.sh # Compile script ├── m0sense_apps # Folder of example codes ├── misc # Other utils └── uf2_demos # Example demo ``` ### Get toolchain Get toolchain in the path of example folder. ```bash git clone https://github.com/wonderfullook/toolchain_gcc_sifive_linux ``` Then the file tree should be like this(The main folder and files): ```bash sipeed@DESKTOP:~$ tree L 2 M0sense_BL702_example/ M0sense_BL702_example/ ├── LICENSE # License file ├── README.md # guide ├── bl_mcu_sdk # Folder of SDK │ ├── README_zh.md # SDK guide │ ├── ReleaseNotes # SDK history │ ... ├── build.sh # Compile script ├── m0sense_apps # Folder of example codes ├── misc # Other utils ├── toolchain_gcc_sifive_linux # Folder of toolchain │ ├── bin # Folder of executable program │ ├── lib # Folder of library │ ... └── uf2_demos # Example demo ``` ### Put the patch Make sure you are in `M0sense_BL702_example` directory. Before putting the patch, we need to set username and email, just set what you like. ```bash cd bl_mcu_sdk git config user.email \"m0sense@sipeed.com\" git config user.name \"tinymaix\" ``` Then put the patch. ```bash cd .. ./build.sh patch ``` When it shows `Apply patch for you!`, we succeed in doing this. ![m0sense_patch](./../../../zh/maixzero/sense/assets/start/m0sense_patch.jpg) ### Set toolchain path Every time compiling for M0sense, we need to set toolchain path once. First we need to know the path of `M0sense_BL702_example`: ```bash sipeed@DESKTOP:~$ pwd /home/lee/M0sense_BL702_example ``` We copy the result (the result of everyone is different) of `pwd` command, then add `/toolchain_gcc_sifive_linux/bin` in the end，run following command, then we finish setting the toolchain path. ```bash PATH $PATH:/home/lee/M0sense_BL702_example/toolchain_gcc_sifive_linux/bin ``` Then we can use command `riscv64 unknown elf gcc v` to test our toolchain, here is the right result. ```bash sipeed@DESKTOP:~$ riscv64 unknown elf gcc v Using built in specs. COLLECT_GCC riscv64 unknown elf gcc COLLECT_LTO_WRAPPER /home/lee/M0sense_BL702_example/toolchain_gcc_sifive_linux/bin/../libexec/gcc/riscv64 unknown elf/10.2.0/lto wrapper Target: riscv64 unknown elf ``` If not set the path right, the command `riscv64 unknown elf gcc` will be shown not found, try to reset the toolchain path. ![m0sense_toolchain_notfound](./../../../zh/maixzero/sense/assets/start/m0sense_toolchain_notfound.jpg) ### Compile demo Before compiling demo first time, we need to compile the firmware conversion application on the computer for dragging and burning firmware by u disk. Run following command in the directory of `M0sense_BL702_example` . ```bash sudo apt install gcc # Install gcc gcc I libs/uf2_format misc/utils/uf2_conv.c o uf2_convert # Compile the firmware conversion application ``` Then we can compile demo. ```bash ./build.sh m0sense_apps/blink/blink_baremetal ``` The demo of uf2 format which can be burned to M0sense by u disk is in the uf2_demos folder, and the demo file is in bl_mcu_sdk/out folder. ## SDK Note 1. Compiling your own firmware conversion application if it's the first time compiling. 2. Everytime compiling the firmware, make sure you have [set the toolchain path](#set toolchain path) 3. If failing to compile SDK. make sure the compiling command is `./build.sh m0sense_apps/blink/blink_baremetal`, not `./build.sh m0sense_apps/blink/blink_baremetal/` (Pay attention to the `/` in the end) ## Burn bin file Sometimes we need to burn bin file because of some reasons, here are the steps. We need to use bouffalolab official flash application to burn M0sense, visit https://dev.bouffalolab.com/download and download the file whose name is `Bouffalo Lab Dev Cube`, cecompress it then we get the flash application. ![bouffalo_cube](./../../../zh/maix/m1s/other/assets/start/bouffalo_cube.png) We mainly use `BLDevCube`, `BLDevCube macos` and `BLDevCube ubuntu` these three files, by which to burn our board with graphical interface on different OS. ![application](./../../../zh/maix/m1s/other/assets/start/application.png) We use metal material or wire to connect the 3.3V pin and boot pin, then power up M0sense, it will be into download mode, we can see there is a serial device in computer device manager. Connect pin Serial device in computer device manager ![boot_mode](./../../../zh/maixzero/sense/assets/start/boot_mode.jpg) ![serial_device](./../../../zh/maixzero/sense/assets/start/serial_device.jpg) Run `BLDevCube`(Depends on your OS), choose `BL702`，and select MCU mode in application interface，choose the firmware bin file you want to burn. The default downloaded firmware can be found here: [Click me](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/default_firmware) <table> <tr> <td><img src \"./../../../zh/maix/m1s/other/assets/start/select_bl702.png\" alt \"select_bl702\" style \"transform:rotate(0deg);\"></td> <td><img src \"./../../../zh/maix/m1s/other/assets/start/mcu_mode.png\" alt \"mcu_mode\" style \"transform:rotate(0deg);\" width \"70%\"></td> </tr> </table> Click `Refresh`，choose the only one serial port, if you did not see the serial port, reconnect the 3.3V pin and boot pin before power M0sense, set uartRate 2000000, click `Create & Diwnload`. ![burn_bl702](./../../../zh/maixzero/sense/assets/start/burn_bl702.png) Finishing flashing firmware, repower M0sense to load the new firmware. ![finish_burn_702](./../../../zh/maixzero/sense/assets/start/finish_burn_702.png) ## Notes There is a BOOT key and a BOOT silkprint pin on M0sense. <img src \"./../../../zh/maixzero/sense/assets/start/m0sense_boot_key.jpg\" width \"40%\" alt \"m0sense_boot_key\"> <img src \"./../../../zh/maixzero/sense/assets/start/m0sense_boot_silkprint.jpg\" width \"40%\" alt \"m0sense_boot_silkprint\"> There are 2 BOOT on M0sense, here are their differences: ![boot_description](./../../../zh/maixzero/sense/assets/start/boot_description.png) From the [schematic](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/2_Schematic) above, we can see that the two keys on Mosense are routed to GPIO_2 and AU_CHIP, from the chip manual we can know that `AU_CHIP` is the reset pin, so SW1 is the reset key, and another key is the soft BOOT key on M0sense, it requires the [firmware](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/default_firmware) for u disk burn. And we can see that the BOOT silkprint pin is Boot_Strap on M0sense, it's the hardware Boot key. Hold it before powering it to burn the firmware into M0sense. U disk is a special burn method based on firmware, while uart burn method is the basic way to burn this chip."},"/hardware/en/maixzero/sense/maix_zero_sense.html":{"title":"M0sense Board","content":" title: M0sense Board keywords: BL702 ,M0sense update: date: 2022 11 16 version: v0.1 author: wonder content: Creat file ## Summary Sipeed M0sense is an AIOT development board based on BL702 of [Bouffalo Lab](https://en.bouffalolab.com/), it's RISC V architecture, supports low energy bluetooth. There is a 8Pins FPC connector for connecting LCD screen, and 1 microphone, 1 RGB LED and a six axis sensor chip are on this board. One USB 2.0 FS routes to Type C interface. Buy one: [Aliexpress](https://www.aliexpress.com/item/1005005012406688.html) Render picture: <img src \"./../../../../hardware/zh/maixzero/sense/assets/m0sense_1.png\" alt \"m0sense_1.png\"> Real picture: <div> <img src \"./../../../../hardware/zh/maixzero/sense/assets/m0sense_outlook_top.png\" alt \"m0sense_outlook_top.png\" width 20%> <img src \"./../../../../hardware/zh/maixzero/sense/assets/m0sense_outlook_bot.png\" alt \"m0sense_outlook_bot.png\" width 20%> </div> ## Video Introduction video for [M1s Dock](https://wiki.sipeed.com/en/m1s#dock) and M0Sense. M0Sense introduction starts at 3:15, before when the introduction of [M1s Dock](https://wiki.sipeed.com/en/m1s#dock) is. <iframe width \"560\" height \"315\" src \"https://www.youtube.com/embed/hkSAW42Evl4?start 197\" title \"M0Sense\" frameborder \"0\" allow \"accelerometer; autoplay; clipboard write; encrypted media; gyroscope; picture in picture\" allowfullscreen></iframe> ## Feature Mainchip BL702 RISC V 144MHz BlueTooth 5.0/ BLE Onboard screen interface (Optional 0.68 inch 80x160 solution screen) Onboard 1 analog microphone、1 LED、1 IMU Route USB 2.0 FS to USB Type C port ## Parameter <table> <thead> <tr> <th colspan \"2\" > M0sense </th> </tr> </thead> <tbody> <tr> <td rowspan \"6\" style \"white space:nowrap\">Mainchip BL702</td> </tr> <tr> <td>32 bits RISC V with FPU (Max Freq 144MHz)</td> </tr> <tr> <td>132KB RAM，192KB ROM, 512KB Flash</td> </tr> <tr> <td> · Two 32 bit timer <br> · Eight DMA channels <br> · One SPI <br> · Two UART <br> · One I2C interface <br> · One I2S <br> · Five PWM <br> · One 12 bit ADC <br> · One 10 bit DAC <br> </td> </tr> <tr> <td>Wireless：<br> · 2.4Ghz BlueTooth V5.0<br> · 1Mbps and 2Mbps BLE </td> </tr> <tr> <td> USB 2.0 FS route to USB Type C to burn firmware </td> </tr> <tr> <td rowspan \"6\" style \"white space:nowrap\"> Onboard components </td> </tr> <tr> <td>Screen interface (Optional 0.68 inch 80x160 solution screen)</td> </tr> <tr> <td> One analog microphone </td> </tr> <tr> <td> One RGB LED</td> </tr> <tr> <td> One six axis IMU（QMI8658A）</td> </tr> <tr> <td>Ceramic antenna</td> </tr> <tr> <td rowspan \"5\" style \"white space:nowrap\"> Others </td> </tr> <tr> <td> 3D file model：<a href \"https://dl.sipeed.com/shareURL/Maix Zero/M0sense/5_3D_file\">Click me</a> </td> </tr> <tr> <td>External TYPE C PORT power supply requirements：<br>5V±10% 0.5A</td> </tr> <tr> <td>Temperature rise: &lt;30K</td> </tr> <tr> <td>Operating temperature: 10℃ ~ 65℃</td> </tr> </tbody> </table> <img src \"./../../../../hardware/zh/maixzero/sense/assets/m0sense_size.png\" alt \"m0sense_size\" width 55%> ## Pinmap <img src \"./../../../../hardware/zh/maixzero/sense/assets/m0sense_pinmap.png\" alt \"m0sense_pinmap\" width 75%> ## Comparsion <table> <thead> <tr> <th>Item</th> <th>Arduino Nano 33 BLE SENSE</th> <th>Sipeed M0sense</th> </tr> </thead> <body> <tr> <td> MCU </td> <td>nRF52840 (Cortex M4)</td> <td>BL702 (RV32)</td> </tr> <tr> <td>Freq</td> <td>64MHz</td> <td>144MHz</td> </tr> <tr> <td>SRAM</td> <td>256KB</td> <td>132KB</td> </tr> <tr> <td>Bluetooth</td> <td>Yes</td> <td>Yes</td> </tr> <tr> <td>IIC/UART/SPI</td> <td>Yes</td> <td>Yes</td> </tr> <tr> <td>LED</td> <td>Single</td> <td>RGB Three color</td> </tr> <tr> <td>MIC</td> <td>Yes</td> <td>Yes</td> </tr> <tr> <td>IMU</td> <td>Yes</td> <td>Yes</td> </tr> <tr> <td>Other sensors</td> <td>APDS9960，LPS22HB，HTS221</td> <td></td> </tr> <tr> <td>LCD</td> <td></td> <td>Optional 0.68 inch 80x160 solution screen</td> </tr> <tr> <td>USB</td> <td>Yes</td> <td>Yes</td> </tr> <tr> <td>Dimenssion</td> <td>45mm x 18mm</td> <td>23mm x 18mm</td> </tr> <tr> <td>Model platform</td> <td>TFLite Micro + edge impulse</td> <td>TinyMaix + MaixHub</td> </tr> <tr> <td>Price</td> <td>$40</td> <td>$4</td> </tr> </body> </table> ## Software <table> <thead> <tr> <th colspan \"2\" > M0sense </th> </tr> </thead> <tbody> <tr> <td>OS</td> <td>FreeRTOS</td> </tr> <tr> <td>Development</td> <td>· C SDK<br>· MaixHAL C <br>· pikascript</td> </tr> <tr> <td>Burn Firmware </td> <td>· USB virtual uart<br>· USB virtual disk burn</td> </tr> <tr> <td>AI Framework</td> <td>TinyMaix Framework</td> </tr> <tr> <td>AI model</td> <td>· Download from <a href \"https://maixhub.com/\">MaixHub</a>. Support voice response, gesture detection and other models</td> </tr> <tr> <td>Sipeed examples</td> <td>· https://github.com/sipeed</td> </tr> </tbody> </table> ## Links [Board Datasheet](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/1_Specification) [Board Schematic](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/2_Schematic) [Board Bit map](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/3_Bit_number_map) [Board Dimension](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/4_Dimensional_drawing) [3D model file](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/5_3D_file) [Bouffalolab official documents](https://dev.bouffalolab.com/home/) [BL702 DataSheet](https://github.com/bouffalolab/bl_docs/tree/main/BL702_DS/en) (github) [BL702 Reference Manual](https://github.com/bouffalolab/bl_docs/tree/main/BL702_RM/en) (github) [Bouffalolab SDK](https://github.com/bouffalolab/bouffalo_sdk)(Github) [Sipeed example](https://gitee.com/Sipeed/M0sense_BL702_example)(Github) [Telegram](https://t.me/sipeed) [Twitter](https://twitter.com/SipeedIO) [Reddit](https://www.reddit.com/r/Sipeed/) [Online model platform](https://maixhub.com/) ## Attentions <table> <tr> <th>Item</th> <th>Attention</th> </tr> <tr> <td>Electrostatic protection</td> <td>Avoid static electricity hitting the PCBA. Release the static electricity of hand before touching the PCBA</td> </tr> <tr> <td>Operating voltage</td> <td>The operating voltage of each GPIO has been marked in the schematic. Please do not allow the actual operating voltage of the GPIO to exceed the rated value, otherwise the PCBA will be permanently damaged</td> </tr> <tr> <td>FPC Connector</td> <td>When connecting FPC cable，make sure that the row is completely inserted into the row without bias</td> </tr> <tr> <td>Plug and Remove</td> <td>Power off completely before plugging or removing it</td> </tr> <tr> <td>Avoid short circuit</td> <td>During the power on, avoid any liquid or metal touching PCBA components，otherwise the PCBA will be damaged even burn</td> </tr> </table> ## Contact M0sense eets different needs of customers in various scenarios. Please contact email [support@sipeed.com](support@sipeed.com) for technical support and business cooperation."},"/hardware/en/maixzero/m0s/m0s.html":{"title":"M0S module","content":" title: M0S module keywords: M0S, module, BL616, wifi6 update: date: 2023 01 14 version: v0.1 author: wonder content: Create file ## Module summary Sipeed M0S is a ultra low power consumption tiny IOT module based on BL616 of [Bouffalo Lab](https://en.bouffalolab.com/), supports wireless protocol like Wifi6, BT 5.2 and zigbee, 320MHz default frequency, tiny size and ultra low power mode and various wake sources of the chip meet different low power scenarios. Buy one: [Aliexpress](https://www.aliexpress.com/item/1005005142466936.html) <img src \"./../../../zh/maixzero/m0s/assets/m0s/m0s_module_outlook.png\" alt \"m0s_module_outlook\" width 35%> ## Module Feature Tri Mode Wireless: WiFi6 / BT 5.2 / Zigbee High Frequency：320MHz default Ultra low Power Consumption：Wifi6 low power consumption feature DSP Acceleration：Support RISC V P Extended instruction set, double speeds up TinyMaix reasoning frame. High speed USB：Support USB2.0 HS OTG，up to 480Mbps Rich peripheral ports：Support RGB LCD，DVP Camera，Ethernet RMII and SDIO Tiny Size：Place ceramic antenna on 10x11 mm tiny size, and route all IO out ## Module Parameter <table> <thead> <tr> <th colspan \"2\" > M0S Module </th> </tr> </thead> <tbody> <tr> <td rowspan \"5\" style \"white space:nowrap\"> Main Chip BL616 </td> </tr> <tr> <td>RISC V CPU：RV32GCP@320MHz default </td> </tr> <tr> <td> 480KB SRAM + 4MB Flash inside</td> </tr> <tr> <td>Wireless：<br> Support Wi Fi6<br> Support Bluetooth 5.2 Dual mode(BT+BLE)<br> Support Zigbee </td> </tr> <tr> <td>USB 2.0 HS OTG</td> </tr> <tr> <td rowspan \"2\" style \"white space:nowrap\"> Onboard components </td> </tr> <tr> <td>Ceramic antenna</td> </tr> </tbody> <tr> <td rowspan \"4\" style \"white space:nowrap\"> Others </td> </tr> <tr> <td> Size：10mm (W) x 11mm (H) </td> </tr> <tr> <td> Package file (KiCAD)：<a href \"https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S/4_Package\">Click me</a> </td> </tr> <tr> <td> 3D model file：<a href \"https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S/3_3D_file\">Click me</a> </td> </tr> </tbody> </table> ## Pinmap ![m0s_pin_map](./../../../zh/maixzero/m0s/assets/m0s/m0s_pin_map.png) ## Comparsion Model M0S Module ESP32 S3 N4 Module : : : : Chip BL616(RV32GCP) ESP32 S3 (LX7) Frequency 320MHz 240MHz SRAM 480KB 520KB Flash 4MByte 4MByte Wifi WiFi6 WiFi4 Bluetooth BT5.2 BT5 USB USB2.0 HS OTG 480Mbps USB2.0 FS OTG 12Mbps IIC/UART/SPI Yes Yes DVP Camera Yes Yes Size 10mm x 11mm 18mm x 25.5mm Model platform TinyMaix + MaixHub ## M0S Dock <table> <thead> <tr> <th colspan \"2\" > M0S Dock </th> </tr> </thead> <tbody> <tr> <td> Module x 1 </td> <td> M0S Module </td> </tr> <tr> <td> Key x 1 </td> <td> Press this key then boot this device to burn this module </td> </tr> <tr> <td> LED x 3 </td> <td> One power LED，Two user LEDs </td> </tr> <tr> <td> TypeC Port x 1 </td> <td> To download firmware or other custom USB function </td> </tr> <tr> <td> IO connector x 10 </td> <td> 8 IO route to Pin headers<br> 2 IOs near TypeC Port </td> </tr> <tr> <td> Schematic </td> <td> <a href \"https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S_Dock/2_Schematic\"> 点我 </a></td> </tr> </tbody> </table> <img src \"./../../../zh/maixzero/m0s/assets/m0s/m0s_dock_top.png\" width \"45%\"> <img src \"./../../../zh/maixzero/m0s/assets/m0s/m0s_dock_bottom.png\" width \"45%\"> ## Software <table> <thead> <tr> <th colspan \"2\" > M0S Module </th> </tr> </thead> <tbody> <tr> <td>OS</td> <td>FreeRTOS</td> </tr> <tr> <td>Development</td> <td>· C SDK<br>· MaixHAL C <br>· PikaPython</td> </tr> <tr> <td>Burn Firmware </td> <td>· USB uart burn<br>· · USB burn</td> </tr> <tr> <td>AI Framework</td> <td>TinyMaix Framework</td> </tr> <tr> <td>AI model</td> <td>· <a href \"https://maixhub.com/\"> MaixHub </td> </tr> <tr> <td>Sipeed examples</td> <td>· https://github.com/sipeed/M0S_BL616_example</td> </tr> </tbody> </table> ## Other Links [M0S Datasheet](https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S/1_Specification) [M0S Schematic](https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S/2_Schematic) [M0S Package](https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S/4_Package) [3D Model File](https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S/3_3D_file) [Bouffalolab official documents](https://dev.bouffalolab.com/home/) [BL616 DataSheet](https://github.com/bouffalolab/bl_docs/tree/main/BL616_DS/en) (github) [BL616 Reference Manual](https://github.com/bouffalolab/bl_docs/tree/main/BL616_RM/en) (github) [M0S Dock Datasheet](https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S_Dock/1_Specification) [M0S Dock Schematic](https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S_Dock/2_Schematic) [Sipeed Examples](https://github.com/sipeed/M0s_BL616_example)（Github） [Bouffalolab SDK](https://github.com/bouffalolab/bouffalo_sdk) (Github) [Telegram](https://t.me/sipeed) [Twitter](https://twitter.com/SipeedIO) [Reddit](https://www.reddit.com/r/Sipeed/) [Online model platform](https://maixhub.com/) ## Attentions <table> <tr> <th>Item</th> <th>Attention</th> </tr> <tr> <td>Electrostatic protection</td> <td>Avoid static electricity hitting the PCBA. Release the static electricity of hand before touching the PCBA</td> </tr> <tr> <td>Operating voltage</td> <td>Do not allow the actual operating voltage of the GPIO to exceed the rated value, otherwise the PCBA will be permanently damaged</td> </tr> <tr> <td>Plug and Remove</td> <td>Power off completely before plugging or removing it</td> </tr> <tr> <td>Avoid short circuit</td> <td>During the power on, avoid any liquid or metal touching PCBA components，otherwise the PCBA will be damaged even burn</td> </tr> </table> ## Contact M0sense eets different needs of customers in various scenarios. Please contact email [support@sipeed.com](support@sipeed.com) for technical support and business cooperation."},"/hardware/en/maixzero/m0p/m0p_dock.html":{"title":"M0P Dock","content":" title: M0P Dock keywords: M0P ,Dock, bl618, BL618 update: date: 2023 03 09 version: v0.1 author: wonder content: 初次编写文档 ## 板卡概述 Sipeed M0P Dock 是使用 [Sipeed M0P](https://wiki.sipeed.com//hardware/zh/maixzero/m0p/m0p.html) 模组设计的开发板，主控是 [bouffalolab](http://www.bouffalolab.com/) 的 BL618 芯片，支持 Wifi6 和蓝牙 5.2 无线协议，默认最高主频 320MHz，支持 USB2.0 HS。板卡上有 DVP 接口来连接摄像头，有 FPC 座子来连接屏幕，有 TF 卡槽来扩展存储，还有一颗 WMM7027ATSN1 MEMS 麦克风用于自定义功能，板卡上还有电池充电管理电路，支持使用锂电池供电。 购买链接：[Aliexpress](https://item.taobao.com/item.htm?id 710359411812) <img src \"./../../../zh/maixzero/m0p/assets/m0p_dock/m0p_dock_outlook.png\" alt \"m0p_dock_outlook\" width 15%> <img src \"./../../../zh/maixzero/m0p/assets/m0p_dock/m0p_dock_outlook_back.png\" alt \"m0p_dock_outlook\" width 15%> ## 板卡特点 主芯片 BL618 RV32 320MHz RISC V Support 2.4G WIFI6（IEEE 802.11 b/g/n/ax） 支持蓝牙 5.x 双模（BT+BLE）和 Zigbee / IEEE 802.15.4 USB 2.0 Type C（480Mhz）（可用作下载固件和USB转串口） DVP 摄像头连接器 SPI 屏幕连接器（可以连接3.92寸320x320方形电容触摸屏） 4.2V 锂电池充电电路 1 个 TF 卡连接器（SDIO接口） 1 个模拟麦克风、2 个 ADC 按键和 1 个状态指示灯 ## 板卡参数 <table> <tbody> <tr> <th colspan \"3\" style \"white space:nowrap\"> M0P Dock 参数 </td> </tr> <tr> <td rowspan \"18\" style \"white space:nowrap\"> M0P 模组 </td> </tr> <tr> <td colspan \"2\"> RISC V CPUs：RV32 320MHz </td> </tr> <tr> <td colspan \"2\"> SRAM: 480KB + 4MB </td> </tr> <tr> <td rowspan \"15\"> 支持接口 </td> </tr> <tr> <td>DVP Camera</td> </tr> <tr> <td>Display（QSPI、DBI）</td> </tr> <tr> <td>USB2.0 HS OTG(High Speed 480Mhz)</td> </tr> <tr> <td>SPI</td> </tr> <tr> <td>UART * 2</td> </tr> <tr> <td>IIC * 2</td> </tr> <tr> <td>IIS</td> </tr> <tr> <td>10bit GPDAC</td> </tr> <tr> <td>12~16bit GPADC</td> </tr> <tr> <td>ACOMP</td> </tr> <tr> <td>PWM</td> </tr> <tr> <td>SDIO2.0</td> </tr> <tr> <td>Audio Codec</td> </tr> <tr> <td> 无线：<br>· 支持Wi Fi 802.11 b/g/n/ax（WiFi6）<br>· 支持蓝牙 5.x 双模(BT+BLE)<br>· 支持Wi Fi / 蓝牙/ Zigbee 共存<br>（更详细的特性请查看芯片 <a href \"https://gitee.com/wonderfullook/bl_docs/tree/main/BL616_DS/zh_CN\"> datasheet</a>）</td> </tr> </td> </tr> <tr> <td colspan \"1\" rowspan \"11\" style \"white space:nowrap\"> 板载部件 </td> </tr> <tr> <td colspan \"2\">USB2.0 Type C 母座连接器: <br> 可用作USB通信、下载固件和USB转串口</td> </tr> <tr> <td colspan \"2\">DVP 摄像头连接器：<br> 通用接口，可以连接 GC0328 摄像头模组</td> </tr> <tr> <td colspan \"2\">SPI 屏幕连接器：<br>可以连接 3.92 寸 320x320 方形电容触摸屏</td> </tr> <tr> <td colspan \"2\">SPI FLASH（默认8MByte）</td> </tr> <tr> <td colspan \"2\">1 个 TF 卡连接器（SDIO接口）</td> </tr> <tr> <td colspan \"2\">1 个模拟麦克风：WMM7027ATSN1（全指向，灵敏度 38dB，信噪比 59dB ）</td> </tr> <tr> <td colspan \"2\">2 个 ADC 按键（在板子两侧）</td> </tr> <tr> <td colspan \"2\">1 个电源指示灯和 1 个状态指示灯</td> </tr> <tr> <td colspan \"2\">两侧排针引出所有 IO（出厂已经焊接好排针）</td> </tr> <tr> <td colspan \"2\">4.2V 锂电池充电电路：<br>· USB 给整板供电，整板给电池供电，电池与整板主电源之间有二极管防倒灌<br>· 电池电压低于 3.3V 时 BL618 芯片会被强制处于复位状态<br>· 只支持最大电压是 4.2V 的可充电锂电池，不支持最大电压小于 4.2V 的可充电锂电池及不可充电的电池</td> </tr> </tbody> </tbody> </table> ## 引脚分布 ![m0p_dock_pinmap](./../../../zh/maixzero/m0p/assets/m0p_dock/m0p_dock_pinmap.png) STATE LED 接到 GPIO21 POW LED 接到 3.3V。板卡正常运行时亮起 ## 产品对比 M0P Dock ESP32 S3 DevKitC MCU 单核320Mhz RISC V 双核240Mhz SRAM 480KB + 4MB 512KB + 2MB(optional) ROM √ √ SPI Nor Flash 8MB(optional) 8MB(optional) WIFI IEEE 802.11 b/g/n/ax (WiFi6) IEEE 802.11 b/g/n BLE √ √ I2C/UART/SPI √ √ Microphone 模拟麦克风 × LCD 支持 3.92 英寸电容触摸屏 × Camera DVP camera × USB USB 2.0 High speed OTG（480Mbps） USB 2.0 Full speed OTG（12Mbps） 固件下载方式 USB USB ## 软件描述 <table> <thead> <tr> <th colspan \"2\" > M0P 模组 </th> </tr> </thead> <tbody> <tr> <td>OS</td> <td> 支持FreeRTOS</td> </tr> <tr> <td>开发方式</td> <td>· 原生C SDK<br>· MaixHAL C 模块<br>· PikaPython </td> </tr> <tr> <td> SDK </td> <td><a href \"https://github.com/bouffalolab/bouffalo_sdk\"> github </a></td> </tr> <tr> <td>Examples</td> <td><a href \"https://github.com/sipeed/M0P_BL618_examples\"> github </a></td> </tr> </tbody> </table> ## 板卡资料 [板卡规格书](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P%20Dock/1_datasheet) [板卡原理图](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P%20Dock/2_Schematic) [板卡尺寸图](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P%20Dock/4_Dimensional_drawing) [板卡位号图](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P%20Dock/3_Bit_number_map) [3D 模型文件](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P%20Dock/5_3D_File) [博流官方文档](https://dev.bouffalolab.com/home/) [BL618 数据手册](https://gitee.com/wonderfullook/bl_docs/tree/main/BL616_DS/zh_CN) (gitee) [BL618 参考手册](https://gitee.com/wonderfullook/bl_docs/tree/main/BL616_RM/zh_CN) (gitee) [Sipeed Examples](https://github.com/sipeed/M0P_BL618_examples)（github） [Bouffalolab SDK](https://github.com/bouffalolab/bouffalo_sdk) (github) 交流 QQ 群：`816177882` 。[点我加群](https://jq.qq.com/?_wv 1027&k 4lroNFnI) 论坛：[bbs.sipeed.com](https://bbs.sipeed.com/) ## 注意事项 <table> <tr> <th>项目</th> <th>注意事项</th> </tr> <tr> <td>静电防护</td> <td>· 请注意避免静电打到 PCBA 上；接触 PCBA 之前请把手的静电释放掉 </td> </tr> <tr> <td>容忍电压</td> <td> 所有 GPIO 都是 3.3V 电平，请不要让 GPIO 的实际工作的电压超过额定值，否则会引起 PCBA 的永久性损坏 </td> </tr> <tr> <td>避免短路</td> <td>请在上电过程中，避免任何液体和金属触碰到 PCBA 上的元件的焊盘，否则会导致短路，烧毁 PCBA</td> </tr> <tr> <td>FPC 座子</td> <td>在连接 FPC 软排线的时候，请确保排线无偏移地完整地插入到排线中</td> </tr> <tr> <td>BOOT 模式选择</td> <td> 在启动时，芯片判定 BOOT 引脚的电平，选择两个启动选项之一<br> · BOOT 低电平：从 FLASH 加载固件<br> · BOOT 高电平：进入 USB 下载模式 </td> </tr> </table> ## 充电说明 板卡上板载了 TP4057 充电 IC，板卡底面有两个锂电池状态指示 LED。 <img src \"./../../../zh/maixzero/m0p/assets/m0p_dock/m0p_dock_outlook_back.png\" alt \"m0p_dock_outlook\" width 45%> FULL LED：锂电池充电 IC 的 STDBY 脚，当电池充电结束后，该灯亮起 CHRG LED：处于充电状态时，该灯亮起 ## 联系方式 M0P Dock 开发板可以在多种场景实现客户不同方面的需要，技术支持和商业合作请联系邮箱 [support@sipeed.com](support@sipeed.com)"},"/hardware/en/maixzero/m0p/m0p.html":{"title":"M0P 模组","content":" title: M0P 模组 keywords: M0P ,模组, bl618, BL618 update: date: 2023 03 09 version: v0.1 author: wonder content: 初次编写文档 ## 模组概述 Sipeed M0P 模组是基于[博流智能科技](http://www.bouffalolab.com/)的 BL618 芯片所设计的一款 AIOT 模组，支持 WIFI6、蓝牙 5.2 等无线协议，邮票孔的让它能快速应用在多种 AIOT 场合。 购买链接：[淘宝](https://item.taobao.com/item.htm?id 710359411812) <img src \"./../../../zh/maixzero/m0p/assets/m0p/m0p_module_outlook.png\" alt \"m0p_module_outlook\" width 15%> ## 模组特点 主芯片 BL618 RV32 320MHz RISC V 支持 2.4G WIFI6（IEEE 802.11 b/g/n/ax） 支持蓝牙 5.x 双模（BT+BLE） 支持 Zigbee / IEEE 802.15.4 支持 USB 2.0 HS OTG（480Mhz） 支持IPEX一代天线座子和 PCB 板载天线 板载 SPI FLASH（可选容量） 邮票孔引出所有 IO ## 模组参数 <table> <thead> <tr> <th colspan \"3\"> M0P 模组 </th> </tr> </thead> <tbody> <tr> <td rowspan \"18\" style \"white space:nowrap\">主控 BL618 处理器</td> </tr> <tr> <td colspan \"2\">RISC V CPUs：RV32 320MHz</td> </tr> <tr> <td colspan \"2\">SRAM: 480KB + 4MB </td> </tr> <tr> <td rowspan \"15\"> 支持接口 </td> </tr> <tr> <td>DVP Camera</td> </tr> <tr> <td>Display（QSPI、DBI）</td> </tr> <tr> <td>USB2.0 HS OTG(High Speed 480Mhz)</td> </tr> <tr> <td>SPI</td> </tr> <tr> <td>UART * 2</td> </tr> <tr> <td>IIC * 2</td> </tr> <tr> <td>IIS</td> </tr> <tr> <td>10bit GPDAC</td> </tr> <tr> <td>12~16bit GPADC</td> </tr> <tr> <td>ACOMP</td> </tr> <tr> <td>PWM</td> </tr> <tr> <td>SDIO2.0</td> </tr> <tr> <td>Audio Codec</td> </tr> <tr> <td>无线：<br>· 支持Wi Fi 802.11 b/g/n/ax（WiFi6）<br>· 支持蓝牙 5.x 双模(BT+BLE)<br>· 支持Wi Fi / 蓝牙/Zigbee 共存</td> </tr> <tr> <td rowspan \"3\" style \"white space:nowrap\"> 板载部件 </td> </tr> <tr> <td colspan \"2\">板载 SPI FLASH： 8MByte</td> </tr> <tr> <td colspan \"2\">支持 IPEX 一代天线座子和 PCB 板载天线</td> </tr> </tbody> <tr> <td rowspan \"5\" style \"white space:nowrap\"> 其他说明 </td> </tr> <tr> <td colspan \"2\"> 尺寸：25.5mm (L) x 18mm (W) </td> </tr> <tr> <td colspan \"2\"> KICAD 格式封装文件下载：<a href \"https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P/4_Package\">点击跳转</a> </td> </tr> <tr> <td colspan \"2\">温升: &lt;30K</td> </tr> <tr> <td colspan \"2\">工作温度范围: 10℃ ~ 65℃</td> </tr> </table> ## 尺寸大小 <img src \"./../../../zh/maixzero/m0p/assets/m0p/m0p_size.png\" alt \"m0p_size\" width 35%> ## 引脚分布 前往原理图查看：[点我](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P/2_Schematic) ## 软件描述 <table> <thead> <tr> <th colspan \"2\" > M0P 模组 </th> </tr> </thead> <tbody> <tr> <td>OS</td> <td> 支持FreeRTOS</td> </tr> <tr> <td>开发方式</td> <td>· 原生C SDK<br>· MaixHAL C 模块<br>· PikaPython </td> </tr> <tr> <td> SDK </td> <td><a href \"https://github.com/bouffalolab/bouffalo_sdk\"> github </a></td> </tr> <tr> <td>Examples</td> <td><a href \"https://github.com/sipeed/M0P_BL618_examples\"> github </a></td> </tr> </tbody> </table> ## 模组资料 [模组规格书](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P/1_datasheet) [模组原理图](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P/2_Schematic) [模组封装库](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P/4_Package) [模组尺寸图](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P/3_Dimensional_drawing) [博流官方文档](https://dev.bouffalolab.com/home/) [BL618 数据手册](https://gitee.com/wonderfullook/bl_docs/tree/main/BL616_DS/zh_CN) (gitee) [BL618 参考手册](https://gitee.com/wonderfullook/bl_docs/tree/main/BL616_RM/zh_CN) (gitee) [Sipeed Examples](https://github.com/sipeed/M0P_BL618_examples)（github） [Bouffalolab SDK](https://github.com/bouffalolab/bouffalo_sdk) (github) 交流 QQ 群：`816177882` 。[点我加群](https://jq.qq.com/?_wv 1027&k 4lroNFnI) 论坛：[bbs.sipeed.com](https://bbs.sipeed.com/) ## 注意事项 <table> <tr> <th>项目</th> <th>注意事项</th> </tr> <tr> <td>静电防护</td> <td>· 请注意避免静电打到 PCBA 上；接触 PCBA 之前请把手的静电释放掉<br>· 在底板设计时，必须要从 ESD 防护角度进行设计（串电阻、加 ESD 二极管等）</td> </tr> <tr> <td>容忍电压</td> <td> 所有 GPIO 都是 3.3V 电平，请不要让 GPIO 的实际工作的电压超过额定值，否则会引起 PCBA 的永久性损坏 </td> </tr> <tr> <td>避免短路</td> <td>请在上电过程中，避免任何液体和金属触碰到 PCBA 上的元件的焊盘，否则会导致短路，烧毁 PCBA</td> </tr> <tr> <td>BOOT 模式选择</td> <td> 在启动时，芯片判定 BOOT 引脚的电平，选择两个启动选项之一<br> · BOOT 低电平：从 FLASH 加载固件<br> · BOOT 高电平：进入 USB 下载模式 </td> </tr> </table> ## 联系方式 M0P 模组可以在多种场景实现客户不同方面的需要，技术支持和商业合作请联系邮箱 [support@sipeed.com](support@sipeed.com)"},"/hardware/en/maix/index.html":{"title":"Sipeed Hardware","content":" title: Sipeed Hardware keywords: Sipeed, Hardware, Hardware Data, Documentation desc: Silicon Speed Technology's Hardware Information # Maix—I [English](./../../en/maix/index.html) ## K210 Core Module [M1/M1w](./core_module.html) [M1n](./core_modules/k210_core_modules.html) ## Maix Series Development Boards <table role \"table\" class \"center_table\"> <tbody> <tr> <th scope \"col\">Model</th> <th scope \"col\">Photo of device</th> </tr> <tr> <td> Maix Go</td> <td><a href \"./maixpy_develop_kit_board/maix_go.html\" target \"_blank\"><img src \"./assets/dk_board/maix_go/Go.jpg\" width \"260\"></a></td> </tr> <tr> <td>Maix Dock</td> <td><a href \"./maixpy_develop_kit_board/Maix_dock.html\" target \"_blank\"><img src \"./assets/dk_board/maix_dock/Dan_Dock.png\" width \"260\"></a></td> </tr> <tr> <td>Maix Duino</td> <td><a href \"./maixpy_develop_kit_board/maix_duino.html\" target \"_blank\"><img src \"./assets/dk_board/maix_duino/maixduino_0.png\" width \"260\"></a></td> </tr> <tr> <td>Maix Bit</td> <td> <a href \"./maixpy_develop_kit_board/maix_bit.html\" target \"_blank\"><img src \"./assets/dk_board/maix_bit/Bit.png\" width \"260\"></a> </td> </tr> <tr> <td>Maix Cube</td> <td><a href \"./maixpy_develop_kit_board/maix_cube.html\" target \"_blank\"><img src \"./assets/dk_board/maix_cube/maix_cube.png\" width \"260\"></a></td> </tr> <tr> <td>Maix Amigo</td> <td><a href \"./maixpy_develop_kit_board/maix_Amigo.html\" target \"_blank\"><img src \"./assets/dk_board/maxi_amigo/maix_amigo_0.png\" width \"260\"></a></td> </tr> <tr> <td>Maix nano</td> <td><a href \"./maixpy_develop_kit_board/maix_nano.html\"><img src \"./assets/dk_board/maix_nano/maix_nano.jpg\" width \"260\" alt \"Maxi nano\"></a></td> </tr> </tbody> </table> ## Product technical support Maix series of products can meet the different needs of customers in a variety of scenarios, and have been widely used in AIoT. The quality and performance have a very good reputation in the industry. The professional technical team solves hardware design and software functions for our customers. For professional technical support and more detailed information, please contact <support@sipeed.com>。"},"/hardware/en/maix/maixpy_develop_kit_board/maix_go.html":{"title":"Maix Go","content":"# Maix Go ## 教程&快速上手 <a href \"/soft/maixpy/zh/\" target \"_blank\"> MaixPy </a> ## 描述 MAIX Go开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC V架构 64位双核)设计的一款AIOT开发板。设计成数码相机的样式，板载Type C接口和USB UART电路，用户可以直接通过USB Type C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。 ## 外观 <img src \"./../assets/dk_board/maix_go/Go.jpg\" alt \"Maxi go\" > ## 特性 MAIX Go开发板以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。 ## 应用 智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等; 医学行业应用，如辅助诊断，医学图像识别; 智能工业应用，如工业机械，智能分拣，电气设备监控等; 教育机器人，智能互动平台，教育效率检查等教育应用; 农业应用，如农业监测，病虫害监测，自动控制等 ## 参数 <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 芯片基本参数</th> </tr> </thead> <tbody> <tr> <td>内核</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>主频</td> <td>400MHz （可超频至600MHz）</td> </tr> <tr> <td>SRAM</td> <td>内置8M Byte</td> </tr> <tr> <td>图像识别</td> <td>QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>语音识别</td> <td>麦克风阵列(8mics)</td> </tr> <tr> <td>网络模型</td> <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td> </tr> <tr> <td>深度学习框架</td> <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td> </tr> <tr> <td>外设</td> <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td> </tr> <tr> <td>视频处理</td> <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754 2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\" >开发板参数</th> </tr> </thead> <td> 板载资源</td> <td><li>三向拨轮按键 <li>RGB灯*1<li>1W 小喇叭<li>USB to UART<li>16Mbit Flash*1</td> </tr> <tr> <td>板载接口</td> <td><li>USB Type C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>麦克风阵列接口<li>部分IO排针引脚引出</td> </tr> <tr> <td>尺寸</td> <td>60*88mm</td> </tr> <tr> <td>供电电压</td> <td>5.0V @ 300mA（供电电流需大于300mA）</td> </tr> <tr> <td>工作温度</td> <td> 30℃ ~85C</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">软件开发</th> <tr> </thead> <tr> <td>芯片操作系统</td> <td>FreeRTOS、RT Thread等</td> </tr> <tr> <td>开发环境</td> <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td> </tr> <tr> <td>编程语言</td> <td>C，C++，MicroPython</td> </tr> </table> ## 资料下载 Sipeed Maix Go 资料下载：[Sipeed Maix Go](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Maix GO) ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maix/maixpy_develop_kit_board/maix_bit.html":{"title":"Maix Bit","content":"# Maix Bit ## 教程&快速上手 相关的使用教程入口<a href \"/soft/maixpy/zh/\" target \"_blank\"> MaixPy </a> ## 描述 MAIX Bit开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC V架构 64位双核)设计的一款AIOT开发板。经典两侧排针设计，可以直接配合面包板使用，板载Type C接口和USB UART电路，用户可以直接通过USB Type C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。 ## 外观 <img src \"./../assets/dk_board/maix_bit/Bit.png\" alt \"Maxi bit\" > ## 特性 MaixBit开发板以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。 ## 应用 智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等; 医学行业应用，如辅助诊断，医学图像识别; 智能工业应用，如工业机械，智能分拣，电气设备监控等; 教育机器人，智能互动平台，教育效率检查等教育应用; 农业应用，如农业监测，病虫害监测，自动控制等 ## 参数 <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 芯片基本参数</th> </tr> </thead> <tbody> <tr> <td>内核</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>主频</td> <td>400MHz （可超频至600MHz）</td> </tr> <tr> <td>SRAM</td> <td>内置8M Byte</td> </tr> <tr> <td>图像识别</td> <td>QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>语音识别</td> <td>麦克风阵列(8mics)</td> </tr> <tr> <td>网络模型</td> <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td> </tr> <tr> <td>深度学习框架</td> <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td> </tr> <tr> <td>外设</td> <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td> </tr> <tr> <td>视频处理</td> <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754 2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\" >开发板参数</th> </tr> </thead> <td> 板载资源</td> <td><li>按键*2 <li>RGB灯*1<li>MEMS Microphone*1<li>USB to UART<li>128Mbit Flash*1</td> </tr> <tr> <td>板载接口</td> <td><li>USB Type C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>所有IO排针引脚引出</td> </tr> <tr> <td>尺寸</td> <td>53.3*25.4mm</td> </tr> <tr> <td>供电电压</td> <td>5.0V @ 300mA（供电电流需大于300mA)</td> </tr> <tr> <td>工作温度</td> <td> 30℃ ~85C</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">软件开发</th> <tr> </thead> <tr> <td>芯片操作系统</td> <td>FreeRTOS、RT Thread等</td> </tr> <tr> <td>开发环境</td> <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td> </tr> <tr> <td>编程语言</td> <td>C，C++，MicroPython</td> </tr> </table> ## 资料下载 Sipeed Maix Bit 资料下载：[Sipeed Maix Bit](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Maix Bit) Sipeed Maix Bit 规格书下载：[Sipeed Maix Bit](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed Maix Bit/Specifications/Sipeed%20Maix Bit%20%E8%A7%84%E6%A0%BC%E4%B9%A6%20V2.0.pdf) Sipeed Maix Bit 原理图下载：<a href \"https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed Maix Bit/Maix Bit%20V2.0(with%20MEMS%20microphone)/Maix Bit%20V2.0(Schematic).pdf\">Sipeed Maix Bit</a> ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maix/maixpy_develop_kit_board/maix_Amigo.html":{"title":"MaixAmigo","content":"# MaixAmigo ## 使用教程 <a href \"/soft/maixpy/zh/\" target \"_blank\"> MaixPy </a> ## 概述 SIPEED MaixAmigo 是基于我们 M1n 模块(主控:Kendryte K210)开发的一款集学习开发和商用一体的人脸识别产品. <br/>MaixAmigo 集成前后摄像头、TF卡槽、用户按键、TFT显示屏、锂电池、扬声器麦克风、扩展接口等, 用户可使用 MaixAmigo 轻松搭建一款人脸识别门禁系统, 同时还预留开发调试接口, 也能将其作为一款功能强大的 AI 学习开发板. ## MaixAmigo 外观及功能介绍 ### 外观一览 ![MaixAmigo](./../assets/dk_board/maxi_amigo/image 20200730120223557.png) ### 板载硬件功能介绍 3.5 寸 **TFT** 屏幕: 分辨率 **320x480*** 3.5 寸电阻触摸屏： FT6X36 芯片复位按键 电源按键: 短按开机, 长按 *8S* 关机 三个功能按键 Grove 接口: 板载 3 个**Grove** 数字接口, 传感器,控制器扩展无限可能~ SP MOD 接口: 板载 3 个更加强大,更高扩展性的 **SP MOD** 数字接口, I2C,SPI(标准,双线,四线模式)等接口均可以使用 后续支持乐高手柄功能 TF 卡槽: 多媒体资源扩展,支持大容量储存 摄像头: 搭载 **OV7740** **30W** 像素 与 **GC0328 30W 像素** **Sensor** Type C 接口: USB TypeC 电源、调试接口,正反盲插 电源管理控制单元: AXP173 板载 600mAh 锂电池,支持用户充放电控制 音频驱动 IC: ES8374 支持音频录制,播放 三轴加速度传感器: MSA301 ### 板载扩展接口 MaixAmigo 对用户开放了两个高度扩展的接口: SP MOD 与 Grove 接口, 用户可以很方便的进行 DIY #### SP MOD 接口 SP MOD 即为 sipeed module, simplify PMOD, super module 接口 接口描述 SP MODE 接口描述![spmod_interface_1](./../../../assets/spmod/spmod_interface_1.png) 硬件接口![spmod_interface_2](./../../../assets/spmod/spmod_interface_2.png) #### Grove 接口 Grove 接口的线缆有 4 种颜色, 用户可以根据颜色快速区别 ![grove_interface](./../assets/interface_grove/grove_interface.jpg) pin 颜色 描述 pin 1 黄色 (例如, I2C Grove Connectors上的SCL) pin 2 白色 (例如, I2C Grove Connectors上的SDA) pin 3 红色 VCC (所有的Grove接口红色都是VCC) pin 4 黑色 GND (所有的Grove接口红色都是GND) Grove模块主要有 4 种接口: Grove Digital 数字接口: Grove 数字接口由 Grove 插头的四条标准线组成. 两条信号线通常称为 D0 和 D1 . 大多数模块只使用 D0, 但有些(像LED Bar Grove显示屏)使用两者.通常核心板会将板卡上的第一个Grove连接头称为 D0, 第二个称为 D1.第一个接头会连接到主控芯片的 DO/D1 管脚, 第二个连接头会连接到主控芯片的D1/D2引脚, 后面的连接头以此类推. pin Function Note pin1 Dn 第一个数字输入 pin2 Dn+1 第二个数字输入 pin3 VCC 供电引脚 5V/3.3V pin4 GND 地 Grove Analog 模拟接口 Grove模拟接口由Grove插头的四条标准线组成. 两条信号线通常称为A0和A1. 大多数模块只使用A0，但有些（像LED Bar Grove显示屏）使用两者. 通常核心板会将板卡上的第一个Grove连接头称为A0，第二个称为A1。第一个接头会连接到主控芯片的AO/A1管脚，第二个连接头会连接到主控芯片的A1/A2引脚，后面的连接头以此类推. pin Function Note pin1 An 第一个模拟输入 pin2 An+1 第二个模拟输入 pin3 VCC 供电引脚 5V/3.3V pin4 GND 地 Grove UART : The Grove UART 是特殊的一种数字输入输出接口 它使用引脚 1 和引脚 2 进行串行输入和发送 引脚1是 RX 线(用于接收数据, 因此是输入) 其中引脚 2 是 TX 线(用于向 Grove 模块传输数据) pin Function Note pin1 RX 串行接收 pin2 TX 串行发送 pin3 VCC 供电引脚 5V/3.3V pin4 GND 地 Grove I2C: 有许多类型的 I2C Grove 传感器可用.MaixAmigo 上的 Grove 只支持 3.3V 传感器 Grove I2C 连接器具有标准布局.引脚 1 是SCL信号, 引脚 2 是SDA信号 pin Function Note pin1 SCL I2C 时钟 pin2 SDA I2C 数据 pin3 VCC 供电引脚, 5V/3.3V pin4 GND 地 ### 板载 I2C 设备 MaixAmigo 板载 I2C 传感器/IC IC 设备 id I2C 地址(7位地址) ES8374 0x08 0x10 MSA301 0x13 0x26 AXP173 0x68 0x34 ## 参数 Maix Amigo内置64位400Mhz双核高性能处理器,拥有8M的片上SRAM，16MiB FLASH大容量存储,轻松处理多媒体应用,在AI机器视觉、听觉性能方便表现突出，内置多种硬件加速单元（KPU、FPU，FFT等)，总算力最高可达1TOPS,可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音扫描和语音数据输出的前置处理工作 <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 芯片基本参数</th> </tr> </thead> <tbody> <tr> <td>内核</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>主频</td> <td>400MHz （可超频至600MHz）</td> </tr> <tr> <td>SRAM</td> <td>内置8M Byte</td> </tr> <tr> <td>摄像头帧率</td> <td>OV7740/QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>语音识别</td> <td>离线语音识别，声场</td> </tr> <tr> <td>网络模型</td> <td><li>支持MobileNetV1/V2<li>人脸识别<li>ASR</td> </tr> <tr> <td>深度学习框架</td> <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td> </tr> <tr> <td>外设</td> <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td> </tr> <tr> <td>硬件加速单元</td> <td><li>KPU卷积运算加速器<li>FPU浮点运算加速器<li>APU音频处理器<li>FFT傅里叶变换加速器</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\" >开发板参数</th> </tr> </thead> <td> 板载资源</td> <td><li>3.5寸TFT屏幕<li>复位按键*1<li>功能按键*3<li>前后摄像头*2<li>LED*3<li>加速度传感器*1</td> </tr> <tr> <td>板载接口</td> <td><li>USB Type C接口<li>音频接口(支持外接扬声器)<li>TF卡槽<li>Grove标准接口<li>SP MOD接口(支持SP MOD接口模块)</td> </tr> <tr> <td>尺寸</td> <td>104.3*63.3*16.5mm</td> </tr> <tr> <td>供电电压</td> <td>USB type或内部锂电池（520mAh）</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">软件开发</th> <tr> </thead> <tr> <td>软件环境</td> <td>MaixPy（microPython）</td> </tr> <tr> <td>开发环境</td> <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td> </tr> <tr> <td>编程语言</td> <td>C，MicroPython</td> </tr> </table> ## 相关资料下载 Maix Amigo 资料下载：[Sipeed Amigo](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Amigo) Maix Amigo 规格书下载：[Sipeed Amigo](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Amigo/ProductSpecification) Maix Amigo IPS 版本 原理图下载：<a href \"https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed Amigo/2970/Maix_Amigo_2970(Schematic).pdf\">Maix_Amigo_2970(Schematic).pdf</a> Maix Amigo TFT 版本 原理图下载：<a href \"https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed Amigo/2960/Maix_Amigo_2960(Schematic).pdf\">Maix_Amigo_2960(Schematic).pdf</a> ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maix/maixpy_develop_kit_board/maix_cube.html":{"title":"MaixCube","content":"# MaixCube ## 使用教程 <a href \"/soft/maixpy/zh/\" target \"_blank\"> MaixPy </a> ## 概述 SIPEED MaixCube 是基于我们 M1n 模块(主控:Kendryte K210)开发的一款集学习开发和商用一体的人脸识别产品. <br/>MaixCube 集成摄像头、TF卡槽、用户按键、TFT显示屏、锂电池、扬声器麦克、扩展接口等, 用户可使用 Maix Cube 轻松搭建一款人脸识别门禁系统, 同时还预留开发调试接口, 也能将其作为一款功能强大的 AI 学习开发板. ## MaixCube 外观及功能介绍 ### 外观一览 ![maixcube_product_appearance](./../assets/dk_board/maix_cube/maixcube_product_appearance.png) ### 板载功能介绍 电源管理控制单元: AXP173 板载 200mAh 锂电池,支持用户充放电控制 音频驱动 IC: ES8374 支持音频录制,播放 三轴加速度传感器: MSA301 Camera OV7740: 1.3 IPS LCD: RGB: 板载两颗 RGB LED USB Type C:Type C 接口,正反盲插 ### 板载扩展接口 Maix Cube 对用户开放了两个高度扩展的接口: SP MOD 与 Grove 接口, 用户可以很方便的进行 DIY #### SP MOD 接口 SP MOD 即为 sipeed module, simplify PMOD, super module 接口 接口描述 SP MODE 接口描述![spmod_interface_1](./../../../assets/spmod/spmod_interface_1.png) 硬件接口![spmod_interface_2](./../../../assets/spmod/spmod_interface_2.png) #### Grove 接口 Grove 模块接口 Grove 接口的线缆有 4 种颜色, 用户可以根据颜色快速区别 ![grove_interface](./../assets/interface_grove/grove_interface.jpg) 颜色 描述 pin 1 黄色 (例如, I2C Grove Connectors上的SCL) pin 2 白色 (例如, I2C Grove Connectors上的SDA) pin 3 红色 VCC (所有的Grove接口红色都是VCC) pin 4 黑色 GND (所有的Grove接口红色都是GND) Grove模块主要有 4 种接口: Grove Digital 数字接口: Grove 数字接口由 Grove 插头的四条标准线组成. 两条信号线通常称为 D0 和 D1 . 大多数模块只使用 D0, 但有些(像LED Bar Grove显示屏)使用两者.通常核心板会将板卡上的第一个Grove连接头称为 D0, 第二个称为 D1.第一个接头会连接到主控芯片的 DO/D1 管脚, 第二个连接头会连接到主控芯片的D1/D2引脚, 后面的连接头以此类推. pin Function Note pin1 Dn 第一个数字输入 pin2 Dn+1 第二个数字输入 pin3 VCC 供电引脚 5V/3.3V pin4 GND 地 Grove Analog 模拟接口 Grove模拟接口由Grove插头的四条标准线组成. 两条信号线通常称为A0和A1. 大多数模块只使用A0，但有些（像LED Bar Grove显示屏）使用两者. 通常核心板会将板卡上的第一个Grove连接头称为A0，第二个称为A1。第一个接头会连接到主控芯片的AO/A1管脚，第二个连接头会连接到主控芯片的A1/A2引脚，后面的连接头以此类推. pin Function Note pin1 An 第一个模拟输入 pin2 An+1 第二个模拟输入 pin3 VCC 供电引脚 5V/3.3V pin4 GND 地 Grove UART : The Grove UART 是特殊的一种数字输入输出接口 它使用引脚 1 和引脚 2 进行串行输入和发送 引脚1是 RX 线(用于接收数据, 因此是输入) 其中引脚 2 是 TX 线(用于向 Grove 模块传输数据) pin Function Note pin1 RX 串行接收 pin2 TX 串行发送 pin3 VCC 供电引脚 5V/3.3V pin4 GND 地 Grove I2C: 有许多类型的 I2C Grove 传感器可用.MaixAmigo 上的 Grove 只支持 3.3V 传感器 Grove I2C 连接器具有标准布局.引脚 1 是SCL信号, 引脚 2 是SDA信号 pin Function Note pin1 SCL I2C 时钟 pin2 SDA I2C 数据 pin3 VCC 供电引脚, 5V/3.3V pin4 GND 地 ### 板载 I2C 设备 MaixCube 板载 I2C 传感器/IC IC 设备 id I2C 地址(7位地址) ES83740x080x10 MSA3010x130x26 AXP1730x680x34 ## MaixCube参数 ![maixcube_resources](./../assets/dk_board/maix_cube/maixcube_resources.png) <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 芯片基本参数</th> </tr> </thead> <tbody> <tr> <td>内核</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>主频</td> <td>400MHz （可超频至500MHz）</td> </tr> <tr> <td>SRAM</td> <td>内置8M Byte</td> </tr> <tr> <td>摄像头帧率</td> <td>OV7740/QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>语音识别</td> <td>离线语音识别，声场</td> </tr> <tr> <td>网络模型</td> <td><li>支持MobileNetV1/V2<li>人脸识别<li>ASR</td> </tr> <tr> <td>深度学习框架</td> <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td> </tr> <tr> <td>外设</td> <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td> </tr> <tr> <td>硬件加速单元</td> <td><li>KPU卷积运算加速器<li>FPU浮点运算加速器<li>APU音频处理器<li>FFT傅里叶变换加速器</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\" >开发板参数</th> </tr> </thead> <td> 板载资源</td> <td><li>按键*3<li>摄像头*1<li>RGB LED*2 <li>1.3寸TFT屏幕<li>Electret Microphone*1<li>128Mbit Flash*1<li>加速度传感器*1<li>0.5W扬声器</td> </tr> <tr> <td>板载接口</td> <td><li>USB Type C接口<li>TF卡槽<li>Grove标准接口<li>SP MOD接口(支持SP MOD接口模块)</td> </tr> <tr> <td>尺寸</td> <td>40*40*18.6mm</td> </tr> <tr> <td>供电电压</td> <td>USB type或内部锂电池（200mAh）</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">软件开发</th> <tr> </thead> <tr> <td>软件环境</td> <td>MaixPy（microPython）</td> </tr> <tr> <td>开发环境</td> <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td> </tr> <tr> <td>编程语言</td> <td>C，MicroPython</td> </tr> </table> ## 相关资料下载 Sipeed Maix Cube 资料下载：[Sipeed Maix Cube](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Maix Cube) Sipeed Maix Cube 规格书下载：[Sipeed Maix Cube](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Maix Cube/ProductSpecification/Sipeed%20Maix%20Cube%20Datasheet%20V1.0.pdf) Sipeed Maix Cube 原理图下载：[Sipeed Maix Cube.pdf](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Maix Cube/Maix Cube 2757) ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maix/maixpy_develop_kit_board/maix_duino.html":{"title":"MaixDuino Development Board","content":"# MaixDuino Development Board ## Overview SIPEED MaixDuino is an Arduino compatible development board based on our M1 module (main controller: Kendryte K210). <br/>MaixDuino integrates camera, TF card slot, user buttons, TFT display, MaixDuino expansion interface. Users can use MaixDuino to easily build a face recognition access control system, and also reserve a development and debugging interface, which can also be used as a functioning powerful AI learning development board. ## MaixDuino Features ### Appearance ![MaixDuino](./../assets/dk_board/maix_duino/maixduino_0.png) ![MaixDuino](./../assets/dk_board/maix_duino/maixduino_1.png) ![MaixDuino](./../assets/dk_board/maix_duino/maixduino_2.png) ### Onboard features DC Barrel Power Jack: 6~12V DC power input USB Type C: For power input and debug interface DVP 24PIN: Camera interface TF slot: For SD/TF card ESP32: WiFi and Bluetooth support via SPI I2C DAC PA PAM8403A ![MaixDuino](./../assets/dk_board/maix_duino/maixduino_3.jpg) ## MaixDuino Description The Maixduino development board uses the powerful M1Al module as the core unit. The module has a built in 64 bit dual core processor chip and 8MB on chip SRAM. It has outstanding performance in Al machine vision and hearing performance with a total computing power up to 1TOPS (FPU, Fast Fourier Transform Accelerator), which can easily implement machine vision/auditory algorithms for various application scenarios, and can also perform preprocessing for voice direction scanning and voice data output. In addition, the development board is also equipped with an ESP32 module (WiFi+Bluetooth integrated), which can be easily connected to the Internet with simple operations. <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 chip features</th> </tr> </thead> <tbody> <tr> <td>Core</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>Frequency</td> <td>400MHz （Can be overclocked to 600MHz）</td> </tr> <tr> <td>SRAM</td> <td>built in 8MB</td> </tr> <tr> <td>Image Recognition</td> <td>QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>Speech Recognition</td> <td>Microphone array (8mics)</td> </tr> <tr> <td>Network Model</td> <td><li>Support YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>facial recognition, etc.</td> </tr> <tr> <td>Deep Learning Framework</td> <td>Supports TensorFlow, Keras, Darknet, Caffe, other mainstream frameworks</td> </tr> <tr> <td>Peripherals</td> <td>FPIOA, UART, GPIO, SPI, I2C, I2S, TIMER</td> </tr> <tr> <td>Video Processing</td> <td><li>Neural Network Processor (KPU)<li>FPU Meets IEEE754 2008 Standard<li>Audio Processor (APU)<li>Fast Fourier Transform Accelerator (FFT)</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">ESP32 Module</th> </tr> </thead> <tr> <td>Core</td> <td>ESP32 D0WDQ6(Xtensa 32 bit core)</td> </tr> <tr> <td>Wireless Standards</td> <td>802.11b/g/n</td> </tr> <tr> <td>Radio Frequencies</td> <td>2400MHz 2483.5MHz</td> </tr> <tr> <td>Wireless Protocols</td> <td>2.4Ghz WiFi, Dual mode Bluetooth (BT & BLE4.2)</td> </tr> <tr> <td>Antenna</td> <td>PCB Onboard Antenna</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\" >Development board features</th> </tr> </thead> <td>Onboard</td> <td><li>1x RGB LED<li>1x MEMS Microphone<li>1x USB to serial port</td> </tr> <tr> <td>Interfaces</td> <td><li>USB Type C interface<li>24PIN DVP camera interface<li>24PIN LCD interface<li>MicroSD card slot<li>Audio interface (supports 3 external speakers)<li>Part of the IO pin header</td> </tr> <tr> <td>Size</td> <td>60*88mm</td> </tr> <tr> <td>Supply Voltage</td> <td>5.0V @ 300mA（300mA minimum)</td> </tr> <tr> <td>Operating Temperature</td> <td> 30℃ ~85C</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">Software</th> <tr> </thead> <tr> <td>Operating Systems</td> <td>FreeRTOS, RT Thread, etc</td> </tr> <tr> <td>Development Environments</td> <td>MaixPy IDE、PlatformlO IDE、Arduino IDE, etc</td> </tr> <tr> <td>Programming languages</td> <td>C，C++，MicroPython</td> </tr> </table> ## Related Links [MaixDuino Schematic](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Maixduino) <a href \"/soft/maixpy/zh/\" target \"_blank\"> MaixPy Tutorial</a> <a href \"/soft/maixduino/zh/\" target \"_blank\"> Arduino Tutorial</a> ## Product Technical Support Maix series of products can meet the different needs of customers in a variety of scenarios, and have been widely used in AIoT. The quality and performance have a very good reputation in the industry. The professional technical team solves hardware design and software functions for our customers. For professional technical support and more detailed information, please contact <support@sipeed.com>。"},"/hardware/en/maix/maixpy_develop_kit_board/maix_nano.html":{"title":"Maix nano","content":"# Maix nano ## 教程&快速上手 相关的使用教程入口<a href \"./../../../../soft/maixpy/zh/\" target \"_blank\"> MaixPy </a> ## 描述 MAIX Nano开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC V架构 64位双核)设计的一款AIOT开发板。开发板使用模块+底板方式设计，整洁小巧，板载Type C接口和USB UART电路，用户可以直接通过USB Type C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。 ## 外观 <img src \"./../assets/dk_board/maix_nano/maix_nano.jpg\" alt \"Maxi nano\" > ## 特性 MAIX Nano开发板以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。 ## 应用 智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等; 医学行业应用，如辅助诊断，医学图像识别; 智能工业应用，如工业机械，智能分拣，电气设备监控等; 教育机器人，智能互动平台，教育效率检查等教育应用; 农业应用，如农业监测，病虫害监测，自动控制等 ## 参数 ![maix_nano](./../assets/dk_board/maix_nano/maix_nano.png) <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 芯片基本参数</th> </tr> </thead> <tbody> <tr> <td>内核</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>主频</td> <td>400MHz （可超频至600MHz）</td> </tr> <tr> <td>SRAM</td> <td>内置8M Byte</td> </tr> <tr> <td>图像识别</td> <td>QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>语音识别</td> <td>麦克风阵列(8mics)</td> </tr> <tr> <td>网络模型</td> <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td> </tr> <tr> <td>深度学习框架</td> <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td> </tr> <tr> <td>外设</td> <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td> </tr> <tr> <td>视频处理</td> <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754 2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\" >开发板参数</th> </tr> </thead> <td> 板载资源和接口</td> <td><li>DVP摄像头接口*1 <li>大部分IO通过金手指方式引出，方便二次开发<li>USB to UART<li>128Mbit Flash*1</td> </tr> <tr> <td>尺寸</td> <td>25.0*22.0mm</td> </tr> <tr> <td>供电电压</td> <td>5.0V @ 300mA（供电电流需大于300mA)</td> </tr> <tr> <td>工作温度</td> <td> 30℃ ~85C</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">软件开发</th> <tr> </thead> <tr> <td>芯片操作系统</td> <td>FreeRTOS、Standrad development ki等</td> </tr> <tr> <td>开发环境</td> <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td> </tr> <tr> <td>编程语言</td> <td>C，C++，MicroPython</td> </tr> </table> ## 资料下载 M1n 资料下载：[dl.sipeed.com](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed M1n) M1n 原理图下载：[Sipeed M1n Datasheet V1.0.pdf](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed M1n/Sipeed%20M1n%20Datasheet%20V1.0.pdf) ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maix/maixpy_develop_kit_board/Maix_dock.html":{"title":"Maix Dock(M1/M1W)","content":"# Maix Dock(M1/M1W) ## 教程&快速上手 <a href \"/soft/maixpy/zh/\" target \"_blank\"> MaixPy </a> ## 描述 MAIX Dock开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC V架构 64位双核)设计的一款AIOT开发板。化繁为简的设计，整洁小巧，板载Type C接口和USB UART电路，用户可以直接通过USB Type C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。 > 上电即可开机，不需要开机操作 <img src \"./../assets/dk_board/maix_dock/Maix_Dock.jpg\" alt \"11\" width \"300\"> ## 外观 <img src \"./../assets/dk_board/maix_dock/Maix_Dock_3.png\" alt \"11\" > <img src \"./../assets/dk_board/maix_dock/Maix_Dock_2.png\" alt \"11\" > ## 特性 MaixDock 开发是以M1W AI模块作为核心单元，功能非常强大。模块内置64位双核处理器芯片，拥有8M的片上SRAM，在AI机器视觉、听觉性能方面表现突出，内置多种硬件加速单元（KPU、FPU、FFT等），总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法，也可以进行语言方向扫描和语言数据输出的前置处理工作。 ## 应用 智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等; 医学行业应用，如辅助诊断，医学图像识别; 智能工业应用，如工业机械，智能分拣，电气设备监控等; 教育机器人，智能互动平台，教育效率检查等教育应用; 农业应用，如农业监测，病虫害监测，自动控制等 ## 参数 <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 芯片基本参数</th> </tr> </thead> <tbody> <tr> <td>内核</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>主频</td> <td>400MHz （可超频至600MHz）</td> </tr> <tr> <td>SRAM</td> <td>内置8M Byte</td> </tr> <tr> <td>图像识别</td> <td>QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>语音识别</td> <td>麦克风阵列(8mics)</td> </tr> <tr> <td>网络模型</td> <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td> </tr> <tr> <td>深度学习框架</td> <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td> </tr> <tr> <td>外设</td> <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td> </tr> <tr> <td>视频处理</td> <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754 2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\" >开发板参数</th> </tr> </thead> <td> 板载资源</td> <td><li>按键*2 <li>RGB灯*1<li>MEMS Microphone*1<li>USB to UART<li>128Mbit Flash*1</td> </tr> <tr> <td>板载接口</td> <td><li>USB Type C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>音频接口(支持外接2x3W扬声器)<li>所有IO排针引脚引出</td> </tr> <tr> <td>尺寸</td> <td>52.3*37.3mm</td> </tr> <tr> <td>供电电压</td> <td>5.0V @ 300mA（供电电流需大于300mA)</td> </tr> <tr> <td>工作温度</td> <td> 30℃ ~85C</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">软件开发</th> <tr> </thead> <tr> <td>芯片操作系统</td> <td>FreeRTOS、RT Thread等</td> </tr> <tr> <td>开发环境</td> <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td> </tr> <tr> <td>编程语言</td> <td>C，C++，MicroPython</td> </tr> </table> ## 资料 Sipeed Maix Dock 资料下载：[Sipeed Maix Dock](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Maix Dock) Sipeed Maix Dock 规格书下载：[Sipeed Maix Dock](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Maix Dock/Specifications) Sipeed Maix Dock 原理图下载：[Sipeed Maix Dock](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed Maix Dock/Maix Dock_11.27/Maix Dock_11.27 schematic.pdf) ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maix/maixpy_develop_kit_board/develop_kit_board.html":{"title":"Maix 系列开发板","content":"# Maix 系列开发板 ## Maix 系列开发板 目前 MaixPy 系列开发板有一下这几款型号: Maix Go Maix Dock Maix Duino Maix Bit Maix Cube Maix Amigo <style type \"text/css\"> th { background color: #fbfbfb; border: 2px solid #f1f1f1; } </style> ## 差异对比 <table> <tbody> <tr> <th width \"226\" scope \"col\" >&nbsp;</th> <th width \"226\" scope \"col\" ><a href \"maix_go.html\"><img src \"../assets/dk_board/maix_go/Go.jpg\" width \"200\" alt \"\"/></a></th> <th width \"226\" scope \"col\"><a href \"maix_bit.html\"><img src \"../assets/dk_board/maix_bit/Bit.png\" width \"200\" alt \"Bit\"/></a></th> <th width \"226\" scope \"col\"><a href \"maix_cube.html\"><img src \"../assets/dk_board/maix_cube/maix_cube_1.png\" width \"200\" alt \"maix_cube\"/></a></th> <th width \"226\" scope \"col\"><a href \"Maix_dock.html\"><img src \"../assets/dk_board/maix_dock/Dan_Dock.png\" width \"200\" alt \"\"/></a></th> <th width \"226\" scope \"col\"><a href \"maix_duino.html\"><img src \"../assets/dk_board/maix_duino/DSC_08141.png\" width \"200\" alt \"\"/></a></th> <th width \"226\" scope \"col\"><a href \"maix_Amigo.html\"><img src \"../assets/dk_board/maxi_amigo/amigo.png\" width \"200\" alt \"\"/></a> </th> </tr> <tr> <td>型号 </td> <td>Maix Go</td> <td>Maix Bit</td> <td>Maix Cube</td> <td><p>Maix Dock</p></td> <td>Maix Duino</td> <td>Maix Amigo</td> </tr> <tr> <td>USB IC</td> <td>STM32</td> <td>CH552/CH340</td> <td>GD32/CH552</td> <td>CH340</td> <td>CH552</td> <td>GD32</td> </tr> <tr> <td>核心模块</td> <td>M1</td> <td>M1</td> <td>M1n</td> <td>M1/M1W</td> <td>M1</td> <td>M1n</td> </tr> <tr> <td height \"48\">WIFI 功能</td> <td>M1W 模块集成 ESP8285</td> <td> </td> <td> </td> <td>Dock M1 (不支持 WIFI)<br/> Dock M1W(支持,M1W 模块集成 ESP8285)</td> <td>板载 ESP32 （支持 WIFI, 蓝牙功能暂时未支持）</td> <td> </td> </tr> </tbody> </table> ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maix/m1s/m1s_module.html":{"title":"M1s Module","content":" title: M1s Module keywords: M1s ,Module, bl808, BL808 update: date: 2022 11 14 version: v0.1 author: wonder content: Initialize Doc ## Summary Sipeed M1s module is an AIOT module based on BL808 of [Bouffalo Lab](https://en.bouffalolab.com/), it incorporates 3 cores inside, with WiFi/BT/BLE/Zigbee wireless units, including multiple cpus, audio encoder and decoder, video encoder and decoder and AI hardware accelerator (BLAI 100), suitable for a variety of high performance and low power applications. Buy one: [Aliexpress](https://www.aliexpress.com/item/1005004970779483.html) <img src \"./../../../zh/maix/m1s/assets/m1s_module/m1s_module_outlook.png\" alt \"m1s_module_outlook\" width 35%> ## Feature MainChip BL808 RV64 480MHz + RV32 320MHz + NPU BLAI 100GOPS Onboard SPI FLASH (16MByte default) Support 2.4G WIFI / BT / BLE Support IPEX I antenna and onboard PCB antenna Stamp package route all IO ## Parameter <table> <thead> <tr> <th colspan \"2\" > M1s Module </th> </tr> </thead> <tbody> <tr> <td rowspan \"8\" style \"white space:nowrap\">Main Chip BL808</td> </tr> <tr> <td>Three RISC V CPUs：<br>· RV64GCV 480MHz <br>· RV32GCP 320MHz <br>· RV32EMC 160MHz</td> </tr> <tr> <td>AI NN general purpose hardware accelerator：<br>· BLAI 100, used for video/audio detection/identification，100GOPS hashrate</td> </tr> <tr> <td>768KB SRAM + 64MB UHS PSRAM</td> </tr> <tr> <td>Encode and Decode<br> MJPEG and H264(Baseline/Main)<br> 1920x1080@30fps + 640x480@30fps </td> </tr> <tr> <td>Interface：<br> Camera interface ：DVP and MIPI CSI<br> Display interface：SPI、DBI、DPI(RGB)</td> </tr> <tr> <td>Wireless：<br> Support Wi Fi 802.11 b/g/n<br> Support Bluetooth 5.x Dual mode(BT+BLE)<br> Support Wi Fi / BT co existence</td> </tr> <tr> <td>USB 2.0 HS OTG</td> </tr> <tr> <td rowspan \"3\" style \"white space:nowrap\">Onboard components</td> </tr> <tr> <td>Onboard SPI FLASH（Optional Capacity）</td> </tr> <tr> <td>Support IPEX I antenna and onboard PCB antenna</td> </tr> </tbody> <tr> <td rowspan \"6\" style \"white space:nowrap\"> Others </td> </tr> <tr> <td> Dimension ：31mm (L) x 18mm (W) </td> </tr> <tr> <td> 3D model file：<a href \"https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/5_3D_file\">Click me</a> </td> </tr> <tr> <td>External power supply requirements：<br>VDDIO4/VDDIO3/VDDIO1/ and 3V3 these power supplys are required</td> </tr> <tr> <td>Temperature rise: &lt;30K</td> </tr> <tr> <td>Operating temperature: 10℃ ~ 65℃</td> </tr> </tbody> </table> <img src \"./../../../zh/maix/m1s/assets/m1s_module/m1s_module_size.png\" alt \"m1s_module_size\" width 35%> ## Chip Cores Three cores in chip: M0，D0，LP。 M0 D0 LP T HEAD E907@320MHz T HEAD [C906](https://xrvm.com/cpu details?id 4056751997003636736)@480MHz T HEAD [E902](https://xrvm.com/cpu details?id 4056758197145440256)@160MHz ## Pin map Visit Schematic for details：[Click me](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/2_Schematic) <img src \"./../../../zh/maix/m1s/assets/m1s_module/m1s_pins.png\" alt \"m1s_pins\" width 55%> ## Comparison <table> <thead> <tr> <th style \"text align:left\">Item</th> <th style \"text align:left\">M1(K210)</th> <th style \"text align:left\">M1s(BL808)</th> <th style \"text align:left\">ESP32 S3 WROOM N16R8</th> </tr> </thead> <tbody> <tr> <td style \"text align:left\">CPU</td> <td style \"text align:left\">RV64@400MHz x2</td> <td style \"text align:left\">· RV64GCV@480MHz<br>· RV32GCP@320MHz<br>· RV32EMC@160MHz</td> <td style \"text align:left;white space:nowrap\">Xtensa LX7@240MHz x2</td> </tr> <tr> <td style \"text align:left\">RAM</td> <td style \"text align:left\">8MB SRAM</td> <td style \"text align:left;white space:nowrap\">· 768KB SRAM <br>· 64MB UHS PSRAM(2000MHz)</td> <td style \"text align:left\">· 512KB SRAM<br>· 8MB PSRAM</td> </tr> <tr> <td style \"text align:left\">Flash</td> <td style \"text align:left\">16MB</td> <td style \"text align:left\">16MB</td> <td style \"text align:left\">16MB</td> </tr> <tr> <td style \"text align:left\">OS</td> <td style \"text align:left\">· FreeRTOS<br>· No mmu Linux</td> <td style \"text align:left\">· FreeRTOS<br>· Linux</td> <td style \"text align:left\">RTOS</td> </tr> <tr> <td style \"text align:left\">NPU</td> <td style \"text align:left;white space:nowrap\">230GOPS with limited OPS</td> <td style \"text align:left;white space:nowrap\">100GOPS with rich OPS</td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">Camera</td> <td style \"text align:left\">DVP, up to VGA</td> <td style \"text align:left\">MIPI + DVP, up to 1080P h264</td> <td style \"text align:left\">DVP</td> </tr> <tr> <td style \"text align:left\">Display</td> <td style \"text align:left\">· SPI<br>· 8bits MCU LCD</td> <td style \"text align:left\">· SPI<br>· 8bits MCU LCD<br>· RGB LCD</td> <td style \"text align:left\">· SPI<br>· 8bits MCU LCD</td> </tr> <tr> <td style \"text align:left\">Audio</td> <td style \"text align:left\">I2S</td> <td style \"text align:left\">· I2S<br>· Analog Audio Input/Output</td> <td style \"text align:left\">I2S</td> </tr> <tr> <td style \"text align:left\">Wireless</td> <td style \"text align:left\"></td> <td style \"text align:left\">WIFI+BLE+Zigbee</td> <td style \"text align:left\">WIFI + BLE</td> </tr> <tr> <td style \"text align:left\">USB</td> <td style \"text align:left\"></td> <td style \"text align:left\">USB2.0 OTG HS</td> <td style \"text align:left\">USB1.1 OTG</td> </tr> <tr> <td style \"text align:left\">Accelerator</td> <td style \"text align:left\">FFT</td> <td style \"text align:left\">· Scaler<br>· OSD<br>· MJPED<br>· G2D<br>· H264</td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">Perpheral</td> <td style \"text align:left\">UART, SPI, IIC</td> <td style \"text align:left\">UART, SPI, IIC, SDIO ETH(RMII), ADC/DAC</td> <td style \"text align:left\">UART, SPI, IIC, SDIO, ADC</td> </tr> <tr> <td style \"text align:left\">Size</td> <td style \"text align:left\">25.4 x 25.4 mm</td> <td style \"text align:left\">31 x 18 mm</td> <td style \"text align:left\">25.5 x 18 mm</td> </tr> <tr> <td style \"text align:left\">Price</td> <td style \"text align:left\">$6</td> <td style \"text align:left\">$6</td> <td style \"text align:left\">$4.3(digikey)</td> </tr> </tbody> </table> ## Software <table> <thead> <tr> <th colspan \"2\" > M1s Module </th> </tr> </thead> <tbody> <tr> <td>OS</td> <td>· Full support for FreeRTOS<br>· Basic support for Linux</td> </tr> <tr> <td>Developments</td> <td>· C SDK<br>· MaixHAL C <br>· PikaPython </td> </tr> <tr> <td>Burn Firmware</td> <td>· Burn from uart<br>· Virtual disk drag and drop burn</td> </tr> <tr> <td>AI Framework</td> <td> · Support BLAI accelerated inference engine with native SDK<br> · Suppory universal TinyMaix inference</td> </tr> <tr> <td>AI model store</td> <td>· Download from <a href \"https://maixhub.com/\">MaixHub</a>. Support Face detection and recognition, posture detection and gesture detection, etc.</td> </tr> <tr> <td>Sipeed examples</td> <td>· https://github.com/sipeed/M1s_BL808_example</td> </tr> </tbody> </table> ## Operators list <table> <thead> <tr> <th>Type</th> <th>Operators</th> <th>Applicable Subset Spec.</th> <th>Processor</th> </tr> </thead> <tbody> <tr> <td rowspan \"10\">Convolution</td> <td rowspan \"4\">Conv </td> <td>Kernel: 1x1,3x3,5x5,7x7</td> <td rowspan \"4\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td>Dilation: 1x1, 2x2</td> </tr> <tr> <td>Pad: same</td> </tr> <tr> <td rowspan \"4\">Depthwise Conv</td> <td>Kernel: 1x1,3x3 (5x5, 7x7 TBD)</td> <td rowspan \"4\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td>Dilation: 1x1 (2x2 TBD)</td> </tr> <tr> <td>Pad: same</td> </tr> <tr> <td rowspan \"2\">Transpose Conv</td> <td>Kernel: 3x3</td> <td rowspan \"2\">strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 2x2</td> </tr> <tr> <td rowspan \"4\">Pooling</td> <td rowspan \"2\">MaxPool (NPU TBD)</td> <td>Kernel: 2x2</td> <td rowspan \"2\">DSP</td> </tr> <tr> <td>Stride: 2x2</td> </tr> <tr> <td rowspan \"2\">MaxPool</td> <td>Kernel: 3x3</td> <td rowspan \"2\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td rowspan \"2\">Activation</td> <td>Relu</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Relu 6</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td rowspan \"5\">Other processing</td> <td>BatchNormalization</td> <td>fused with conv</td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Add (shortcut)</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Concat (route)</td> <td>Channel wise (AXIS 3 in BHWC)</td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Fully Connected</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Upsample</td> <td>Nearest</td> <td>:strong:<code>NPU</code></td> </tr> </tbody> </table> ## Links [Module Datasheet](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/1_Specification) [Module Schematic](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/2_Schematic) [Module Package](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/7_Package) [Module Bit map](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/3_Bit_number_map) [Module Dimension](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/4_Dimensional_drawing) [3D model file](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/5_3D_file) [Module Chip manual](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/6_Chip_Manual) [Bouffalolab official document](https://dev.bouffalolab.com/home/) [BL808 DataSheet](https://github.com/bouffalolab/bl_docs/tree/main/BL808_DS/en) (github) [BL808 Reference Manual](https://github.com/bouffalolab/bl_docs/tree/main/BL808_RM/en) (github) [Sipeed SDK](https://github.com/sipeed/M1s_BL808_SDK) (Github) [Sipeed Examples](https://github.com/sipeed/M1s_BL808_example)（Github） [Bouffalolab SDK](https://github.com/bouffalolab/bouffalo_sdk)（Github） [Linux SDK](https://github.com/sipeed/M1s_BL808_Linux_SDK)（Github） [Telegram](https://t.me/sipeed) [Twitter](https://twitter.com/SipeedIO) [Reddit](https://www.reddit.com/r/Sipeed/) [Online model platform](https://maixhub.com/) ## Attention <table> <tr> <th>Item</th> <th>Attention</th> </tr> <tr> <td>Electrostatic protection</td> <td>Avoid static electricity hitting the PCBA. Release the static electricity of hand before touching the PCBA</td> </tr> <tr> <td>Operating voltage</td> <td>The operating voltage of each GPIO has been marked in the schematic. Please do not allow the actual operating voltage of the GPIO to exceed the rated value, otherwise the PCBA will be permanently damaged</td> </tr> <tr> <td>FPC Connector</td> <td>When connecting FPC cable，make sure that the row is completely inserted into the row without bias</td> </tr> <tr> <td>Plug and Remove</td> <td>Power off completely before plugging or removing it</td> </tr> <tr> <td>Avoid short circuit</td> <td>During the power on, avoid any liquid or metal touching PCBA components，otherwise the PCBA will be damaged even burn</td> </tr> <tr> <td>Suggestion for Design</td> <td>Before hadrware design, see this post <a href \"https://bbs.sipeed.com/thread/1721\">https://bbs.sipeed.com/thread/1721</a> (Use Web Translation)<br> The attached file can be download from <a href \"https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/\">Download station</a></td> </tr> <tr> <td>BANK</td> <td> VDDIO1：GPIO 0 8，1.8V/3.3V<br> VDDIO2：GPIO 11 15，GPIO 40 41, 3.3V only<br> VDDIO3：GPIO 16 23，1.8V/3.3V<br> VDDIO4：GPIO 24 39，1.8V/3.3V<br> </td> </tr> <tr> <td>BOOT Mode</td> <td> When powered on, the chip starts depending on the voltage level of the BOOT pin: <br> · BOOT is 1 ：Start from flash<br> · BOOT is 0 ：Download from uart </td> </tr> </table> ## Contact M1s Dock meets different needs of customers in various scenarios. Please contact email [support@sipeed.com](support@sipeed.com) for technical support and business cooperation."},"/hardware/en/maix/m1s/other/start.html":{"title":"M1s DOCK guides","content":" title: M1s DOCK guides keywords: M1s DOCK ,BL808, M1s update: date: 2023 05 09 version: v0.5 author: wonder content: Change default firmware Edit start guide Latest firmware is not provided date: 2023 03 06 version: v0.4 author: wonder content: Add wifi stream demo usage date: 2022 12 20 version: v0.3 author: wonder content: Add contents about blai <! date: 2022 12 13 version: v0.1 author: wonder content: Add content date: 2022 12 03 version: v0.1 author: wonder content: Create file The M1s Dock can be used for a variety of interesting things by its delicate design. Here we tell the usages of this device. Note that the default baudrate is 2000000. There are two Converter devices in `Windows` device manager if you connect the computer with the UART port of M1s Dock. ![start_bl808_uart_converter](./../../../../zh/maix/m1s/other/assets/start/start_bl808_uart_converter.png) > ## Open the box Here we open the box which contains M1S Dock with camera and screen. Open the box, these things are shown: One USB cable One M1S Dock Two pin headers <img src \"./../../../../zh/maix/m1s/other/assets/start/unbox_m1s_dock.jpg\" alt \"unbox_m1s_dock\" width \"50%\"> ## Hardware preparation Two TypeC Cables One M1s Dock One Computer There are two TypeC Ports on M1s Dock. The UART TypeC Port is for serial communication between M1s Dock and computer. The OTG Port is designed for burning firmware of the C906 Core in BL808 chip, and you can change its function by programming it as if you want to learn USB protocol. <img alt \"m1s_doc_pin_map\" src \"./../../../../zh/maix/m1s/assets/m1s_dock/m1s_doc_pin_map.png\"> 1. We can see there are `S1_Button` and `S2_button`, and there are also `BOOT` key and `RST` key. 2. There is a `UART` on the left bottom, it's used for communication with two cores of BL808. 3. A `OTG` port is on the tighe bottom, we use burn the C906 Core firmware of BL808 bia this port. ## Power guide ![m1s_dock_power_supply](./start/m1s_dock_power_supply.png) ## First time boot ### Board state Power the M1s Dock，Click the RST (reset) key。 ![m1s_dock_rst_key_position](./../../../../zh/maix/m1s/other/assets/start/m1s_dock_rst_key_position.png) And it will be as follows： ![default_firmware](./../../../../zh/maix/m1s/other/assets/start/default_firmware_20230509.png) Click the ① key, the btn marked ④ turns green, and the number marked ⑥ increases, maximum number is 100. ② is the camera, and screen shows what the camera captures Click the ③ key, another btn on the screen turns green, and the number marked ⑥ decreases, minimum number is 100. ⑤ is the wifi test and its intensity.The user will not see this result as there is no this corresponding wifi test. ⑦ is the test of the onboard microphone, which is in the symmetrical position with the led on the back The LED on the back blinks. ![led_brghtness](./../../../../zh/maix/m1s/other/assets/start/led_brghtness.jpg) ### OTG PORT > A virtual removable disk with 3MB storage capacity is on your computer if you connect this board with your computer via TypeC OTG port on this board. Because the driver is not compatible well with some computers, we can flash the firmware via [UART](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn with UART) to solve this problem. ![default_udisk](./../../../../zh/maix/m1s/other/assets/start/default_udisk.jpg) And there is USB Mass Storge Device in `Windows` device manager, in `Linux` there is also a removable device. ![udisk_device_manager](./../../../../zh/maix/m1s/other/assets/start/udisk_device_manager.jpg) If there is no USB Mass Storge Device in Windows device manager, try to use other USB TypeC cable or connect with other USB port of computer, if this problem remains, read [Burn with UART](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn with UART) to flash M1s Dock to solve this problem. Make sure you have choose `partition table`, `boot2`, `firmware` these three files, after finishing burning, reconnect the board with computer. ### UART PORT Two serial devices will be shown in your computer if you connect this board with your computer by TypeC UART port on this board. ![dual_uart](./../../../../zh/maix/m1s/other/assets/start/dual_uart.jpg) There are two Converter devices in Windows device manager. ![start_bl808_uart_converter](./../../../../zh/maix/m1s/other/assets/start/start_bl808_uart_converter.png) If there is no serial device，try to use other USB TypeC cable or use other USB port of computer. If this problem remains, visit [Burn onboard bl702](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn onboard bl702) to reburn the download debugger firmware. we set a BL702 on M1s Dock, and use it as USB to two uart convertor. If there is only one serial device, visit [Burn onboard bl702](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn onboard bl702) to reflash the download debugger firmware Set baudrate to 2000000，open the two serial ports, you will see different information. Open the small serial port and you can see that the messages are being printed: ![start_smaller_uart](./../../../../zh/maix/m1s/other/assets/start/start_smaller_uart.jpg) Open the big serial port for command line interaction: ![start_bigger_uart](./../../../../zh/maix/m1s/other/assets/start/start_bigger_uart.jpg) ## Burn firmware To run our program on M1s Dock, we should know how to burn the firmware into M1s Dock first. ### Burn via u disk To make it easier to burn firmware, we design u disk burning method to burn the program for C906 core of BL808 in the chip. Connect this board by its TypeC OTG port with computer, hold the 2 sides keys (which have been marked on the following figure) of M1s Dock, then press RST button to make this board into u disk burn mode. <table> <tr> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/udisk_burn.png\" alt \"udisk_burn\" style \"transform:rotate(0deg);\"></td> <td>Hold 2 side keys and press RST，make M1s Dock into u disk burn mode</td> </tr> </table> Besides, when 2 side keys are being pressed, power on this board can make this board into u disk burn mode too. <img src \"./../../../../zh/maix/m1s/other/assets/start/udisk_in_computer.png\" alt \"udisk_in_computer\" style \"transform:rotate(0deg);\"> A removable disk with tiny storage capacity will be shown on your computer if this board is in u disk burn mode. Just drag the firmware <a href \"https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/demo_bin\"> Here are some demo bins </a> into the removable disk to burn the firmware. <img src \"./../../../../zh/maix/m1s/other/assets/start/udisk_burn.gif\" alt \"udisk_burn\" style \"transform:rotate(0deg);\"> After succeed dragging the firmware bin into removable disk, the board will reboot and the u disk is removed. Because of the different bl702 firmwares, clicking the RST key to boot M1S Dock maybe necessary. [Click me](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#bl702 firmware difference) to see the differences between BL702 firmwares. ### Burn via UART The u disk burning method above is used to burn firmware for C906 core of BL808. If we want to burn other firmware for other cores or when we need to upgrade the whole firmware of BL808, we need to burn M1s Dock via UART. Connect this board by its TypeC UART port with computer, 2 serial ports will be shown on your computer (If your mouse doesn't work after connecting board with computer, please disconnect board with computer and visit [Burn onboard bl702](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn onboard bl702) to solve this problem). #### Get the burn software To burn for M1s, we need bouffalolab official burning application, visit https://dev.bouffalolab.com/download and download the file named `Bouffalo Lab Dev Cube`. Decompress the downloaded file then we get the application to burn the board. ![bouffalo_cube](./../../../../zh/maix/m1s/other/assets/start/bouffalo_cube.png) Backup download: [Sipeed Download Station](https://dl.sipeed.com/shareURL/others/BouffaloLabDevCube) We mainly use `BLDevCube`, `BLDevCube macos` and `BLDevCube ubuntu` these three files, by which to burn our board with graphical interface on different OS. ![application](./../../../../zh/maix/m1s/other/assets/start/application.png) And there are `bflb_iot_tool`、`bflb_iot_tool macos`、`bflb_iot_tool ubuntu` three applications, with which we can burn this board via command line. #### Burn via graphical interface Run the software based on your operating system, choose bl808, then we put this [partition file](https://dl.sipeed.com/fileList/MAIX/M1s/M1s_Dock/7_Firmware/partition/partition_cfg_16M_m1sdock.toml) in partition table (marked with ②) in IOT page. <table> <tr> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/chip_selection.png\" alt \"chip_selection\" style \"transform:rotate(0deg);\"></td> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/choose_partition.png\" alt \"choose_partition\" style \"transform:rotate(0deg);\" width \"70%\"></td> </tr> </table> After selecting the partition file, we have more choice in this page. We just need `boot2`, `firmware` and `d0fw` these options. <img src \"./../../../../zh/maix/m1s/other/assets/start/firmware_choose.png\" alt \"firmware_choose\" style \"transform:rotate(0deg);\"> In the picture above, `boot2` stays the same, and it's in this directory: `BLDevCube\\chips\\bl808\\builtin_imgs\\boot2_isp_bl808_xxxx_xxx`, under where the path if this burning application is, and make sure your choosing file named with `debug`. `firmware` is the firmware file for E907 core, and `d0fw` is C906 core file, the previous [Burn via u disk](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn via u disk) operation can also burn firmware for this core. The firmware file for E907 or C906 can be gotten by compiling [M1s_dock example](https://gitee.com/sipeed/M1s_BL808_example). First time burning, both `firmware` and `boot2` are needed, after this you just need tick what you want to burn not all. The default old firmware can be downloaded [here](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/factory), and the newest firmware is not provided any more. [Click me](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Old firmware test) to see the old factory firmware details. After choose the firmware, click the `Refresh` in the righr to refresh the serial port, then we can see 2 serial ports. If there are not 2 serial ports, visit [Burn onboard bl702](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn onboard bl702) to solve this. We choose the bigger number serial port, and set uart rate 2000000 . ![burn_steps](./../../../../zh/maix/m1s/other/assets/start/burn_steps.png) Press BOOT key and RST key on the board, then release RST key first, then release BOOT key in order to make M1s Dock into UART burning mode. <img src \"./../../../../zh/maix/m1s/other/assets/start/boot_rst.jpg\" alt \"boot_rst\" style \"transform:rotate(0deg);\" width \"40%\"> Click `Create & Download`, then we can see the following message where the arrow points at, before this we should make M1s Dock into UART burning mode. ![burn_press_boot](./../../../../zh/maix/m1s/other/assets/start/burn_press_boot.jpg) It will burn M1s Dock if it shows `shake hand success` <img src \"./../../../../zh/maix/m1s/other/assets/start/burn_press_boot_success.jpg\" alt \"burn_press_boot_success\" style \"transform:rotate(0deg);\" width \"70%\"> <img src \"./../../../../zh/maix/m1s/other/assets/start/finish_burning.png\" alt \"finish_burning\" style \"transform:rotate(0deg);\" width \"70%\"> Reburn this if it `SHAKEHAND FAIL`. Try to release the keys in order (Release RST key first then release BOOT key, I mean when release RST key, the BOOT key is being pressed) to make the board into UART burning mode, otherwise the burning software will show error because of timeout burning. <img src \"./../../../../zh/maix/m1s/other/assets/start/burn_press_boot_failed.jpg\" alt \"burn_press_boot_failed\" style \"transform:rotate(0deg);\" width \"70%\"> #### Burn via command line We can burn M1s Dock by command line through serial port on this board. In `BLDevCube` folder, there is `bflb_iot_tool` application, `bflb_iot_tool`、 `bflb_iot_tool macos` and `bflb_iot_tool ubuntu` are used for different OS to burn the bouffalolab chip. Here I take Windows command line as example to burn M1s Dock, and for other OS you need to change the commands by yourself. ```bash .\\bflb_iot_tool.exe chipname bl808 port COM38 baudrate 2000000 firmware \"firmware_20221212.bin\" pt \"M1s_BL808_example\\partition\\partition_cfg_16M_m1sdock.toml\" boot2 \"BLDevCube\\chips\\bl808\\builtin_imgs\\boot2_isp_bl808\\boot2_isp_debug.bin\" ``` In this command, `firmware` is the bin file for E907 Core, the default old bin file can be downloaded from [here](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/factory). `pt` is the partition file, it's in the `M1s_BL808_example\\partition` folder, you can also [Click me](https://dl.sipeed.com/fileList/MAIX/M1s/M1s_Dock/7_Firmware/partition/partition_cfg_16M_m1sdock.toml) to get it.`boot2` is in `BLDevCube\\chips\\bl808\\builtin_imgs\\boot2_isp_bl808` folder, and is named with `debug`. Set baudrate 2000000 to burn this board fast. `port` is the bigger port number. Of course, make sure you have made this board into UART burning mode: Press BOOT key and RST key, then release RST key first then release BOOT key. ![command_burn_flash](./../../../../zh/maix/m1s/other/assets/start/command_burn_flash.jpg) After burning these, you can burn the bin file for C906 core according to [Burn via u disk](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn via u disk). You can also burn this board based on the address, from `partition_cfg_16M_m1sdock.toml` file you can know the burn address and modify it. ### Troubles when burning #### BFLB IMG LOAD SHAKEHAND FAIL This means M1s Dock is not at the burning state. Make sure you have held the RST key and BOOT key together when M1s Dock is powered on, then release RST key first, and then release BOOT key. When release RST key, the BOOT key is being pressed to make the board into UART burning mode. ![uart_burn_bl808_shakehand_fail](./../../../../zh/maix/m1s/other/assets/start/uart_burn_bl808_shakehand_fail.jpg) Make sure you choose the bigger COM port to burn M1s Dock, not the smaller COM port. ![uart_burn_bl808_shakehand_fail_com_port](./../../../../zh/maix/m1s/other/assets/start/uart_burn_bl808_shakehand_fail_com_port.jpg) #### Only one COM port This means you are in the bl702 burning mode. Make sure power on this board before pressing BOOT key. ![uart_burn_bl808_only_one_port](./../../../../zh/maix/m1s/other/assets/start/uart_burn_bl808_only_one_port.jpg) #### No COM port Make sure you connected the computer and M1s Dock UART port, not that OTG port. #### Burn single firmware In the burning software, we need to tick and choose `partition table`, `boot2`, `firmware`, `d0fw` for the first time burning. If we want to burn only one firmware not all firmware, tick your target firmware and burn it. `firmware` can be compiled out via e907_demo. `d0fw` can be compiled out via c906_demo. `partition table` and `boot2` are needed to burn every time. <table> <tr> <td>Burn c906_demo firmware</td> <td>Burn e907_demo firmware</td> </tr> <tr> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/uart_burn_c906.jpg\" alt \"uart_burn_c906\"></td> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/uart_burn_e907.jpg\" alt \"uart_burn_e907\"></td> </tr> </table> ## Burn examples There are some demos compiled from M1s_BL808_example, with which you can have a test on M1s Dock. ### lvgl_demo [LVGL](https://lvgl.io/) (Light and Versatile Graphics Library) is a free open source graphics library suitable for mcu graphical interfaces. Demo File: [Click me](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/demo_bin/lvgl_demo) After burning into M1s Dock, the screen displays the lvgl test. And then sets the baudrate to 2000000, the serial port with the smaller serial port number prints the last touch screen position. <img src \"./../../../../zh/maix/m1s/other/assets/start/example_lvgl.gif\" alt \"example_lvgl\" width \"45%\"> <img src \"./../../../../zh/maix/m1s/other/assets/start/example_lvgl.jpg\" alt \"example_lvgl\" width \"45%\"> ### image_processing_demo A simple image processing example. Demo File: [Click me](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/demo_bin/image_processing_demo) Burning into M1s Dock, screen displays what the camera captured, press the side key to change image operator. Set the baudrate to 2000000, to see the image operator state by the small serial port. Click the RST key to reset the bl808, and we can see the information about the camera from the small serial port when the board boots, to know if there is some error with the camera. <img src \"./../../../../zh/maix/m1s/other/assets/start/example_image_processing_demo.jpg\" alt \"example_image_processing_demo\" width \"45%\"> <img src \"./../../../../zh/maix/m1s/other/assets/start/example_image_processing_demo_uart.jpg\" alt \"example_image_processing_demo_uart\" width \"45%\"> ### tinymaix_mnist_demo [TinyMaix](https://github.com/sipeed/TinyMaix) is a tiny inference Neural Network library specifically for microcontrollers (TinyML), can run lightweight deep learning model on any Single Chip Microcomputer. Demo File: [Click me](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/demo_bin/tinymaix_mnist_demo) Burning into M1s Dock, recognizing number through the red box in the center of screen. Set the baudrate to 2000000, to see the process and result by the small serial port. <img src \"./../../../../zh/maix/m1s/other/assets/start/example_tinymaix_mnist_demo.jpg\" alt \"example_tinymaix_mnist_demo\" width \"45%\"> <img src \"./../../../../zh/maix/m1s/other/assets/start/example_tinymaix_mnist_demo_uart.jpg\" alt \"example_tinymaix_mnist_demo_uart\" width \"45%\"> ### pikascript_demo [PikaScript](http://pikascript.com/) is a cross platform, ultra lightweight embedded Python engine. Demo File: [Click me](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/demo_bin/pikascript_demo) Burning into M1s Dock, the screen is white. Set the baudrate to 2000000, open the small serial port for command line interaction: Use these commands: ```bash arc lv.arc(lv.scr_act()) arc.set_end_angle(200) arc.set_size(150, 150) arc.center() ``` ![example_pikascript_demo_uart](./../../../../zh/maix/m1s/other/assets/start/example_pikascript_demo_uart.jpg) Then the screen displays as shown(Ignore the bad shoot): ![example_pikascript_demo_screen](./../../../../zh/maix/m1s/other/assets/start/example_pikascript_demo_screen.jpg) ## SDK Compile M1s can be compiled in Linux. ### Preparation We need `git` to get the SDK compile environment, and use `make` to compile SDK, `tree` is also need to be installed to check the directory structure. The following command can be used in debian Linux distribution like Ubuntu to install the three softwares mentioned above. ```bash sudo apt get install git make tree build essential ``` For the command of other Linux distribution to install the three softwares mentioned above can be searched on the Internet by yourself. ### Get example ```bash git clone https://github.com/Sipeed/M1s_BL808_example.git ``` Then the file tree should be like this: ```bash sipeed@DESKTOP:~$ tree L 1 M1s_BL808_example/ M1s_BL808_example/ ├── LICENSE # License file ├── assets # folder for assets for readme.md ├── c906_app # folder for C906 core example ├── e907_app # folder for E907 core example ├── partition # folder for partition file └── readme.md # guide ``` ### Get SDK It's about 120MB memory storage. ```bash git clone https://github.com/sipeed/M1s_BL808_SDK.git ``` Then the file tree should be like this: ```bash sipeed@DESKTOP:~$ tree L 1 . ├── M1s_BL808_example # Folder of example └── M1s_BL808_SDK # Folder of SDK ``` ### Get toolchain According to the `readme.md` in example folder, we need to put the toolchain in M1s_BL808_SDK/toolchain ```bash mkdir p M1s_BL808_SDK/toolchain cd M1s_BL808_SDK/toolchain git clone https://github.com/wonderfullook/m1s_toolchain.git ``` Rename the toolchain folder name to `Linux_x86_64`, and return to the previous two levels of directories. ```bash mv m1s_toolchain Linux_x86_64 cd ../../ ``` Then the file tree should be like this(The main folder and files): ```bash sipeed@DESKTOP:~$ tree L 2 . ├── M1s_BL808_example # Folder of example │ ├── LICENSE # License file │ ├── assets # folder for assets for readme.md │ ├── c906_app # folder for C906 core example │ ├── e907_app # folder for E907 core example │ ├── partition # folder for partition file │ └── readme.md # guide └── M1s_BL808_SDK # Folder of SDK ├── toolchain # Folder of toolchain ... ``` ### Set toolchain path Every time compiling for M1s, we need to set toolchain path once. First we need to know the path of `M1s_BL808_SDK`: ```bash sipeed@DESKTOP:~$ cd M1s_BL808_SDK sipeed@DESKTOP:~/M1s_BL808_SDK$ pwd /home/lee/bl808/M1s_BL808_SDK ``` We copy the result (the result of everyone is different) of `pwd` command, then run following command to set toolchain path. ```bash export BL_SDK_PATH /home/lee/bl808/M1s_BL808_SDK ``` Note that this is `M1s_BL808_SDK` ，not `M1s_BL808_SDK/`，normally this error is made by automatic string completion. ### Compile demo Run `build.sh` which is in the folder of M1s_BL808_example/c906_app, add the `demo` in the end you want to try to compile. Demos（Edited in 2022 12 13）： ```bash c906_app ├── audio_recording ├── blai_mnist_demo ├── camera_bypass_lcd ├── camera_dump ├── camera_streaming_through_wifi ├── cli_demo ├── flash_demo ├── gpio_demo ├── hello_world ├── i2c_touch ├── image_processing_demo ├── lfs_demo ├── lvgl_demo ├── pikascript_demo ├── proj_config.mk ├── pwm_demo ├── spi_lcd ├── tinymaix_mnist_demo └── uvc_demo ``` ```bash cd M1s_BL808_example/c906_app ./build.sh lvgl_demo ``` Then the compiled bin file is in M1s_BL808_example/c906_app/build_out folder, and its name is `d0fw.bin`, we can burn it by [u disk](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn via u disk). ### Compile firmware Run `build.sh` which is in the folder of M1s_BL808_example/e907_app, add `firmware` in the end to compile. ```bash cd M1s_BL808_example/e907_app ./build.sh firmware ``` Then the compiled bin file is in M1s_BL808_example/e907_app/build_out folder, and its name is `firmware.bin`, we can burn it with the burning application provided by Bouffalo. ### Compile Questions 1. Run command `build.sh` and get error `Makefile:14: *** BL_SDK_PATH not found, please enter: export BL_SDK_PATH {sdk_path}. Stop.`, Visit [Set toolchain path](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Set toolchain path) to set `BL_SDK_PATH` correctly. 2. Failed compiling When compiling your firmware, make sure your command is `./build.sh demo_name`, like `./build.sh hello_world`, not `./build.sh hello_world/` (pay attention to the end symbol `/`) ## WIFI stream DEMO An easy camera streaming demo. ### Preparation Network: PC and M1s Dock are in a same network, M1s Dock supports 2.4G wireless network. PC Software：`python3`， `OpenCV` M1s Dock firmware: Use this [Firmware](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/factory) named with `firmware_20230227.bin`, burn it via [UART](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn via UART). ![camera_stream_e907](./../../../../zh/maix/m1s/other/assets/start/camera_stream_e907.png) ### Edit Code Open the `main.c` which is in the `M1s_BL808_example/c906_app/camera_streaming_through_wifi` directory. ![camera_stream_original_source_code](./../../../../zh/maix/m1s/other/assets/start/camera_stream_original_source_code.png) Pay attention to `m1s_xram_wifi_connect()` 和 `m1s_xram_wifi_upload_stream()`. Edit `liuxo_desktop` into your wireless network, and change `12345678` into the wireless network password. Change `10.42.0.1` to your PC ip address. Here is an example, this computer connects to the network named `Test` and its ip address in this network is `192.168.43.183`, the password of the `Test` wireless work is `testtest`. ![camera_stream_source_code](./../../../../zh/maix/m1s/other/assets/start/camera_stream_source_code.png) Save `main.c` after editing it. ### Compile and burn Finishing editing the code, follow the [sdk compile](http://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#SDK Compile) steps to compile this `camera_streaming_through_wifi` demo. Burn the compiled out `d0fw.bin` firmware via u disk burn into M1s Dock, open the bigger COM port on your computer, press the RST ket on the M1s Dock. If M1s Dock succeeds in connecting the wireless work, its IP address is printed out via UART, and message `Socket connect` means it's waiting the computer to receive the data. ![camera_stream_socket_wait](./../../../../zh/maix/m1s/other/assets/start/camera_stream_socket_wait.png) ### PC show screen Run `python3 main.py` in the `M1s_BL808_example/c906_app/camera_streaming_through_wifi` directory to receive the data with opencv from M1s dock. ![camera_stream_success](./../../../../zh/maix/m1s/other/assets/start/camera_stream_success.png) ### Note 1. Make sure you use M1s Dock firmware named with [firmware_20230227.bin](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/factory) 2. The IP address of M1s Dock is printed via bigger COM port if it succeeds in connecting the wireless work 3. Make sure computer and M1s Dock are in a same network, and the PC IP address has been edited in `main.c`. ## Linux Demo This is a basic Linux Demo to run on M1s Dock. [Click me](https://dl.sipeed.com/fileList/MAIX/M1s/M1s_Dock/7_Firmware/m1sdock_linux_20221116.zip) to download Linux demo, and following the `steps.md` in the compressed file to finish burning Linux image. ![linux_opensbi](./../../../../zh/maix/m1s/other/assets/start/linux_opensbi.jpg) Login in with `root` ![linux_login](./../../../../zh/maix/m1s/other/assets/start/linux_login.jpg) Visit CPU information ![linux_cpuinfo](./../../../../zh/maix/m1s/other/assets/start/linux_cpuinfo.jpg) ## Use Jtag The jtag debugger is sold in [Sipeed aliexpress store](https://sipeed.aliexpress.com/store/1101739727), you can buy one if you need. ![cklink_appearence](./../../../../zh/maix/m1s/other/assets/start/cklink_appearence.jpg) ### Connect to device Insert the jtag convertor board into the TF card slot on M1s Dock, then the convertor board is connected and fixed on the board. And it's look like as follows: ![cklink_connect_side](./../../../../zh/maix/m1s/other/assets/start/cklink_connect_side.jpg) ![cklink_connect_top](./../../../../zh/maix/m1s/other/assets/start/cklink_connect_top.jpg) Both jtag and M1s Dock are need to be connected with computer, and we need to make sure the UART port on M1s Dock is connected with computer, by which we can enable the core jtag and ensure that the jtag will not be very hot because of heavy power supply to M1s Dock. ### Install driver Visit [Download station](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/9_Driver/cklink) to download the driver for your OS. #### Windows Unzip `T Head DebugServer windows`, run `Setup` to install driver. ![cklink_windows_install_driver](./../../../../zh/maix/m1s/other/assets/start/cklink_windows_install_driver.jpg) It's suggested not to change the default installation path, to avoid it remove all child directory when uninstalling it. ![cklink_windows_driver_path](./../../../../zh/maix/m1s/other/assets/start/cklink_windows_driver_path.jpg) Install all compoents, which we may need in the future. ![cklink_windows_driver_components](./../../../../zh/maix/m1s/other/assets/start/cklink_windows_driver_components.jpg) Finish installing this, and we can see there is `CKlink Lite` in Windows device manager if we have connected the debugger. ![cklink_windows_driver_device_manager](./../../../../zh/maix/m1s/other/assets/start/cklink_windows_driver_device_manager.jpg) There is an icon of the debug software. ![cklink_windows_driver_desktop_icon](./../../../../zh/maix/m1s/other/assets/start/cklink_windows_driver_desktop_icon.jpg) #### Linux Download driver：[Click me](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/9_Driver/cklink) ![cklink_linux_list_file](./../../../../zh/maix/m1s/other/assets/start/cklink_linux_list_file.jpg) Unzip the downloaded file. ```bash tar xvf T Head DebugServer* ``` Then there is a new script file. ![cklink_linux_list_shell_file](./../../../../zh/maix/m1s/other/assets/start/cklink_linux_list_shell_file.jpg) Run this script, then its usages are shown, by which we can know that add with command ` i` to install driver or with ` u` to remove it in the end of command. ``` ./T Head DebugServer linux x86_64 V5.16.5 20221021.sh ``` ![cklink_linux_script_help](./../../../../zh/maix/m1s/other/assets/start/cklink_linux_script_help.jpg) Install driver： ``` sudo ./T Head DebugServer linux x86_64 V5.16.5 20221021.sh i ``` ![cklink_linux_installation](./../../../../zh/maix/m1s/other/assets/start/cklink_linux_installation.jpg) We need enter `yes` two times when installing it, and for as for `Set full installing path` we can just press Enter on the keyboard to use the default installation path or set your own installation path by yourself. Finishing installing the driver, use command `lsusb` to see there is `CKlink Lite` if we have connected the debugger. ![cklink_linux_lsusb](./../../../../zh/maix/m1s/other/assets/start/cklink_linux_lsusb.jpg) ### Debug device Before debugging, we need to enable core debug. Connect computer with UART port on M1s Dock, and open the bigger serial port. ![cklink_jtag_serial_choice](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_serial_choice.jpg) ![cklink_jtag_choice](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_choice.jpg) We can know there are two jtag choices, run command `jtag_cpu0` to debug C906 Core or run command `jtag_m0` to debug E907 Core. ![cklink_jtag_c906](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_c906.jpg) ![cklink_jtag_e907](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_e907.jpg) #### Windows Run T HeadDebugServer software on the desktop, if it shows following message, try following steps: Make sure you have enabled core debug in serial connection There is `CKlink Lite` in Windows device manager, if there is no `CKlink Lite`, check the connection of debugger or reinstall the driver Debugger is occupied by other T HeadDebugServer application ![cklink_jtag_windows_no_target](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_no_target.jpg) Click the triangle icon to connect device. ![cklink_jtag_windows_run_debugger](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_run_debugger.jpg) If there shows Failed about port, set another port and then rerun connecting device. ![cklink_jtag_windows_no_port](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_no_port.jpg) Click Socket Setting, set a port. ![cklink_jtag_windows_set_socket](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_set_socket.jpg) ![cklink_jtag_windows_set_socket_1](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_set_socket_1.jpg) If succeed connecting, the triangle icon will change into circle icon. ![cklink_jtag_windows_success_connection](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_success_connection.jpg) Up to now we have connected device, and the picture above is we usr command `jtag_m0` to debug E907 Core, you can also run `jtag_cpu0` to debug C906 Core. And we can use software like gdb to debug the chip. ![cklink_jtag_windows_gdb_debug](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_gdb_debug.jpg) Besides, in the directory where we install this software, we can run `DebugServerConsole` to connect debugger by command line. ![cklink_jtag_windows_debugserverconsole](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_debugserverconsole.jpg) Run it by command line to see its usages. ```bash .\\DebugServerConsole.exe h ``` ![cklink_jtag_windows_debugserverconsole_help](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_debugserverconsole_help.jpg) ```bash .\\DebugServerConsole.exe port 65535 ``` ![cklink_jtag_windows_debugserverconsole_port](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_debugserverconsole_port.jpg) Then we can debug it with port number 65535. #### Linux Run command`DebugServerConsole h` to see help. ![cklink_jtag_linux_debugserverconsole_help](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_linux_debugserverconsole_help.jpg) Run following command to debug M1s Dock with port number 12345. ```bash DebugServerConsole port 12345 ``` ![cklink_jtag_linux_debugserverconsole](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_linux_debugserverconsole.jpg) ## blai npu ### Supported operators <table> <thead> <tr> <th>Type</th> <th>Operators</th> <th>Applicable Subset Spec.</th> <th>Processor</th> </tr> </thead> <tbody> <tr> <td rowspan \"10\">Convolution</td> <td rowspan \"4\">Conv </td> <td>Kernel: 1x1,3x3,5x5,7x7</td> <td rowspan \"4\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td>Dilation: 1x1, 2x2</td> </tr> <tr> <td>Pad: same</td> </tr> <tr> <td rowspan \"4\">Depthwise Conv</td> <td>Kernel: 1x1,3x3 (5x5, 7x7 TBD)</td> <td rowspan \"4\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td>Dilation: 1x1 (2x2 TBD)</td> </tr> <tr> <td>Pad: same</td> </tr> <tr> <td rowspan \"2\">Transpose Conv</td> <td>Kernel: 3x3</td> <td rowspan \"2\">strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 2x2</td> </tr> <tr> <td rowspan \"4\">Pooling</td> <td rowspan \"2\">MaxPool (NPU TBD)</td> <td>Kerenl: 2x2</td> <td rowspan \"2\">DSP</td> </tr> <tr> <td>Stride: 2x2</td> </tr> <tr> <td rowspan \"2\">MaxPool</td> <td>Kerenl: 3x3</td> <td rowspan \"2\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td rowspan \"2\">Activation</td> <td>Relu</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Relu 6</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td rowspan \"5\">Other processing</td> <td>BatchNormalization</td> <td>fused with conv</td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Add (shortcut)</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Concat (route)</td> <td>Channel wise (AXIS 3 in BHWC)</td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Fully Connected</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Upsample</td> <td>Nearest</td> <td>:strong:<code>NPU</code></td> </tr> </tbody> </table> ### blai_mnist_demo Burning the compiled [blai_mnist_demo](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/demo_bin/blai_mnist_demo) firmware into M1s Dock, we have told that the each compiled demo bin is named `d0fw.bin`, and it's in `M1s_BL808_example/c906_app/built_out` folder. ``` #c906_app ./build.sh blai_mnist_demo ``` ![udisk_burn](./../../../../zh/maix/m1s/other/assets/start/udisk_burn.gif) After burning this firmware (when the u disk is automatically removed it means we have finished burning this firmware), press RST key to reset M1s Dock and reload firmware, then open the smaller serial port (with baudrate 2000000) we can see it shows failed loading model. ![blai_mnist_demo_no_model](./../../../../zh/maix/m1s/other/assets/start/blai_mnist_demo_no_model.jpg) So we need upload model into M1s Dock, from source code we can know we need to save model in flash. ![blai_mnist_demo_fopen](./../../../../zh/maix/m1s/other/assets/start/blai_mnist_demo_fopen.jpg) Connect computer with OTG port of M1s Dock we can see there is a u disk with nearly 7M storage memory. ![blai_mnist_demo_flash_disk](./../../../../zh/maix/m1s/other/assets/start/blai_mnist_demo_flash_disk.jpg) Follow the source code, in the u disk (which is the flash of M1s Dock indeed), we create a folder named `models`, and save [mnist.blai](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/demo_bin/blai_mnist_demo) into the newly created folder. ```bash models └── mnist.blai ``` ![blai_mnist_demo_model_path](./../../../../zh/maix/m1s/other/assets/start/blai_mnist_demo_model_path.jpg) Press onboard RST key to restart the M1s Dock to load the model Open the smaller serial port we can see we succeed loading model, and the recognition results are printed. Screen displays camera contents, and show recognition result. ![blai_mnist_demo_uart](./../../../../zh/maix/m1s/other/assets/start/blai_mnist_demo_uart.jpg) ![blai_mnist_demo_recognition](./../../../../zh/maix/m1s/other/assets/start/blai_mnist_demo_recognition.jpg) ### tom_and_jerry_classification_demo This ai model file can be downloaded from [MaixHub](https://maixhub.com/model/zoo/127). We can upload dataset, label and train out model file in this website. Here we tell how to deploy the detection model downloaded from [Maixhub](https://maixhub.com/) on M1s Dock. To start this, refer to the [SDK compile](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#SDK Compile) chapter and compile out the [tom_and_jerry_classification_demo](https://dl.sipeed.com/fileList/MAIX/M1s/M1s_Dock/7_Firmware/demo_bin/tom_and_jerry_classification_demo.bin) firmware first. ```bash #c906_app ./build.sh tom_and_jerry_classification_demo ``` Burn the compiled firmware into M1s Dock. ![udisk_burn](./../../../../zh/maix/m1s/other/assets/start/udisk_burn.gif) Form the source code of `main.c` in tom_and_jerry_classification_demo we can see that the ai model file is the the models folder in the Flash, and the ai model file name is `tj.blai`. ![tom_jerry_source_code](./../../../../zh/maix/m1s/other/assets/start/tom_jerry_source_code.jpg) We download the example ai model from [MaixHub](https://maixhub.com/model/zoo/127), and rename the file whose extended name is `.blai` into `tj.blai`. ![tom_jerry_model_rename](./../../../../zh/maix/m1s/other/assets/start/tom_jerry_model_rename.gif) Connect computer with OTG port of M1s Dock we can see there is a u disk with nearly 7M storage memory. ![blai_mnist_demo_flash_disk](./../../../../zh/maix/m1s/other/assets/start/blai_mnist_demo_flash_disk.jpg) According to the source code, we copy the renamed `tj.blai` ai model file to the models folder in the u disk: Create a folder named models in the u disk, and copy the renamed `tj.blai` ai model file into the created models folder. ![tom_jerry_model_path](./../../../../zh/maix/m1s/other/assets/start/tom_jerry_model_path.jpg) Finish there, we can use M1s Dock to distinguish Tom and Jerry. <img src \"./../../../../zh/maix/m1s/other/assets/start/tom_jerry_model_jerry.jpg\" alt \"tom_jerry_model_jerry\" width 42%> <img src \"./../../../../zh/maix/m1s/other/assets/start/tom_jerry_model_tom.jpg\" alt \"tom_jerry_model_tom\" width 42%> Because this ai model is a big one, it's heavy for M1s Dock. ## Questions ### Why there is a BL702 chip on M1s Dock? We use this chip as a USB to 2 UART convertor. If there is some problem with your serial COM port, you can burn its firmware to solve this problem. ### Why there are 2 serial COM ports on M1s Dock We can know there are 3 cores in BL808, and 2 serial COM ports are connecting with 2 different cores of BL808, with which you can see their own logs if you need. ### Why choose u disk burn This u disk is built on a firmware, via which user can burn demos and experience M1s Dock. If you full erase the flash, there is no u disk anymore. If you want to use this u disk again, reburn the default firmware into bl808 via serial burn. ### Why use serial burn U disk burn is based on firmware, we need a way to burn this firmware into M1s Dock when it's produced. So we use serial burn to flash the default firmware into M1s Dock. ### How to erase bl808 flash To erase the flash. we need [Bouffalo Lab Dev Cube](https://dev.bouffalolab.com/download), download and run it, choose Chip BL808. ![chip_selection](./../../../../zh/maix/m1s/other/assets/start/chip_selection.png) `Show advanced Page` first. ![erase_advanede_mode](./../../../../zh/maix/m1s/other/assets/start/erase_advanede_mode.jpg) Do following steps: Choose Flash interface Make sure you have made M1s Dock in burning status(Hold BOOT key and RST key, then release RST key first, then release BOOT key.) Select the bigger COM port Tick Whole Chip Click Erase Flash ![erase_configurations](./../../../../zh/maix/m1s/other/assets/start/erase_configurations.jpg) Then your M1s Dock is being erased, there is no progress bar, but `Success` shows when finishing erasing. ![erase_success](./../../../../zh/maix/m1s/other/assets/start/erase_success.jpg) ### BFLB IMG LOAD SHAKEHAND FAIL This means M1s Dock is not in burning mode. Hold BOOT key and RST key, then release RST key first, then release BOOT key to make it into burning mode. ![uart_burn_bl808_shakehand_fail](./../../../../zh/maix/m1s/other/assets/start/uart_burn_bl808_shakehand_fail.jpg) And Make sure you choose the bigger COM port. ![uart_burn_bl808_shakehand_fail_com_port](./../../../../zh/maix/m1s/other/assets/start/uart_burn_bl808_shakehand_fail_com_port.jpg) ### Only one COM port This means you are in the bl702 burning mode. Make sure power on this board before pressing BOOT key. ![uart_burn_bl808_only_one_port](./../../../../zh/maix/m1s/other/assets/start/uart_burn_bl808_only_one_port.jpg) ### Burn single firmware In the burning software, we need to tick and choose `partition table`, `boot2`, `firmware`, `d0fw` for the first time burning. If we want to burn only one firmware not all firmware, tick your target firmware and burn it. `firmware` can be compiled out via e907_demo. `d0fw` can be compiled out via c906_demo. `partition table` and `boot2` are needed to burn every time. <table> <tr> <td>Burn c906_demo firmware</td> <td>Burn e907_demo firmware</td> </tr> <tr> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/uart_burn_c906.jpg\" alt \"uart_burn_c906\"></td> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/uart_burn_e907.jpg\" alt \"uart_burn_e907\"></td> </tr> </table> ### Trouble about compiling SDK 1. Run command `build.sh` and get error `Makefile:14: *** BL_SDK_PATH not found, please enter: export BL_SDK_PATH {sdk_path}. Stop.`, Visit [Set toolchain path](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Set toolchain path) to set `BL_SDK_PATH` correctly. 2. Failed compiling When compiling your firmware, make sure your command is `./build.sh demo_name`, like `./build.sh hello_world`, not `./build.sh hello_world/` (pay attention to the end symbol `/`) ### Old firmware test Power the M1s Dock, screen displays what the camera captures. Press `S1_Button` or `S2_button` the number on the right top of the screen changes, which is the brightness percentage of the LED. ![default_firmware](./../../../../zh/maix/m1s/other/assets/start/default_firmware.jpg) This is the state of 50% LED brightness. ![led_brghtness](./../../../../zh/maix/m1s/other/assets/start/led_brghtness.jpg) ### Burn onboard bl702 We do this only when there is some trouble with our board. Hold BOOT key and cold boot the board, the bl702 is into download mode, then we burn its firmware. Hold BOOT key before power this device, then connect this board ti with computer by the UART TypeC USB port, after this the onboard is in download mode. Run `BLDevCube`, choose `BL702`, then in MCU page, choose the firmware. Here we have provided the [firmware](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware), download the file whose name starts with `usb2dualuart_bl702`. Click [bl702 firmware difference](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#bl702 firmware difference) to find more information. <table> <tr> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/select_bl702.png\" alt \"select_bl702\" style \"transform:rotate(0deg);\"></td> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/mcu_mode.png\" alt \"mcu_mode\" style \"transform:rotate(0deg);\" width \"70%\"></td> </tr> </table> Click `Refresh`，choose the serial port (there is only one port, if you can't see this port, make sure you have hold BOOT key before powering this device), set UartRate 2000000, click `Create & Diwnload`. ![burn_bl702](./../../../../zh/maix/m1s/other/assets/start/burn_bl702.png) After finishing burning, repower this board to use the new firmware. ![finish_burn_702](./../../../../zh/maix/m1s/other/assets/start/finish_burn_702.png) ### No serial port when burn bl702 Make sure you hold BOOT key, then power up this board via UART port on M1s Dock. Windows user needs to check whether there is a `Bouffalo CDC` device. If there is an error on this CDC device, search `Windows7 CDC` on the internet and find the answer. ![burn_bl702_cdc_error](./../../../../zh/maix/m1s/other/assets/start/burn_bl702_cdc_error.png) ### Failed booting device Different bl702 firmware causes this error. Here are two ways to solve this. Power this board, then click the RST key to boot M1S Dock Reflash the USB to dual serial port firmware for bl702 [Burn onboard bl702](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn onboard bl702) ### bl702 firmware difference In [download site](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware)，there are two bl702 firmwares, and their differences are in the following: Firmware name usb2dualuart_bl702_221118 usb2dualuart_bl702_20230221 Author SIPEED Bouffalolab Detail Containing software reset, <br> boot M1S Dock without clicking RST key No software reset，<br>clicking RST key to boot BL808 Driver Some Windows computers require [Drivers](https://dl.sipeed.com/shareURL/MAIX/tools/driver) Don't require Driver [Click me](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn onboard bl702) to see how to flash the firmware for BL702"},"/hardware/en/maix/m1s/other/questions.html":{"title":"M1s DOCK Questions","content":" title: M1s DOCK Questions keywords: M1s DOCK ,BL808, M1s update: date: 2022 12 03 version: v0.1 author: wonder content: Create file ## c906_app/build_out/xxxxx/.map:No such file or directory When compiling your firmware, make sure your command is `./build.sh demo_name`, like `./build.sh hello_world`, not `./build.sh hello_world/` (pay attention to the end symbol `/`)"},"/hardware/en/maix/m1s/other/get_key.html":{"title":"M1s Machine Code","content":" title: M1s Machine Code keywords: M1s DOCK ,BL808, M1s update: date: 2022 11 21 version: v0.1 author: wonder content: New file When we download models from [MaixHub](https://maixhub.com/), the machine code is required. Here we are talking about how to get the machine code. If you did not get your machine code after doing the following steps, just see the end [Questions](#questions) chapter at the end of this page. ## Brief steps Here are the steps: Connect the board with computer through USB UART port (2 UART Ports will appear in your computer) Run UART application to open the UART device, set the Baudrate 2000000 (one 2 and six 0), open the bigger UART port Press onboard `RST` key, and the log message is as following ```bash # logs [MTD] >>>>>> Hanlde info Dump >>>>>> name D0FW id 0 offset 0x00100000(1048576) size 0x00200000(2048Kbytes) xip_addr 0x580f0000 [MTD] <<<<<< Hanlde info End <<<<<< D0FW addr:0x580f0000 size:0x200000 MM CPU select PLL >MM CPU select 400Mhz UART CLK select MM XCLK >XCLK select XTAL I2C CLK select MM XCLK >XCLK select XTAL SPI CLK select 160Mhz MM BUS CLK select 160Mhz XCLK select XTAL irq handle: 3 reset ev CHIP KEY key:57F80642C3F97E2655772C48AF17455EC9E79BBF76C16EED4E0EC1096D664435 ``` We can see the `CHIP KEY` in the end, which is our machine code. > The `CHIP KEY` of each board is different, the actual `CHIP KEY` should be got by yourself ## Detailed Steps 1. Connect your board with your computer by Type C cable through USB UART port ![uart_connect](./../../../../zh/maix/m1s/other/assets/get_key/uart_connect.png) 2. Run the UART application, set Baudrate 2000000 (one 2 and six 0), choose the bigger UART port <img src \"./../../../../zh/maix/m1s/other/assets/get_key/baudrate_2000000.png\" width 45% alt \"baudrate_2000000\"> <img src \"./../../../../zh/maix/m1s/other/assets/get_key/bigger_com_port.png\" width 45% alt \"bigger_com_port\"> 3. Open Serial port; Press the `RST` key on your board, then you will see your `CHIP KEY` in the log. <table> <tr> <th>Click RST</th> <th>Chip KEY in logs</th> </tr> <tr> <td><img src \"./../../../../zh/maix/m1s/other/assets/get_key/rst_key.png\" alt \"rst_key\"></td> <td><img src \"./../../../../zh/maix/m1s/other/assets/get_key/chip_key.png\" alt \"chip_key\"></td> </tr> </table> The `CHIP KEY` is your machine code ## Questions ### Messy logs Make sure your Baudrate is 2000000 (2M) ### No CHIP KEY in logs This means you need upgrade your firmware, [Click me](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/factory) to download the firmware, choose the file starts with `firmware`,and visit the **Download e907 firmware** [here](https://github.com/sipeed/M1s_BL808_example) (Github) to burn it. ### No two Serial port visit the **Download bl702 firmware** [here](https://github.com/sipeed/M1s_BL808_example) (Github) to burn the onboard serial chip, and the firmware can be downloaded [here](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware), choose the file starts with `usb2dualuart_bl702`. ### No Serial port Make sure you have connected the computer with the UART port on the board first, then try to burn the onboard serial chip by following [No two Serial port](#no two serial port)"},"/hardware/en/maix/m1s/other/others.html":{"title":"M1s DOCK Install shell","content":" title: M1s DOCK Install shell keywords: M1s DOCK ,BL808, M1s update: date: 2022 12 04 version: v0.1 author: wonder content: Create file Here are some steps on how to remove or install the camera or screen. And how to use the shell. ## Remove the screen The camera and screen are oriented in the same direction by default, we may need to remove the screen for some reason, here are the steps to do this and matters need attention. Camera and screen in the same direction Camera and screen in the opposite direction ![screen_camera_same](./../../../../zh/maix/m1s/other/assets/others/screen_camera_same.jpg) ![camera_in_back](./../../../../zh/maix/m1s/other/assets/others/camera_in_back.jpg) Screen and board are fixed together, so when removing the screen, we need to force the metal on the back of the screen, not the edge of the screen. Be careful when doing this, otherwise your screen will be damaged. <table> <tr> <td><img alt \"sponge_glue_strip\" src \"./../../../../zh/maix/m1s/other/assets/others/sponge_glue_strip.jpg\" width \"150%\"></td> <td><img alt \"sponge_glue_strip_top\" src \"./../../../../zh/maix/m1s/other/assets/others/sponge_glue_strip_top.jpg\" width \"150%\"></td> <td> Here we can see screen and board are fixed together</td> </tr> </table> <table> <tr> <td><img alt \"screen_back_plane\" src \"./../../../../zh/maix/m1s/other/assets/others/screen_back_plane.png\" width \"150%\"></td> <td> The center is the metal layer on the back of screen, where we force on when removing screen, and the black parts is the edge of the screen. </td> </tr> </table> <table> <tr> <td><img alt \"screen_connector\" src \"./../../../../zh/maix/m1s/other/assets/others/screen_connector.jpg\" ></td> <td>Note the connection between board and screen, DO NOT CONNECT THEM WRONG</td> </tr> </table> ## Change camera direction After removing the screen, we can change camera direction. Make sure your connection is not wrong. <table> <tr> <td><img alt \"camera_direction_connector\" src \"./../../../../zh/maix/m1s/other/assets/others/camera_direction_connector.jpg\" ></td> <td>Make sure the 1 on board and 1 on the camera is in the same direction</td> </tr> </table> ## Install shell We sell shell for M1s Dock, here is the assembly tutorial. You can decide the camera direction. To begin this, depart the board into following parts. ![parts](./../../../../zh/maix/m1s/other/assets/others/parts.jpg) The camera can be assembled in two directions: the camera shooting direction is the same to the screen or the camera shooting direction is opposite to the screen. ### Same to the screen <table> <tr> <td><img alt \"insert_camera_front_1\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_camera_front_1.jpg\" ></td> <td><img alt \"insert_camera_front_2\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_camera_front_2.jpg\" ></td> <td>First, insert the camera into the shell, and the camera will be slightly fixed in the shell, ensuring that the inserting is not offset and the camera is centered. </td> </tr> </table><br> <table> <tr> <td><img alt \"insert_screen_side_1.jpg\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_screen_side_1.jpg\" ></td> <td><img alt \"insert_screen_side_2.jpg\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_screen_side_2.jpg\" ></td> <td>Connect board with screen, and make the screen through shell</td> </tr> </table><br> <table> <tr> <td>Rotate the shell to make the TF card slot on the board is in the same direction as the SiPEED logo on the shell</td> <td>Align the two TypeC ports with the holes in the shell to prepare for inserting the board into the shell</td> <td>Press where the arrow points at, it's a bit difficult for first time inserting, make sure the two TypeC ports align with the holes. Insert board into the shell</td> </tr> <tr> <td><img alt \"insert_screen_direction_1\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_screen_direction_1.jpg\" ></td> <td><img alt \"insert_screen_direction_2\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_screen_direction_2.jpg\" ></td> <td><img alt \"insert_screen_direction_3\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_screen_direction_3.jpg\" ></td> </tr> </table><br> <table> <tr> <td><img alt \"insert_camera_interface\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_camera_interface.jpg\" ></td> <td><img alt \"insert_camera_interface_1\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_camera_interface_1.jpg\" ></td> <td>Bend not fold the camera cable through the hole on the board to connect to the connector</td> </tr> </table><br> <table> <tr> <td>Use the reserved double sided tape on the shell to fix the screen, the back panel is also fixed on the shell by double sided tape, and note that the reserved camera hole on the back panel and the M1s module should be in the same direction. </td> <td><img alt \"fix_screen\" src \"./../../../../zh/maix/m1s/other/assets/others/fix_screen.jpg\" ></td> <td><img alt \"fix_panel\" src \"./../../../../zh/maix/m1s/other/assets/others/fix_panel.jpg\" ></td> </tr> </table><br> Up to now we have finished installing shell. ### Opposite to the screen <table> <tr> <td><img alt \"opposite_screen\" src \"./../../../../zh/maix/m1s/other/assets/others/opposite_screen.jpg\" ></td> <td><img alt \"opposite_cam\" src \"./../../../../zh/maix/m1s/other/assets/others/opposite_cam.jpg\" ></td> <td> Connect camera and screen with board first, and camera should be on the M1s module</td> </tr> </table><br> <table> <tr> <td>Make the board through shell</td> <td>Then it should be like this</td> <td>Change the board direction to make the TF card slot on the board is in the same direction as the SiPEED logo on the shell</td> </tr> <tr> <td><img alt \"opposite_insert_screen_1\" src \"./../../../../zh/maix/m1s/other/assets/others/opposite_insert_screen_1.jpg\" ></td> <td><img alt \"opposite_insert_screen_2\" src \"./../../../../zh/maix/m1s/other/assets/others/opposite_insert_screen_2.jpg\" ></td> <td><img alt \"opposite_insert_screen_3\" src \"./../../../../zh/maix/m1s/other/assets/others/opposite_insert_screen_3.jpg\" ></td> </tr> </table><br> <table> <tr> <td>Align the two TypeC ports with the holes in the shell to prepare for inserting the board into the shell</td> <td>Press where the arrow points at, it's a bit difficult for first time inserting, make sure the two TypeC ports align with the holes. Insert board into the shell</td> </tr> <tr> <td><img alt \"insert_screen_direction_2\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_screen_direction_2.jpg\" ></td> <td><img alt \"insert_screen_direction_4\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_screen_direction_4.jpg\" ></td> </tr> </table><br> <table> <tr> <td colspan \"3\">Make the camera through the back panel, slide the panel to change the camera into the right position</td> </tr> <tr> <td><img alt \"opposite_fix_cam_1\" src \"./../../../../zh/maix/m1s/other/assets/others/opposite_fix_cam_1.jpg\" ></td> <td><img alt \"opposite_fix_cam_2\" src \"./../../../../zh/maix/m1s/other/assets/others/opposite_fix_cam_2.jpg\" ></td> <td><img alt \"opposite_fix_cam_3\" src \"./../../../../zh/maix/m1s/other/assets/others/opposite_fix_cam_3.jpg\" ></td> </tr> </table> Up to now we have finished installing shell. ![opposite_fix_screen](./../../../../zh/maix/m1s/other/assets/others/opposite_fix_screen.jpg) ## Remove shell First, use tweezers or other tools to remove the back panel of the fixed shell. ![disassemble_shell](./../../../../zh/maix/m1s/other/assets/others/disassemble_shell.jpg) Use tweezers to push this board out through the hole which is in the same direction as Logo on the shell <img src \"./../../../../zh/maix/m1s/other/assets/others/disassemble_hole.jpg\" alt \"disassemble_hole\" width \"45%\"> <img src \"./../../../../zh/maix/m1s/other/assets/others/disassemble_hole_1.jpg\" alt \"disassemble_hole_1\" width \"45%\"> Push on the metal panel of the screen to make the screen out of the shell. ![disassemble_remove_screen](./../../../../zh/maix/m1s/other/assets/others/disassemble_remove_screen.jpg) Now we have finished removing the shell."},"/hardware/en/maix/m1s/m1s_dock.html":{"title":"M1s DOCK","content":" title: M1s DOCK keywords: M1s DOCK ,BL808, M1s, bl808 update: date: 2022 11 15 version: v0.1 author: wonder content: Initialize Doc ## Summary Sipeed M1s Dock is a development board designed based on [Sipeed M1s module](./m1s_module.html)，routes interface like MIPI CSI、SPI LCD and FPC connector, to get rid of worries about connecting cable. Designed with the most minimal design, for customers to evaluate the module, or hobbyists to play directly, etc. Buy one: [Aliexpress](https://www.aliexpress.com/item/1005004970779483.html) <td><img alt \"m1s_dock.jpg\" src \"./../../../zh/maix/m1s/assets/m1s_dock/m1s_dock.jpg\" width \"45%\"></td> ## Video Video of M1s Dock and M0Sense：M1s Dock is before 3:15，and time after 3:15 is M0Sense. <iframe width \"560\" height \"315\" src \"https://www.youtube.com/embed/hkSAW42Evl4\" title \"M1s Dock\" frameborder \"0\" allow \"accelerometer; autoplay; clipboard write; encrypted media; gyroscope; picture in picture\" allowfullscreen></iframe> ## Features MainChip BL808 RISC V 480Mhz + NPU BLAI 100 Onboard USB to UART debugger Onboard screen interface (Optional 1.69 inch 240x280 capacitor touch screen) Onboard MIPI camera interface (Optional 2M solution camera) Support 2.4G WIFI / BT / BLE Onboard 1 analog microphone、1 LED、1 TF card slot Route USB OTG to USB Type C port ### Parameters <table> <thead> <tr> <th colspan \"2\" > M1s Dock </th> </tr> </thead> <tbody> <tr> <td rowspan \"8\" style \"white space:nowrap\">M1s Module</td> </tr> <tr> <td>Three RISC V CPUs：<br>· RV64GCV 480MHz <br>· RV32GCP 320MHz <br>· RV32EMC 160MHz</td> </tr> <tr> <td>AI NN general purpose hardware accelerator：<br>· BLAI 100, used for video/audio detection/identification，100GOPS hashrate</td> </tr> <tr> <td>768KB SRAM + 64MB UHS PSRAM</td> </tr> <tr> <td>Encode and Decode<br> MJPEG and H264(Baseline/Main)<br> 1920x1080@30fps + 640x480@30fps </td> </tr> <tr> <td>Interface：<br> Camera interface ：DVP and MIPI CSI<br> Display interface：SPI、DBI、DPI(RGB)</td> </tr> <tr> <td>Wireless：<br> Support Wi Fi 802.11 b/g/n<br> Support Bluetooth 5.x Dual mode(BT+BLE)<br> Support Wi Fi / BT co existence</td> </tr> <tr> <td>USB 2.0 HS OTG</td> </tr> <tr> <td rowspan \"5\" style \"white space:nowrap\">Onboard components</td> </tr> <tr> <td>Onboard USB to UART debugger (Used for uart communication and burn firmware)</td> </tr> <tr> <td>Onboard screen interface (Optional 1.69 inch 240x280 capacitor touch screen)</td> </tr> <tr> <td>Onboard MIPI camera interface (Optional 2M solution camera)</td> </tr> <tr> <td>Onboard 1 analog microphone、1 LED、1 TF card slot</td> </tr> <tr> <td rowspan \"5\" style \"white space:nowrap\"> Others </td> </tr> <tr> <td> 3D model file：<a href \"https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/5_3D_file\">Click me</a> </td> </tr> <tr> <td>External TYPE C PORT power supply requirements：<br>5V±10% 0.5A</td> </tr> <tr> <td>Temperature rise: &lt;30K</td> </tr> <tr> <td>Operating temperature: 10℃ ~ 65℃</td> </tr> </tbody> </table> ### Chip Cores Three cores in chip: M0，D0，LP。 M0 D0 LP T HEAD E907@320MHz T HEAD [C906](https://xrvm.com/cpu details?id 4056751997003636736)@480MHz T HEAD [E902](https://xrvm.com/cpu details?id 4056758197145440256)@160MHz ### Function block <img alt \"m1s_dock_function_block_top\" src \"./../../../zh/maix/m1s/assets/m1s_dock/m1s_dock_function_block_top.jpg\" width 20%> <img alt \"m1s_dock_function_block_top\" src \"./../../../zh/maix/m1s/assets/m1s_dock/m1s_dock_function_block_top.jpg\" width 20%> ### Dimenssion <img alt \"m1s_dock_size\" src \"./../../../zh/maix/m1s/assets/m1s_dock/m1s_dock_size.png\" width 45%> ### Pinmap <img alt \"m1s_doc_pin_map\" src \"./../../../zh/maix/m1s/assets/m1s_dock/m1s_doc_pin_map.png\" width 45%> ## Comparison Item Maix Bit ESP32 cam M1s Dock : : : : MainChip K210 ESP32 M1s(BL808) Camera 0.3MP DVP GC0328 2MP DVP OV2640 with flash LED 2MP MIPI OV2685(two side) with flash LED Screen 2.4 inch 320x240 1.68 inch 280x240 capacitive touch screen Audio I2S MEMS MIC Analog MEMS MIC + LineOut SD Card Slot SPI mode SPI mode · SDHC mode <br>· JTAG mode Key Reset <br> Boot Reset · Reset <br>· Boot <br>· User x 2 USB USB to Serial x 1 · USB to Dual Serial x 1 <br>· USB OTG HS Other 4P x 1.25mm connector（UART port） Pin · 2 x 18 pins <br>· bread board friendly 2 x 8 pins · 2 x 16 pins<br>· bread board friendly JTAG Optional TF2JTAG Shell Optional Size 25 x 53 mm 27 x 41 mm 27 x 55 mm ## Software <table> <thead> <tr> <th colspan \"2\" > M1s Dock </th> </tr> </thead> <tbody> <tr> <td>OS</td> <td>· Full support for FreeRTOS<br>· Basic support for Linux</td> </tr> <tr> <td>Developments</td> <td>· C SDK<br>· MaixHAL C <br>· PikaPython </td> </tr> <tr> <td>Burn Firmware</td> <td>· Burn from uart<br>· Virtual disk drag and drop burn</td> </tr> <tr> <td>AI Framework</td> <td> · Support BLAI accelerated inference engine with native SDK<br> · Suppory universal TinyMaix inference</td> </tr> <tr> <td>AI model store</td> <td>· Download from <a href \"https://maixhub.com/\">MaixHub</a>. Support Face detection and recognition, posture detection and gesture detection, etc.</td> </tr> <tr> <td>Sipeed examples</td> <td>· https://github.com/sipeed/M1s_BL808_example</td> </tr> </tbody> </table> ## Operators list <table> <thead> <tr> <th>Type</th> <th>Operators</th> <th>Applicable Subset Spec.</th> <th>Processor</th> </tr> </thead> <tbody> <tr> <td rowspan \"10\">Convolution</td> <td rowspan \"4\">Conv </td> <td>Kernel: 1x1,3x3,5x5,7x7</td> <td rowspan \"4\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td>Dilation: 1x1, 2x2</td> </tr> <tr> <td>Pad: same</td> </tr> <tr> <td rowspan \"4\">Depthwise Conv</td> <td>Kernel: 1x1,3x3 (5x5, 7x7 TBD)</td> <td rowspan \"4\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td>Dilation: 1x1 (2x2 TBD)</td> </tr> <tr> <td>Pad: same</td> </tr> <tr> <td rowspan \"2\">Transpose Conv</td> <td>Kernel: 3x3</td> <td rowspan \"2\">strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 2x2</td> </tr> <tr> <td rowspan \"4\">Pooling</td> <td rowspan \"2\">MaxPool (NPU TBD)</td> <td>Kerenl: 2x2</td> <td rowspan \"2\">DSP</td> </tr> <tr> <td>Stride: 2x2</td> </tr> <tr> <td rowspan \"2\">MaxPool</td> <td>Kerenl: 3x3</td> <td rowspan \"2\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td rowspan \"2\">Activation</td> <td>Relu</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Relu 6</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td rowspan \"5\">Other processing</td> <td>BatchNormalization</td> <td>fused with conv</td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Add (shortcut)</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Concat (route)</td> <td>Channel wise (AXIS 3 in BHWC)</td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Fully Connected</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Upsample</td> <td>Nearest</td> <td>:strong:<code>NPU</code></td> </tr> </tbody> </table> ## Links [Board Datasheet](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/1_Specification) [Board Schematic](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/2_Schematic) [Board Bit map](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/3_Bit_number_map) [Board Dimensions](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/4_Dimensional_drawing) [3D model file](https://dl.sipeed.com/shareURL/MAIX/M1s_Dock/M1s/5_3D_file) [Board Chip manual](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/6_Chip_Manual) [Capacitive touch screen manual](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/6_Chip_Manual/touch_screen) [Bouffalolab official documents](https://dev.bouffalolab.com/home/) [BL808 DataSheet](https://github.com/bouffalolab/bl_docs/tree/main/BL808_DS/en) (github) [BL808 Reference Manual](https://github.com/bouffalolab/bl_docs/tree/main/BL808_RM/en) (github) [Sipeed SDK](https://github.com/sipeed/M1s_BL808_SDK) (Github) [Sipeed Examples](https://github.com/sipeed/M1s_BL808_example)（Github） [Bouffalolab SDK](https://github.com/bouffalolab/bouffalo_sdk)（Github） [Linux SDK](https://github.com/sipeed/M1s_BL808_Linux_SDK)（Github） [Telegram](https://t.me/sipeed) [Twitter](https://twitter.com/SipeedIO) [Reddit](https://www.reddit.com/r/Sipeed/) [Online model platform](https://maixhub.com/) ## Attention <table> <tr> <th>Item</th> <th>Attention</th> </tr> <tr> <td>Electrostatic protection</td> <td>Avoid static electricity hitting the PCBA. Release the static electricity of hand before touching the PCBA</td> </tr> <tr> <td>Operating voltage</td> <td>The operating voltage of each GPIO has been marked in the schematic. Please do not allow the actual operating voltage of the GPIO to exceed the rated value, otherwise the PCBA will be permanently damaged</td> </tr> <tr> <td>FPC Connector</td> <td>When connecting FPC cable，make sure that the row is completely inserted into the row without bias</td> </tr> <tr> <td>Plug and Remove</td> <td>Power off completely before plugging or removing it</td> </tr> <tr> <td>Avoid short circuit</td> <td>During the power on, avoid any liquid or metal touching PCBA components，otherwise the PCBA will be damaged even burn</td> </tr> </table> ## Contact M1s Dock meets different needs of customers in various scenarios. Please contact email [support@sipeed.com](support@sipeed.com) for technical support and business cooperation"},"/hardware/en/maix/core_module.html":{"title":"Sipeed M1/M1W","content":" title: Sipeed M1/M1W keywords: maixpy, k210, AIOT, 边缘计算, M1/M1W desc: maixpy Sipeed M1/M1W ## M1/M1W M1/M1W模块是基于嘉楠堪智科技的边缘智能计算芯片 K210 (RISC V架构) 设计的一款AIOT模块。主控芯片内置64位双核高性能低功耗处理器，每个核都有浮点运算单元(FPU) ,具备卷积人工神经网络硬件加速器(KPU)和快速傅里叶变换加速器(FFT)、搭载现场可编程IO阵列(FPIOA)，支持多种主流Al编程框架。M1W模块内置标准802.11 b/g/n协议的ESP8285 WiFi芯片，可让模块轻松联网。 ![M1/M1W](./assets/m1_m1w/M1_Dan.png) ## 应用 智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等; 医学行业应用，如辅助诊断，医学图像识别; 智能工业应用，如工业机械，智能分拣，电气设备监控等; 教育机器人，智能互动平台，教育效率检查等教育应用; 农业应用，如农业监测，病虫害监测，自动控制等 ## M1/M1W 参数 M1/M1W Al模块系统主要由电源(3 Channel DC DC)、Flash芯片(16M)电路、K210芯片和WiFi芯片四部分组成。K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM。模块在Al机器视觉、听觉性能方便表现突出，芯片总算力可达1TOPS，芯片内置多种硬件加速单元(KPU、FPU，FFT等)，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。M1W模块嵌入无线WiFi功能，可轻松实现联网控制。 <p><img loading \"M1/M1W\" src \"./assets/m1_m1w/M1_vs_M1W.png\" width 500 ></p> <p><img loading \"M1/M1W\" src \"./assets/m1_m1w/M1_pin.png\" width 500 ></p> <p><img loading \"M1/M1W\" src \"./assets/m1_m1w/M1W_2.png\" width 500 ></p> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 芯片基本参数</th> </tr> </thead> <tbody> <tr> <td>内核</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>主频</td> <td>400MHz （可超频至600MHz）</td> </tr> <tr> <td>SRAM</td> <td>内置8M Byte</td> </tr> <tr> <td>图像识别</td> <td>QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>语音识别</td> <td>麦克风阵列(8mics)</td> </tr> <tr> <td>神经网络模型</td> <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2</td> </tr> <tr> <td>深度学习框架</td> <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td> </tr> <tr> <td>外设</td> <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td> </tr> <tr> <td>视频处理</td> <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754 2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">模块软件</th> </tr> </thead> <tr> <td>操作系统</td><td>FreeRtos and Standrad development ki</td> </tr> <tr> <td>编程语言</td><td>MicroPython</td> </tr> <tr> <td>机器视觉</td><td>支持卷积神经网络</td> </tr> <tr> <td>机器听觉</td><td>高性能音频处理器(APU)</td> </tr> <tr> <td>开发环境</td><td>串口终端、MaixPy IDE</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">模块硬件</th> </tr> </thead> <tr> <td>尺寸</td><td>25.4*25.4*3.3mm</td> </tr> <tr> <td>引脚</td><td>72 PIN全引脚引出</td> </tr> <tr> <td>供电电压</td><td>5.0V @ 300mA（供电电流需大于300mA)</td> </tr> <tr> <td>工作温度</td><td> 30°C ~85°C</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">Wi Fi功能参数</th> </tr> </thead> <tr> <td>主控</td> <td>ESP8285</td> </tr> <tr> <td>无线标准</td><td>802.11 b/g/n</td> </tr> <tr> <td>频率范围</td><td>2400Mhz 2483.5Mhz</td> </tr> <tr> <td>天线</td><td>标准IPEX接口天线</td> </tr> <tr> <td>Wi Fi模式</td><td>支持Station / SoftAP /SoftAP+Station</td> </tr> </table> > 为了让Al模块能应用于更多场合，Sipeed团队还推出了无WiFi功能版本的M1模块，如果用户无需使用无线联网的功能，可以选择我们的M1模块。M1模块和M1W模块的AI功能一致，使用方法基本相同，主要区别就是M1W模块比M1模块多了WiFi功能。 ## 资料下载 芯片 K210 Datasheet: [Kendryte 官网](https://canaan creative.com/) M1W 资料下载: [dl.sipeed.com](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed M1&M1W) ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maix/M1n.html":{"title":"Sipeed M1n","content":" title: Sipeed M1n keywords: maixpy, k210, AIOT, 边缘计算, M1n desc: maixpy Sipeed M1/M1W ## M1n SiPEEDM1n是基于基于嘉楠堪智科技的边缘智能计算芯片K210(RISC v架构64位双核)设计的一款AIOT开发板。板载DVP双摄像头接口、Flash、并把大部分IO通过金手指方式引出，模块设计小巧精致、布局走线合理规范，用户可直接应用于商用产品，也可以通过转接板对此模块进行开发。 ![M1n](./assets/m1n/M1n_1.png) ## 应用 智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等; 医学行业应用，如辅助诊断，医学图像识别; 智能工业应用，如工业机械，智能分拣，电气设备监控等; 教育机器人，智能互动平台，教育效率检查等教育应用; 农业应用，如农业监测，病虫害监测，自动控制等 ## M1n 参数 M1n模块以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPs ,可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。 <p><img loading \"M1/M1W\" src \"./assets/m1n/M1n.png\" width 500 ></p> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 芯片基本参数</th> </tr> </thead> <tbody> <tr> <td>内核</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>主频</td> <td>400MHz （可超频至600MHz）</td> </tr> <tr> <td>SRAM</td> <td>内置8M Byte</td> </tr> <tr> <td>图像识别</td> <td>QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>语音识别</td> <td>麦克风阵列(8mics)</td> </tr> <tr> <td>网络模型</td> <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td> </tr> <tr> <td>深度学习框架</td> <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td> </tr> <tr> <td>外设</td> <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td> </tr> <tr> <td>视频处理</td> <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754 2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">模块软件</th> </tr> </thead> <tr> <td>操作系统</td><td>FreeRtos and Standrad development ki</td> </tr> <tr> <td>编程语言</td><td>MicroPython</td> </tr> <tr> <td>机器视觉</td><td>支持卷积神经网络</td> </tr> <tr> <td>机器听觉</td><td>高性能音频处理器(APU)</td> </tr> <tr> <td>开发环境</td><td>串口终端、MaixPy IDE</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">模块硬件</th> </tr> </thead> <tr> <td>尺寸</td><td>22.0*25.0mm</td> </tr> <tr> <td>引脚</td><td>部分引脚金手指引出</td> </tr> <tr> <td>供电电压</td><td>5.0V @ 300mA（供电电流需大于300mA)</td> </tr> <tr> <td>工作温度</td><td> 30°C ~85°C</td> </tr> </table> ## 资料下载 芯片 K210 Datasheet: [Kendryte 官网](https://canaan creative.com/) M1n 资料下载: [Click me](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed M1n) M1n 原理图下载：[Sipeed M1n Datasheet V1.0.pdf](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed M1n/Sipeed%20M1n%20Datasheet%20V1.0.pdf) ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maix/modules_spmod/spmod_eink.html":{"title":"SPMOD - Eink","content":"# SPMOD Eink ## Overview <img src \"../../assets/spmod/spmod_eink/sp_eink.png\" alt \"XXX\" style \"zoom:40%;\" /> SPMOD_Eink(E paper display module) uses GDEW0154M09 E paper display. ## SPMOD Eink Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Connect to the screen through the SP MOD SPI interface E paper display module：GDEW0154M09 is a 1.54\" E paper display，with SPI interface，and has 24P FPC(0.5mm pitch). Support 1 bit Black/Write full display capabilities Display Resolution：200x200 Size：35*30*3.8mm ### GDEW0154M09 E paper display Introduction Features： Supply voltage of external power supply 2.3V~3.6V Supply current of external power supply 1~3mA Range of working temperature 40℃~85℃ Sleep Status of Current <5uA Screen Size 1.54 inch Active Area 27.6mm*27.6mm Display Resolution 200*200 Color 1 bit Black/Write full display capabilities interface 24P FPC (0.5mm pitch) > An integrated circuit contains gate buffer, source buffer, interface, timing control logic, oscillator, DC DC, SRAM, LUT, VCOM, and border are supplied with each panel. ### SPMOD_Eink pin description ： Pin Name Type Description 1 GND G Ground 2 CS I Chip Select input pin 3 D/C I Data/Command control pin 4 RES I Reset (active low) 5 3V3 V Power supply(3.3V) 6 SCK I SPI clock pin 7 SI I/O Master Out Slave In 8 BSY O Busy status output pin <img src \"../../assets/spmod/spmod_eink/sp_eink_back.png\" height \"300\" /> Mode of connection:： MCU:FUN(IO) SP_Eink : : : : GPIOHS(IO_7) RES SPIOHS(IO_15) D/C SPIOHS(IO_20) CS SPI:SCK(IO_21) SCK SPI:MOSI(IO_8) SI GPIOHS(IO_6) BSY 2.3 3.6V 3.3V GND GND <img src \"../../assets/spmod/spmod_eink/connection.png\" height \"250\"> ### AT instruction list Instruction description : : : : 0x10 start transport b/w data 0x13 start transport r/w data 0x12 refresh data to screen *See [GDEW0154M09.pdf](https://cn.dl.sipeed.com/shareURL/MAIX/HDK/sp_mod/sp_eink) for more information* ## Usage * Process 1.initializatin 2.create an image and fill it 3.send image and refresh ### C： ```c spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0); fpioa_set_function(SPI_Eink_CS_PIN_NUM, FUNC_SPI1_SS0); // SPI_Eink_CS_PIN_NUM: 20; fpioa_set_function(SPI_Eink_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_Eink_SCK_PIN_NUM: 21; fpioa_set_function(SPI_Eink_MOSI_PIN_NUM, FUNC_SPI1_D0); // SPI_Eink_MOSI_PIN_NUM: 8; fpioa_set_function(SPI_Eink_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_DC_GPIO_NUM); // SPI_Eink_DC_PIN_NUM: 21; fpioa_set_function(SPI_Eink_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_RST_GPIO_NUM); // SPI_Eink_RST_PIN_NUM: 7; fpioa_set_function(SPI_Eink_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_BL_GPIO_NUM); // SPI_Eink_BL_PIN_NUM: 6; gpiohs_set_drive_mode(SPI_Eink_DC_GPIO_NUM, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(SPI_Eink_RST_GPIO_NUM, GPIO_DM_OUTPUT); gpiohs_set_pin(SPI_Eink_DC_GPIO_NUM, GPIO_PV_HIGH); gpiohs_set_pin(SPI_Eink_RST_GPIO_NUM, GPIO_PV_HIGH); gpiohs_set_drive_mode(SPI_Eink_BL_PIN_NUM, GPIO_DM_INPUT_PULL_UP); gpiohs_set_pin_edge(SPI_Eink_BL_PIN_NUM, GPIO_PE_BOTH); EPD_DisplayInit(); //EPD init //Paint initialization Paint_NewImage(BlackImage, EPD_WIDTH, EPD_HEIGHT, 270, WHITE); //Set screen size and display orientation Paint_SelectImage(BlackImage); //Set the virtual canvas data storage location Paint_Clear(WHITE); //clear paint Paint_DrawString_EN(0, 0, \"sipeed\", &Font8, WHITE, BLACK); //5*8 Paint_DrawString_EN(0, 10, \"sipeed\", &Font12, WHITE, BLACK); //7*12 Paint_DrawString_EN(0, 25, \"sipeed\", &Font16, WHITE, BLACK); //11*16 Paint_DrawString_EN(0, 45, \"sipeed\", &Font20, WHITE, BLACK); //14*20 Paint_DrawString_EN(0, 80, \"sipeed\", &Font24, WHITE, BLACK); //17*24 EPD_FullDisplay(BlackImage, BlackImage, 0); //display image ``` ### MaixPy： ```python spi1 SPI(SPI.SPI1, mode SPI.MODE_MASTER, baudrate 600 * 1000, polarity 0, phase 0, bits 8, firstbit SPI.MSB, sck 21, mosi 8) fm.register(20, fm.fpioa.GPIOHS20, force True) # SPI_Eink_SS_PIN_NUM: 20; fm.register(15, fm.fpioa.GPIOHS15, force True) # SPI_Eink_DC_PIN_NUM: 15; fm.register(6, fm.fpioa.GPIOHS6, force True) # SPI_Eink_BUSY_PIN_NUM: 6; fm.register(7, fm.fpioa.GPIOHS7, force True) # SPI_Eink_RST_PIN_NUM: 7; cs GPIO(GPIO.GPIOHS20, GPIO.OUT) dc GPIO(GPIO.GPIOHS15, GPIO.OUT) busy GPIO(GPIO.GPIOHS6, GPIO.IN, GPIO.PULL_DOWN) rst GPIO(GPIO.GPIOHS7, GPIO.OUT) epd SPEink(spi1, cs, dc, rst, busy, SPEink_WIDTH, SPEink_HEIGHT, SPEink_ROTATION) epd.init() img image.Image() img img.resize(200, 200) img.draw_line(0, 0, 100, 100) epd.display(img) ``` ### Runtime environments: Language Board SDK/Firmware version : : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 *The MaixPy firmware is recommended to compile from the latest source* ### Result * C <img src \"../../assets/spmod/spmod_eink/sp_eink_c.png\" height \"250\" /> * MaixPy <img src \"../../assets/spmod/spmod_eink/sp_eink_py.png\" height \"250\" /> ### Transplant The following parameters need to be modified * C ```c // board_config.h #define SPI_INDEX 1 #define SPI_SCLK_RATE 600 * 1000 #define SPI_CHIP_SELECT_NSS 0 //SPI_CHIP_SELECT_0 #define SPI_Eink_CS_PIN_NUM 20 #define SPI_Eink_SCK_PIN_NUM 21 #define SPI_Eink_MOSI_PIN_NUM 8 #define SPI_Eink_DC_PIN_NUM 15 #define SPI_Eink_BL_PIN_NUM 6 #define SPI_Eink_RST_PIN_NUM 7 #define SPI_Eink_DC_GPIO_NUM 15 #define SPI_Eink_BL_GPIO_NUM 6 #define SPI_Eink_RST_GPIO_NUM 7 ``` * MaixPy ```python ################### config ################### SPI_Eink_NUM SPI.SPI1 SPI_Eink_DC_PIN_NUM const(15) SPI_Eink_BUSY_PIN_NUM const(6) SPI_Eink_RST_PIN_NUM const(7) SPI_Eink_CS_PIN_NUM const(20) SPI_Eink_SCK_PIN_NUM const(21) SPI_Eink_MOSI_PIN_NUM const(8) SPI_Eink_FREQ_KHZ const(600) ############################################## ## Outlook SPMOD_Eink Size drawing: <img src \"../../assets/spmod/spmod_eink/sipeed_spmod_eink.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [support@sipeed.com](mailto:support@sipeed.com) Telgram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_extender.html":{"title":"SPMOD - Extender","content":"# SPMOD Extender ## Overview <img src \"../../assets/spmod/spmod_extender/sp_extender.png\" align \"right\" width \"\" height \"300\" /> SPMOD_Extender(8PIN SP MOD Expander) ## SPMOD Extender Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Using SP Extender to divide SP MOD into four interface，including three Two wire SP MOD interface and a Four wire SP MOD interface Size:35.0\\*20.0\\*1.6mm ## Introduction Features: Two wire SP MOD interface*3 Connect to the D0 and D1 on the SP MOD, Used as UART interface (Connect at most one device) or I2C interface(Connect at most three device), can also be used as two independent GPIO Four wire SP MOD interface Connect to the D2 D5 on the SP MOD, Usually used as SPI interface, can also be used as four independent GPIO Supply voltage of external power supply Depends on connected modules Supply current of external power supply Depends on the working conditions of the module, usually less than 1000mA Range of working temperature 40℃ ~ 85℃ ## Outlook SPMOD_Extender Size drawing: <img src \"../../assets/spmod/spmod_extender/sipeed_spmod_extender.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [support@sipeed.com](mailto:support@sipeed.com) Telegram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_tof.html":{"title":"SPMOD - TOF","content":"# SPMOD TOF ## Overview <img src \"../../assets/spmod/spmod_tof/sp_tof.png\" style \"padding right:100px;\" align \"right\" width \"\" height \"500\" /> SPMOD_TOF(TOF module) uses VL53L0X . ## SPMOD TOF Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Using SP MOD I2C to communicate with TOF module ToF module:The VL53L0X sensor used in this module is an I2C interface and a long distance single point flight time measurement (ToF) sensor. It has high performance and high reliability, With the longest distance of 4m and the highest refresh rate of 50Hz With the red laser pointer, the laser is activated through XSHUT and connected by SP_MOD. Size:25.0\\*10\\*3.15mm ### VL53L0X Introduction: Features: Max ranging distance 4000mm Refresh rate 50Hz Measuring angle 27° Communication Interface I2C Range of working temperature 40℃ 80℃ Sleep Status of Current 5uA Supply voltage of external power supply 2.8~3.5V Supply current of external power supply Depends on the working conditions of the module, usually less than 20mA ### SPMOD_TOF pin description: Pin Name Type Description 1 GND G Ground 2 IRQ I Interrupt input pin, connected to GPIO1 of VL53L0X 3 NC NC Not connected 4 SDA I/O Receive data signal 5 3V3 V Power supply(3.3V) 6 NC NC Not connected 7 SHT I Xshutdown pin(active low) 8 SCL I Transmit clock signal <img src \"../../assets/spmod/spmod_tof/back.png\" height \"300\" /> Mode of connection: MCU:FUN(IO) SP_RFID : : : : I2C:SDA(IO_7) SDA NC(IO_15) NC NC(IO_20) IRQ NC(IO_21) NC GPIOHS(IO_8) SHT I2C:SCL(IO_6) SCL 2.8~3.5V 3.3V GND GND <img src \"../../assets/spmod/spmod_tof/connection.png\" height \"250\"> ## Usage * Process 1. Initialization 2. Adjust(option) 3. Get distance ### C: ```c //set io mux fpioa_set_function(VL53L0X_SCL, FUNC_I2C0_SCLK + VL53L0X_I2C_DEVICE * 2); fpioa_set_function(VL53L0X_SDA, FUNC_I2C0_SDA + VL53L0X_I2C_DEVICE * 2); fpioa_set_function(VL53L0X_SHT, FUNC_GPIOHS0 + VL53L0X_SHT); gpiohs_set_drive_mode(VL53L0X_SHT, GPIO_DM_OUTPUT); //i2c init maix_i2c_init(VL53L0X_I2C_DEVICE, 7, VL53L0X_I2C_FREQ_KHZ * 1000); while (vl53l0x_init(&vl53l0x_dev)) { printf(\"VL53L0X init error!!!\\r\\n\"); msleep(500); } printf(\"VL53L0X init success!\\r\\n\"); // adjusting printf(\"VL53L0X adjusting\\r\\n\"); vl53l0x_calibration_test(&vl53l0x_dev); // get distance printf(\"VL53L0X start work\\r\\n\"); vl53l0x_general_test(&vl53l0x_dev); ``` ### MaixPy: ```python 工作电压 2.6V~3.5V (选用红色激光时： 2.8V~3.3V) fm.register(VL53L0X_SHT, fm.fpioa.GPIOHS0, force True) XSHUT GPIO(GPIO.GPIOHS0, GPIO.OUT) i2c I2C(VL53L0X_I2C_NUM, freq VL53L0X_FREQ, scl VL53L0X_SCL, sda VL53L0X_SDA) # create obj and read distance \t tof VL53L0X(i2c) \t while True: mm tof.read() utime.sleep_ms(100) print(mm) ``` ## Runtime enviroments Language Boards SDK/firmware version : : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 ### Result * C <img src \"../../assets/spmod/spmod_tof/log_c.png\" height \"200\" /> * MaixPy [None] ## Transplant Modify the following parameters to fit other K210 boards. * C ```c // board_config.h #define VL53L0X_I2C_DEVICE 0 // i2c device number #define VL53L0X_I2C_FREQ_KHZ 100 // i2c frequency #define VL53L0X_SCL 6 // scl #define VL53L0X_SDA 7 // sda #define VL53L0X_SHT 8 // sht ``` * MaixPy ```python ################### config ################### VL53L0X_I2C_NUM const(I2C.I2C0) VL53L0X_FREQ const(100000) VL53L0X_SCL const(6) VL53L0X_SDA const(7) VL53L0X_SHT const(8) ############################################## ``` ## Outlook SPMOD_TOF Size drawing: <img src \"../../assets/spmod/spmod_tof/sipeed_spmod_tof.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [support@sipeed.com](mailto:support@sipeed.com) Telegram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_joystick.html":{"title":"SPMOD - JoyStick","content":"# SPMOD JoyStick ## Overview <img src \"../../assets/spmod/spmod_joystick/sp_joystick.png\" align \"right\" width \"\" height \"500\" /> SPMOD_JoyStick (JoyStick module). ## SPMOD JoyStick Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Connect to the board through the SP MOD SPI interface 7.2V~9V DC can be connected via external adapter，power the vibration motor of the handle Built in step up circuit，easy to drive the handle Compatible with PSX/PS2 Size:35.0\\*20.0\\*13.3mm ### SPMOD_JoyStick pin description: Pin Name Type Description 1 GND G Ground 2 CS I Chip Select input pin 3 SO I/O Master In Slave Out 4 NC NC Not connected 5 3V3 V Power supply(3.3V) 6 SCK I SPI clock pin 7 SI I/O Master Out Slave In 8 ACK O data ready output pin <img src \"\" width \"500\" /> ## Introduction 待更新 ## Outlook SPMOD_JoyStick Size drawing: <img src \"../../assets/spmod/spmod_joystick/sipeed_spmod_joystick.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [support@sipeed.com](mailto:support@sipeed.com) Telegram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_lora.html":{"title":"SPMOD - LoRa","content":"# SPMOD LoRa ## Overview <img src \"../../assets/spmod/spmod_lora/sp_lora.png\" align \"right\" width \"\" height \"500\" /> SPMOD_LoRa(LoRa Module) uses M XL8 module. ## SPMOD LoRa Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Using SP MOD SPI to communicate with LoRa module LoRa module:The SP_LoRa module uses M XL8 module with LoRaTM modem and LoRa module with adjustable power amplifier. It has high performance and reliability and is connected by SP_MOD. 370MHz 1200MHz, Maximum 20dBm (100mW) continuous transmit power Size:25.0\\*10.0\\*4.3mm ### M XL8 SX1276 LoRa module Introduction Features： Working frequency 370MHz 1200Mhz Transmission power 20dBm(Maximum) Communication interface SPI Supply voltage of external power supply 1.8V~6.3V Range of working temperature 40℃ 80℃ antenna external，IPEX Reception Sensitivity 148dbm RSSI value 127dB Maximum link budget 168dB Send and receive status of current 9.9mA Sleep status of current 50nA Modulation method FSK, GFSK, MSK, GMSK, LoRaTM及OOK > Built in LoRaTM modem, built in CRC, inherited +12dBm adjustable PA+LNA ### SPMOD_lora pin description: Pin Name Type Description 1 GND G Ground 2 CS I/O Chip Select input pin 3 SO I/O Master In Slave Out 4 RST I Reset (active low) 5 3V3 V Power supply(3.3V) 6 SCK I SPI clock pin 7 SI I/O Master Out Slave In 8 IRQ I Connected to DIO0 of the module,，Programmable decision function <img src \"../../assets/spmod/spmod_lora/back.png\" width \"300\" /> Mode of communication MCU:FUN(IO) SP_LCD : : : : GPIOHS7(IO_7) RST SPI:MISO(IO_15) SO SPI:SS0(IO_20) CS SPI:SCK(IO_21) SCK SPI:MOSI(IO_8) SI GPIOH(IO_6) IRQ 1.8 6.3V 3.3V GND GND <img src \"../../assets/spmod/spmod_lora//connection.png\" height \"250\"> ## Usage * Process 1. Create the LoRa object and initialize it 2. Send or receive data ### C : ```c fpioa_set_function(SPI_LoRa_SX127X_CS_PIN_NUM, FUNC_SPI1_SS0); // CS: 20 fpioa_set_function(SPI_LoRa_SX127X_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SCLK: 21 fpioa_set_function(SPI_LoRa_SX127X_MOSI_PIN_NUM, FUNC_SPI1_D0); // MOSI: 8 fpioa_set_function(SPI_LoRa_SX127X_MISO_PIN_NUM, FUNC_SPI1_D1); // MISO: 15 fpioa_set_function(SPI_LoRa_SX127X_IRQ_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_IQR_GPIO_NUM); // IQR: 6 fpioa_set_function(SPI_LoRa_SX127X_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_RST_GPIO_NUM); // RST: 7 spi_init(SPI_DEVICE_1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0); sx1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LoRa_SF_8, SX1278_LoRa_BW_20_8KHZ, 10); if (master 1) { printf(\" MASTER \\r\\n\"); ret sx1278_LoRaEntryTx(&SX1278, 16, 2000); } else { printf(\" SALAVE \\r\\n\"); ret sx1278_LoRaEntryRx(&SX1278, 16, 2000); } ``` ### MaixPy : ```python fm.register(20, fm.fpioa.GPIOHS20, force True) # RST fm.register(7, fm.fpioa.GPIOHS7, force True) # CS # set gpiohs work mode to output mode cs GPIO(GPIO.GPIOHS20, GPIO.OUT) rst GPIO(GPIO.GPIOHS7, GPIO.IN) # The other pins are configured at SPI initialization time spi1 SPI(SPI.SPI1, mode SPI.MODE_MASTER, baudrate 100 * 1000, polarity 0, phase 0, bits 8, firstbit SPI.MSB, sck 21, mosi 8, miso 15) lora SX127x(spi spi1, pin_ss cs) lora.init() #######receiver########### receive(lora) ########sender########### # send(lora) ``` ### Runtime environments: Language Board SDK/Firmware version : : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 *The MaixPy firmware is recommended to compile from the latest source* ### Result * C <center class \"third\"> \t <img src \"../../assets/spmod/spmod_lora/lora_send_log_c.png\" height \"250\"/><img src \"../../assets/spmod/spmod_lora/lora_recv_log_c.png\" height \"250\"/> </center> * MaixPy <center class \"third\"> \t <img src \"../../assets/spmod/spmod_lora/lora_send_log.png\" height \"250\"/><img src \"../../assets/spmod/spmod_lora/lora_recv_log.png\" height \"250\"/> </center> ### Transplant The following parameters need to be modified * C ```c // board_config.h #define SPI_INDEX 1 #define SPI_SCLK_RATE 600*1000 #define SPI_CHIP_SELECT_NSS 0//SPI_CHIP_SELECT_0 #define SPI_LoRa_SX127X_CS_PIN_NUM 20 #define SPI_LoRa_SX127X_SCK_PIN_NUM 21 #define SPI_LoRa_SX127X_MOSI_PIN_NUM 8 #define SPI_LoRa_SX127X_MISO_PIN_NUM 15 #define SPI_LoRa_SX127X_IRQ_PIN_NUM 6 #define SPI_LoRa_SX127X_RST_PIN_NUM 7 #define SPI_LoRa_SX127X_IQR_GPIO_NUM 6 #define SPI_LoRa_SX127X_RST_GPIO_NUM 7 ``` * MaixPy ```python ################### config ################### LoRa_RST const(20) LoRa_CS const(7) LoRa_SPI_SCK const(21) LoRa_SPI_MOSI const(8) LoRa_SPI_MISO const(15) LoRa_SPI_NUM SPI.SPI1 LoRa_SPI_FREQ_KHZ const(100) ############################################## ``` ## Outlook SPMOD_LoRa Size drawing: <img src \"../../assets/spmod/spmod_lora/sipeed_spmod_lora.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [support@sipeed.com](mailto:support@sipeed.com) Telegram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_weather.html":{"title":"SPMOD - Weather","content":"# SPMOD Weather ## Overview <img src \"../../assets/spmod/spmod_weather/demo.gif\" align \"right\" width \"500\" /> SPMOD Weather (Weather station module), Integrated Magnetic sensor (QMC7983) and Humidity sensor (BME280) ## SPMOD Weather Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN ),unified MaixPy board interface Connect to the board through the SP MOD I2C interface Magnetic sensor: QMC7983 is a 3 axis single chip magnetic sensor integrated with AMR and ASIC, I2C interface with standard mode and rapid mode,Stable sensitivity in a large operating temperature range, low power consumption (75uA). Sensitivity: ±30 Gauss Humidity sensor: BME280 is a humidity sensor that can measure relative humidity, barometric pressure and ambient temperature Size:25.0\\*10\\*2.9mm ## Sensor Introduction: Magnetic sensor QMC7983 Supply voltage of external power supply 2.6V~3.6V Supply current of external power supply 70uA Sleep Status of Current <1uA Sensitivity ±30 Gauss humidity sensor LSB/mG RMS Noise 2 mG Interface I2C,default address 0x2C (Select resistance adjustment) Humidity sensor BME280 Supply voltage of external power supply 1.71V~3.6V Supply current of external power supply <633uA Sleep Status of Current <5uA Humidity sensor： Response time（𝜏63％） 1s Accuracy tolerance ±3％ relative humidity Hysteresis < 2％ relative humidity Pressure sensor： RMS Noise 0.2 Pa(equiv. to 1.7cm) Temperature coefficient offset ±1.5 Pa/K(equiv. to ±12.6cm at 1 °C temperature change) Interface I2C,default address 0x76 Select resistance adjustment) ### SPMOD_Weather pin description : Pin Name Type Description 1 GND G Ground 2 NC NC Not connected 3 NC NC Not connected 4 SDA I/O Receive data signal 5 3V3 V Power supply(3.3V) 6 NC NC Not connected 7 NC NC Not connected 8 SCL I Transmit clock signal <img src \"../../assets/spmod/spmod_weather/back.png\" width \"300\" /> ## Mode of connection: MCU:FUN(IO) SP_RFID : : : : I2C:SDA(IO_7) SDA NC(IO_15) NC NC(IO_20) IRQ NC(IO_21) NC GPIOHS(IO_8) SHT I2C:SCL(IO_6) SCL 2.8~3.5V 3.3V GND GND <img src \"../../assets/spmod/spmod_weather/connection.png\" height \"250\"> ## Usage * Process 1. Send AT instruction 2. Receive the reply 3. Determines whether the setup was successful ### C: ```c fpioa_set_function(Weather_SCL, FUNC_I2C0_SCLK + Weather_I2C_DEVICE * 2); // Weather_SCL: 6; fpioa_set_function(Weather_SDA, FUNC_I2C0_SDA + Weather_I2C_DEVICE * 2); // Weather_SDA: 7; maix_i2c_init(Weather_I2C_DEVICE, 7, 400000); // Weather_I2C_DEVICE: 0; rslt qmc_init(); // Magnetic sensor QMC7983 init rslt bme280_init(&dev); // Temperature, humidity and pressure sensors BME280 init stream_sensor_data_normal_mode(&dev); // read and print sensor data ``` ### MaixPy: ```python i2c_bus I2C(I2C.I2C0, freq 100*1000, scl 6, sda 7) # scl: io_6, sda: io_7 weather SPWeather(i2c i2c_bus) # create sp_weather while 1: time.sleep_ms(500) print(weather.qmc_read_xyz) # QMC7983 read data print(weather.bme_values) # BME280 read data ``` ## Runtime environments: Language Board SDK/Firmware version : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 ## Result * C <img src \"../../assets/spmod/spmod_weather/log_c.png\" height \"200\"> * MaixPy <img src \"../../assets/spmod/spmod_weather/log_py.png\" height \"200\"> ## Outlook SPMOD_Weather Size drawing: <img src \"../../assets/spmod/spmod_weather/sipeed_spmod_weather.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [support@sipeed.com](mailto:support@sipeed.com) Telegram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_grove.html":{"title":"SPMOD - Grove","content":"# SPMOD Grove ## Overview <img src \"../../assets/spmod/spmod_grove/sp_grove.png\" align \"right\" width \"\" height \"400\" /> SPMOD_Grove(GROVE module) ## SPMOD Grove Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Ass an Expansion board, it povides three standard Grove interfaces. All data cables are provide external pull ups. The power supply can handle up to 1000mA Size:35.0\\*10.0\\*2.1mm ## Introduction Features: Grove connector (HY 2.0mm 4P connector)*3 Used to connect Grove 4*2 pin，2.54mm pitch: *1 Used to connect with SP MOD interface Supply voltage of external power supply Depends on connected modules Supply current of external power supply Depends on the working conditions of the module, usually less than 1000mA Range of working temperature 30℃ ~ 85℃ ## Outlook SPMOD_Grove Size drawing: <img src \"../../assets/spmod/spmod_grove/sipeed_spmod_grove.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [support@sipeed.com](mailto:support@sipeed.com) Telegram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_lcd1.14.html":{"title":"SPMOD - LCD 1.14","content":"# SPMOD LCD 1.14 ## Outline <img src \"../../assets/spmod/spmod_lcd1.14//sp_lcd.png\" align \"right\" width \"\" height \"500\" /> SPMOD_LCD1.14(1.14 inch LCD) uses ST7735S TFT LCD. ## SPMOD LCD1.14 Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Using common LCD driver IC ST7735S(4 wire SPI communicate) Display Resolution:240\\*135 Size:35.0\\*20.0mm ### ST7735S TFT LCD Introduction Features： Supply voltage of external power supply 2.5V~4.8V Supply current of external power supply <20mA Range of working temperature 30℃ ~ 85℃ Sleep Status of Current <0.1mA Screen Size 1.14 inch Active Area 1.7mm * 10.8mm Display Resolution 160*80 Color 132 RGB channels Interface 8P FPC (0.5mm pitch) > DC/DC Converter, Adjustable VCOM Generation, Non volatile (NV) Memory to Store Initial Register Setting, Oscillator for Display Clock Generation, Factory default value (module ID, module version, etc) are stored in NV memory, Timing Controller, ### SPMOD_LCD1.14 pin description : Pin Name Type Description 1 GND G Ground 2 CS I Chip Select input pin 3 D/C I Data/Command control pin 4 RST I Reset (active low) 5 3V3 V Power supply(3.3V) 6 SCK I SPI clock pin 7 SI I/O Master Out Slave In 8 BL I BackLight control pin (active high) <img src \"../../assets/spmod/spmod_lcd1.14/back.png\" width \"300\" /> Mode of connection: MCU:FUN(IO) SP_LCD : : : : GPIOHS7(IO_7) RST GPIOHS15(IO_15) D/C SPI:SS0(IO_20) CS SPI:SCK(IO_21) SCK SPI:MOSI(IO_8) SI GPIOHS6(IO_6) BL 2.5~4.8V 3.3V GND GND <img src \"../../assets/spmod/spmod_lcd1.14//connection.png\" height \"250\"> ## Usage * Process 1. Send AT instruction 2. Receive the reply 3. Determines whether the setup was successful ### C : ```c fpioa_set_function(SPI_IPS_LCD_CS_PIN_NUM, FUNC_SPI1_SS0); // SPI_IPS_LCD_CS_PIN_NUM: 20; fpioa_set_function(SPI_IPS_LCD_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_IPS_LCD_SCK_PIN_NUM: 21; fpioa_set_function(SPI_IPS_LCD_MOSI_PIN_NUM, FUNC_SPI1_D0); // SPI_IPS_LCD_MOSI_PIN_NUM: 8; fpioa_set_function(SPI_IPS_LCD_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_DC_GPIO_NUM); // SPI_IPS_LCD_DC_PIN_NUM: 15; SPI_IPS_LCD_DC_GPIO_NUM: 15; fpioa_set_function(SPI_IPS_LCD_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_RST_GPIO_NUM); // SPI_IPS_LCD_RST_PIN_NUM: 7; SPI_IPS_LCD_RST_GPIO_NUM: 7; fpioa_set_function(SPI_IPS_LCD_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_BL_GPIO_NUM); // SPI_IPS_LCD_BL_PIN_NUM: 6; SPI_IPS_LCD_BL_GPIO_NUM: 6; // set gpiohs work mode to output mode gpiohs_set_drive_mode(SPI_IPS_LCD_DC_GPIO_NUM, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(SPI_IPS_LCD_RST_GPIO_NUM, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(SPI_IPS_LCD_BL_GPIO_NUM, GPIO_DM_OUTPUT); spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0); ips_lcd_init(); // init LCD_ShowPicture(0, 0, LCD_W, LCD_H, gImage_nanke); // display ``` ### MaixPy : ```python # 20: SPI_LCD_CS_PIN_NUM; fm.register(SPI_LCD_CS_PIN_NUM, fm.fpioa.GPIOHS20, force True) # 15: SPI_LCD_DC_PIN_NUM; fm.register(SPI_LCD_DC_PIN_NUM, fm.fpioa.GPIOHS15, force True) # 6: SPI_LCD_BUSY_PIN_NUM; fm.register(SPI_LCD_BUSY_PIN_NUM, fm.fpioa.GPIOHS6, force True) # 7: SPI_LCD_RST_PIN_NUM; fm.register(SPI_LCD_RST_PIN_NUM, fm.fpioa.GPIOHS7, force True) # set gpiohs work mode to output mode cs GPIO(GPIO.GPIOHS20, GPIO.OUT) dc GPIO(GPIO.GPIOHS15, GPIO.OUT) busy GPIO(GPIO.GPIOHS6, GPIO.OUT) rst GPIO(GPIO.GPIOHS7, GPIO.OUT) # 21: SPI_LCD_SCK_PIN_NUM; 8: SPI_LCD_MOSI_PIN_NUM; spi1 SPI(SPI_LCD_NUM, mode SPI.MODE_MASTER, baudrate SPI_LCD_FREQ_KHZ * 1000, polarity 0, phase 0, bits 8, firstbit SPI.MSB, sck SPI_LCD_SCK_PIN_NUM, mosi SPI_LCD_MOSI_PIN_NUM) ips SPLCD114(spi1, cs, dc, rst, busy, IPS_WIDTH, IPS_HEIGHT, IPS_MODE) # create an 'image' and fill it img image.Image() img.draw_rectangle(80, 80, 30, 30) # display ips.display(img) ``` ## Runtime environments Language Board SDK/Firmware version : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 *The MaixPy firmware is recommended to compile from the latest source* ### Result * C <img src \"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_c.png\" height \"250\" /> * MaixPy <img src \"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_py.png\" alt \"sp_lcd1.14_py\" height \"250\" /> ### Transplant The following parameters need to be modified. * C ```c // board_config.h #define SPI_INDEX 1 #define SPI_SCLK_RATE 600*1000 #define SPI_CHIP_SELECT_NSS 0 // SPI_CHIP_SELECT_0 #define SPI_IPS_LCD_CS_PIN_NUM 20 #define SPI_IPS_LCD_SCK_PIN_NUM 21 #define SPI_IPS_LCD_MOSI_PIN_NUM 8 #define SPI_IPS_LCD_DC_PIN_NUM 15 #define SPI_IPS_LCD_BL_PIN_NUM 6 #define SPI_IPS_LCD_RST_PIN_NUM 7 #define SPI_IPS_LCD_DC_GPIO_NUM 15 #define SPI_IPS_LCD_BL_GPIO_NUM 6 #define SPI_IPS_LCD_RST_GPIO_NUM 7 #define USE_HORIZONTAL 3 // 0/1 is horizontal, and 2/3 is vertical. ``` * Maixpy ```python ################### config ################### SPI_LCD_NUM SPI.SPI1 SPI_LCD_DC_PIN_NUM const(15) SPI_LCD_BUSY_PIN_NUM const(6) SPI_LCD_RST_PIN_NUM const(7) SPI_LCD_CS_PIN_NUM const(20) SPI_LCD_SCK_PIN_NUM const(21) SPI_LCD_MOSI_PIN_NUM const(8) SPI_LCD_FREQ_KHZ const(600) ############################################## ``` ## Outlook SPMOD_LCD1.14 Size drawing: <img src \"../../assets/spmod/spmod_lcd1.14/sipeed_spmod_lcd1.14.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [support@sipeed.com](mailto:support@sipeed.com) Telegram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_micarray.html":{"title":"SPMOD - MicArray","content":"# SPMOD MicArray ## Overview <img src \"../../assets/spmod/spmod_micarray/sp_micarray.png\" align \"right\" width \"\" height \"500\" /> SPMOD_MicArray(Microphone array module) uses RY3708(DC DC)Boost Module ## SPMOD MicArray Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Transfer the SP MOD interface to the FPC, and use the FPC to connect to the microphone array board 3.3V to 5V boost regulator(DC DC)(RY3708)，easily drive microphone arrays. Use the Grove interface to control the LED on the microphone array module. It needs to be used with the SIPEED MICARRAY module. Size:35.0\\*10.0\\*11.2mm ### BOOST DC DC RY3708 module Introduction Features： Output voltage range 5.1V ±0.2V Supply voltage of external power supply \t3.3V ±0.2V Supply current of external power supply Depends on the working conditions of the module, usually less than 500mA Range of working temperature 40℃ ~ 85℃ > 1.2MHz Fixed Switching Frequency,Internal 4A Switch Current Limit, Thermal Shutdown,Integrated 80mΩ Power MOSFET ### SPMOD_MicArray pin description: Pin Name Type Description 1 GND G Ground 2 D2 I Mic_D0 3 D3 I Mic_D2 4 D0 I Mic_WS 5 3V3 V Power supply(3.3V) 6 D4 I Mic_D1 7 D5 I Mic_D3 8 D1 I Mic_BCK 9 CK I Serial clock pin to control LED 10 DA I Data clock pin to control LED <img src \"\" width \"300\" /> ## Usage 待补充 ## Outlook SPMOD_MicArray Size drawing: <img src \"../../assets/spmod/spmod_micarray/sipeed_spmod_micarray.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [support@sipeed.com](mailto:support@sipeed.com) Telegram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_ethernet.html":{"title":"SPMOD - Ethernet","content":"# SPMOD Ethernet ## Overview <img src \"../../assets/spmod/spmod_ethernet/sp_ethernet.png\" align \"right\" width \"\" height \"500\" /> SPMOD_Ethernet(Ethernet module) uses W5500 chip. ## SPMOD Ethernet Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Connect to the board through the SP MOD SPI interface Master chip:The W5500 chip is a Hardwired TCP/IP embedded Ethernet controller The theoretical SPI design speed is 80MHz \t10BaseT/100BaseTX Ethernet PHY embedded, Supports Auto Negotiation (Full and half duplex, 10 and 100 based ) Size:35.76\\*19.74\\*8.7mm ### W5500 chip Introduction Features: Supply voltage of external power supply 2.97V~3.63V Supply current of external power supply <132mA Range of working temperature 40℃~85℃ Sleep Status of Current <15mA SPI Clock The theoretical design speed is 80MHz TCP/IP protocol Support TCP,UDP,ICMP,IPv4,ARP,IGMP,PPPoE protocols > Supports 8 independent sockets simultaneously ,Internal 32Kbytes Memory for TX/RX Buffers ,Supports Wake on LAN over UDP ,10BaseT/100BaseTX Ethernet PHY embedded ,Support Auto Negotiation (Full and half duplex, 10 and 100 based ) ,Not support auto MDIX feature ### SPMOD_Ethernet pin description: Pin Name Type Description 1 GND G Ground 2 CS I Chip Select input pin 3 SO I/0 Master In Slave Out 4 NC NC Not connected 5 3V3 V Power supply(3.3V) 6 SCK I SPI clock pin 7 SI I/0 Master Out Slave In 8 NC NC Not connected <img src \"\" width \"300\" /> ## Usage 待更新 ## Outlook SPMOD_Ethernet Size drawing: <img src \"../../assets/spmod/spmod_ethernet/sipeed_spmod_ethernet.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [support@sipeed.com](mailto:support@sipeed.com) telegram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_fpc.html":{"title":"SPMOD - FPC","content":"# SPMOD FPC ## Overview <img src \"../../assets/spmod/spmod_fpc/sp_fpc.png\" align \"right\" width \"\" height \"300\" /> SPMOD_FPC( SPMOD extension module ) ## SPMOD FPC Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN ), unified MaixPy board interface As an extension module, easily extend the SP MOD interface with FPC. Provide a pair of SP MOD to FPC adapters(Male and female), one FPC cable(10P). Size:15.0\\*10.0\\*3.3mm ## Introduction Features: SP MOD to FPC10 Adapters(Male and female)\t Bi directional transformation of SP MOD to FPC FPC\tcable(10P) Connect two adapters Supply voltage of external power supply Depends on connected modules Supply current of external power supply Depends on the working conditions of the module, usually less than 1000mA Range of working temperature 30℃ ~ 85℃ ## Outlook SPMOD_FPC Size drawing: <img src \"../../assets/spmod/spmod_fpc/sipeed_spmod_fpc.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [support@sipeed.com](mailto:support@sipeed.com) Telegram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_servo.html":{"title":"SPMOD - SERVO","content":"# SPMOD SERVO ## Overview <img src \"../../assets/spmod/spmod_servo/sp_servo.png\" align \"right\" width \"\" height \"500\" /> SPMOD_SERVO (SERVO module). ## SPMOD SERVO Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Using SP MOD to control up to 6 independent 9g servos Servo interface uses 3P 2.54 pitch pin header Independent external 5V power supply, will not take power from SP MOD Built in LED，making module status easier to see. Size:35.0\\*20\\*1.6mm Features: PWM 9g servo interface *6 In the case of an external 4.8 6V power supply, 6 servos can be connected and controlled separately Supply voltage of external power supply 4.8V 6.0V Supply current of external power supply Depends on the working conditions of the module, usually less than 1500mA Range of working temperature 40℃ ~ 85℃ ### SPMOD_SERVO pin description: <img src \"../../assets/spmod/spmod_servo/sp_servo_pin.png\" width \"500\" /> ## Usage 待更新 ## Outlook SPMOD_SERVO Size drawing: <img src \"../../assets/spmod/spmod_servo/sipeed_spmod_servo.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [support@sipeed.com](mailto:support@sipeed.com) Telegram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_psram.html":{"title":"SPMOD - PSRAM","content":"# SPMOD PSRAM ## Overview <img src \"../../assets/spmod/spmod_psram/sp_psram.png\" align \"right\" width \"\" height \"500\" /> SPMOD_PSRAM(PSRAM module) uses IPS6404L SQ PSRAM. ## SPMOD PSRAM Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Connect to the board through the SP MOD SPI/QPI interface Pseudo−SRAM:IPS6404L SQ is 64 Mbit of SPI/QPI (serial/quad parallel interface) Pseudo−SRAM device. Working frequency:104MHz CLK period:30.3ns Size:15.0\\*10.0\\*13.3mm ### IPS6404L SQ Introduction： Features: Supply voltage of external power supply 2.7V~3.6V Supply current of external power supply 10mA Range of working temperature 30℃~85℃ Sleep Status of Current <250μA Working frequency 104Mhz Response time of SPI read 30.3ns Response time of other operations 9.3ns interface PI/QPI optional, default SPI ### SPMOD_PSRAM pin description: Pin Name Type Description 1 GND G Ground 2 CS I Chip Select input pin 3 D1 I/0 Master In Slave Out 4 D3 I/O No function (IO3 in QSPI mode) 5 3V3 V Power supply(3.3V) 6 SCK I SPI clock pin 7 D0 I/0 Master Out Slave In (IO0 in QSPI mode) 8 D2 I/O No function (IO2 in QSPI mode) <img src \"\" width \"300\" /> ## Usage wait upgrade ## Outlook SPMOD_PSRAM Size drawing: <img src \"../../assets/spmod/spmod_psram/sipeed_spmod_psram.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [support@sipeed.com](mailto:support@sipeed.com) Telegram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_rfid.html":{"title":"SPMOD - RFID","content":"# SPMOD RFID ## Overview <img src \"../../assets/spmod/spmod_rfid/sp_rfid.png\" style \"padding right:100px;\" align \"right\" width \"\" height \"500\" /> SPMOD_RFID (NFC module) uses FM17510 IC. ## SPMOD RFID Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Using SP MOD SPI to communicate with RFID module 64Byte TRANSCeiver buffer FIFO The RIFC IC is FM17510. Size:25.0\\*20.1\\*6.2mm ### FM17510 Introduction The FM17510 used in this module is a highly integrated non contact reader chip working at 13.56MHz. Supports non contact reader mode in accordance with ISO/IEC 14443 protocol, Features： Supports non contact reader mode in accordance with ISO/IEC 14443 protocol, Reader mode supports M1 encryption algorithm ISO14443 TYPEA supports communication rate: 106kbps， 212kbps， 424kbps Support SPI serial interface, up to 10Mbps Host interface independent power supply，voltage range: 2.2~3.6V Range of working temperature 40℃ ~ 85℃ 64Byte TRANSCeiver buffer FIFO. Interrupt output mode can be equipped with flexible Multiple low power modes: Soft powerdown Mode, Hard powerdown Mode, Deep powerdown Mode(Typical value 1uA) Support low power external card detection Programmable timer Built in oscillator circuit and external 27.12MHz crystal oscillator Wide voltage working range 2.2V~3.6V Built in CRC coprocessor programmed I/O ### SPMOD_RFID pin description: Pin Name Type Description 1 GND G Ground 2 CS I Chip Select input pin 3 SO I/O Master In Slave Out 4 NPD I Reset/Sleep control pin 5 3V3 V Power supply(3.3V) 6 SCK I SPI clock pin 7 SI I/O Master Out Slave In 8 IRQ O Interrupt output pin <img src \"../../assets/spmod/spmod_rfid/back.png\" height \"300\" /> Mode of connection: MCU:FUN(IO) SP_RFID : : : : NC(IO_7) NPD SPI:MISO(IO_15) SO SPI:SS0(IO_20) CS SPI:SCK(IO_21) SCK SPI:MOSI(IO_8) SI NC(IO_6) IRQ 2.2~3.6V 3.3V GND GND <img src \"../../assets/spmod/spmod_rfid/connection.png\" height \"250\"> ## Usage * Process 1. Initialization 2. Detected and bind card 3. Read or write data ### C: ```c fpioa_set_function(RFID_CS_PIN, FUNC_GPIOHS0 + RFID_CS_HSNUM); // RFID_CS_PIN: 20; fpioa_set_function(RFID_CK_PIN, FUNC_GPIOHS0 + RFID_CK_HSNUM); // RFID_CK_PIN: 21; fpioa_set_function(RFID_MO_PIN, FUNC_GPIOHS0 + RFID_MO_HSNUM); // RFID_MO_PIN: 8; fpioa_set_function(RFID_MI_PIN, FUNC_GPIOHS0 + RFID_MI_HSNUM); // RFID_MI_PIN: 15; gpiohs_set_drive_mode(spi_io_cfg.hs_cs, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(spi_io_cfg.hs_clk, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(spi_io_cfg.hs_mosi, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(spi_io_cfg.hs_miso, GPIO_DM_INPUT); // detected card PcdRequest(0x52, type) // auth and bind... // read or write 16 bytes data from sector 0x11 PcdWrite(0x11, w_buf) PcdRead(0x11, &r_buf) ``` ### MaixPy: ```python # 20: CS_NUM; fm.register(20, fm.fpioa.GPIOHS20, force True) # set gpiohs work mode to output mode cs GPIO(GPIO.GPIOHS20, GPIO.OUT) # RFID_SCK: 21; RFID_SI:8; RFID_SO: 15; spi1 SPI(SPI.SPI1, mode SPI.MODE_MASTER, baudrate 600 * 1000, polarity 0, phase 0, bits 8, firstbit SPI.MSB, sck 21, mosi 8, miso 15) # Create an object of the class MFRC522 MIFAREReader MFRC522(spi1, cs) # detected and auth, bind... # read or write 16 bytes data from sector 0x11 MIFAREReader.MFRC522_Write(0x11, data) MIFAREReader.MFRC522_Read(0x11) ``` ### Runtime environments: 语言 开发板 SDK/固件版本 : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 ### Result: * C <img src \"../../assets/spmod/spmod_rfid/c_log.png\" height \"200\" /> * MaixPy <img src \"../../assets/spmod/spmod_rfid/maixpy_log.png\" height \"200\" /> ### Transplant: The following parameters need to be modified * C ```c // board_config.h #define RFID_CS_PIN (20) #define RFID_CK_PIN (21) #define RFID_MO_PIN (8) #define RFID_MI_PIN (15) #define RFID_CS_HSNUM (20) #define RFID_CK_HSNUM (21) #define RFID_MO_HSNUM (8) #define RFID_MI_HSNUM (15) ``` * MaixPy ```python ################### config ################### CS_NUM const(20) SPI_FREQ_KHZ const(600) SPI_SCK const(21) SPI_MOSI const(8) SPI_MISO const(15) ############################################# ``` ## Outlook SPMOD_RFID Size drawing: <img src \"../../assets/spmod/spmod_rfid/sipeed_spmod_rfid.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [support@sipeed.com](mailto:support@sipeed.com) Telegram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/README_en.html":{"title":"Sipeed HardWare WIKI","content":"# Sipeed HardWare WIKI [English[中文](./index.html)] ## K210 Mocules * [K210 Mocules](./en/core_modules/k210_core_modules.html) [M1/M1w](./en/core_modules/k210_core_modules.html) [M1n](./en/core_modules/k210_core_modules.html) ## MF face recognition module * [MF face recognition module] [MF0 && MF0 Dock](./en/mf_ml_module/mf0_ml_module.html) [MF1 && MF2](./en/mf_ml_module/mf1_ml_module.html) [MF4 && MF5](./en/mf_ml_module/mf5_product.html) [MF face recognition module Precautions](./mf_ml_module/mf_precautions.html) [MF module update firmwave](./en/mf_ml_module/mf_update_firmwave.html) ## MaixPy Develop Kit Board * [MaixPy Develop Kit Board](./en/maixpy_develop_kit_board/develop_kit_board.html) [Maix Go](./en/maixpy_develop_kit_board/maix_go.html) [Maix Dock](./en/maixpy_develop_kit_board/maix_dock.html) [Maix Bit](./en/maixpy_develop_kit_board/maix_bit.html) [Maix Duino](./en/maixpy_develop_kit_board/maix_duino.html) [Maix Cube](./en/maixpy_develop_kit_board/maix_cube.html) [Maix Amigo](./en/maixpy_develop_kit_board/maix_Amigo.html) ## Lichee (Linux) Lichee Zero [Lichee Zero]() [Lichee Nano]() [Lichee Zero Plus]() [Lichee RV]() ## Lichee Tang(FPGA) [Lichee Tang Primer]() [Lichee Tang Nano]() ## Longan (MCU) [longan Nano]() ## Peripheral Module * [Grove Module]() [Grove RGB LED]() * [SP MOD Module]() Adapter [SP Extender](./en/modules_spmod/spmod_extender.html) [SP Grove](./en/modules_spmod/spmod_grove.html) [SP FPC](./en/modules_spmod/spmod_fpc.html) [SP MicArray](./en/modules_spmod/spmod_micarray.html) [SP JoyStick](./en/modules_spmod/spmod_joystick.html) [SP Servo](./en/modules_spmod/spmod_servo.html) [SP Type C]() Sensor [SP Weather](./en/modules_spmod/spmod_weather.html) [SP TOF 1P](./en/modules_spmod/spmod_tof.html) Communication [SP BLE](./en/modules_spmod/spmod_bt.html) [SP LoRa](./en/modules_spmod/spmod_lora.html) [SP PSRAM](./en/modules_spmod/spmod_psram.html) [SP RFID](./en/modules_spmod/spmod_rfid.html) [SP Ethernet](./en/modules_spmod/spmod_ethernet.html) Display [SP LCD 1.14](./en/modules_spmod/spmod_lcd1.14.html) [SP Eink](./en/modules_spmod/spmod_eink.html) ## Module && Debugger ### Debugger [Sipeed RV Debugger]() [Dual serial port USB module]() ### Module Camera(Sensor) [OV2640]() [OV2640 M12]() [(GC0328)]() [Dual camera module(GC0328)]() [OV7740]() [Microphone module]() [Single microphone module]() [Microphone array]() [LCD 1.3'/2.4'/2.8'/4.3'/5']()"},"/hardware/en/maix/modules_spmod/spmod_bt.html":{"title":"SPMOD - BT","content":"# SPMOD BT ## Overview <img src \"../../assets/spmod/spmod_bt/sp_bt.png\" alt \"XXX\" style \"zoom:40%;\" /> SPMOD BT(Bluetooth module) uses YDJ 23. ## SPMOD BLE Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Using SP MOD UART to communicate with Bluetooth module JDY 23 Bluetooth module:Support BLE 5.0(Compatible with BLE4.0、BLE4.2).Communication interface adopts UART interface. The module supports AT command control. It has ultra low power design and high reliability design. Two built in LED，making module status easier to see. Size:25.6\\*20.2\\*3.2mm ### JDY 23 Introduction: Features: Working Frequency: 2.4GHz Transmission Power: 4db(maixmun) Communication Interface: UART Supply voltage of external power supply : 1.8V~3.6V Range of working temperature : 40℃ 80℃ Antenna: Built in PCB antenna Reception Sensitivity: 97dbm Support master slave: Slave Bluetooth Version: BLE 5.0(Compatible with BLE4.0、BLE4.2) Awakening Current State: 800uA(Transmission) Sleep Status of Current: <50uA (Transmission) Deep Sleep of Current: 9uA (Not transmission) Default baud rate: 9600 ### SPMOD_BT pin description : Pin Name Type Description 1 GND G Ground 2 AWK I/O Sleep wake up pin (active low) 3 STA I/O The status of the pin connection 4 RX I Serial input pin (TTL level) 5 3V3 V Power supply(3.3V) 6 NC Not connected 7 RST I/O Reset (active low) 8 TX O Serial output pin (TTL level) <img src \"../../assets/spmod/spmod_bt/back.jpg\" height \"250\" /> Mode of connection: MCU:FUN(IO) SP_BT : : : : UART:TX(IO_7) RX USRT:RX(IO_6) TX 1.8 3.3V 3.3V GND GND <img src \"../../assets/spmod/spmod_bt/connection.png\" height \"250\"> ### AT instruction list: Order Description AT+POWR Get transmit power AT+RST\t Soft reset AT+MAC\t Display MAC address AT+NAME Display Transmission name AT+HOSTEN Slave mode or IBEACON work mode AT+IBUUID UUID of IBEACON AT+DISC Disconnect AT+SLEEP Configures the Sleep mode AT+MTU Set the serial port for the APP to send a long number of packets *See [JDY 23 V2.1.pdf](https://cn.dl.sipeed.com/shareURL/MAIX/HDK/sp_mod/sp_bt) for more information* ## Usage * Process 1. Send AT instruction 2. Receive the reply 3. Determines whether the setup was successful ### C : ```c // set uart rx/tx func to io_6/7 fpioa_set_function(6, FUNC_UART1_RX + UART_NUM * 2); fpioa_set_function(7, FUNC_UART1_TX + UART_NUM * 2); uart_init(UART_DEVICE_1); uart_configure(UART_DEVICE_1, 9600, 8, UART_STOP_1, UART_PARITY_NONE); //change the name of sp_bt module to MAIXCUBE uart_send_data(UART_NUM, \"AT+NAMEMAIXCUBE\\r\\n\", strlen(\"AT+NAMEMAIXCUBE\\r\\n\")); //send AT order msleep(100); ret uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response if(ret ! 0 && strstr(rcv_buf, \"OK\")) { printk(LOG_COLOR_W \"set name success!\\r\\n\"); } // get the name of sp_bt module uart_send_data(UART_NUM, \"AT+NAME\\r\\n\", strlen(\"AT+NAME\\r\\n\")); //send AT order msleep(100); ret uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response if(ret ! 0 && strstr(rcv_buf, \"NAME\")) { printk(LOG_COLOR_W \"get name success!\\r\\n\"); } ``` ### MaixPy : ```python # set uart rx/tx func to io_6/7 fm.register(6,fm.fpioa.UART1_RX) fm.register(7,fm.fpioa.UART1_TX) uart UART(UART.UART1,9600,8,1,0,timeout 1000, read_buf_len 4096) #change the name of sp_bt module to MAIXCUBE uart.write(\"AT+NAMEMAIXCUBE\\r\\n\") #send AT order time.sleep_ms(100) read_data uart.read() #receive response if read_data: read_str read_data.decode('utf 8') count read_str.count(\"OK\") if count ! 0: uart.write(\"set name success\\r\\n\") # get the name of sp_bt module uart.write(\"AT+NAME\\r\\n\") #send AT order time.sleep_ms(100) read_data uart.read() #receive response if read_data: read_str read_data.decode('utf 8') count read_str.count(\"NAME\") if count ! 0: uart.write(\"get name success\\r\\n\") ``` *Note that you must add \\r\\n after sending AT instruction* ### Result: Using [BLE Utility](../../tools/bledebugger.apk) to connect the device to do the send and receive test results are as follows: <center class \"third\"> <img src \"../../assets/spmod/spmod_bt/res.png\" height \"250\"/><img src \"../../assets/spmod/spmod_bt/res1.png\" height \"250\"/> </center> ### Runtime environments: Language Board SDK/Firmware version : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 ## Outlook SPMOD_BLE Size drawing: <img src \"../../assets/spmod/spmod_bt/sipeed_spmod_bt.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [support@sipeed.com](mailto:support@sipeed.com) Telegram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maixsense/maixsense-a010/at_command_en.html":{"title":"MaixSense-A010 Development","content":"# MaixSense A010 Development ## AT Command AT                                                                                                                                                                                                                                             +ISP<br>Image Signal Processor :0: turn ISP off<br> 1: turn ISP on                                                                                                                                                                             +BINN<br>full binning           1: output 100x100 pixel frame<br> 2: output 50x50 pixel frame<br> 4: output 25x25 pixel frame<br>                                                                                                             +DISP<br>display mux           0: all off<br> 1: lcd display on<br> 2: usb display on<br> 3: lcd and usb display on<br> 4: uart display on<br> 5: lcd and uart display on<br> 6: usb and uart display on<br> 7: lcd, usb and uart display on +BAUD<br>uart baudrate         0: 9600<br> 1: 57600<br> 2: 115200<br> 3: 230400<br> 4: 460800<br> 5: 921600<br> 6: 1000000<br> 7: 2000000<br> 8: 3000000                                                                                     +UNIT<br>quantization unit     0: auto<br> 1 10: quantizated by unit(mm)                                                                                                                                                                     +FPS<br>frame per second       1 19: set frame per second                                                                                                                                                                                     +Save<br>save config           : save current configuration                                 syntax: inputexecutecomment AT+ISP? \\rReturn to current ISP status AT+ISP ? \\rReturns the status of all supported ISPs AT+ISP < MODE >\\rSelect ISP status parameter: < MODE > Meaning 0 \"STOP ISP\" Close the module ISP immediately, stop the IR transmitter 1 \"LAUNCH ISP\" It is planned to start the module ISP, and the actual drawing needs to wait 1 2 seconds ### BINN instruction syntax: Enter Execute Comment AT+BINN? \\r Return the current BINN status AT+BINN ? \\r Returns all supported BINN states AT+BINN < MODE > \\r Select BINN state parameter: < MODE > Meaning 1 \"1x1 BINN\" 1x1 is equivalent to no binning, and the actual output resolution is 100x100. 2 \"2x2 BINN\" 2×2 binning, 4 pixels are merged into 1, the actual output resolution is 50×50. The module ISP is planned to be activated, and the actual output needs to wait for 1 to 2 seconds. 4 \"4x4 BINN\" 4×4 binning, 16 pixels are merged into one, and the actual output resolution is 25×25. ### DISP instruction Please enable it as needed to avoid excessive resource usage syntax: Enter Execute Comment AT+DISP? \\r Return to current DISP status AT+DISP ? \\r Returns all supported DISP states AT+DISP < MODE > \\r Select DISP state parameter: < MODE > Meaning 0 all off 1 lcd display on 2 usb display on 3 lcd and usb display on 4 uart display on 5 lcd and uart display on 6 usb and uart display on 7 lcd, usb and uart display on ### BAUD instruction syntax: Enter Execute Comment AT+BAUD? \\r Return to current BAUD status AT+BAUD ? \\r Returns all supported BAUD states AT+BAUD < MODE > \\r Select BAUD state parameter: < MODE > Meaning 0 9600 1 57600 2 115200 3 230400 4 460800 5 921600 6 1000000 7 2000000 8 3000000 ### UNIT directive syntax: Enter Execute Comment AT+UNIT? \\r Returns the current UNIT value AT+UNIT ? \\r Returns all supported UNIT values AT+UNIT < UINT > \\r Select UNIT value parameter: < UINT > Meaning 0 \"DEFAULT UNIT\" The default quantization strategy is used. Due to the tof characteristic, the imaging accuracy at near distances is better than that at far distances. Therefore, the difference at short distances is enlarged, and 5.1*sqrt(x) is used to quantify the original data of 16 bits into 8 bits 1...9 \"QUANTIZE UNIT\" Represents quantization in x mm. The smaller the value, the more details and the shorter the visual distance. Please set it properly ### FPS command syntax: Enter Execute Comment AT+FPS? \\r Returns the current FPS value AT+FPS ? \\r Returns all supported FPS values AT+FPS <FPS> \\r Select FPS value parameter: < FPS > Meaning 1...19 \"frame per second\" tof output frame rate, the bigger the better the smoother ### SAVE instruction syntax: Enter Execute Comment AT+SAVE \\r The current configuration of the TOF camera is cured, and it needs to be reset afterwards Multi machine and AE instructions are recommended to be added ### ANTIMMI instruction syntax: Enter Execute Comment AT+ANTIMMI? \\r Returns the current ANTIMMI state AT+ANTIMMI ? \\r Returns all supported ANTIMMI states AT+ANTIMMI < MODE > \\r Select ANTIMMI state parameter: < MODE > meaning 1 disable anti mmi 0 auto anti mmi 1 41 manual anti mmi usb display on ### Image Packet Description When power on, the ISP will be activated by default and display the image on the display screen, and output the image data to uart and usb at the same time Image data encapsulated into packets (not stabilized): 1. Header 2 bytes: 0X00, 0XFF 2. Packet length 2 bytes: the number of bytes of remaining data in the current packet 3. Other content 16 bytes: including packet serial number, packet length, resolution, etc. 4. Image frame 5. Check 1 byte: the lower eight bits of the \"sum\" of all previous bytes 6. 1 byte at the end of the packet: 0XDD AT+UNIT? Query the `UNIT` value Take `p` as the image frame pixel values, here are two results: If `UNIT` is not 0，the distance between this pixel and top is `p` x `UNIT` ; If `UNIT` is 0，the distance between this pixel and top is (`p`/5.1)^2 。"},"/hardware/en/maixsense/maixsense-a010/maixsense-a010.html":{"title":"MaixSense-A010","content":"# MaixSense A010 ## Product description ![ms_small](./../../../zh/maixsense/maixsense a010/assets/ms_s.jpg) **MaixSense A010** is an extremely cost effective 3D sensor module composed of BL702 + OPNOUS 100x100 TOF launched by Sipeed, which supports a maximum resolution of 100x100 and 8 bit precision, and comes with a 240x135 pixel LCD display to preview the depth map after colormap in real time. **Data summary** Hardware information:[Click to download](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A010) ## Product unpacking guide ### Preparation MaixSense A010 Uses the serial port protocol to provide interfaces and transmit data. The physical interfaces we provide include type c (virtual serial port) and 1.0mm 4pin motherboard (UART), which can obtain depth map data for integration. **Product wiring instructions** After connecting to the computer through the type c interface, it can identify `/dev/ttyUSBx (Linux)` or `COMx (Windows)`. ![ms_pinb](./../../../zh/maixsense/maixsense a010/assets/ms_pinb.jpg) The usb2ttl module can also be used to connect the 4 PIN bus according to the hardware pin diagram (device screen face down). <html> <img src \"./../../../zh/maixsense/maixsense a010/assets/ms_pin.jpg\" width 48%> <img src \"./../../../zh/maixsense/maixsense a010/assets/ms_pinc.jpg\" width 48%> </html> <table> <tr> <td>MS A010</td> <td>TX</td> <td>RX</td> <td>GND</td> <td>5V</td> </tr> <tr> <td>usb2ttl 模块</td> <td>RX</td> <td>TX</td> <td>GND</td> <td>5V</td> </tr> </table> ### Power up preview **Button function**: \"Next\" on the left and \"Switch\" on the right. **Screen display**: the + word in the center of the screen is the ranging point, and the top right will display real time **xx cm** on behalf of the distance ranging. If there is a large area of objects near the lens, \"**block!**\" will be displayed on the right of the screen. In other cases **open!**. After the device is connected to the power supply, you can preview the depth pseudo color map in real time on the built in LCD screen of the device. ![ms_comtool](./../../../zh/maixsense/maixsense a010/assets/ms_lcd.jpg) ### PC side preview interaction Install COMTOOL on the upper computer before previewing and modifying the Settings on the PC. **Windows system**:[Click to download](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A010/software_pack/comtool) **Linux system**:[Users need to compile/click to jump](https://github.com/sipeed/MetaSense ComTool) > Note: Windows 7 and below systems need to install the driver, you can go to the FTDI official website to download. Open the COMTOOL software and select the Graph interface. If there is no Graph above the software, you can add a Graph at the + sign in the upper right corner. If the middle part is blank after creation, double click MaixSenseLite in the lower left corner ![ms_lcd](./../../../zh/maixsense/maixsense a010/assets/ms_comtool.jpg) Select a small Port and baud rate in the left port (choose any high baud rate), click open and check USB to receive a large amount of data. Connected will be displayed in the lower left corner. ![ms_comtool_two](./../../../zh/maixsense/maixsense a010/assets/ms_comtoolt.jpg) Set the Header to \\x00\\xFF to correctly parse the image data and observe the depth map to intuitively feel the depth on the 2D flat image. ![ms_comtool_three](./../../../zh/maixsense/maixsense a010/assets/ms_comtoolh.jpg) ### Comtool configuration instructions Comtool configuration control description of the host computer **Header**:et the identification header. **RawCMD**:User can send commands manually (USB and UART serial ports behave the same). **ISP**:start stop. **LCD**:display the lcd screen on and off. **USB**:serial port transmission depth map on and off. **UART**:serial port transmission depth map on and off. **ANTIMMI**:Automatic anti multi machine interference is turned on and off (susceptible to interference, the effect of turning off is better) **Binn**:pull down to set BINNING, Baud to set UART baud rate. **X, Y**:coordinates:When the checkbox to the left of D is on, the (x,y) distance from the camera is displayed. **Unit**:sets the quantization unit:16 bit quantization to 8 bit, the scale is reduced, if the setting is too small, only very close images can be seen clearly. **FPS**:Set the output frame rate (it should not be too high, set it reasonably according to the performance of the docking device, reducing the frame rate can reduce the amount of transmitted data) **Ev**:Exposure gap control (leftmost represents AE, others are fixed exposure time) ## Case:Measure Objects Distance The distance between the objects is placed to form the difference in depth value. After the module captures the difference, it displays a warm and cold color, a warm color when the distance is close, and a cool color when the distance is far. ![ms carton](./../../../zh/maixsense/maixsense a010/assets/ms_carton.jpg) ## Case:Passengers Flow Statistical Real time, high precision, high resolution monitoring of human flow and quickly statistical data. ![ms people](./../../../zh/maixsense/maixsense a010/assets/ms people.jpg) ## Case:Gesture Interaction Realize super cool keyboard light follow,track the position of the hand in real time,and then map the keyboard light according to the position of the hand. [Related code](https://dl.sipeed.com/shareURL/others/maixsense_example) ![ma_lamp](./../../../zh/maixsense/maixsense a010/assets/ms_lamp.jpg) ## Case:Connect to MCUs MS A010 has strong compatibility and is based on serial protocol. It can be connected to single chip development boards such as K210 bit or linux development boards such as Raspberry Pi for secondary development. The k210 Bit development board is a member of the sipeed Maix product line. It is an AIOT development board designed based on the edge intelligent computing chip K210 (RISC V architecture 64 bit dual core) of Canaan Canzhi Technology. [Click to learn about K210 Bit](https://www.aliexpress.com/item/1005002547039100.html?spm 5261.ProductManageOnline.0.0.15744edfvEngHc) [MS A010 external K210 bit source code acquisition](./../../../zh/maixsense/maixsense a010/code.html#tof_mainpy) ![ms_mcu](./../../../zh/maixsense/maixsense a010/assets/ms_mcu.jpg) ## Secondary development:Serial protocol Please refer to the above case: **MS A010 external K210 bit** MS A010 Secondary Development Manual:[Click to view](./at_command_en.html) ## Secondary development:Access ROS ### Access ROS1 **1. Preparations** First, prepare the applicable environment: `Linux` system. You can use the virtual machine `virtual box` or `vmware`. **2. Install and run** ROS Access Package: [Click to download.](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A010/software_pack/SDK) ```bash # Unzip sipeed_tof_ms_a010.zip and enter the directory cd ros1 source /opt/ros/*/setup.sh catkin_make source devel/setup.sh rosrun sipeed_tof_ms_a010 a010_publisher _device: \"/dev/ttyUSB0\" # After that, the terminal will continue to refresh and display [sipeed_tof]: Publishing, that is, it works normally ``` ![](./../../../zh/maixsense/maixsense a010/assets/ros_adb.jpg) **3. You can view the frame rate in RQT** ![ms rosone](./../../../zh/maixsense/maixsense a010/assets/ms_rosone.jpg) **4. RVIZ2 Preview** After opening `rviz2`, in the lower left corner of the interface `Add` >`By topic` >`PointCloud2 or /depth` >`Image Add` >`Display/Global Options/Fixed Frame` needs to be modified to `tof `, the point cloud can be displayed normally. According to the added content, `Image` will be displayed on the left and the point cloud will be displayed in the middle. ![ms_rviz](./../../../zh/maixsense/maixsense a010/assets/ms_rviz.jpg) ### Access ROS2 **1. Preparations** First, prepare the applicable environment: `Linux` system. You can use the virtual machine `virtual box` or `vmware`. >If your environment also has ROS1 installed, ROS2 will need to be used with the correct version. ```bash ls /opt/ros ros@ros virtual machine:~/Desktop$ ls /opt/ros noetic rolling ``` **2. Install and run** We provide an access package for ROS2, which users need to compile and install on a system running ROS2. ROS Access Package:[Click to download.](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A010/software_pack/SDK) ```bash #Unzip sipeed_tof_ms_a010.zip and enter the directory cd ros2 source /opt/ros/*/setup.sh colcon build #If you are prompted that colcon is missing, you need sudo apt install python3 colcon ros source install/setup.sh ros2 run sipeed_tof_ms_a010 publisher ros args p device: \"/dev/ttyUSB0\" # After that, the terminal will continue to refresh and display [sipeed_tof]: Publishing, that is, it works normally ``` **3. RQT View frame rate** ![ms_rqt](./../../../zh/maixsense/maixsense a010/assets/ms_rqt.jpg) **4. RVIZ2 Preview** After opening `rviz2`, in the lower left corner of the interface `Add` >`By topic` >`PointCloud2 or /depth` >`Image Add` >`Display/Global Options/Fixed Frame` needs to be modified to `tof `, the point cloud can be displayed normally. According to the added content, `Image` will be displayed on the left and the point cloud will be displayed in the middle. ![ms_ros](./../../../zh/maixsense/maixsense a010/assets/ms_ros.jpg)"},"/hardware/en/maixsense/maixsense-a075v/maixsense-a075v.html":{"title":"MaixSense-A075V","content":"# MaixSense A075V ## Summary ![mt_big](./../../../zh/maixsense/maixsense a075v/assets/mt_big.jpg) MS A075V is a 3D TOF camera module with RGB designed by Sipeed, can display the live 3D picture. ## User Guide ### Preparation To run preview MaixSense A075V on Windows, install the driver. **Windows Installation driver tutorial:**[Click to view](./install_drivers.html) ### On page preview ![tof 07514](./../../../zh/maixsense/maixsense a075v/assets/mt_pin.jpg) >Before using this device, make sure that the `192.168.233.0/24` address segment is not occupied in your network environment, because the MS A075V uses RNDIS and sets its IP address `http://192.168.233.1`. Connect the module to the PC with power according to the figure above, then the built in fan will start to work and the red light will be displayed at the lens. Select the browser and enter `http://192.168.233.1` to preview the 3D point cloud image. After power on, the system and program will be started 10s 15s delayed. **Quick preview using web upper computer (front and side) :** <html> <img src \"./../../../zh/maixsense/maixsense a075v/assets/mt_examle.jpg\" width 48%> <img src \"./../../../zh/maixsense/maixsense a075v/assets/mt_examleb.jpg\" width 48%> </html> We can preview the depth pseudo color point cloud map. Open the interaction panel in the upper right corner, uncheck RGB_Map in the first line. ![mt_examlec](./../../../zh/maixsense/maixsense a075v/assets/mt_examlec.jpg) ### Interactive configuration The preview webpage contained many function configurations, we can change them to get different live preview result. ![mt_examled](./../../../zh/maixsense/maixsense a075v/assets/mt_examled.jpg) Here tells the functions of each widgets. **RGB_Map** checkbox, control RGB map. Display the deep pseudo colored point map when checked, display the RGB mapped point cloud map when unchecked. **colorMap** drop down bar, provides several pseudo color mapping options(cmap)，jet is recommended. Available when RGB_Map is unchecked. **deepRangeMax** and **deepRangeMin** slide bar are used for setting the mapping range of cmap, the depth value between deepRangeMin and deepRangeMax are OK. Available when RGB_Map is unchecked. **NormalPoint** checkbox, control the display of normal point(There maybe some invalidation points when TOF worked, need to do opposite action). Recommend checked. **OE_Points** checkbox, control the display of OE point. Recommend unchecked. **UE_Points** checkbox, control the display of UE point. Recommend unchecked. **Bad_Points** checkbox, control the display of bad point. Recommend unchecked **SpatialFilter** checkbox, control the Spatial filtering. Processing based on the spatialFilterSize value below and the algorithm specified by the SpatialFilterType. **TemporalFilter** checkbox, control the Temporal filtering, A time average is calculated based on the temporalfilteralpha values below. **TemporalFilteralpha** slide bar, set the time for Temporal filtering. Adjust it moderate, can be tested by yourself. **SpatialFilterType** drop down bar, set the Spatial filtering algorithm, provides Gaussian filtering and Bilateral filtering. Bilateral filtering requires high performance, not recommended. **SpatialFilterSize** slide bar, set the range for Spatial Filter. Adjust it moderate, can be tested by yourself. **FlyingPointFilter** checkbox, control the flying point filter. Set the the following FlyingPointThreshold value as the filtering threshold, those that exceed the threshold will be filtered out. Set it moderate, otherwise the validation points will be filtered out. ### Save data The webpage provides 2 buttons at the bottom of the control bar. **SaveRaw**：Save one frame raw data. If you want to use the depth data or IR or RGB data for development, you need to know the data struct of raw. We provide a detailed `jupyter notebook` about the data processing of raw for users and developers. **SavePointCloud**：Sava one frame 3D point map, and its saved format is `pcd`. Can be previewed via the script provided above. Note: The data of raw can be get through open interface, which developers can do development on. While the pointcloud data does not provide any interface since it's calculated based on the raw data and camera internal parameters. ### SSH login In addition to using the web page to preview directly, we can also login using SSH with password `root` In the web preview page we know the ip address of this device is `192.168.233.1`, with which we can login to this device. ```bash ssh root@192.168.233.1 ``` ### Firmware Update Replace the corresponding file in `/root/maix_dist` directory. [Click to download the update file](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A075V/03_Firmware) ### Case: Real shooting of distant, near and far point cloud High precision mapping of differences in object placement distances, point cloud maps can intuitively feel a more realistic visualization. ![mt_cloud](./../../../zh/maixsense/maixsense a075v/assets/mt_cloud.jpg) ### Case: Car avoid obstacles The module can be carried by a car or drone to move back and forth to obtain the depth value of the obstacle, and judge whether there is an obstacle in the screen through the difference, make a rapid response and accurately avoid the obstacle (the example has not been open sourced, will be sorted out and disclosed). ![me_car](./../../../zh/maixsense/assets/me_car.gif) ### Case: Detect foot traffic High precision, high resolution real time monitoring of the flow of people moving around the situation statistics(the example has not been open sourced, will be sorted out and disclosed). ![me_pt](./../../../zh/maixsense/assets/me_pt.jpg) ## Custom development ### python SDK This is a SDK based on `Python3`. MS A075V opens its http interface, we can get its origin data (Depth map, ir map, rgb map) through http request. To help user understand the struct of data package and the relevant logic of decoding, we provide decoding related functions that encapsulate http requests and native data, based on which users can do custom development. **Get SDK**:[Click to download](https://dl.sipeed.com/fileList/others/maixsense_example/maixsense_075_tutorial.ipynb) **Method**：Install `jupyter`, connect to the TOF module, then open the `toturial.py` file. ### Decode and stream After understanding the struct of data package and the relevant logic of decoding from `Python SDK`, we can do advanced development, continuously get, decode and call the third party `python` image library, like matplotlib for live display. The `toturial.py` gives the implementation of getting onr frame data, and it can achieve live display by `plt` with loop. **Decoding and steraming**:[Click me to see content of stream.py](https://wiki.sipeed.com/hardware/zh/maixsense/maixsense a010/code.html#streampy) **Methods**：Run command `python stream.py` after installing all dependent packages. ![mt_sdk](./../../../zh/maixsense/maixsense a075v/assets/mt_sdk.jpg) ### Detect volume Based on third party `python` library，and have understood the logic of getting and decoding data, we can do more development: Continuously display frames, roughly calculate the point cloud through the data from TOF module by SDK, do the accumulation to get the total volume. Limit: The top view should include all details except bottom. **Detect volume**：[Click to view calVolumes.py](https://wiki.sipeed.com/hardware/zh/maixsense/maixsense a010/code.html#calvolumespy) **Methods**：Run command `python calVolumes.py` after installing all dependent packages, there will be notice after you run it. ![mt_volumbs](./../../../zh/maixsense/maixsense a075v/assets/mt_volumbs.jpg) ## Use ROS To begin this, install ROS on your computer first. ### Use ROS1 **1. Preparation** Prepare a Linux enviroment for ROS. **2. Install and RUN** [Access package download.](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A075V/software/SDK) ```bash #Extract sipeed_tofv075 ros.zip，and open its path source /opt/ros/*/setup.sh catkin_make source devel/setup.sh rosrun sipeed_tof_cpp publisher #Then the terminal continuously refreshes the command line ``` ![mt_adb](./../../../zh/maixsense/maixsense a075v/assets/mt_adb.jpg) **3. View frames in RQT** ![mt_rqta](./../../../zh/maixsense/maixsense a075v/assets/mt_rqta.jpg) **4. RVIZ preview** Open `rviz2`, in the bottom left interface choose `Add` >`By topic` >`PointCloud2 or/depth` >`Image add` >`Display/Global Options/Fixed Frame`, changed it into `tof`, in this way it displays point cloud normally. According to the added content, the `Image` displays in the left and the point cloud display in the center. ![mt_ros](./../../../zh/maixsense/maixsense a075v/assets/mt_ros.jpg) ### Use ROS2 **1. Preparation** Prepare a Linux enviroment for ROS. **2. Install and RUN** We have provided the functional package for ROS2, users need compile and run it on the system with ROS2.[Access package download.](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A075V/software/SDK). ``` bash #Extract sipeed_tofv075_ros2.zip，and open its path source /opt/ros/*/setup.sh colcon build #If it indicates missing colcon, use command sudo apt install python3 colcon ros source install/setup.sh ros2 run sipeed_tof_cpp publisher #Then the terminal continuously refreshes the command line and display [sipeed_tof]: Publishing,this means it works normally. ``` **3. View frames by RQT** Open `RQT` and select `Plugins` >`Topics` >`Topic Monitor`. ![mt_rqt](./../../../zh/maixsense/maixsense a075v/assets/../assets/mt_rqt.jpg) **4. RVIZ2 Priview** Open `rviz2`, in the bottom left interface choose `Add` >`By topic` >`PointCloud2 or/depth` >`Image add` >`Display/Global Options/Fixed Frame`, changed it into `tof`, in this way it displays point cloud normally. According to the added content, the `Image` displays in the left and the point cloud display in the center. **The result of mixing Pseudo colored point clouds and RGB:** <html> <img src \"./../../../zh/maixsense/maixsense a075v/assets/mt_rosb.jpg\" width 48%> <img src \"./../../../zh/maixsense/maixsense a075v/assets/mt_rosc.jpg\" width 48%> </html>"},"/hardware/en/maixsense/maixsense-a075v/install_drivers.html":{"title":"Install RNDIS driver","content":"# Install RNDIS driver ## Introduction RNDIS is the abbreviation of Remote Network Driver Interface Specification, is a specification to run TCP/IP on USB devices. ## Install guide In Windows7 and later operating systems, RNDIS is already built in. But we need do some operations to make the computer generally recognize the relevant RNDIS compliant device. ### Download driver <! **Windows Driver:**[Click me](https://dl.sipeed.com/shareURL/MaixSense/Drivers) > **Windows Driver:**[Click me](https://dl.sipeed.com/fileList/MaixSense/Drivers/Ethernet_RNDIS_drivers_20220808.zip) ### Install driver Connect the device with computer, then we can see Serial Device in computer device manager. If there is no Serial Device in the computer device manager, maybe because of insufficient power supply. For desktop we recommend use the USB port on the back, for those who use USB hub we recommend use extra power supply for the hub, and we suggest to use the USB 3.0 port because USB 2.0 may lack of power to drive. ![Serial device](./assets/install_drivers/serial.png) Right click it, choose Update driver, then choose `Browser my computer for drivers` ![Update drivers](./assets/install_drivers/update.png) We choose `Let me pick from...` ![Choose driver](./assets/install_drivers/scan.png) We choose `Have Disk...` ![Install_from_dick](./assets/install_drivers/install.png) We choose `Browse...` ![browser](./assets/install_drivers/path.png) Open the extracted downloaded file path, choose one .inf file, click the `open`. ![inf](./assets/install_drivers/inf.png) Here we click `OK` ![click_ok](./assets/install_drivers/click_ok.png) Then we choose `Next`. ![Next](./assets/install_drivers/next.png) We have finished installing driver. ![Finish](./assets/install_drivers/finish.png) Replug USB device, and wait about 10 seconds, we can see `RNDIS/Ethernet Gadget` in Network adapters in Device Manager."},"/hardware/en/maixsense/index.html":{"title":"MaixSense series","content":" title: MaixSense series ## What is MaixSense? <img src \"./../../zh/maixsense/assets/meta.jpg\" alt \"summary\" width 100%> MaixSense series products are equipped with TOF depth cameras, currently there are two products: MaixSense A010 and MaixSense A075V. MS A010 is an extremely cost effective TOF 3D sensor module composed of BL702 + OPNOUS 100x100 TOF module, which supports a maximum resolution of 100x100 and 8 bit Preview the depth map after color map in real time. While MS A075V is a 3D TOF camera module with RGB function, this module can realize Linux driver free plug and play and real time color 3D display. Purchase method:[Aliexpress](https://www.aliexpress.com/item/1005004984020473.html) <p style \"white space:nowrap\">MaixSense A010</p> <p style \"white space:nowrap\">MaixSense A075V</p> : : : ![me small](./../../zh/maixsense/assets/me_small.jpg) ![me big](./../../zh/maixsense/assets/me_big.jpg) Interface UART 1.25mm connector \\*1<br>USB2.0 Type C connector \\*1 UART 1.25mm connector \\*1 <br>USB2.0 Type C connector \\*1 Resolution TOF: 100x100@30fps RGB: 1600x1200@30fps<br>TOF: 320x240@60fps FOV RGB: No<br>TOF: 70°(H) * 60°(V) RGB: 120°<br>TOF: 55°(H)*72°(H) <p style \"white space:nowrap\">TOF pixel size</p> 15um Laser transmitter 940nm VCSEL 940nm,3W Distance 0.2 2.5m 0.15 1.5m Accuracy &lt; 1%/cm &lt; 1%/cm ## What can MaixSense do? ### Case:Real shot of far, middle and near objects High precision mapping of the difference in the distance between items, the point cloud map can intuitively feel a more realistic visualization. <html> <img src \"./../../zh/maixsense/maixsense a010/assets/ms_cloud.jpg\" width 48%> <img src \"./../../zh/maixsense/maixsense a075v/assets/mt_cloud.jpg\" width 48%> </html> ### Case:statistics traffic It can monitor the flow of people in real time and make statistics with high precision and large resolution. <html> <img src \"./../../zh/maixsense/assets/me_p.jpg\" width 48%> <img src \"./../../zh/maixsense/assets/me_pt.jpg\" width 48%> </html> ### Case:obstacle avoidance car It can be mounted on a robot car to move and determine whether there are obstacles on the screen.The module comes with an LCD screen to accurately display the distance and respond to avoid obstacles. ![me_car](./../../zh/maixsense/assets/me_car.jpg) ### Case:Keyboard lights follow gesture changes Realize super cool keyboard light follow,track the position of the hand in real time,and then map the keyboard light according to the position of the hand. ![ms_lamp](./../../zh/maixsense/maixsense a010/assets/ms_lamp.jpg) ### Case:Volume measurement After obtaining the camera internal parameters through the SDK, a preliminary point cloud is calculated, and the total volume is accumulated to achieve the effect of volume measurement. ![mt_volume](./../../zh/maixsense/maixsense a075v/assets/mt_volumbs.jpg) ### Case:Access to MCU MS A010 has strong compatibility and is based on serial protocol. It can be connected to single chip development boards such as K210 bit or linux development boards such as Raspberry Pi for secondary development. ![ms_mcu](./../../zh/maixsense/maixsense a010/assets/ms_mcu.jpg) ### Case: Support ROS1 + ROS2 Dual support ROS system, open ROS1 + ROS2 access function package, can quickly obtain depth data and depth map. <html> <img src \"./../../zh/maixsense/assets/me_ross.jpg\" height 250 width 49%> <img src \"./../../zh/maixsense/assets/me_rosb.jpg\" width 49% height 250> </html> ## Quick understanding of TOF technology 1. TOF: It is a method of distance measurement, which calculates the distance between the two by measuring the \"time of flight\" of signals such as ultrasonic/microwave/light between the transmitter and the reflector. It is the TOF sensor that can achieve TOF ranging. The most commonly used is infrared or laser ranging. 2. There is a difference in the distance between the objects. The module displays the cold and warm colors through the difference of the captured depth values. The cool and warm colors change with the mapping of the distance. <html> <img src \"./../../zh/maixsense/assets/tof_two.jpg\" height 250 width 49%> <img src \"./../../zh/maixsense/assets/tof.jpg\" width 49% height 250> </html> ## More For more detailed information about MS 010: [Click to jump](https://wiki.sipeed.com/en/maixsense10) For more detailed information about MS 075: [Click to jump](https://wiki.sipeed.com/en/maixsense75)"},"/hardware/en/cluster/NanoCluster/nomad_playbook.html":{"title":"Nomad Playbook","content":" title: Nomad Playbook ## Introduction [**nomad playbook**](https://github.com/caiodelgadonew/nomad playbook) is an automated deployment script written with Ansible, designed to quickly set up a cluster environment based on HashiCorp Nomad and Consul. This project supports one click deployment of a single server Nomad/Consul cluster, using Podman (or optionally Docker) as the container runtime. It is ideal for rapid deployment and testing of portable HomeLab or small edge computing clusters. ## Links GitHub project: [https://github.com/caiodelgadonew/nomad playbook](https://github.com/caiodelgadonew/nomad playbook)"},"/hardware/en/cluster/NanoCluster/use.html":{"title":"Quick Start","content":" title: Quick Start ## Hardware Installation ### ⚠️Notice There are currently two shell styles being shipped. If you receive a red and white colored shell, you almost don't need to follow the steps below, as the accessories are already pre installed. ![case1](../../../zh/cluster/NanoCluster/assets/case1.png)![case2](../../../zh/cluster/NanoCluster/assets/case2.png) If you want to print a new shell yourself, you can download the model files from makerworld and print it yourself. The link is https://makerworld.com.cn/zh/models/1311487 If you want to install three Cluster in a 10 inch rack, you can use the following model. https://makerworld.com.cn/zh/models/1349837 ![case3](../../../zh/cluster/NanoCluster/assets/case3.png) ### LM3H Installation First, attach the heatsink to the main control chip to improve heat dissipation. When installing the core board, ensure the correct orientation to avoid damaging the device. ![mount1](../../../zh/cluster/NanoCluster/assets/mount1.jpeg) Align the notch on the gold fingers of the core board with the slot on the mainboard. Gently place it in position and press down evenly until you hear a \"click\" sound, confirming that the core board is securely inserted without tilting or loosening. ![mount2](../../../zh/cluster/NanoCluster/assets/mount2.jpeg) To remove the core board, hold both sides of the board evenly with both hands and gently pull upward. Avoid applying excessive force to one side, as this may cause damage. If the core board is tightly fitted, slightly wiggle it left and right before pulling it out. Do not pull it out forcefully to prevent damage to the gold fingers or the mainboard slot. ### CM4 and CM5 Installation First, install the CM4 / CM5 module onto the adapter board ![cm4_mount1](../../../zh/cluster/NanoCluster/assets/cm4_mount1.jpeg) Then insert the adapter board into the mainboard slot ![cm4_mount2](../../../zh/cluster/NanoCluster/assets/cm4_mount2.jpeg) >If you are using **CM5** and require **USB3.0**, make sure to leave one slot empty between modules to ensure proper USB 3.0 functionality. ### M4N Installation First, install the M4N core module onto the adapter board ![m4n_mount1](../../../zh/cluster/NanoCluster/assets/m4n_mount1.jpeg) Then insert the adapter board into the mainboard slot ![m4n_mount2](../../../zh/cluster/NanoCluster/assets/m4n_mount2.jpeg) ### Fan Installation Align the fan with the reserved mounting holes on the baseboard: ![fan1](../../../zh/cluster/NanoCluster/assets/fan1.jpeg) Make sure the fan is facing the correct direction — the airflow should point toward the Ethernet port to better dissipate heat from the SOM: ![fan2](../../../zh/cluster/NanoCluster/assets/fan2.jpeg) Secure the fan firmly to the baseboard using screws: ![fan3](../../../zh/cluster/NanoCluster/assets/fan3.jpeg) Connect the fan's power cable to the fan power connector on the baseboard. Please ensure the correct plug orientation — the red wire should be connected to the positive terminal: ![fan4](../../../zh/cluster/NanoCluster/assets/fan4.jpeg) ## Power Supply NanoCluster supports both USB C PD and PoE power input, with dual hot plug capability — you can connect both PD and PoE at the same time, and the system will remain stable even if one source is disconnected. Either power source can be plugged or unplugged at any time. By default, the system supports 60W (20V/3A) PD input, and up to 65W (20V/3.25A) when using e Marker USB C cables. We recommend using the included PD adapter and high quality USB C cables to ensure stable power delivery. An optional 60W peak / 50W sustained PoE module is available for deployments where dedicated power access is limited. ### Max Supported Configurations (Based on Power Budget): Power Source Max Supported SOMs PD 7× LM3H / CM4 / CM5 / M4N PoE 7× LM3H / CM4; 6× CM5 / M4N SSD Installed Up to 4× SOMs with SSDs (space limited) <br> > **Note:** CM5 and M4N modules have higher power consumption. When using PoE, it is recommended to connect no more than 6 of these. ### PD Port Description The board supports USB C PD power input, with a maximum of 65W. Please use the official adapter or a third party adapter rated at 20V/3A or higher to ensure reliable operation under full load. ![pd](../../../zh/cluster/NanoCluster/assets/pd_power.jpeg) ### PoE Module Installation NanoCluster supports an optional PoE module for power over Ethernet deployment, helping simplify wiring. Please follow the diagrams below for proper installation: ![poe1](../../../zh/cluster/NanoCluster/assets/poe1.jpeg) Align the PoE module with the mainboard socket and insert carefully. Ensure a firm and secure connection. ![poe2](../../../zh/cluster/NanoCluster/assets/poe2.jpeg) > Use a PoE switch or adapter compliant with standard protocols to ensure safety and stability. ## Flashing the Image ##### The core board comes with a pre installed system. If you need to reflash the system, follow the steps below: ### LM3H Flashing Download the required firmware image and prepare a computer that supports USB OTG along with a USB cable. The NanoCluster currently uses images compatible with the Longan Pi 3H, which can be downloaded here: [Click to Download](https://wiki.sipeed.com/hardware/en/longan/h618/lpi3h/3_images.html). Insert the core board into the Slot1 position, then use a USB cable to connect the mainboard's OTG interface (the lower port) to the computer. Press and hold the BOOT button, then power on or reset the device to enter UMS flashing mode. ![flash_lm3h_1](../../../zh/cluster/NanoCluster/assets/flash_lm3h_1.jpeg) Once the firmware image is ready, open balenaEtcher, select the image file to be flashed, and ensure the core board is recognized as a USB drive. In balenaEtcher, choose the target device, click the \"Flash\" button to start the flashing process, and wait for it to complete. Safely eject the device, disconnect the USB cable, and restart the device to boot into the new system. ![flash_lm3h_2](../../../zh/cluster/NanoCluster/assets/flash_lm3h_2.jpeg) ### CM4/CM5 Flashing 1. Install the `rpiboot` tool following the [official documentation](https://www.raspberrypi.com/documentation/computers/compute module.html#set up the host device). 2. Press and hold the BOOT button on the adapter board, then connect the USB OTG port to your host computer. 3. Once the host detects a **BCM2711 (BCM2712) Boot** device, run `rpiboot`. After a few seconds, a USB drive will automatically appear. 4. Open the [Raspberry Pi Imager](https://www.raspberrypi.com/software/), select the desired image, and flash it to the detected device. ### M4N Flashing You can refer to the [System Flashing Guide](https://wiki.sipeed.com/hardware/zh/maixIV/m4n/system update.html) for the flashing process. ## Remote Management The mainboard is equipped with an Ethernet port for connecting to a switch. Devices within the cluster are interconnected through the switch and can be controlled and managed via their IP addresses. **How to obtain the device's IP address (using the LM3H module as an example)**: First, connect the Ethernet cable to the mainboard's port, then power on the device. The pre installed firmware has mDNS service enabled. On your PC, enable the Avahi service and use mDNS to scan the entire network to retrieve the mDNS domain name information of the lpi3h device. ```bash avahi browse art grep lpi3h ``` Then use the following command: ```bash ssh sipeed@lpi3h xxxx.local ``` to connect (replace `xxxx` with the hostname obtained using the `avahi browse` command). > lpi3h is the default mDNS hostname prefix for LM3H. If you are using CM4 or CM5, please adjust the hostname according to the system image you have flashed. ## Serial Connection Each SOM exposes the system serial port to a 2.54mm header, which can be connected for debugging using a serial to USB module. If you need to debug or control multiple slots simultaneously, we recommend using the USB to four serial ports expansion board we provide. This expansion board consolidates the serial signals from slot3, slot5, slot6, and slot7 into the USB interface of slot1, making it easier to manage and operate centrally. ![uart_board](../../../zh/cluster/NanoCluster/assets/uart.jpeg) > ⚠️ Due to the serial port expansion module partially obstructing the airflow and the module itself supporting only 4 serial ports, it is recommended to insert only 4 to 5 SOMs when using this module to ensure system cooling and debugging stability. ## Power Control The reset pins for slots 1~7 are controlled by slot 1 through **I2C extended IO**, enabling remote power on/off functionality. **Example: Reset Control Using LM3H:** ```bash # Reset the switch chip (GPIO 0) sudo gpioset gpiochip2 0 0 && sudo gpioset gpiochip2 0 1 # Reset slot2 (LM3H) # Hold for 8 seconds to power off sudo gpioset gpiochip2 2 0 && sleep 8 && sudo gpioset gpiochip2 2 1 # Quick trigger to power on sudo gpioset gpiochip2 2 0 && sleep 1 && sudo gpioset gpiochip2 2 1 # Reset slot2 (CM4) sudo gpioset gpiochip2 2 0 && sleep 1 && sudo gpioset gpiochip2 2 1 # Reset slot2 (CM5) # Simulate power button press for CM5 using GPIO level changes to power on/off: # If the system is Raspberry Pi OS Lite (headless): one short press will shut down. # If the system is Raspberry Pi Desktop (with GUI): two short presses are required to shut down. # Simulate two short presses (shutdown for Desktop systems) sudo gpioset gpiochip2 2 0 && sleep 1 && sudo gpioset gpiochip2 2 1 sudo gpioset gpiochip2 2 0 && sleep 1 && sudo gpioset gpiochip2 2 1 # Simulate a single short press (power on) sudo gpioset gpiochip2 2 0 && sleep 1 && sudo gpioset gpiochip2 2 1 ``` >! **Known issue:** If you force a hard shutdown of the CM5 by long pressing the button, the system cannot be started again with a short press. You must power cycle the device to restore normal operation. > `gpiochip2` refers to the GPIO controller index. `x 0` sets the IO with index `x` to low level, while `x 1` sets it to high level. GPIO Index Function 0 Switch chip reset 1~7 slot1~slot7 reset **Example: Reset Control Using CM4/CM5:** To enable I2C and load the PCA9557 driver on CM4 or CM5, you can control it in the same way: Edit `/boot/firmware/config.txt` and add the following content: ``` txt dtparam i2c_arm on dtoverlay pca953x,addr 0x18,pca9557 ``` After saving and rebooting, you can control the slot reset using the `gpioset` method. > **CM4** corresponds to GPIO controller index: `gpiochip2` > **CM5** corresponds to GPIO controller index: `gpiochip14` The control method is the same as for LM3H, but you only need to replace `gpiochip` with the actual index corresponding to the platform. ## Fan Speed Adjustment LM3H / CM4 / CM5 all support fan speed control. By default, LM3H automatically adjusts fan speed based on CPU temperature, while the official images of CM4 and CM5 run the fan at full speed. Below are the control methods for each platform. If you want to manually control the fan, you can connect to the slot1 device via SSH and execute the following commands: ### LM3H Fan Control ``` bash echo disabled sudo tee /sys/class/thermal/thermal_zone2/mode echo 4 sudo tee /sys/class/thermal/cooling_device0/cur_state ``` The value of `cur_state` ranges from 0 to 4, representing different fan speeds. To restore automatic control, use the following command: ``` bash echo enabled sudo tee /sys/class/thermal/thermal_zone2/mode ``` ### CM4 Fan Control Add the following line to /boot/firmware/config.txt: ```bash dtoverlay pwm 2chan,pin 12,func 4,pin2 13,func2 4 ``` After rebooting, execute: ``` bash sudo pigpiod ``` Control the fan using Python: ```python import pigpio pi pigpio.pi() # Set PWM frequency and range pi.set_PWM_frequency(13, 50) pi.set_PWM_range(13, 200) # Set fan speed pi.set_PWM_dutycycle(13, 0) # Off pi.set_PWM_dutycycle(13, 200) # Full speed ``` ### CM5 Fan Control Control the fan using Python: ```python import RPi.GPIO as GPIO GPIO.setmode(GPIO.BCM) GPIO.setup(13, GPIO.OUT) pwm GPIO.PWM(13, 50) # 50Hz frequency pwm.start(0) # Off pwm.start(100) # Full speed ``` ## Thermal Management 1. It is recommended to place the device in a well ventilated environment with a temperature below **30°C** to reduce the overall thermal load. 2. For optimal performance, maintain the system's continuous operating power below **50W**, with peak power not exceeding **60W**, to match the power supply capacity and thermal performance. 3. If no SSD is installed, the system's space and cooling capacity can support **up to 7 SOMs running simultaneously**. If SSDs are installed, to ensure proper airflow, it is recommended to **install SOMs with spacing, supporting up to 4 SOMs**. 4. Slot 7 is located at the edge of the chassis, where fan airflow is lower but there is sufficient space to install a heatsink. It is recommended to install a larger heatsink in this position to enhance cooling efficiency. ## FAQ (Troubleshooting) ### Device Won't Power On / Can't Boot into System Ensure you are using a power adapter that supports at least PD 20V output. Avoid using USB power from a host device, as this may prevent the device from starting properly. Check if the green indicator light near the power input interface is lit. If there is no response, the issue may lie with the power adapter or power cable. Observe the blue power indicator lights corresponding to each slot to determine if the system has started normally. If **LM3H** fails to boot into the system, press and hold the BOOT button while powering on or resetting the device to check if it enters UMS mode. Confirm whether the device is recognized as a USB drive in disk management. If the system is damaged or cannot boot, you can reflash the [firmware image](https://wiki.sipeed.com/hardware/en/NanoCluster/use.html#Flashing the Image). If UMS mode cannot be entered, try the [emergency flashing](https://wiki.sipeed.com/hardware/en/cluster/NanoCluster/use.html#Emergency Flashing %28LM3H%29) method. If **CM4/CM5** fails to start normally, you can re flash the system image following the instructions in the [firmware image](https://wiki.sipeed.com/hardware/en/cluster/NanoCluster/use.html#Flashing the Image) section and test again. ### Network Connection Issues (Unable to Obtain IP) If the system boots successfully but there are network connection issues or the device cannot obtain an IP address, ensure the Ethernet cable is connected before powering on the device. Switches detect network interfaces when the device powers on. Plugging in the Ethernet cable after powering on may cause the interface to fail to recognize the connection. ### Emergency Flashing (LM3H) If U Boot is corrupted and the device cannot enter UMS mode, you can manually recover it using FEL mode. Use the `sunxi fel` or `xfel` tools to load U Boot into memory and start UMS mode, then proceed with flashing. #### Entering FEL Mode Short the specified pin on slot1 to GND, then power on the device to enter FEL mode (future versions may add button control). ![fel](../../../zh/cluster/NanoCluster/assets/fel.jpeg) #### Installing the awusb Driver You need to install the [sunxi awusb](https://github.com/916BGAI/sunxi awusb) driver to recognize the H618 chip. ``` bash sudo apt update sudo apt install dkms cd sunxi awusb sudo cp r ./ /usr/src/sunxi awusb 0.5 sudo dkms add m sunxi awusb v 0.5 sudo dkms build m sunxi awusb v 0.5 sudo dkms install m sunxi awusb v 0.5 sudo modprobe awusb sudo cp udev/50 awusb.rules /etc/udev/rules.d/ sudo udevadm control reload rules ``` ```bash Bus 002 Device 005: ID 1f3a:efe8 Allwinner Technology sunxi SoC OTG connector in FEL/flashing mode ``` #### Obtaining the U Boot File Download the pre compiled U Boot file: [Click to Download](../../../zh/cluster/NanoCluster/assets/uboot.tar.gz) #### Using sunxi fel Install and compile: ```bash git clone https://github.com/linux sunxi/sunxi tools.git cd sunxi tools make tools sudo make install ``` Flash U Boot: ```bash sudo sunxi fel uboot /path/u boot sunxi with spl.bin ``` After completing the process, the device should enter UMS mode successfully, allowing you to proceed with flashing the system image. #### Using xfel Install and compile: ```bash sudo apt install libusb 1.0 0 dev git clone https://github.com/xboot/xfel.git cd xfel make sudo make install ``` Flash U Boot: ```bash xfel ddr lpddr4 xfel write 0x4a000000 /path/u boot dtb.bin xfel exec 0x4a000000 ``` After completing the process, the device should enter UMS mode successfully, allowing you to flash the system image. ### CM4 Lite Fails to Boot After Reset In the first batch of CM4 adapter boards, using a CM4 Lite (without eMMC) and following the [Power Control](https://wiki.sipeed.com/hardware/en/cluster/NanoCluster/use.html#Power Control) instructions may result in the module failing to boot after a reset. This issue will be fixed in the next hardware revision. If you encounter this problem, it is recommended to use the `reboot` command to restart the device instead of performing a hardware reset."},"/hardware/en/cluster/NanoCluster/switch.html":{"title":"Switch Management","content":" title: Switch Management ## Introduction NanoCluster is equipped with the JL6108 Gigabit switch chip, which is based on the **RISC V** architecture. It can be used as a plug and play switch or as a locally managed Layer 2 switch, supporting configuration via a web interface. Its main features include: **System Management**: Displays system information, supports reboot, factory reset, and firmware upgrades **Network Configuration**: Supports static IP and DHCP dynamic IP configuration **Port Management**: Enables/disables ports, configures link speed, and manages flow control **Port Aggregation**: Supports port binding to increase bandwidth utilization **Security and Isolation**: Port isolation to prevent data leakage **Traffic Monitoring**: Port MIB statistics and traffic analysis **Loop Protection**: Prevents network loops to enhance stability **VLAN Configuration**: Supports MTU VLAN, port based VLAN, 802.1Q VLAN, and PVID settings **QoS Configuration**: Manages traffic priority based on port, PCP, and DSCP **Bandwidth and Storm Control**: Supports port based bandwidth limitation and broadcast storm suppression > The default firmware management interface is in English. You can switch to a bilingual (Chinese/English) interface by updating via OTA. >! The switch management interface currently has response issues on Linux. For better compatibility, it is recommended to log in to the switch management interface using Windows. ## Port Allocation The cluster backplane connects to each core board (SOM) via the JL6108 switch. The port allocation is as follows: Switch Port Connected Device Port 1 Slot 7 Port 2 Slot 6 Port 3 Slot 5 Port 4 Slot 4 Port 5 Slot 3 Port 6 Slot 2 Port 7 Slot 1 Port 8 Cluster backplane RJ45 port (for external network connection) ## User Guide ### Logging into the Web Management Interface 1. **Ensure Device Connection** Make sure the NanoCluster is powered on and connected to the management host via an Ethernet cable. 2. **Configure IP Address** The switch's default IP address is **10.10.11.10/24**. Ensure the management host has an IP in the same subnet, e.g., **10.10.11.x** (where x is between 1 254 but not 10), with a subnet mask of **255.255.255.0**. ![IP Configuration](../../../zh/cluster/NanoCluster/assets/ip.jpeg) 3. **Access the Management Interface** Open a browser and enter `http://10.10.11.10`, then press Enter to reach the login page. ![Login Page](../../../zh/cluster/NanoCluster/assets/login_en.jpeg) 4. **Login to the Management System** Enter the **admin username and password** (both default to `admin`), then click **Login** to access the main interface. ![Management Homepage](../../../zh/cluster/NanoCluster/assets/homepage_en.jpeg) ## Basic Configuration ### Port Management The JL6108 switch provides port status management, supporting **port enable/disable**, **speed configuration**, and **flow control**. **Enable/Disable Ports**: Navigate to the **Port Management** page, select the desired port, and enable or disable it. **Modify Port Speed**: Supports 10Mbps / 100Mbps / 1000Mbps modes. **Flow Control**: Can be enabled to prevent packet loss. ![Port Management](../../../zh/cluster/NanoCluster/assets/portsetting_en.jpeg) ### VLAN Configuration VLAN (Virtual Local Area Network) is used to segment different network areas, prevent broadcast storms, and enhance security. #### Configuring Port VLAN 1. **Access the Port VLAN Page** Navigate to `VLAN` >> `Port VLAN` in the Web interface. 2. **Enable Port VLAN** Check the **\"Enable Port VLAN\"** option and click **`Apply`**. 3. **Create VLAN 2 and Assign Ports** Enter **`2`** in the **VLAN ID** field Select **Ports 2 to 4** Click **`Apply`** to save the configuration 4. **View the Port Member Table** After configuration, **Ports 2 4 will be automatically removed from VLAN 1** and assigned to VLAN 2. ![Port VLAN Configuration](../../../zh/cluster/NanoCluster/assets/vlan_en.jpeg) ### QoS Configuration (Traffic Prioritization) QoS ensures stable performance for high priority traffic such as video conferencing and VoIP: 1. **Navigate to \"QoS Settings\"** 2. Select **Port Based / 802.1P / DSCP** QoS strategy 3. Set **High / Medium / Low Priority Queues** 4. **Save the settings** to apply the QoS rules ![QoS Configuration](../../../zh/cluster/NanoCluster/assets/qos_en.jpeg) ### OTA Update Firmware download link: [Click to download OTA firmware](../../../zh/cluster/NanoCluster/assets/firmware.zip) 1. Open the Web management interface and navigate to: `System Information Configuration` → `System Upgrade` 2. Click **Select File** and select the appropriate firmware file for the upgrade: **English interface firmware**: `lms_ota_en.fw` **Chinese interface firmware**: `lms_ota_zh.fw` 3. Click **Upgrade**. The system will display the upgrade progress and automatically verify the firmware. 4. After the upgrade is complete, the device will automatically reboot to apply the new firmware. 5. If the upgrade fails, power cycle the device, re enter the management address to access the upgrade page, and repeat the upgrade process. ![OTA](../../../zh/cluster/NanoCluster/assets/upgrade_en.jpeg) ## Additional Configuration The JL6108 switch also supports more advanced features. For detailed configuration instructions, please refer to the official manual. [Click here to view the full manual](https://dl.sipeed.com/shareURL/Cluster/NanoCluster/06_Switch_JL6108) We provide the **JL6108 SDK** based on the **RISC V** architecture. Users can download the SDK and develop independently from the following link: [JL6108 SDK](https://dl.sipeed.com/shareURL/Cluster/NanoCluster/06_Switch_JL6108)"},"/hardware/en/cluster/NanoCluster/k3s.html":{"title":"K3s Deployment","content":" title: K3s Deployment ## Introduction [K3s](https://k3s.io/) is a lightweight version of Kubernetes. It is easy to install and requires only half the memory of Kubernetes, making it suitable for resource constrained environments, especially for use cases like edge computing, IoT, and others. ## Deployment Guide ### Prepare the Environment First, ensure that the network of the cluster is working correctly and that it can access the internet. You can SSH into each machine in the cluster to execute the subsequent installation commands. Make sure that the IP addresses of the master node and worker nodes are fixed, and that they can access each other over the network. ### Install K3s (Master Node) The installation of K3s is very simple. Just run the following command on the master node: ``` bash curl sfL https://get.k3s.io sh ``` If the download is slow, you can speed up the installation by using the following command: ``` bash curl sfL https://rancher mirror.rancher.cn/k3s/k3s install.sh INSTALL_K3S_MIRROR cn sh ``` This command will automatically download and install K3s. After the installation is complete, check if the K3s service is running with the following command: ``` bash sudo systemctl status k3s ``` If it shows `active (running)`, K3s has started successfully. ```bash sudo systemctl status k3s ● k3s.service Lightweight Kubernetes Loaded: loaded (/etc/systemd/system/k3s.service; enabled; preset: enabled) Active: active (running) since Mon 2025 02 17 12:07:15 CST; 3h 38min ago Docs: https://k3s.io Process: 8803 ExecStartPre /bin/sh xc ! /usr/bin/systemctl is enabled quiet nm cloud setup.service 2>/dev/null (code exited, status 0/SUCCESS) Process: 8805 ExecStartPre /sbin/modprobe br_netfilter (code exited, status 0/SUCCESS) Process: 8808 ExecStartPre /sbin/modprobe overlay (code exited, status 0/SUCCESS) Main PID: 8810 (k3s server) Tasks: 32 Memory: 583.2M CPU: 29min 49.755s CGroup: /system.slice/k3s.service ├─8810 \"/usr/local/bin/k3s server\" └─8895 \"containerd \" ``` ### Install K3s (Worker Nodes) When installing K3s on the worker nodes, you need to connect them to the master node. Run the following command on the worker node to install K3s: ``` bash curl sfL https://get.k3s.io K3S_URL https://<MasterNodeIP>:6443 K3S_TOKEN <MasterNodeToken> sh ``` In the command above, replace `主节点IP` with the master node's IP address, and `MasterNodeIP` with the token obtained from the master node. You can retrieve the token by running the following command on the master node: ```bash sudo cat /var/lib/rancher/k3s/server/node token ``` After installation is complete, verify that the worker node has successfully joined the cluster by running: ```bash sudo kubectl get nodes ``` If the worker node appears in the list with a status of `Ready`, it means the worker node has successfully joined the cluster. ```bash sipeed@lpi3h a2d1:~$ sudo kubectl get nodes NAME STATUS ROLES AGE VERSION lpi3h 1967 Ready <none> 20h v1.31.5+k3s1 lpi3h 231e Ready <none> 20h v1.31.5+k3s1 lpi3h 4782 Ready <none> 56m v1.31.5+k3s1 lpi3h a2d1 Ready control plane,master 23h v1.31.5+k3s1 lpi3h ba13 Ready <none> 19h v1.31.5+k3s1 lpi3h c06b Ready <none> 21h v1.31.5+k3s1 ``` ### Deploy an Application We will create a configuration file to run a K3s container. ```bash nano hello kubernetes.yaml ``` The file content is as follows: ```yaml apiVersion: apps/v1 kind: Deployment metadata: name: hello kubernetes spec: replicas: 1 selector: matchLabels: app: hello kubernetes template: metadata: labels: app: hello kubernetes spec: containers: name: hello kubernetes image: paulbouwer/hello kubernetes:1.10.1 env: name: MESSAGE value: \"Hello Kubernetes\" ``` Then, use this configuration file to start a container: ```bash sudo kubectl apply f hello kubernetes.yaml ``` Check the status of the pods: ```bash sudo kubectl get pods o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES hello kubernetes 7fbb7f4899 zqs5x 1/1 Running 0 2m39s 10.42.0.114 arch <none> <none> ``` Finally, access the application via a browser at 10.42.0.114:8080 ![hello_k3s](../../../zh/cluster/NanoCluster/assets/hello_k3s.jpeg)"},"/hardware/en/cluster/NanoCluster/distcc.html":{"title":"distcc Deployment","content":" title: distcc Deployment ## Introduction [distcc](https://github.com/distcc/distcc) is a distributed C/C++ compilation system that speeds up the compilation process by distributing compilation tasks across multiple machines. It allows you to leverage the computing power of multiple computers to compile code faster, making it especially useful for large codebases or resource constrained environments. ## Deployment Guide ### Server For Debian based systems, you can install distcc directly using the package manager: ```bash sudo apt install distcc ``` Start the distcc service: ```bash distccd daemon allow 192.168.0.0/24 # Allow specific IP range to access ``` ### Client ```bash sudo apt install distcc distcc pump ``` Set up the DISTCC_HOSTS environment variable to specify the available worker nodes. You can add the following to your .bashrc ```bash export DISTCC_POTENTIAL_HOSTS 'localhost 192.168.0.240 192.168.0.243 192.168.0.245 192.168.0.246' ``` Then, you can try compiling a simple program to check if distcc is correctly distributing the compilation tasks: ```bash distcc pump distcc o test test.c ``` ```bash sipeed@lpi3h a2d1:~/distcc$ distcc pump distcc o test test.c __________Using distcc pump from /usr/bin __________Found 4 available distcc servers __________Shutting down distcc pump include server ``` ## Compilation Testing To test whether distcc effectively accelerates the compilation process, we used OpenSSL for the compilation test. OpenSSL is a widely used C library with a large codebase, making it a good candidate to test the effectiveness of distributed compilation. ```bash git clone https://github.com/openssl/openssl.git cd openssl ./config distcc pump make j20 CC distcc ``` You can use distccmon text to check the current distribution of compilation tasks: ```bash sipeed@lpi3h 2193:~$ distccmon text 67535 Compile cmp_ctx.c 192.168.0.240[0] 67528 Compile cmp_asn.c 192.168.0.240[1] 67635 Compile cms_dh.c 192.168.0.240[2] 67569 Compile cmp_http.c 192.168.0.243[0] 67696 Compile cms_io.c 192.168.0.245[0] 67583 Compile cmp_server.c 192.168.0.245[1] 67561 Compile cmp_hdr.c 192.168.0.245[2] 67606 Compile cmp_vfy.c 192.168.0.245[3] 67657 Compile cms_enc.c 192.168.0.246[1] 67672 Compile cms_env.c 192.168.0.246[2] ``` ### Compilation Performance Comparison In the testing process, we compiled the OpenSSL project using both single machine compilation and distributed compilation (5 machines). Below are the results for each method: ##### Single Machine Compilation (without distcc) ```bash real 18m11.760s user 64m37.024s sys 5m56.326s ``` ##### Distributed Compilation (using distcc) ```bash real 6m32.262s user 18m39.468s sys 4m30.008s ``` As seen, the compilation time using distcc for distributed compilation is significantly reduced, from 18 minutes to about 6 minutes. The acceleration effect of distributed compilation is evident, and it also helps alleviate the load on individual machines."},"/hardware/en/cluster/NanoCluster/index.html":{"title":"Introduction","content":" title: Introduction ## Introduction NanoCluster is an ultra miniature cluster board developed by Sipeed, featuring 7 SOM slots interconnected via a RISC V based Gigabit switch. It supports USB C PD power supply and optional PoE expansion. Additionally, NanoCluster provides independent UART and power control, making it an ideal entry level platform for HomeLab users exploring distributed computing, Kubernetes, Docker, and edge computing. NanoCluster is compatible with Sipeed's Longan Module 3H (4 × Cortex A53), M4N (4 × Cortex A55 + NPU), as well as the Raspberry Pi Compute Module 4 (4 × Cortex A72) and Compute Module 5 (4× Cortex A76). Users can freely choose compute modules based on performance needs and budget, or mix and match different architectures to build a highly customized and heterogeneous computing cluster. The NanoCluster adopts an open SOM interface standard, supporting both official core modules and custom adapter boards for third party SOM solutions. This design greatly enhances the platform's flexibility. <br> ![产品特写图](../../../zh/cluster/NanoCluster/assets/product.png) ## Technical Specifications ### Baseboard <table> <thead> <tr> <th colspan \"2\">Hardware Specifications</th> </tr> </thead> <tbody> <tr> <td><strong>SOM Slots</strong></td> <td>7× Dual M.2 M Key vertical slots</td> </tr> <tr> <td><strong>Power Supply</strong></td> <td>USB C 20V PD (Max 60W), Optional 60W PoE module</td> </tr> <tr> <td><strong>Ethernet</strong></td> <td>Integrated RISC V Gigabit switch chip JL6108 for high speed interconnection, supporting web based management and SDK based custom feature development</td> </tr> <tr> <td><strong>USB Ports</strong></td> <td>USB A Host (Top), USB A OTG (Bottom), connected to Slot 1</td> </tr> <tr> <td><strong>Display Interface</strong></td> <td>HDMI, connected to Slot 1</td> </tr> <tr> <td><strong>Cooling System</strong></td> <td>Equipped with a 60mm 2 pin fan for efficient cooling</td> </tr> <tr> <td><strong>Status Indicators</strong></td> <td>7× SYS LED indicators for node status monitoring</td> </tr> <tr> <td><strong>Serial Communication</strong></td> <td>7× independent UARTs for easy debugging and control, optional quad serial USB module available</td> </tr> <tr> <td><strong>Power Management</strong></td> <td>Slot1 centrally manages other Slots and switch power through IO expansion chip</td> </tr> <tr> <td><strong>Power Consumption</strong></td> <td>3.6 W</td> </tr> <tr> <td><strong>Dimensions</strong></td> <td>PCBA: 88x57mm, approximately 100x60x60mm with SOMs installed and fan mounted</td> </tr> </tbody> </table> ![底板裸板特写图](../../../zh/cluster/NanoCluster/assets/bare_board.jpeg) ### SOM <table> <tr> <th>SOM</th> <th>LM3H</th> <th>M4N</th> <th>CM4</th> <th>CM5</th> </tr> <tr> <td>SoC</td> <td>H618</td> <td>AX650N</td> <td>BCM2711</td> <td>BCM2712</td> </tr> <tr> <td>Memory</td> <td>2GB ~ 4GB</td> <td>8GB</td> <td>1GB ~ 8GB</td> <td>1GB ~ 16GB</td> </tr> <tr> <td>eMMC</td> <td>32GB</td> <td>32GB</td> <td>0GB ~ 64GB</td> <td>0GB ~ 64GB</td> </tr> <tr> <td>CPU</td> <td>4 × A53<br>1.5 GHz</td> <td>8 × A55<br>1.6 GHz</td> <td>4 × A72<br>1.5 GHz</td> <td>4 × A76<br>2.4 GHz</td> </tr> <tr> <td>GPU</td> <td>Mali G31</td> <td> </td> <td>VideoCore VI</td> <td>VideoCore VII</td> </tr> <tr> <td>NPU</td> <td> </td> <td>18TOPS INT8</td> <td> </td> <td> </td> </tr> <tr> <td>Network</td> <td>100M</td> <td>1G</td> <td>1G</td> <td>1G</td> </tr> <tr> <td>Additional Interfaces</td> <td>None</td> <td>Download interface + M.2 SSD + USB 3.0</td> <td>Download interface + M.2 SSD</td> <td>Download interface + M.2 SSD + USB 3.0</td> </tr> <tr> <td>Power<br>Idle /<br>Full Load /<br>Peak</td> <td><nobr>1.2W/2.6W/3.7W</nobr></td> <td><nobr>3W/8.3W/9W</nobr></td> <td><nobr>3W/4.5W/4.6W</nobr></td> <td><nobr>4W/7.6W/8W</nobr></td> </tr> </table> ![SOM图](../../../zh/cluster/NanoCluster/assets/som.jpeg) ## Interface Diagram ### Baseboard Interfaces ![接口图示](../../../zh/cluster/NanoCluster/assets/board_io.jpeg) ### SOM The LM3H SOM connects directly to the baseboard via 7 × dual M.2 M Key vertical slots. The M4N SOM connects to a dedicated adapter board through a BTB connector, which then interfaces with the baseboard. <table> <tr> <th>SOM</th> <th>LM3H</th> <th>M4N</th> </tr> <tr> <td>Front Side</td> <td><img src \"../../../zh/cluster/NanoCluster/assets/lm3h_front.jpeg\" width \"250\"/></td> <td><img src \"../../../zh/cluster/NanoCluster/assets/m4n_front.jpeg\" width \"250\"/></td> </tr> <tr> <td>Back Side</td> <td><img src \"../../../zh/cluster/NanoCluster/assets/lm3h_back.jpeg\" width \"250\"/></td> <td><img src \"../../../zh/cluster/NanoCluster/assets/m4n_back.jpeg\" width \"250\"/></td> </tr> </table> ### Adapter Boards The CM4 / CM5 adapter board features a BTB connector on the front side, supporting CM4 and CM5 SOMs. It also includes a Boot button and a Type C port for flashing. The back side includes an SD card slot, an M.2 NVMe SSD connector (compatible with 2242 or 2230 size), and a reserved USB pad for optional CM5 USB 3.0 support. The M4N adapter board features a BTB connector for Sipeed M4N SOMs, a Boot button, and a Type C flashing port on the front side. The back side includes an M.2 NVMe SSD connector (2242 or 2230), and a reserved USB pad for optional USB 3.0 support. <table> <tr> <th>Adapter Board</th> <th>CM4 / CM5</th> <th>M4N</th> </tr> <tr> <td>Front Side</td> <td><img src \"../../../zh/cluster/NanoCluster/assets/cm4_adapter_front.jpeg\" width \"250\"/></td> <td><img src \"../../../zh/cluster/NanoCluster/assets/m4n_adapter_front.jpeg\" width \"250\"/></td> </tr> <tr> <td>Back Side</td> <td><img src \"../../../zh/cluster/NanoCluster/assets/cm4_adapter_back.jpeg\" width \"250\"/></td> <td><img src \"../../../zh/cluster/NanoCluster/assets/m4n_adapter_back.jpeg\" width \"250\"/></td> </tr> </table> ## Hardware & Software Resources ### Baseboard Hardware [Click to view](https://dl.sipeed.com/Cluster/NanoCluster) ### Longan Module 3H Documentation Hardware documentation can be accessed here: [Click to view](https://dl.sipeed.com/shareURL/LONGAN/LonganPi3H). For system building and software development guides, please refer to: [Click here](https://wiki.sipeed.com/hardware/en/longan/h618/lpi3h/7_develop_mainline.html). ### M4N Documentation [Hardware Documentation](https://dl.sipeed.com/shareURL/MaixIV/M4N Dock) [Software Development Guide](https://dl.sipeed.com/shareURL/MaixIV/M4N Dock) [Software Development SDK](https://github.com/AXERA TECH/ax650n_bsp_sdk) ### Raspberry Pi Compute Module 4 [Click to view](https://www.raspberrypi.com/products/compute module 4) ### Raspberry Pi Compute Module 5 [Click to view](https://www.raspberrypi.com/products/compute module 5) ## Purchase Information [Pre order Portal](https://sipeed.com/nanocluster) ## Feedback & Support If you have any questions or suggestions during use, please provide feedback through the following channels: + [Github issues](https://github.com/sipeed/NanoCluster)"},"/hardware/en/lichee/K1/lm3a.html":{"title":"LicheePi Module 3A","content":" title: LicheePi Module 3A keywords: LicheePi, Sodimm, K1, RISCV, SBC update: date: 2024 07 30 version: v0.1 author: zepan content: Initial doc ## Intro The LicheePi Module 3A is a core module that utilizes [SpaceMIT](https://spacemit.com/) [K1](https://www.spacemit.com/key stone k1/) as the main controller. The main controller features an octa core X60 CPU (RV64GCV, 256 bit Vector 1.0), offering 2 TOPS@int8 AI computing power and 1080P video processing capabilities. It supports up to 16GB of LPDDR4X memory and 128GB of eMMC storage, dual gigabit Ethernet, 1080P resolution video output, and PCIE Gen2x2. The LicheePi Module 3A is compatible with the LM4A and can be directly replaced on the baseboard. ![top](somtop.jpg) ![bot](sombot.jpg) ## Basic Parameter <table> <thead> <tr> <th colspan 2>SOC Parameter</th> </tr> </thead> <tbody> <tr> <td>SOC</td> <td>SpaceMIT K1</td> </tr> <tr> <td>CPU</td> <td>RISC V 64GCV X60*8@1.6GHz <br>· Cluster0 2TOPS AI Power, 32K L1 Cache per core, 512K L2 Cache, 512KB TCM, Vector 256bit <br>· Cluster0 32K L1 Cache per core, 512K L2 Cache, Vector 256bit </td> </tr> <tr> <td>GPU</td> <td>· IMG BXE 2 32@819M <br>· OpenGL ES 3.2, OpenCL 3.0<br>· Vulkan 1.3<br>· 20GFLIPS </td> </tr> <tr> <td>NPU</td> <td>Cluster0 2TOPS@INT8 <br>· 支持 TensorFlow、ONNX、Caffe <br>· 支持 CNN、RNN、DNN 等</td> </tr> <tr> <td>Video</td> <td>H265&H264 @ 1080p 60fps decode/encode</td> </tr> <tr> <th colspan 2>Hardware Feature</th> </tr> <tr> <td>RAM</td> <td>· 8GB 32bits LPDDR4X<br>· 16GB 32bits LPDDR4X<br></td> </tr> <tr> <td>ROM</td> <td>eMMC: <br>· 32G<br>· 128G</td> </tr> <tr> <td>Ethernet</td> <td> GPHY x 2</td> </tr> <tr> <td>PCIe (x3)</td> <td>· PCIE PortA Gen2x1 (combo with USB3)<br>· PCIE PortB Gen2x2<br>· PCIE PortC Gen2x2</td> </tr> </tbody> </table> ## Links [Sipeed download site](https://dl.sipeed.com/shareURL/LICHEE/LicheePi3A)"},"/hardware/en/lichee/K1/lc3a/lc3a.html":{"title":"LicheePi Cluster 3A","content":" title: LicheePi Cluster 3A keywords: LicheePi, Sodimm, K1, RISCV, SBC, Cluster update: date: 2023 07 30 version: v0.1 author: zepan content: Initial doc ## Intro The Lichee Cluster 3A (hereinafter referred to as LC3A) is a high performance RISC V cluster computing platform developed by Sipeed. It can be used to build multi node computing clusters and is an excellent tool for learning Kubernetes, automation, edge AI computing, local mini servers, hosting applications, and containers. A single Lichee Cluster 3A can accommodate up to 7 LM3A core boards, each featuring an NPU with 2 TOPS@int8 AI computing power, supporting up to 16GB of LPDDR4X memory and 128GB of eMMC storage per core board. The entire cluster offers robust flexibility and scalability. The Lichee Cluster 3A comes with an onboard eight port gigabit switch to provide high speed connections, easily linking multiple nodes to form a powerful computing cluster. It also supports USB 3.0 and SD card storage expansion, allowing for easy addition of extra storage or peripheral devices. Additionally, the Lichee Cluster 3A is equipped with a BMC (Baseboard Management Controller) for out of band management. The BMC independently connects to the system serial port and reset pins of each LM3A. It can reset individual compute nodes from the hardware level and execute commands via the serial port, such as using ser2net or kermit to manage slots. ## Tech Spec <table> <colgroup> <col class \"org left\" /> <col class \"org left\" /> </colgroup> <tr> <td class \"org left\">SOMs</td> <td class \"org left\"> <a href \"https://wiki.sipeed.com/lm3a\">LM3A</a> * 7</td> </tr> <tr> <td class \"org left\">CPU</td> <td class \"org left\"><strong>RiscV X60@1.6GHz * 8</strong> * 7</td> </tr> <tr> <td class \"org left\">GPU</td> <td class \"org left\">IMG™ B BXE 2 32 * 7</td> </tr> <tr> <td class \"org left\">NPU</td> <td class \"org left\">2TOPS@INT8 * 7</td> </tr> <tr> <td class \"org left\">RAM</td> <td class \"org left\">最大 16GB * 7</td> </tr> <tr> <td class \"org left\">EMMC</td> <td class \"org left\">Maximum 128GB * 7</td> </tr> <tr> <td class \"org left\">BMC</td> <td class \"org left\"><a href \"https://wiki.sipeed.com/Lichee RV\">SIPEED Lichee RV</a></td> </tr> <tr> <td class \"org left\">Ethernet</td> <td class \"org left\">GbE 1(Slot#1)<br>GbE 2(交换机)<br>100M Ethernet(BMC)</td> </tr> <tr> <td class \"org left\">USB</td> <td class \"org left\">USB3.0 * 7 (LM3A)<br>USB2.0 * 1 (BMC)</td> </tr> <tr> <td class \"org left\">HDMI</td> <td class \"org left\">HDMI * 1 (Slot 1)</td> </tr> <tr> <td class \"org left\">SDCARD</td> <td class \"org left\">TF * 7</td> </tr> <tr> <td class \"org left\">Power</td> <td class \"org left\">support DC powerin<br>support ATX 24PIN power</td> </tr> <tr> <td class \"org left\">RTC </td> <td class \"org left\">CR2032 Button cell</td> </tr> <tr> <td class \"org left\">heat radiation</td> <td class \"org left\">5V PWM FAN * 7<br>12V 4PIN PWM FAN * 1</td> </tr> <tr> <td class \"org left\">Size</td> <td class \"org left\">Mini ITX, 17 * 17 cm (6.7 * 6.7 inch)<br>optional MINI ITX case, 20 * 12 * 22 cm</td> </tr> </table> ## Hardware system ### Motherboard introduction ![lc3a_top](./assets/lc3a/lc3a_top.png) ### Motherboard frame diagram ![lc3a_architecture](./assets/lc3a/lc3a_architecture.png) LicheeRV SOM (D1 C906@1GHz) has 5 native serial ports and two USB serial ports, which are independently connected to 7 SOMs. Each LM3A's RST/BOOT can be controlled via an analog switch. LM3A No. 1 has the second Gigabit port and HDMI port by default, which facilitates the SOM to perform task distribution operations for the entire cluster. The motherboard can be powered by a 12V DC charging head (12V9A or above recommended), or by a standard ATX power supply. ### Chassis introduction It is recommended to choose the MINI ITX chassis. This chassis has good appearance and heat dissipation performance, and is convenient for the deployment and display of computing clusters. The chassis is adapted to the MINI ITX motherboard, equipped with a 250W high power power supply, and installed with a 12cm silent fan for heat dissipation, which can ensure that the CPU temperature is below 70 degrees when running at full load. ![lc3a_box](./assets/lc3a/lc3a_box.png) ### Hardware Installation Guide By default, all SOMs have been installed on the LC3A during transportation. If you need to remove or upgrade the SOM, please refer to the following instructions. #### Install core board Pull the white lock buckle to both sides. Please confirm the gap before inserting to avoid damage caused by incorrect direction. ![lc3a_install_goldfinger](./assets/lc3a/lc3a_install_goldfinger.png) After placing the core board, apply downward pressure evenly ![lc3a_install_install_lm3a](./assets/lc3a/lc3a_install_install_lm3a.png) After hearing a click, confirm that the white lock is properly engaged and the installation is complete. If you need to take out the core board, just pull the white locks to both sides. ![lc3a_install_slot](./assets/lc3a/lc3a_install_slot.jpeg) #### Install BMC Install the burned image SD card to LicheeRV, then install the LicheeRV module to the seat next to the switch chip, and then tighten the screws. #### Plug in power Optional ATX power supply or DC movie power supply. Make sure the buckle of the ATX power socket is fastened to avoid poor contact causing the connector to heat up. ![lc3a_power_atx20_cable](./assets/lc3a/lc3a_power_atx20_cable.png) Plug in the jumper cap ![lc3a_power_jumpwire](./assets/lc3a/lc3a_power_jumpwire.png) #### Internet connection The cluster system mainly connects to two external network ports: 1. Onboard Gigabit switch network port 2. BMC network port It is recommended that the onboard Gigabit switch network port be connected to the user's intranet or main network for the cluster to obtain required network data. It is recommended that the BMC network port be connected to an independent network for cluster control, which is more secure. The clusters are connected internally through Gigabit switches. How to get the cluster’s IP address: The pre installed firmware installation has the mdns service enabled Enable avahi service on your PC (Linux) Use mdns to scan the entire network to obtain the mdns domain name information of lc3a: ``` avahi browse art grep lc3a ``` Then use: ``` ssh debin@lc3aXXXX.local ``` XXXX is the last four digits of the mac address, used to distinguish each slot ## Software system ### LM3A Mirror The LM3A SOM in the cluster can directly use the LicheePi3A image. If you need to enable USB, you can apply the following PATCH in the Linux device tree: [Click here to download](https://dl.sipeed.com/fileList/LICHEE/LicheeCluster3A/04_Firmware/lpi3a/src/linux/0001 arch riscv boot dts lpi3a disable i2c io expander fo.patch) Or use the precompiled image directly: [Click here to download](https://dl.sipeed.com/shareURL/LICHEE/LicheeCluster3A/04_Firmware/lpi3a/bin) Image burning method: 1. Press the BOOT button and press the RST button at the same time, then use the A to A male USB cable to connect to the computer 2. Burn using fastboot tool ### OpenBMC Image The LicheeRV SOM on the motherboard runs OpenBMC to manage the SOM on the motherboard. Mirror download address: [Click here to jump](https://dl.sipeed.com/shareURL/LICHEE/LicheeCluster3A/04_Firmware/bmc/bin) Image burning method: ``` bmaptool copy obmc phosphor image lichepi rv.wic.gz /dev/YOUR_SDCARD ``` Default username: `root` Default password: `0penBmc` 0 is zero, not O If you need to develop customization, please download PATCH: https://dl.sipeed.com/shareURL/LICHEE/LicheeCluster3A/04_Firmware/bmc/src And applied to OpenBMC source code: ``` git clone https://github.com/openbmc/openbmc/ git checkout commit id git amxxx.patch ``` ### OpenBMC Management Access Slot's serial port from SSH: ``` ssh p 2301 root@bmcip # access first slot's serial port ``` * Port 22: OpenBMC shell * Port 2301: SOL (Serial Over LAN) of slot1 * Port 2302: SOL for slot2 * Port 2303: SOL for slot3 * Port 2304: SOL for slot4 * Port 2305: SOL for slot5 * Port 2306: SOL for slot6 * Port 2307: SOL for slot7 The serial port of each Slot is output to the log: ``` cat /var/log/obmc cons*.log ```"},"/hardware/en/lichee/K1/lpi3a/1_intro.html":{"title":"板卡介绍","content":" title: 板卡介绍 keywords: Linux, Lichee, K1, SBC, RISCV update: date: 2024 07 30 version: v1.0 author: zepan content: Release docs ## Intro LicheePi 3A is based on the [Lichee Module 3A](http://wiki.sipeed.com/hardware/zh/lichee/K1/lm3a.html)High performance RISC V Linux development board for the core board, with [K1](https://www.spacemit.com/key stone k1/) SOC（ 8xX60@1.6G ， RV64GCV， 2TOPS@int8 NPU， 20GFLOP GPU）， Onboard maximum 16GB 32 bit LPDDR4X, 128GB eMMC, supports HDMI+MIPI dual 1080P display output, supports 16MP camera access, dual gigabit Ethernet ports (one of which supports POE power supply) and 4 USB3.0 interfaces, as well as 2 PCIE Gen2x2 channels, multiple audio input and output. ![lpi3a](./assets/intro/lpi3a.jpg) ![pcie](./assets/intro/pcie.png) LicheePi 3A is currently the most cost effective mid range RISC V SBC. Multi core performance comparable to the previous generation RISC V SBC [LPi4A](http://wiki.sipeed.com/hardware/zh/lichee/th1520/lpi4a.html) 80%, with a single core performance of approximately 50% ![GeekBench6](https://browser.geekbench.com/v6/cpu/compare/6718771?baseline 5822041) ![benchmark](./assets/intro/benchmark.png) ![geekbench6](./assets/intro/geekbench6.png) LicheePi 3A can be used as a typical RISC V verification platform, and its powerful performance enables fast local compilation without the need for QEMU compilation. LicheePi 3A is basically compatible with LicheePi4A. If you have purchased LicheePi4A, you can only purchase LM3A to install on the LPi4A motherboard (without M.2 interface). ![desktop](./assets/intro/desktop.jpg) ## Basic Parameter <table> <thead> <tr> <th colspan 2>SOC Parameter</th> </tr> </thead> <tbody> <tr> <td>SOC</td> <td>Spacemit K1</td> </tr> <tr> <td>CPU</td> <td>RISC V 64GCV X60*8@1.6GHz <br>· Cluster0 2TOPS AI Power, 32K L1 Cache per core, 512K L2 Cache, 512KB TCM, Vector 256bit <br>· Cluster0 32K L1 Cache per core, 512K L2 Cache, Vector 256bit </td> </tr> <tr> <td>GPU</td> <td>· IMG BXE 2 32@819M <br>· OpenGL ES 3.2, OpenCL 3.0<br>· Vulkan 1.3<br>· 20GFLIPS </td> </tr> <tr> <td>NPU</td> <td>Cluster0 2TOPS@INT8 <br>· support TensorFlow、ONNX、Caffe <br>· 支持 CNN、RNN、DNN 等</td> </tr> <tr> <td>Video</td> <td>H265&H264 @ 1080p 60fps decode/encode</td> </tr> <tr> <th colspan 2>Hardware Feature</th> </tr> <tr> <td>RAM</td> <td>· 8GB 32bits LPDDR4X<br>· 16GB 32bits LPDDR4X<br></td> </tr> <tr> <td>Storage</td> <td>· eMMC: 32G / 128G <br>· TF Card<br>· NVMe SSD</td> </tr> <tr> <td>Ethernet</td> <td>· 2 x GbE，optional POE</td> </tr> <tr> <td>PCIe (x3)</td> <td>· PCIE PortA Gen2x1 (combo with USB3)<br>· PCIE PortB Gen2x2<br>· PCIE PortC Gen2x2</td> </tr> <tr> <td>USB</td> <td>· USB3.0 x 4<br>· USB2.0 x 2</td> </tr> <tr> <td>Audio</td> <td>· 1 x 3.5mm Headphone<br>· 2Pin Speaker<br></td> </tr> <tr> <td>Display</td> <td>· 1 x HDMI1.4<br>· 1 x 4 lane MIPI DSI</td> </tr> <tr> <td>Camera</td> <td>· 1 x 2 lane MIPI CSI<br>· 1 x 4 lane MIPI CSI</td> </tr> <tr> <td>GPIO</td> <td>· UART<br>· IIC<br>· SPI</td> </tr> </tbody> </table> ### Hardware download [Spec](https://dl.sipeed.com/shareURL/LICHEE/LicheePi3A/01_Specification) [Sch](https://dl.sipeed.com/shareURL/LICHEE/LicheePi3A/02_Schematic) [Bit number map](https://dl.sipeed.com/shareURL/LICHEE/LicheePi3A/03_Bit_number_map) [Dimensional_drawing](https://dl.sipeed.com/shareURL/LICHEE/LicheePi3A/04_Dimensional_drawing) [3D model](https://dl.sipeed.com/shareURL/LICHEE/LicheePi3A/05_3D_model) ## 其他链接 [Taobao](https://item.taobao.com/item.htm?id ) [Aliexpress](https://xxx) [Sipeed 下载站](https://dl.sipeed.com/shareURL/LICHEE/LicheePi3A) QQ: 559614960 [点我自动加群](http://qm.qq.com/cgi bin/qm/qr?k 5YkapIhdtWHp8AEfM5_bFFYQIX3CUQN6) Telegram: https://t.me/linux4rv Fourm ：Maixhub.com/discussion Mail：support@sipeed.com"},"/hardware/en/lichee/K1/lpi3a/2_unbox.html":{"title":"Unbox Experience","content":" title: Unbox Experience keywords: Linux, Lichee, K1, SBC, RISCV, unbox update: date: 2024 07 30 version: v1.0 author: zepan content: Release docs ## Unbox Contents ### Basic Suit The package you received contains the following packaging: ![package](./assets/unbox/package_v1.jpg) Opening the white cardboard box, you can see the LicheePi3A board and basic accessories (silicone grease sheet+cooling fan+USB C cable): ![board](./assets/unbox/package_v1board.jpg) If you find missing relevant components after opening the box, please contact customer service for consultation. ### Accessories LicheePi 4A also has a wide range of accessories to choose from, as shown in the following figure: ![accessory1](./assets/unbox/acc1.jpg) ![accessory2](./assets/unbox/acc2.jpg) Purchase instructions: Accessory Name Selection Instructions Aluminum alloy casing Suitable as a casing for small hosts and soft routers 10.1 inch touch screen 1280x800 4lane MIPI, suitable for use as a car infotainment system and Android debugging USB camera 5MP USB camera, onboard microphone, suitable for use as an openCV camera PoE power module 5V2.4A PoE power module, gateway applications use Ethernet PoE power supply 12V power supply 12V2A power adapter, to choose when connecting many power consuming peripherals to the board RV debugger Plus UART+JTAG debugging board, connect system serial port terminal for debugging ##Assemble the board ###SOM installation By default, LM3A SOM is already installed on the motherboard. If you need to upgrade/replace SOM, you can follow the instructions below to remove and install SOM 1. remove SOM: <table> <tr> <td colspan 2>First, use your fingers to flick the shrapnel outwards to unlock SOM, and then remove SOM</td> </tr> <tr> <td><img src \"./assets/unbox/unlock_som.jpg\" alt \"unlock_som\"></td> <td><img src \"./assets/unbox/remove_som.jpg\" alt \"remove_som\"></td> </tr> </table> 2. install SOM: <table> <tr> <td colspan 2>First insert the SOM diagonally into the connector slot, then press the SOM, and the two side tabs will automatically lock the SOM</td> </tr> <tr> <td><img src \"./assets/unbox/remove_som.jpg\" alt \"insert_som\"></td> <td><img src \"./assets/unbox/lock_som.jpg\" alt \"lock_som\"></td> </tr> </table> ### Installation of radiator LicheePi 3A is a high performance SBC that requires the installation of an active heat sink to dissipate heat from the SOM. Otherwise, it may automatically downshift due to core overheating at full load, resulting in suboptimal performance. 1. Install thermal conductive silicone grease sheet Remove the thermal conductive silicone grease sheet, tear off both sides of the film, place the silicone grease sheet in the position shown in the figure and gently press it to fix it (the silicone grease sheet has a certain degree of viscosity to fix it), paying attention to fully covering the main chip and two memory chips ![silicone_pad](./assets/unbox/silicone_pad.jpg) 2. Install the cooling fan Align and install a 30mm cooling fan on the silicone grease sheet, and gently press and secure it in place. ![insert_fan](./assets/unbox/insert_fan.jpg) 3. Install the cooling fan power supply 4. By default, the fan power supply should have been inserted when received. If the fan power cord is disconnected, please insert it as shown in the following figure, paying attention to the order of the power cords. Installing the fan in reverse will not rotate. Note that the power supply of the pin at this position is controlled by the Linux kernel and requires correct configuration of the kernel to rotate. If the fan does not rotate, it can also be plugged into the 5V+GND of the 20 pin pin below the board to test the quality of the fan. ![insert_fan_cable](./assets/unbox/insert_fan_cable.png) ### WIFI antenna installation By default, the WIFI antenna is already installed on the motherboard. If it is removed, please install it back according to the following diagram: ![insert_ant](./assets/unbox/insert_ant.png) ### Assembly completed The assembled state is as follows: ![assemble_ok](./assets/unbox/insert_fan.jpg) ## Startup board The LicheePi 3A has pre burned the basic system image upon release, allowing you to quickly start up and experience it! Connect the monitor (self provided) to the HDMI port of the LicheePi 3A using an HDMI cable (self provided), and connect the matching USB C cable to a USB power supply with at least 5V2A output (self provided). The LicheePi 3A will start up and the default image will boot up to the login interface of the desktop system within 30 seconds. The first login will enter the user account settings sequence. ![boot_login](./assets/unbox/boot_login.jpg) The default account password configuration for the image is as follows: Account: 'root', Password: 'bianbu'; Insert the keyboard and mouse, enter your username and password to log in and experience it. Please refer to the following chapters for specific instructions. If the above operation fails to light up the monitor and enter the system, there may be the following possibilities for self examination: 1. Check if the power supply voltage is normal, if the USB C port connection is normal, and if the power indicator light is on 2. Check if the radiator is installed properly and if the fan is rotating 3. Check if HDMI is securely connected, if the monitor is turned on, and try replacing the monitor for testing 4. It may also be due to missing firmware burning at the factory. Please follow the instructions in the chapter to perform image burning and try again 5. If none of the above works, please contact customer service and after sales service ## POE module installation The POE module requires manual welding and installation by the user. Please weld it according to the following diagram: ![poe](./assets/unbox/poe.jpg) > Note that the POE module cannot be installed into the aluminum alloy casing after welding. ## Hardware Diagram After completing the initial lighting of the board, you can take a moment to familiarize yourself with the hardware of LicheePi 3A, which will facilitate possible maintenance work in the future. ![pi_view](./assets/unbox/pi_view.png)"},"/hardware/en/lichee/K1/lpi3a/5_develop.html":{"title":"RISC-V Develop","content":" title: RISC V Develop keywords: Linux, Lichee, K1, SBC, RISCV, Kernel, SDK, Develop update: date: 2024 07 30 version: v1.0 author: zepan content: Release docs ## Linux Refer to Spacemit offical document: [Doc](https://bianbu linux.spacemit.com/) [Repo](https://gitee.com/bianbu linux)"},"/hardware/en/tang/Tang-Nano-1K/examples/lcd.html":{"title":"Drive RGB screen","content":" title: Drive RGB screen > Edit on 2022.04.19 ## Introduce timing RGB LCD display protocol is similar to VGA protocol, both have horizon synchronization signal line and vertical synchronization signal line. The main difference is that RGB LCD display protocol transfers by digital signal while VGA protocol transfers by analog signal. Here we introduce VGA timing. ![](./../../../../zh/tang/assets/examples/lcd_pjt_1.png) There shows horizon synchronization timing and vertical synchronization timing in the picture above. From the timing picture, we know both display a horizon of data or display a vertical of data, data transfers during the two synchronization signal pulses. Each horizon of data contains back porch, visible data **(this is normally thought as active data)** and front porch. The visible data is resolution we normally think, while the parameter of back porch and front porch depends on the resolution and frame rate. Its typical parameters can be found in this web. http://www.tinyvga.com/vga timing The timing of this 5 inch screen we sell is a bit different, its parameters can be downloaded here. [Detail book](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/5.0inch_LCD_Datashet%20_RGB_.pdf) For other size screen parameters, they can be downloaded here. [Click me](https://dl.sipeed.com/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/) The following picture shows the screenshot about this LCD timing. ![](./../../../../zh/tang/assets/examples/lcd_pjt_2.png) ![](./../../../../zh/tang/assets/examples/lcd_pjt_3.png) The first picture form shows parameters of the screen and the the following picture is its timing. From its timing picture, we can know we don't need to set front porch time and back porch time, we just need to set blanking time. ## Create project Please refer to this [article](./led/led.html) to see how to create project. ## Generate screen clock Here we use gowin official IP The crystal oscillator onboard is 27MHz, but our screen needs 33.3MHZ clock, so we need to use the corresponding ip core to generate the corresponding clock. Here we use `IP Core Generate` which can be find in Tools > IP Core Generate ![](./../../../../zh/tang/Tang Nano 1K/assets/Gowin_IP_rpll.png) Double click `rPLL` and select Verilog in the pop up window language, set CLKIN 27MHz, CLKOUTD is 33.00MHz. Also config the tolerance. ![](./../../../../zh/tang/Tang Nano 1K/assets/lcd_rpll.png) After click OK it asks whether add it to current project, here we choose yes. ![](./../../../../zh/tang/Tang Nano 1K/examples/led/assets/add_ip_file_in_project.png) Then a tmp file will appear, we can use it to generate the ip, like what is shown below. ![](./../../../../zh/tang/Tang Nano/examples/led/assets/ip_examples.png) ## Screen driver **To start this we should create a verilog file first** ### Port definition First define ports which are needed to drive screen ```verilog module VGAMod ( input CLK, input nRST, input PixelClk, output LCD_DE, output LCD_HSYNC, output LCD_VSYNC, \toutput [4:0] LCD_B, \toutput [5:0] LCD_G, \toutput [4:0] LCD_R ); ``` We use RGB565 driver mode. ### Timing constants Then we define the constants according to the timing form picture ```verilog localparam V_BackPorch 16'd6; //0 or 45 localparam V_Pluse \t 16'd5; localparam HightPixel 16'd480; localparam V_FrontPorch 16'd62; //45 or 0 localparam H_BackPorch 16'd182; \t localparam H_Pluse \t 16'd1; localparam WidthPixel 16'd800; localparam H_FrontPorch 16'd210; localparam PixelForHS WidthPixel + H_BackPorch + H_FrontPorch; \t localparam LineForVS HightPixel + V_BackPorch + V_FrontPorch; ``` First we define front porch, back porch and valid pixel data. As for the front porch timing and back porch timing which have been mentioned earlier, it can be combined into an erasing time, that is, one can be set to 0, and the other can be set to the erasing time. Anyway, the front porch timing and back porch timing can be added up to meet the timing requirements in the table is ok. ### Define variables Define some variables helps us to meet timing requirment ```verilog reg [15:0] LineCount; reg [15:0] PixelCount; reg\t[9:0] Data_R; reg\t[9:0] Data_G; reg\t[9:0] Data_B; ``` ### Synchronization signals This code generates synchronization signals. It should be noted that the synchronization signals of this screen enabled by negative polarity ```verilog always @( posedge PixelClk or negedge nRST )begin if( !nRST ) begin LineCount < 16'b0; PixelCount < 16'b0; end else if( PixelCount PixelForHS ) begin PixelCount < 16'b0; LineCount < LineCount + 1'b1; end else if( LineCount LineForVS ) begin LineCount < 16'b0; PixelCount < 16'b0; end else PixelCount < PixelCount + 1'b1; end always @( posedge PixelClk or negedge nRST )begin if( !nRST ) begin \t\t\tData_R < 9'b0; \t\t\tData_G < 9'b0; \t\t\tData_B < 9'b0; end else begin \t\t\tend \tend //Here note the negative polarity of HSYNC and VSYNC assign LCD_HSYNC (( PixelCount > H_Pluse)&&( PixelCount < (PixelForHS H_FrontPorch))) ? 1'b0 : 1'b1; assign LCD_VSYNC ((( LineCount > V_Pluse )&&( LineCount < (LineForVS 0) )) ) ? 1'b0 : 1'b1; ``` ### Enable signal This code decides whether display image. This driver needs a port which is set to 1 when the 800*480 data of the image is valid to enable display. ```verilog assign LCD_DE ( ( PixelCount > H_BackPorch )&& ( PixelCount < PixelForHS H_FrontPorch ) && ( LineCount > V_BackPorch ) && ( LineCount < LineForVS V_FrontPorch 1 )) ? 1'b1 : 1'b0; //It will shake if there not minus one ``` ### Test color bars This code generates color bars to test LCD ```verilog localparam Colorbar_width WidthPixel / 16; assign LCD_R ( PixelCount < ( H_BackPorch + Colorbar_width * 0 )) ? 5'b00000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 1 )) ? 5'b00001 : ( PixelCount < ( H_BackPorch + Colorbar_width * 2 )) ? 5'b00010 : ( PixelCount < ( H_BackPorch + Colorbar_width * 3 )) ? 5'b00100 : ( PixelCount < ( H_BackPorch + Colorbar_width * 4 )) ? 5'b01000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 5 )) ? 5'b10000 : 5'b00000; assign LCD_G ( PixelCount < ( H_BackPorch + Colorbar_width * 6 )) ? 6'b000001: ( PixelCount < ( H_BackPorch + Colorbar_width * 7 )) ? 6'b000010: ( PixelCount < ( H_BackPorch + Colorbar_width * 8 )) ? 6'b000100: ( PixelCount < ( H_BackPorch + Colorbar_width * 9 )) ? 6'b001000: ( PixelCount < ( H_BackPorch + Colorbar_width * 10 )) ? 6'b010000: ( PixelCount < ( H_BackPorch + Colorbar_width * 11 )) ? 6'b100000: 6'b000000; assign LCD_B ( PixelCount < ( H_BackPorch + Colorbar_width * 12 )) ? 5'b00001 : ( PixelCount < ( H_BackPorch + Colorbar_width * 13 )) ? 5'b00010 : ( PixelCount < ( H_BackPorch + Colorbar_width * 14 )) ? 5'b00100 : ( PixelCount < ( H_BackPorch + Colorbar_width * 15 )) ? 5'b01000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 16 )) ? 5'b10000 : 5'b00000; ``` **Do not forget to add endmodule in the end of the driver file** Up to now we have finished the driver module. ## Instantiated in the top **New a verilog file** Just copy the content below and save it is ok ```verilog module TOP //Name TOP module ( \tinput\t\t\tnRST, input XTAL_IN, \toutput\t\t\tLCD_CLK, \toutput\t\t\tLCD_HYNC, \toutput\t\t\tLCD_SYNC, \toutput\t\t\tLCD_DEN, \toutput\t[4:0]\tLCD_R, \toutput\t[5:0]\tLCD_G, \toutput\t[4:0]\tLCD_B ); // list ports \twire\t\tCLK_SYS;\t \twire\t\tCLK_PIX; //instantiate pll Gowin_rPLL chip_pll( .clkout(CLK_SYS), //output clkout //200M .clkoutd(CLK_PIX), //output clkoutd //33.00M .clkin(XTAL_IN) //input clkin );\t \tVGAMod\tVGAMod_inst //instantiate vga driver \t( \t\t.CLK\t\t(\tCLK_SYS ), \t\t.nRST\t\t(\tnRST\t\t), \t\t.PixelClk\t(\tCLK_PIX\t\t), \t\t.LCD_DE\t\t(\tLCD_DEN\t \t), \t\t.LCD_HSYNC\t(\tLCD_HYNC \t), \t.LCD_VSYNC\t(\tLCD_SYNC \t), \t\t.LCD_B\t\t(\tLCD_B\t\t), \t\t.LCD_G\t\t(\tLCD_G\t\t), \t\t.LCD_R\t\t(\tLCD_R\t\t) \t); \tassign\t\tLCD_CLK\t\t \tCLK_PIX; endmodule ``` ## Synthesize, constrain, Place&Route ### Synthesize After finishing steps above, go to the \"Process\" interface, synthesize the edited file, which means running \"Synthesize\". ![](./../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_synthsize.png) If the result is the same as shown below ![](./../../../../zh/tang/Tang Nano/assets/LED.png) It means that there is no bug in our code, we can continue the next steps. If there is some thing wrong, please fix by yourself. ### Constrain Here we only constraint pins The corresponding pins and ports are as follows form shows The way to constain pins can refer to the [Light led](./led/create_led.html), it contains two ways to constain pins. If you feel troublesome about the method above, you can copy the content in this [page](./../../../../zh/tang/Tang Nano 1K/examples/lcd_constrains.html)， and paste it in \".cst\" file in this project (If there is no \".cst\" file, just create a \"physicsl constrains file\"). PORT PIN PORT PIN : : : : : : : : LED_B 10 LED_G 11 LED_R 9 LCD_B[4] 24 LCD_B[3] 23 LCD_B[2] 22 LCD_B[1] 20 LCD_B[0] 19 LCD_G[5] 18 LCD_G[4] 17 LCD_G[3] 16 LCD_G[2] 15 LCD_G[1] 27 LCD_G[0] 28 LCD_R[4] 29 LCD_R[3] 30 LCD_R[2] 31 LCD_R[1] 34 LCD_R[0] 35 LCD_DEN 21 LCD_SYNC 32 LCD_HYNC 33 LCD_CLK 8 XTAL_IN 47 nRST 44 ### Place&Route After constraining, we need to open IO mux to complete Place&Route. Tick Project > Configuration > Place&Route > Dual Purpose Pin which is in the Menu Bar. ![](./../../../../zh/tang/Tang Nano/examples/led/assets/enable_io_mux.png) Then we can run Place&Route. ## Program Finishing Place&Route, we can download the generated .fs file to the development board to see color bar. ## End If you want the project, it can be found in this page : https://github.com/sipeed/TangNano 1K examples.git Now the tutorial ends, if you have any suggestions, just leave a message. <p id \"back\"> <a href \"#\" onClick \"javascript :history.back( 1);\">Back to the previous page(Back)</a> </p>"},"/hardware/en/tang/Tang-Nano-1K/examples/led/github_led.html":{"title":"Blink by github project","content":"# Blink by github project First get sourcecode from github https://github.com/sipeed/TangNano 1K examples Open led_prj.gprj file in TangNano 1K examples\\example_led\\led_prj path Right click clean&Rerun all in process interface ![](./../../../../../zh/tang/Tang Nano 1K/examples/led/assets/github_nano1K_place&route.png) Connet the board and download firmware. Double click `Program Device` in Process interface to open programmer tool. ![](./../../../../../zh/tang/Tang Nano 1K/examples/led/assets/Open_Programmer_nano_1k.png) Choose download to SRAM to verify codes quickly ![](./../../../../../zh/tang/Tang Nano 1K/examples/led/assets/Success_led_nano_1k.png) <p id \"back\"> <a href \"#\" onClick \"javascript :history.back( 1);\">Previou page</a> </p>"},"/hardware/en/tang/Tang-Nano-1K/examples/led/led.html":{"title":"blink","content":"# blink Edit on 2022.04.18 ## Preface Here we provide two ways to blink led [Blink by yourself](./create_led.html) [Using github project](./github_led.html) <p id \"back\"> <a href \"#\" onClick \"javascript :history.back( 1);\">Previous page</a> </p>"},"/hardware/en/tang/Tang-Nano-1K/examples/led/create_led.html":{"title":"Blink led","content":"# Blink led > Edit on 2022.04.19 From this essay we can learn the basic usage of Gowin IDE ## Create project Create Project：File >NEW >FPGA Dsign Project >OK ![](./../../../../../zh/tang/Tang Nano/assets/LED 1.png) Set project name and project path (File name and project path should be English) ![](./../../../../../zh/tang/Tang Nano/assets/LED 2.png) Choose correct device: ![Tang_nano_device_choose](./../../../../../zh/tang/Tang Nano 1K/assets/Nano_1K_device_choose.png) ## Prepare codes After creating project, we can start editing codes. To create a new file, we can click where the arrow points to in the picture or use shortcut key Ctrl+N. Then choose Verilog File in the pop up window. ![](./../../../../../zh/tang/Tang Nano/assets/LED 5.png) Name for file (Suggested using English) ![](./../../../../../zh/tang/Tang Nano/assets/LED 6.png) Double click the created file, then edit in right window ![](./../../../../../zh/tang/Tang Nano/assets/LED 7.png) We use light led as an example, copy the following \"LED example codes\" into the created file or edit the created file by yourself. ~~~v module led ( input sys_clk, // clk input input sys_rst_n, // reset input output reg [2:0] led // 110 B, 101 G,001 R ); reg [23:0] counter; always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) counter < 24'd0; else if (counter < 24'd1349_9999) // 0.5s delay counter < counter + 1'b1; else counter < 24'd0; end always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) led < 3'b110; else if (counter 24'd1349_9999) // 0.5s delay led[2:0] < {led[1:0],led[2]}; else led < led; end endmodule ~~~ ## Synthesize, constrain, place&route ### Synthesize After finishing steps above, go to the \"Process\" interface, Synthesize the edited file, which means running \"Synthesize\". ![](./../../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_synthsize.png) If the result is the same as shown below ![](./../../../../../zh/tang/Tang Nano/assets/LED.png) It means that there is no bug in our code, we can continue the next steps. If there is some thing wrong, please fix by yourself. ### Constrain Clock constraint is not involved here To realize function of the code on FPGA, we must bind the ports we define with the chip pins. Double click the FloorPlanner in the Process interface to set pin constraints(This can be continued if failing Synthesize). ![](./../../../../../zh/tang/assets/examples/led_pjt_2.png) First time open FloorPlanner it will prompt lack of \".cst\" file, we just choose ok. ![](./../../../../../zh/tang/Tang Nano/assets/LED 9.png) The led schematic of nano is as shown below: ![](./../../../../../zh/tang/Tang Nano 1K/assets/Nano_1K_RGB_pins.png) In this GUI interface we have two ways to constrain pins: Drag the corresponding port to the pin of chip Type the pin number corresponding to the port in IO constraint So we can do the ordered operations in the opened window as what the following picture shows:(Just choose one way) ![](./../../../../../zh/tang/Tang Nano 1K/assets/RGB_LED_Constrains.png) ### Place&Route After finishing Running \"Place&Route\" in the Process interface window, the result will be as same as below ![](./../../../../../zh/tang/Tang Nano 1K/assets/RGB_LED_Place&Route.png) If it shows different from the picture below, please fix by yourself. ## Program Then connect the board with computer, download firmware. Double click `Program Device` in Process interface to open programmer application ![](./../../../../../zh/tang/Tang Nano/examples/led/assets//Open_Programmer.png) You can config download mode according to the following picture. We use download to SRAM as an example. ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/tang nano programmer config.png) If you need to store firmware with no power, just choose download to flash mode. ## End Now the tutorial ends, if you have any suggestions, just leave a message."},"/hardware/en/tang/Tang-Nano-1K/Tang-Nano-1k.html":{"title":"Tang Nano 1k examples","content":" title: Tang Nano 1k examples [Blink](./examples/LED.html)(Preparing, please wait) [LCD screen](./examples/LCD.html)(Preparing, please wait)"},"/hardware/en/tang/Tang-Nano-1K/Nano-1k.html":{"title":"Tang Nano 1K","content":"# Tang Nano 1K > Edit on 2022.08.18 ## Introduction Tang Nano 1K is a core board designed based on [Gowin](https://www.gowinsemi.com/en/) GW1NZ LV1 FPGA chip. The board is equipped with RGB LCD interface and onboard USG JTAG debugger, which make it convenient for users to use. User can use this for small digital logic design and experiment. ![Nano 1](./assets/1k 1.jpg) ![Nano 2](./assets/1k 2.jpg) ## Parameters item Specs : : : : chip GW1NZ LV1 FPGA logic units(LUT4) 1152 Register(FF) 864 Block SRAM(bits) 72K Number of B SRAM 4 User flash(bits) 64K Number of Pll 1 Number of I/O Bank 2 ### Pinmap ![pinmap](./assets/1k pin.png) ## Informations [Datasheet](https://dl.sipeed.com/shareURL/TANG/Nano%201K/1_Specification) [Schematic](https://dl.sipeed.com/shareURL/TANG/Nano%201K/2_Schematic) [Bit number map](https://dl.sipeed.com/shareURL/TANG/Nano%201K/3_Bit_number_map) [Dimensional drawing](https://dl.sipeed.com/shareURL/TANG/Nano%201K/4_Dimensional_drawing) [3D File](https://dl.sipeed.com/shareURL/TANG/Nano%201K/5_3D_file) [Chip Manual](https://dl.sipeed.com/shareURL/TANG/Nano%201K/6_Chip_Manual) [Examples](https://wiki.sipeed.com/hardware/en/tang/common doc/examples.html) ## Addition 1. If you have trouble with this board, you can join our telegram (t.me/sipeed) or contact us on twitter (https://twitter.com/SipeedIO). 2. For Fpga burning we require using [this](https://dl.sipeed.com/shareURL/TANG/programmer) Programmer application. Because other version Programmer application may fail burning this board. 3. If you meet problems, please visit [problems](./../common doc/questions.html) first, normally most problems will be solved after using this programmer [Click me](https://dl.sipeed.com/shareURL/TANG/programmer)."},"/hardware/en/tang/tang-primer-15k/primer-15k.html":{"title":"Tang Primer 15K Dock","content":" title: Tang Primer 15K Dock keywords: FPGA, Tang, Primer, 15K update: date: 06 26 2024 version: v0.1 author: Serika content: Create document ## Overview Date to Release: Autumn 2024 TBD aliexpress purchase link: [Click me](https://sipeed.aliexpress.com/store/1101739727) ## Board Features MIPI C PHY & D PHY RX/TX TBD ## Product Appearance TBD ## Block Diagram TBD ## Hardware Parameters ### SOM Board Parameters <table> \t<thead> \t\t<tr> \t\t\t<th style \"text align:center\">Item</th> \t\t\t<th style \"text align:center\">Parameter</th> \t\t\t<th style \"text align:center\">Supplement</th> \t\t</tr> \t</thead> \t<tbody> \t\t<tr> \t\t\t<td style \"text align:left\">FPGA Chip</td> \t\t\t<td style \"text align:left\"><a href \"https://www.gowinsemi.com.cn/prod_view.aspx?TypeId 74&FId t3:10:3&Id 188#G15K\">GW5ART 15MG132P</a> \t\t\t</td> \t\t\t<td style \"text align:left\"> \t\t\t\t<table> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Logic Unit (LUT4)</td> \t\t\t\t\t\t<td>15120</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Register (FF)</td> \t\t\t\t\t\t<td>15120</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Distributed SRAM<br>(S SRAM) (Kbits)</td> \t\t\t\t\t\t<td>118125</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Block SRAM (B SRAM) (Kbits)</td> \t\t\t\t\t\t<td>630</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Number of Block SRAMs (B SRAM) (pcs)</td> \t\t\t\t\t\t<td>35</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Multiplier (18x18 Multiplier)</td> \t\t\t\t\t\t<td>28+12</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Phase Locked Loop (PLLs)</td> \t\t\t\t\t\t<td>2</td> \t\t\t\t\t</tr> \t\t\t\t\t <td>Global Clock<</td> <td>16</td> </tr> <tr> <td>High Speed Clock<</td> <td>2</td> </tr> \t\t\t\t\t <tr> <td>Transceivers</td> <td>8</td> </tr> <tr> <td>Transceivers Rate</td> <td>270Mbps 6.6Gbps</td> </tr> <tr> <td>PCIe HardCore</td> <td>1<br>Speed optional x1, x2, x4, x8 PCIe 2.0<</td> </tr> <tr> <td>LVDS (Gbps)</td> <td>1.25</td> </tr> \t\t\t\t\t <td>MIPI D PHY HardCore</td> <td>2.5Gbps（RX/TX），<br>4x data lane，<br>1x clock lane</td> </tr> <tr> <td>MIPI C PHY HardCore</td> <td>2.5Gbps（RX/TX），<br> 5.75Gbps,RX/TX<br>3x 3bit data lane</td> </tr> \t\t\t\t\t<tr> <td>PSRAM</td> <td>64Mb @ 667MHz</td> </tr> <tr> <td>ADC</td> <td>1</td> </tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Total GPIO Bank</td> \t\t\t\t\t\t<td>4</td> \t\t\t\t</table> \t\t\t</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Flash</td> \t\t\t<td style \"text align:left\">64Mb</td> \t\t\t<td style \"text align:left\">See <a href \"#burn_flash\">How to Burn to Flash</a></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">>Debug Interface</td> \t\t\t<td style \"text align:left\">TBD</td> \t\t\t<td style \"text align:left\">TBD</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Overall Package</td> \t\t\t<td style \"text align:left\">TBD</td> \t\t\t<td style \"text align:left\"></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">GPIO</td> \t\t\t<td style \"text align:left\"> 53</td> \t\t\t<td style \"text align:left\"></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\"> MIPI IO </td> \t\t\t<td style \"text align:left\"> 10</td> \t\t\t<td style \"text align:left\">Supports both C PHY & D PHY</td> \t\t</tr> \t</tbody> </table> ## Dock board Parameters <table> \t<thead> \t\t<tr> \t\t\t<th style \"text align:center\">Item</th> \t\t\t<th style \"text align:center\">Parameter</th> \t\t\t<th style \"text align:center\">comment</th> \t\t</tr> \t</thead> \t<tbody> \t\t<tr> \t\t\t<td style \"text align:left\">Debugger</td> \t\t\t<td style \"text align:left\">TBD</td> \t\t\t<td style \"text align:left\"></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">USB A</td> \t\t\t<td style \"text align:left\">TBD</td> \t\t\t<td style \"text align:left\"></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\"> IOs Headers </td> \t\t\t<td style \"text align:left\"> TBD</td> \t\t\t<td style \"text align:left\"></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\"> PMOD </td> \t\t\t<td style \"text align:left\"> TBD</td> \t\t\t<td style \"text align:left\"></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Buttons</td> \t\t\t<td style \"text align:left\">TBD</td> \t\t\t<td style \"text align:left\"></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Size</td> \t\t\t<td style \"text align:left\">TBD</td> \t\t\t<td style \"text align:left\"></td> \t\t</tr> \t</tbody> </table> ## Hardware Resources [Specification](https://dl.sipeed.com/shareURL/TANG/Primer_15K/01_Specification) [Schematics](https://dl.sipeed.com/shareURL/TANG/Primer_15K/02_Schematic) [PCB BOM](https://dl.sipeed.com/shareURL/TANG/Primer_15K/03_Designator_drawing) [Dimension Diagram](https://dl.sipeed.com/shareURL/TANG/Primer_15K/04_Mechanical_drawing) [3D Model](https://dl.sipeed.com/shareURL/TANG/Primer_15K/05_3D_file) [Some Chip Manuals](https://dl.sipeed.com/shareURL/TANG/Primer_15K/07_Datasheet) ## Getting Started Note that 15K is currently not supported by the education version, and you need to download V1.9.9.04 or a newer version of the commercial IDE for use. Licence can be applied on the Gowin official website, or you can use the online Lic service provided by Sipeed. In the IDE, select Float Lic and fill in the following information: ~~~ ip: 106.55.34.119 port: 10559 ~~~ if the ip not work, try use \"gowinlic.sipeed.com\" domain's IP. if you don't want to apply for a license, you can choose the education version IDE. The education version IDE can be used without a license, but it usually only contains a limited number of IPs. Install IDE [Click me](https://wiki.sipeed.com/hardware/zh/tang/common doc/get_started/install the ide.html) Example code [github](https://github.com/sipeed/TangPrimer 15K example) Other Learning Resources Free online tutorial: [Verilog Tutorial](https://www.runoob.com/w3cnote/verilog tutorial.html) (Learn Verilog) Free online FPGA tutorial: [Verilog](https://www.asic world.com/verilog/index.html) (English website) Verilog practice website: [HDLBits](https://hdlbits.01xz.net/wiki/Main_Page) (English website) Online Gowin Semiconductor reference video tutorials: [Click here](http://www.gowinsemi.com.cn/video_complex.aspx?FId n15:15:26) ## Communication Methods **Reddit** : [reddit.com/r/GowinFPGA/](reddit.com/r/GowinFPGA/) **Telegram** : [t.me/sipeed](t.me/sipeed) Discussion forum: [maixhub.com/discussion](https://maixhub.com/discussion) QQ discussion group: [834585530](https://jq.qq.com/?_wv 1027&k wBb8XUan) Leave a message directly below this page Goto**[GitHub project page](https://github.com/sipeed/TangPrimer 15K example)**and submit issues Business email : [support@sipeed.com](support@sipeed.com) ### TFrequently Asked Questions (FAQs) TBD"},"/hardware/en/tang/tang-primer-20k/examples/lite/blink.html":{"title":"Primer 20K Lite blink led","content":" title: Primer 20K Lite blink led keywords: Primer 20K, Lite, FPGA desc: Primer 20K start tags: FPGA, Primer 20K update: date: 2022 10 18 version: v0.1 author: wonder content: First time edit Let's blink a led after getting the Tang Primer 20K Lite suits. ## Preread This document is writen for guiding user start preparing GOWIN development environment and use the Tang Primer 20K. The default firmware function in the Core board is as followings: All IO port routed to pin 2.54mm pad toggles regularly, including spi_lcd connector ports and sd_card connector ports on Core Board DDR test; Test result print_out by serial port connector on Core Board and we can use serial tool in computer to see Because of the DDR test function, Core Board will be very hot. you can erase the firmware in the Core Board if you mind this. And default firmware project can be found here: [github](https://github.com/sipeed/TangPrimer 20K example/tree/main/Lite bottom%20test%20project/test_board) ## Install IDE Visit [Install IDE](./../../../common doc/install the ide.html) to prepare the environment for this FPGA. For Linux users, if it's difficult to run Programmer application to burn firmware into fpga, please visit [OpenFpgaloader](https://wiki.sipeed.com/hardware/en/tang/common doc/flash in linux.html) to see how to use it. ## New Project New Project：File >NEW >FPGA Design Project >OK <img src \"./../../../Tang Nano 1K/assets/LED 1.png\" width 35% alt \"new_project\"> Set Project Name and path, Project Name and project path should be English. ![project_path](./../../../../../../../news/others/20k_lite_start/assets/project_path.png) Select Device we choose GW2A LV18PG256C8/I7, use filter like below to help us choose device more easily. Note that the Device is GW2A 18C. ![device_choose](./../../../../../../../news/others/20k_lite_start/assets/device_choose.png) Then click OK to preview the project. After confirming no error, the project is created. ## New file Gowin IDE contains 3 ways to create file. Here we use shortcut keys `Ctrl + N` to new a file. The other 2 ways to new file are not mentioned here, In the pop up windows, we choose `Verilog File`, you can also choose `VHDL File` if you are good at it. Here we just use Verilog as an example. <img src \"./../../../../../../../news/others/20k_lite_start/assets/new_verilog_file.png\" width 50% alt \"new_verilog_file\"> Then click OK to set the file name, here we take `led` as the verilog file name as example. <img src \"./../../../../../../../news/others/20k_lite_start/assets/file_name.png\" width 75% alt \"file_name\"> Up to now we have finished creating file, then we need to prepare our code. ![created_file](./../../../../../../../news/others/20k_lite_start/assets/created_file.png) ### Verilog introduction Verilog is a kind of Hardware Description Language(HDL), it's used to describe digital circuits. The basic unit in Verilog is module. A module is composed of two parts: one describes the interface, and the other describes the internal logic function, that is, defines how the input affects the output. A module is like this: ```v module module_name #(parameter) (port) ; function endmodule ``` The module starts from module and ends by endmodule. The module is followed by the module name (module_name), transitable variable parameters (parameter), port and direction declaration (port), followed by internal logic function description (function), and finally, endmodule is used to represent this module. The internal logic function is usually composed by the assign and always blocks; The assign statement describes logical circuit, and the always block is used to describe timing circuit. ### Think storm Before coding, we need to think our purpose: The led flashes every 0.5S. Then we draw a demand block diagram as follows: ![block_method](./assets/block_method.png) Then we need a counter to time of every 0.5S, LED flashes means IO flip. ![count_block](./assets/time_count.png) Put the thought diagram into practical use, then it will look like this: ![clock_time_count](./assets/clock_time_count.png) The Clock is the clock source, providing the accurate time for the time counter. ### Code description From the verilog introduction and think storm diagram above, we can see the module we will create contains 2 ports: ```v module led( input Clock, output IO_voltage ); endmodule ``` For time counter inside module, crystal oscillator on the Primer 20K core board is 27MHZ, so we have 27 million times rising edges per second, and we just need to count 13500000 times rising edges to get 0.5 seconds. The counter starts from `0`, and to count 13500000 times rising edges, we count to 13499999. When counted to 0.5S, we set a flag to inform LED IO to flip its voltage. The overall count code is as follows: ```v //parameter Clock_frequency 27_000_000; // Crystal oscillator frequency is 27Mhz parameter count_value 13_499_999; // The number of times needed to time 0.5S reg [23:0] count_value_reg ; // counter_value reg count_value_flag; // IO change flag always @(posedge Clock) begin if ( count_value_reg < count_value ) begin //not count to 0.5S count_value_reg < count_value_reg + 1'b1; // Continue counting count_value_flag < 1'b0 ; // No flip flag end else begin //Count to 0.5S count_value_reg < 23'b0; // Clear counter,prepare for next time counting. count_value_flag < 1'b1 ; // Flip flag end end ``` The code to change IO voltage are as follows: ```v reg IO_voltage_reg 1'b0; // Initial state always @(posedge Clock) begin if ( count_value_flag ) // Flip flag IO_voltage_reg < ~IO_voltage_reg; // IO voltage flip else // No flip flag IO_voltage_reg < IO_voltage_reg; // IO voltage constant end ``` Combined with the codes above, it goes like this: ```v module led( input Clock, output IO_voltage ); /********** Counter **********/ //parameter Clock_frequency 27_000_000; // Crystal oscillator frequency is 27Mhz parameter count_value 13_499_999; // The number of times needed to time 0.5S reg [23:0] count_value_reg ; // counter_value reg count_value_flag; // IO chaneg flag always @(posedge Clock) begin if ( count_value_reg < count_value ) begin //not count to 0.5S count_value_reg < count_value_reg + 1'b1; // Continue counting count_value_flag < 1'b0 ; // No flip flag end else begin //Count to 0.5S count_value_reg < 23'b0; // Clear counter,prepare for next time counting. count_value_flag < 1'b1 ; // Flip flag end end /********** IO voltage flip **********/ reg IO_voltage_reg 1'b0; // Initial state always @(posedge Clock) begin if ( count_value_flag ) // Flip flag IO_voltage_reg < ~IO_voltage_reg; // IO voltage flip else // No flip flag IO_voltage_reg < IO_voltage_reg; // IO voltage constant end /***** Add an extra line of code *****/ assign IO_voltage IO_voltage_reg; endmodule ``` Because the `IO_voltage` is declared in the port position, which is wire type by default. To connect it to the reg variable `IO_voltage_reg`, we need to use assign. ## Synthesize, constrain, place&route ### Synthesize After finishing the code, go to the \"Process\" interface and double click \"Synthesize\" to synthesize our code to convert the verilog code content to netlist. ![Synthesize](./../../../../../../../news/others/20k_lite_start/assets/synthesize.png) ### Constraint After Synthesizing our code, we need to set constrains to bind the ports defined in our code to fpga pins, by which we can realize our module function on fpga. Click the FloorPlanner in the top of Synthesize to set constrains. ![FloorPlanner](./../../../../../../../news/others/20k_lite_start/assets/floorplanner.png) Since this is the first time we create it, the following dialog box will pop up. Click OK and the graphical constraint interface will pop up. ![create_constrain_file](./../../../../../../../news/others/20k_lite_start/assets/create_constrain_file.png) ![floorplanner_intreface](./../../../../../../../news/others/20k_lite_start/assets/floorplanner_interface.png) The ways to constraint the file can be get from this docs: [SUG935 1.3E_Gowin Design Physical Constraints User Guide.pdf](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide/SUG935 1.3E_Gowin%20Design%20Physical%20Constraints%20User%20Guide.pdf) Here we only use the IO Constraints method shown below to constrain the pins: ![floor_planner_ioconstrain](./../../../../../../../news/others/20k_lite_start/assets/floor_planner_ioconstrain.png) According to [Schematic of core board](https://dl.sipeed.com/shareURL/TANG/Primer_20K/02_Schematic), we can know the input pin of crystal oscillator is H11。 <img src \"./../../../../../../../news/others/20k_lite_start/assets/crystal_port.png\" alt \"crystal_port\" width 45%> Taking into consideration the IO screen printing on the ext_board, we decide to use the L14 pin on the ext_board for flashing. ![l14_port](./../../../../../../../news/others/20k_lite_start/assets/l14_port.png) So for the IO Constraints under the FloorPlanner interactive window, we fill in the following values for PORT and Location: ![io_constrain_value](./../../../../../../../news/others/20k_lite_start/assets/io_constrain_value.png) Finishing filling, use `Ctrl + S` to save constraints file, then close FloorPlanner interactive graphical interface. Then we see there is a .cst file in our project, and its content are easy to understand. ![cst_content](./../../../../../../../news/others/20k_lite_start/assets/cst_content.png) ### Place & Route After finishing constraining, we run Place & Route. The purpose is to synthesize the generated netlist and our defined constraints to calculate the optimal solution through IDE, then allocate resources reasonably on the FPGA chip. Double click Place&Route marked with red box to run. ![place_route](./../../../../../../../news/others/20k_lite_start/assets/place_route.png)。 Then there is no error, everything works well, we can burn our fpga. ## Burn bitstream It's suggested use this programmer application [Click me](https://dl.sipeed.com/shareURL/TANG/programmer) ro burn fpga. ### Connection comment The JTAG pin orders can be found in the back of 20K core board. <table> <tr> <td>Core Board</td> <td>5V0</td> <td>TMS</td> <td>TDO</td> <td>TCK</td> <td>TDI</td> <td>RX</td> <td>TX</td> <td>GND</td> </tr> <tr> <td>Debugger</td> <td>5V0</td> <td>TMS</td> <td>TDO</td> <td>TCK</td> <td>TDI</td> <td>TX</td> <td>RX</td> <td>GND</td> </tr> </table> ![cable_connect](./../../../../../../../news/others/20k_lite_start/assets/cable_connect.png) ### Scan Device Click `Program Device` twice to run Programmer application. ![open_programmer](./../../../../../../../news/others/20k_lite_start/assets/open_programmer.png) Click scan_device marked by red box to scan our device. ![scan_device](./../../../../../../../news/others/20k_lite_start/assets/scan_device.png) Click OK to burn fpga. ### Burn to SRAM Normally this mode is used to verify bitstream. Because of its fast burning characteristics so the use of more, but of course the power will lose data, so if you want to power on the running program you can't choose this mode. Click the function box below Operation to open the device configuration interface, then select the SRAM Mode option in Access Mode to set to download to SRAM, and finally click the three dots box below to select our generated `.fs` bitstream file . Generally speaking, bitstream firmware file is in the impl > pnr directory. ![sram_mode](./../../../../../../../news/others/20k_lite_start/assets/sram_mode.png) Click where the red box is to burn firmware. ![sram_download](./../../../../../../../news/others/20k_lite_start/assets/sram_download.png) Go to [Questions](https://wiki.sipeed.com/hardware/en/tang/common doc/questions.html) if you have any trouble。 Here we finished downloading into SRAM。 ### Burn into Flash Burning into sram is used for verifying biststream, but can't store program. If we want to run application at startup, we need to burn into flash. This steps are similar to the steps above of burning to SRAM. Click the function box below Operation to open the device configuration interface, then select the External Flash Mode in the Access Mode to burn into external Flash. Finally click the three dots below to select the.fs we generated to download the firmware. Choose the three dots box below to select our generated `.fs` bitstream file. Generally speaking, bitstream firmware file is in the impl > pnr directory. Finally, select the Generic Flash device from the following external Flash options. ![flash_mode](./../../../../../../../news/others/20k_lite_start/assets/flash_mode.png) Click where the red box is to burn firmware. ![flash_download](./../../../../../../../news/others/20k_lite_start/assets/flash_download.png) Then we can run our program when power on. ### Result After using PMOD designed by Sipeed，one led flashes like below. ![result](./../../../../../../../news/others/20k_lite_start/assets/result.gif) ## Question Go to [Questions](https://wiki.sipeed.com/hardware/en/tang/common doc/questions.html) if you have any trouble。"},"/hardware/en/tang/tang-primer-20k/examples/led.html":{"title":"Tang Primer 20K Dock Blink Led","content":" title: Tang Primer 20K Dock Blink Led tags: Tang Primer 20K Dock，start keywords: Primer, Tang, Dock， start，20K desc: Tang Primer 20K Dock start update: date: 2022 12 28 version: v0.1 author: wonder content: Init file To know a programming language, we start with `hello world`. But in hardware development, we start by blinking a led. ## Install IDE Visit [install IDE](https://wiki.sipeed.com/hardware/en/tang/common doc/install the ide.html) to prepare the development environment. For linux user we suggest using [openfpgaLoader](https://wiki.sipeed.com/hardware/zh/tang/common doc/get_started/flash_in_linux.html) to burn the firmware into fpga. ## New Project New Project：File >NEW >FPGA Design Project >OK <img src \"./../../Tang Nano 1K/assets/LED 1.png\" width 58% alt \"new_project\"> Set Project Name and path, Project Name and project path should be English. ![project_path](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/project_path.png) Select Device we choose GW2A LV18PG256C8/I7, use filter like below to help us choose device more easily. Note that the Device is GW2A 18C. ![device_choose](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/device_choose.png) Then click OK to preview the project. After confirming no error, the project is created. ## New file Gowin IDE contains 3 ways to create file. Here we use shortcut keys `Ctrl + N` to new a file. The other 2 ways to new file are not mentioned here, In the pop up windows, we choose `Verilog File`, you can also choose `VHDL File` if you are good at it. Here we just use Verilog as example. <img src \"./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/new_verilog_file.png\" width 50% alt \"new_verilog_file\"> Then click OK to set the file name, here we take `led` as the verilog file name as example. <img src \"./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/file_name.png\" width 75% alt \"file_name\"> Up to now we have finished creating file, then we need to prepare our code. ![created_file](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/created_file.png) ### Verilog introduction Verilog is a kind of Hardware Description Language(HDL), it's used to describe digital circuits. The basic unit in Verilog is module. A module is composed of two parts: one describes the interface, and the other describes the internal logic function, that is, defines how the input affects the output. A module is like this: ```v module module_name #(parameter) (port) ; function endmodule ``` The module starts from module and ends by endmodule. The module is followed by the module name (module_name), transitable variable parameters (parameter), port and direction declaration (port), followed by internal logic function description (function), and finally, endmodule is used to represent this module. The internal logic function is usually composed by the assign and always blocks; The assign statement describes logical circuit, and the always block is used to describe timing circuit. ### Blocking and Non blocking assignments In timing logic, there are two assignment symbols: ` ` and `< `. Note that `< ` means less than or equal to in the if statement, and is not an assignment symbol in the if statement. Visit the [difference between Blocking and Non blocking assignments](#difference between blocking and non blocking assignments) ### Think storm Before coding, we need to think our purpose: The led flashes every 0.5S. Then we draw a demand block diagram as follows: ![block_method](./lite/assets/block_method.png) Then we need a counter to time of every 0.5S, LED flashes means IO flip. ![count_block](./lite/assets/time_count.png) Put the thought diagram into practical use, then it will look like this: ![clock_time_count](./lite/assets/clock_time_count.png) The Clock is the clock source, providing the accurate time for the time counter. ### Code description From the verilog introduction and think storm diagram above, we can see the module we will create contains 2 ports: ```v module led( input Clock, output IO_voltage ); endmodule ``` For time counter inside module, crystal oscillator on the Primer 20K core board is 27MHZ, so we have 27 million times rising edges per second, and we just need to count 13500000 times rising edges to get 0.5 seconds. The counter starts from `0`, and to count 13500000 times rising edges, we count to 13499999. When counted to 0.5S, we set a flag to inform LED IO to flip its voltage. The overall count code is as follows: ```v //parameter Clock_frequency 27_000_000; // Crystal oscillator frequency is 27Mhz parameter count_value 13_499_999; // The number of times needed to time 0.5S reg [23:0] count_value_reg ; // counter_value reg count_value_flag; // IO change flag always @(posedge Clock) begin if ( count_value_reg < count_value ) begin //not count to 0.5S count_value_reg < count_value_reg + 1'b1; // Continue counting count_value_flag < 1'b0 ; // No flip flag end else begin //Count to 0.5S count_value_reg < 23'b0; // Clear counter,prepare for next time counting. count_value_flag < 1'b1 ; // Flip flag end end ``` The code to change IO voltage are as follows: ```v reg IO_voltage_reg 1'b0; // Initial state always @(posedge Clock) begin if ( count_value_flag ) // Flip flag IO_voltage_reg < ~IO_voltage_reg; // IO voltage flip else // No flip flag IO_voltage_reg < IO_voltage_reg; // IO voltage constant end ``` Combined with the codes above, it goes like this: ```v module led( input Clock, output IO_voltage ); /********** Counter **********/ //parameter Clock_frequency 27_000_000; // Crystal oscillator frequency is 27Mhz parameter count_value 13_499_999; // The number of times needed to time 0.5S reg [23:0] count_value_reg ; // counter_value reg count_value_flag; // IO change flag always @(posedge Clock) begin if ( count_value_reg < count_value ) begin //not count to 0.5S count_value_reg < count_value_reg + 1'b1; // Continue counting count_value_flag < 1'b0 ; // No flip flag end else begin //Count to 0.5S count_value_reg < 23'b0; // Clear counter,prepare for next time counting. count_value_flag < 1'b1 ; // Flip flag end end /********** IO voltage flip **********/ reg IO_voltage_reg 1'b0; // Initial state always @(posedge Clock) begin if ( count_value_flag ) // Flip flag IO_voltage_reg < ~IO_voltage_reg; // IO voltage flip else // No flip flag IO_voltage_reg < IO_voltage_reg; // IO voltage constant end /***** Add an extra line of code *****/ assign IO_voltage IO_voltage_reg; endmodule ``` Because the `IO_voltage` is declared in the port position, which is wire type by default. To connect it to the reg variable `IO_voltage_reg`, we need to use assign. ## Synthesize, constrain, place&route ### Synthesize After finishing the code, go to the \"Process\" interface and double click \"Synthesize\" to synthesize our code to convert the verilog code content to netlist. ![Synthesize](./../../../../../../news/others/20k_lite_start/assets/synthesize.png) ### Constraint After Synthesizing our code, we need to set constrains to bind the ports defined in our code to fpga pins, by which we can realize our module function on fpga. Click the FloorPlanner in the top of Synthesize to set constrains. ![floorplanner](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/floorplanner.png) Since this is the first time we create it, the following dialog box will pop up. Click OK and the graphical constraint interface will pop up. ![create_constrain_file](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/create_constrain_file.png) ![floorplanner_intreface](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/floorplanner_interface.png) The ways to constraint the file can be get from this docs: [SUG935 1.3E_Gowin Design Physical Constraints User Guide.pdf](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide/SUG935 1.3E_Gowin%20Design%20Physical%20Constraints%20User%20Guide.pdf) Here we only use the IO Constraints method shown below to constrain the pins: ![floor_planner_ioconstrain](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/floor_planner_ioconstrain.png) According to [Schematic of core board](https://dl.sipeed.com/shareURL/TANG/Primer_20K/02_Schematic), we can know the input pin of crystal oscillator is H11。 <img src \"./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/crystal_port.png\" alt \"crystal_port\" width 45%> Taking into consideration the IO screen printing on the ext_board, we decide to use the L14 pin on the ext_board for flashing. ![led_port](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/led_port.png) So for the IO Constraints under the FloorPlanner interactive window, we fill in the following values for PORT and Location: ![io_constrain_value](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/io_constrain_value.png) Finishing filling, use `Ctrl + S` to save constraints file, then close FloorPlanner interactive graphical interface. Then we see there is a .cst file in our project, and its content are easy to understand. ![cst_content](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/cst_content.png) ### Place & Route After finishing constraining, we run Place & Route. The purpose is to synthesize the generated netlist and our defined constraints to calculate the optimal solution through IDE, then allocate resources reasonably on the FPGA chip. Double click Place&Route marked with red box to run. ![place_route](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/place_route.png) Then there is no error, everything works well, we can burn our fpga. ## Burn bitstream There is onboard programmer for downloading bitstream, and drivers have been installed when [install IDE](https://wiki.sipeed.com/hardware/en/tang/common doc/install the ide.html), we connect dock ext board with computer. ![connected](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/connected.png) ### Scan device Make sure you have enabled the core board first, put the 1 switch on the dip switch down. ![Enable_core_board](./../../../../../hardware/zh/tang/tang primer 20k/assets/start/switch_1_on.png) Double click `Program Device` to run Programmer application ![open_programmer](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/open_programmer.png) Click scan_device to scan device ![scan_device](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/scan_device.png) Click OK to finish selecting device. ### Burn to SRAM Normally this mode is used to verify biststream. Because of its fast burning characteristics so the use of more, but of course the power will lose data, so if you want to power on the running program you can't choose this mode. Click the function box below Operation to open the device configuration interface, then select the SRAM Mode option in Access Mode to set to download to SRAM, and finally click the three dots box below to select our generated `.fs` bitstream file . Generally speaking, bitstream firmware file is in the impl > pnr directory. ![sram_mode](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/sram_mode.png) Click where the red box is to burn firmware. ![sram_download](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/sram_download.png) Go to [Questions](https://wiki.sipeed.com/hardware/en/tang/common doc/questions.html) if you have any trouble。 Here we finished downloading into SRAM。 ### Burn into Flash Burning into sram is used for verifying bitstream, but can't store program. If we want to run application at startup, we need to burn into flash. This steps are similar to the steps above of burning to SRAM. Click the function box below Operation to open the device configuration interface, then select the External Flash Mode in the Access Mode to burn into external Flash. Finally click the three dots below to select the.fs we generated to download the firmware. Choose the three dots box below to select our generated `.fs` bitstream file. Generally speaking, bitstream firmware file is in the impl > pnr directory. Finally, select the Generic Flash device from the following external Flash options. ![flash_mode](./../../../../../../../news/others/20k_lite_start/assets/flash_mode.png) Click where the red box is to burn firmware. ![flash_download](./../../../../../../../news/others/20k_lite_start/assets/flash_download.png) Then we can run our program when power on. ### Result One led flashes like below. ![led_blink](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/led_blink.gif) ## End Up to now we have finished blinking led on fpga, and know how to use GOWIN IDE with fpga.。 ## Difference between Blocking and Non blocking assignments Write a simple codes and simulate it: ```v module test( input CLK, input [3:0] A, output reg [3:0] B,C,D,E ); always@(posedge CLK) begin B < A; C < B; D A; E D; end endmodule ``` ![simulation_result](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/simulation_result.png) According to the simulation results, we can see the difference between blocking and non blocking assignments by comparing the `B` `C` `D` `E` four results. `< ` is non blocking assignments, and all `< ` in a `always` run at the same time, this lead the result in green box, `B` is assigned the value of `A` while `C` is assigned the value of `B`, this happens at the same time, so `C` is assigned the old value of `B`, the value of `C` is one clock delay of `B`. ` ` is blocking assignments, all ` ` in a `always` runs sequentially. In this code, `D` is assigned the value of `A`, then `D` is assigned the value of `E`, so `D` and `E` are the same value. > In general, however, blocking assignment is not recommended in timing logic. And we get two results: Input data is not always valid, it depends on the clock edge. If the data is maintained for less than one clock cycle, it may regard useless data. Every time Triggering the edge clock, the `always` block runs from begin to the end, not runs from the middle. ## Questions ### No Cable found Check if there are two converters in device manager, reinstall programmer driver if there are no two converters in device manager. ![converter](./../../common doc/assets/questions/usb_converter.png) ### No gowin device found Make sure you have enabled the core board. ### Other questions Visit [Gowin errors to solve this problem](https://wiki.sipeed.com/hardware/en/tang/common doc/questions.html)"},"/hardware/en/tang/tang-primer-20k/example.html":{"title":"Tang Primer 20K examples tutorial","content":" title: Tang Primer 20K examples tutorial keywords: Tang Primer 20K ,example, guide update: date: 2022 10 17 version: v0.1 author: wonder content: Determine directory > All examples articles and github are continuing building, thanks for your understanding. ## LED Dock ext board contains 6 LEDs, we can do many things by them. Combined logic operation: [Assign led on] <! (./examples/assign_led.md)（The guide of IDE，necessary read） > [Key_led_on] <! (./examples/key_led_on.md) (The guide of following documents，necessary read) > [Xor_logic_led_on] <! (./examples/xor_led_on.md) > [Decode_led_on] <! (./examples/decode_led_on.md) > Timing logic operation: [Counter blink led](./examples/led.html) [Flow led] <! (./examples/water_led.md) > Breath_led ## RGB LCD ## SPI LCD ## CAM LCD ## Others HDMI USB example Ethernet"},"/hardware/en/tang/tang-primer-20k/start.html":{"title":"Tang Primer 20K","content":" title: Tang Primer 20K keywords: FPGA, Primer, Tang, 20K update: date: 2022 11 08 version: v0.1 author: wonder content: Init docs Ongoing editing. We have 2 ext board for Tang Primer 20K, the Dock and the Lite. Here I will tell the start of them ## Dock ext board ### Matters need attention Here are matters need attention, to avoid spending much time dealing with trouble and fail at last. #### Enable Core Board For 20K Dock kits, it's necessary to enable the core board before using debugger debug the chip, just put the 1 switch on the dip switch down, otherwise LED0 and LED1 are on and core board dose not work. Enable Core Board Disable state Additional comments <img src \"./../../../zh/tang/tang primer 20k/assets/start/switch_1_on.png\" alt \"switch_1_on\" width 100%><img src \"./../../../zh/tang/tang primer 20k/assets/start/reset_led_on.png\" alt \"reset_led_on\" width 100%> When disabled, the LDE0 and LED1 is on, and core board doesn't work. #### Device not work We have inserted the Core Board into Dock ext board before delivery, but sometimes we need remove the Core board for some reasons, and after reinserting the Core Board into Dock ext board, they don't work. The correct connection steps is to insert the Core board into the ext board at an Angle roughly as shown in the left figure below. Make sure that the Core board inserted diagonally from above is in uniform contact with the ext board, which can be judged by the degree of uniformity of the exposed gold finger. <img src \"./../../../zh/tang/tang primer 20k/assets/start/edge_view.png\" alt \"edge_view\" width 45%> <img src \"./../../../zh/tang/tang primer 20k/assets/start/top_view.png\" alt \"top_view\" width 35%> Then gently press the tilted end, you can hear a sound of the Core board being fixed by the ext board slot. If you find it difficult to press the tilted end, you can try to polish both sides of the Core board slightly to eliminate the size error caused by the production process. <img src \"./../../../zh/tang/tang primer 20k/assets/start/clean_core_board.png\" alt \"clean_core_board\" width 20%> Just polish the two sides of the red box in the figure above to reduce the difficulty of inserting. #### Hardware version introduction For Dock ext board, we can know the version of our board from the mark in the following picture. ![version](./../../../zh/tang/tang primer 20k/assets/start/dock version.png) From the figure we can know the version of this board is V3708. Here are their errors. ##### V3708 LED2 and LED3 are marked wrong, thay should be： Name Correct mask Wrong mask LED2 N16 B14 LED3 N14 N16 ### Start to use For Dock ext board, the following things can be done with default firmware. Press key S0, reset the RGB screen, camera, HDMI signal. And LED3, LED4, LED5 are on. Press key S0 to key S5, the state of LED0, lED1, LED2 changes. Connect OV5640 camera and 4.3 inch RGB screen with Dock ext board (Make sure power is off while connecting), the screen display the picture captured by camera. If the screen displays not well, try to press key S0, this will synchronize the camera picture and screen content. ### Start coding [Blink a led](./examples/led.html) ### Questions Visit [Questions](./../common doc/questions.html) for more solvements ## Lite ext board ### Hardware version introduction For Lite ext board，we can know the version of our board from the mark in the following picture. ![lite version](./../../../zh/tang/tang primer 20k/assets/start/lite version.png) From the figure we can know the version of this board is 3710. Here are their errors. #### 3710 The mask between R8 and P9 is P8. Refer to the left top of the right picture. <div> <img src \"./../../../zh/tang/tang primer 20k/assets/lite up.png\" alt \"lite up\" width 45%> <img src \"./../../../zh/tang/tang primer 20k/assets/lite back.png\" alt \"lite back\" width 45%> </div> ### Start coding [点一个灯](https://wiki.sipeed.com/news/others/20k_lite_start/20k_lite_start.html) ### Questions Visit [Questions](./../common doc/questions.html) for more solvements"},"/hardware/en/tang/tang-primer-20k/primer-20k.html":{"title":"Tang Primer 20K","content":" title: Tang Primer 20K keywords: FPGA, Primer, Tang, 20K update: date: 2022 08 25 version: v0.1 author: wonder content: Init docs ## Introduction Tang Primer 20K is a core board with DDR3 sodimm shape based on [GW2A LV18PG256C8/I7](https://www.gowinsemi.com/en/product/detail/38/) as the main chip, with 2 ext boards are prepared, the Dock and the Lite. <div> <img src \"./assets/20k_front.png\" width 45%> <img src \"./assets/20k_back.png\" width 45%> </div> Buy it: [Aliexpress](https://www.aliexpress.com/item/1005004653308809.html) ## Parameters <table> \t<thead> \t\t<tr> \t\t\t<th style \"text align:center\">Item</th> \t\t\t<th style \"text align:center\">Parameter</th> \t\t\t<th style \"text align:center\">Addition</th> \t\t</tr> \t</thead> \t<tbody> \t\t<tr> \t\t\t<td style \"text align:left\">FPGA Chip</td> \t\t\t<td style \"text align:left\"><a href \"https://www.gowinsemi.com/en/product/detail/38/\">GW2A LV18PG256C8/I7</a> \t\t\t</td> \t\t\t<td style \"text align:left\"> \t\t\t\t<table> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Logic units(LUT4)</td> \t\t\t\t\t\t<td>20736</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Flip Flop(FF)</td> \t\t\t\t\t\t<td>15552</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Shadow SRAM S SRAM(bits)</td> \t\t\t\t\t\t<td>41472</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Block SRAM B SRAM(bits)</td> \t\t\t\t\t\t<td>828K</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Number of B SRAM</td> \t\t\t\t\t\t<td>46</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>18x18 Multiplier</td> \t\t\t\t\t\t<td>48</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>PLLs</td> \t\t\t\t\t\t<td>4</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>I/O Bank</td> \t\t\t\t\t\t<td>8</td> \t\t\t\t\t</tr> \t\t\t\t</table> \t\t\t</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Memory</td> \t\t\t<td style \"text align:left\">128M DDR3</td> \t\t\t<td style \"text align:left\"></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Flash</td> \t\t\t<td style \"text align:left\">32Mbits NOR Flash</td> \t\t\t<td style \"text align:left\">Read <a href \"#burn_flash\">burn Flash</a></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Debugger</td> \t\t\t<td style \"text align:left\">Jtag + Uart</td> \t\t\t<td style \"text align:left\">JST SH1.0 8Pins connector</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">SD card slot</td> \t\t\t<td style \"text align:left\">1</td> \t\t\t<td style \"text align:left\">Push pull type</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Display</td> \t\t\t<td style \"text align:left\">8Pins spi lcd connector</td> \t\t\t<td style \"text align:left\"></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Package</td> \t\t\t<td style \"text align:left\">204P DDR3</td> \t\t\t<td style \"text align:left\"></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Available IO</td> \t\t\t<td style \"text align:left\">117</td> \t\t\t<td style \"text align:left\"></td> \t\t</tr> \t</tbody> </table> ## Comparison between ext board ### Dock ext board appearance The corresponding pins numbering of LED2 and LED3 is N16 and N14. See the mark on left of the right picture. <div> <img src \"./../../../zh/tang/tang primer 20k/assets/dock up.png\" alt \"dock up\" width 45%> <img src \"./../../../zh/tang/tang primer 20k/assets/dock back.png\" alt \"dock back\" width 45%> </div> ### Lite ext board appearance The corresponding pin numbering between R8 and P9 is P8. See the mark on the top left of the right picture. <div> <img src \"./../../../zh/tang/tang primer 20k/assets/lite up.png\" alt \"lite up\" width 45%> <img src \"./../../../zh/tang/tang primer 20k/assets/lite back.png\" alt \"lite back\" width 45%> </div> ### Comparison between peripherals of ext board <table> \t<thead> \t\t<tr> \t\t\t<th rowspan \"2\" colspan \"2\">Item</th> \t\t\t<th colspan \"2\">Dock</th> \t\t\t<th colspan \"1\">Lite</th> \t\t</tr> \t\t<tr> \t\t\t<th>Number</th> \t\t\t<th>Addition</th> \t\t\t<th>Number</th> \t\t</tr> \t</thead> \t<body> \t\t<tr> \t\t\t<td colspan \"2\">RGB Interface</td> \t\t\t<td>1</td> \t\t\t<td>RGB565 40P FPC Connector</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">DVP Interface</td> \t\t\t<td>1</td> \t\t\t<td>24P FPC Connector</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">Mic array Interface</td> \t\t\t<td>1</td> \t\t\t<td>10P FPC Connector</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">Touch Interface</td> \t\t\t<td>1</td> \t\t\t<td>6P FPC Connector</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">PMOD Interface</td> \t\t\t<td>4</td> \t\t\t<td></td> \t\t\t<td>4</td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">3.5mm headphone Jack</td> \t\t\t<td>1</td> \t\t\t<td>LPA4809MSF driver</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">DIP switch</td> \t\t\t<td>1</td> \t\t\t<td>5P DIP switch</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">Slide switch</td> \t\t\t<td>1</td> \t\t\t<td>Switch USB function</td> \t\t\t<td>2</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"white space:nowrap\" rowspan \"2\">Type C</td> \t\t\t<td style \"white space:nowrap\">USB JTAG&UART</td> \t\t\t<td>1</td> \t\t\t<td>Onboard BL702 used to download bitstream file and provide serial communication</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"white space:nowrap\">User defined USB</td> \t\t\t<td>1</td> \t\t\t<td>USB3317 with Slide switch to change USB Interface function</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">Wireless antenna</td> \t\t\t<td>1</td> \t\t\t<td>BL702 wireless function</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">Key</td> \t\t\t<td>6</td> \t\t\t<td>One used for burning BL702,<br>five for Users</td> \t\t\t<td>2</td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">LED</td> \t\t\t<td>6</td> \t\t\t<td></td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">HDMI Interface</td> \t\t\t<td>1</td> \t\t\t<td></td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">Ethernet Interface</td> \t\t\t<td>1</td> \t\t\t<td>RTL8201F</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">RGB LED</td> \t\t\t<td>1</td> \t\t\t<td>WS2812</td> \t\t\t<td></td> \t\t</tr> \t</body> </table> ## Hardware information [Datasheet](https://dl.sipeed.com/shareURL/TANG/Primer_20K/01_Specification) [Schematic](https://dl.sipeed.com/shareURL/TANG/Primer_20K/02_Schematic) [Bit map](https://dl.sipeed.com/shareURL/TANG/Primer_20K/03_Bit_number_map) [Net Length](https://dl.sipeed.com/shareURL/TANG/Primer_20K/04_Net_Length) [Dimension](https://dl.sipeed.com/shareURL/TANG/Primer_20K/05_Dimensional_drawing) [Core board package](https://dl.sipeed.com/shareURL/TANG/Primer_20K/06_Footprint) (KICAD) [Chip manual](https://dl.sipeed.com/shareURL/TANG/Primer_20K/07_Chip_manual) [3D model](https://dl.sipeed.com/shareURL/TANG/Primer_20K/08_Dimensions) ## User guide `Install IDE` > `Learn coding programmer` > `Read Tutorial` > `Program by yourself` > `Read more official documents` 1. Install IDE: [Click me](./../common doc/install the ide.html). 2. Visit [Start to use](https://wiki.sipeed.com/hardware/en/tang/tang primer 20k/start.html) to avoid some problems, and we can start coding for FPGA there. 3. After coding for FPGA, if you think it difficult, here we collect some useful learning resource. + Online FPGA tutorial: [Verilog](https://www.asic world.com/verilog/index.html) + Online Verilog exercise：[HDLBits](https://hdlbits.01xz.net/wiki/Main_Page) \tIf you have trouble using IDE, we have packed all documents about IDE, visit [Download station](https://dl.sipeed.com/shareURL/TANG/Primer_20K/07_Chip_manual/EN/General%20Guide) and download what you need. ## Reference examples summary ### Examples github ：https://github.com/sipeed/TangPrimer 20K example ### Tutorial Lite ext board blink ：[Click me](./examples/lite/blink.html) <! Dock ext board examples summary : [Click me](./example.html) > Dock ext board blink : [Click me](./examples/led.html) ## Communication **Reddit** : [reddit.com/r/GowinFPGA/](reddit.com/r/GowinFPGA/) **Telegram** : [t.me/sipeed](t.me/sipeed) Leave message in the end of this page Business email : [support@sipeed.com](support@sipeed.com) ## Additional message The default bank voltage of bank 0、bank 1、bank 7 on the core board is 3.3V, so their bank IO voltage is 3.3V output. If you want to custom the input IO bank voltage, please remove R5 and R9, see Assembly [Click me](https://dl.sipeed.com/shareURL/TANG/Primer_20K/03_Bit_number_map) to see where is R5 and R9. ![io_vltage](./../../../zh/tang/tang primer 20k/assets/io_vltage.png) And the corresponding golden finger on core board are as following: ![sodimm_voltage](./../../../zh/tang/tang primer 20k/assets/sodimm_voltage.png) ## Questions ### Dock ext board not work For 20K Dock kits, it's necessary to enable the core board before using debugger debug the chip, just put the 1 switch on the dip switch down, otherwise LED0 and LED1 are on and core board dose not work. Enable Core Board Disable state Additional comments <img src \"./../../../zh/tang/tang primer 20k/assets/start/switch_1_on.png\" alt \"switch_1_on\" width 100%><img src \"./../../../zh/tang/tang primer 20k/assets/start/reset_led_on.png\" alt \"reset_led_on\" width 100%> When disabled, the LDE0 and LED1 is on, and core board doesn't work. ### How to burn into flash {#burn_flash} Do following configurations: <img src \"./../../../zh/tang/tang primer 20k/assets/flash_mode.png\" alt \"flash_mode\" width 75%> ### No reaction after burning or phenomenon is wrong Make sure you hace selected right device, and all parameters are the same as following. <img src \"./../../../zh/tang/tang primer 20k/assets/device_choose.png\" alt \"device_choose\" width 75%> Then make sure your code logic is right and your ### Successfully burned once, but can't burn after that Note that the description is there was a successful Flash burnt one time. In this case, the default reason is that the wrong Dual Purpose pin is enabled and the debugger can no longer scan the FPGA's JTAG. You can short pin 1 and pin 4 of Flash, by which the chip cannot read FLASH normally when it is powered on. ![flash_cs](./../../../zh/tang/tang primer 20k/assets/flash_cs.png) Besides, if you have dock ext board, this can be solved by the enable pin of dip switch. Here art the steps Firstlt, enable the core board, put the 1 switch on the dip switch down, then do something (like burning fpga or erasing FPGA) in Programmer application, when the progress bar shows, switch the 1 switch on the dip switch up and down, after which you will find the progress bar works and finish your operations on fpga. <table> \t<tr> \t\t<td><img src \"./assets/start/switch_1_on.png\" alt \"switch_1_on\"></td> \t\t<td> Enable the core board first </td> \t</tr> \t<tr> \t\t<td><img src \"./assets/start/progress_bar.jpg\" alt \"progress_bar\"></td> \t\t<td> Do operation on board, when progress bar shows, switch the 1 switch on the dip switch up and down</td> \t</tr> \t<tr> \t\t<td> \t\t<img src \"./assets/start/switch_1_off.jpg\" alt \"switch_1_off\" witdh \"25%\"> \t\t<img src \"./assets/start/switch_1_on.png\" alt \"switch_1_on\" witdh \"25%\"> \t\t</td> \t\t<td> put the 1 switch on the dip switch up and down </td> \t</tr> \t<tr> \t\t<td><img src \"./assets/start/progress_bar_running.jpg\" alt \"progress_bar_running\"><img src \"./assets/start/progress_bar_finishing.jpg\" alt \"progress_bar_finishing\"></td> \t\t<td> Progress bar works and finish your operations on fpga </td> \t</tr> </table> ### Visit [Questions](./../common doc/questions.html) for more"},"/hardware/en/tang/Tang-Nano-4K/examples/led.html":{"title":"Blink LED","content":" title: Blink LED > Edit on 2022.04.15 From this essay we can learn the basic usage of Gowin IDE ## Create Project Create Project：File >NEW >FPGA Dsign Project >OK ![](./../../../../zh/tang/Tang Nano/assets/LED 1.png) Set project name and project path (File name and project path shoule be English) ![](./../../../../zh/tang/Tang Nano/assets/LED 2.png) Choose correct device: ![Tang_nano_4k_device_choose](./../../../../zh/tang/Tang Nano 4K/assets/Nano_4K_device_choose.png) The main chip model on some boards is C7/I6, please pay attention to this and choose correct model. ## Prepare codes After creating project, we can start editing codes. To create a new file, we can click where the arrow points to in the picture or use shortcut key Ctrl+N. Then choose Verilog File in the pop up window. ![](./../../../../zh/tang/Tang Nano/assets/LED 5.png) Name for file (Suggested using English) ![](./../../../../zh/tang/Tang Nano/assets/LED 6.png) Double click the created file, then edit in right window ![](./../../../../zh/tang/Tang Nano/assets/LED 7.png) We use light led as an example, copy the following \"LED example codes\" into the created file or edit the created file by yourself. ```verilog module led ( input sys_clk, input sys_rst_n, // reset input output reg led // LED ); reg [23:0] counter; //定义一个变量来计数 always @(posedge sys_clk or negedge sys_rst_n) begin // Counter block if (!sys_rst_n) counter < 24'd0; else if (counter < 24'd1349_9999) // 0.5s delay counter < counter + 1'b1; else counter < 24'd0; end always @(posedge sys_clk or negedge sys_rst_n) begin // Toggle LED if (!sys_rst_n) led < 1'b1; else if (counter 24'd1349_9999) // 0.5s delay led < ~led; // ToggleLED end endmodule ``` After finishing edit the file, it's necessary to tick the `Use DONE as regular IO` in Project >Configuration >Place&Route >Dual Purpose Pin to avoid error. ![img_configuration](./../../../../zh/tang/Tang Nano 9K/nano_9k/LED_Configuration.png) ## Synthesize, constrain, place&route ### Synthesize After finishing steps above, go to the \"Process\" interface, Synthesize the edited file, which means running \"Synthesize\". ![](./../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_synthsize.png) If the result is the same as shown below ![](./../../../../zh/tang/Tang Nano/assets/LED.png) It means that there is no bug in our code, we can continue the next steps. If there is some thing wrong, please fix by yourself. ### Constrain Clock constraint is not involved here To realize function of the code on FPGA, we must bind the ports we define with the chip pins. Double click the FloorPlanner in the Process interface to set pin constraints(This can be continued if failing Synthesize). ![](./../../../../zh/tang/assets/examples/led_pjt_2.png) First time open FloorPlanner it will prompt lack of \".cst\" file, we just choose ok. ![](./../../../../zh/tang/Tang Nano/assets/LED 9.png) The leds schematic of nano 9k is as shown below: ![](./../../../../zh/tang/Tang Nano 4K/assets/LED_Pin.png \"nano 4k led pin\") port I/O pin desc sys_clk input 45 Clock input sys_rst_n input 15 System_reset led output 10 LED In this GUI interface we have two ways to constrain pins: Drag the corresponding port to the pin of chip Type the pin number corresponding to the port in IO constraint So we can choose one way in the opened window as what the following picture shows to finish constraints: ![Led floorplanner](./../../../../zh/tang/Tang Nano 4K/assets/LED_FloorPlanner.png) ### Place&Route > If it shows error 2017, the solve way can be found ahead(Tips: Enable Dual Purpose Pin) After finishing Running \"Place&Route\" in the Process interface window, the result will be as same as below ![](./../../../../zh/tang/Tang Nano 4K/assets/Place&Route.png) ## Program Then connect the board with computer, download firmware. You can scan the device according to the following picture. ![](./../../../../zh/tang/Tang Nano 4K/assets/nano 4k device scan.png) We use download to SRAM as an example. Configure download mode ![](./../../../../zh/tang/Tang Nano 4K/assets/nano 4k sram choose.png) Then we just click download to start program device. The led on the board will blink If you need to store firmware with no power, just choose download to flash mode. ## End Now the tutorial ends, if you have any suggestions, just leave a message."},"/hardware/en/tang/Tang-Nano-4K/examples/hdmi.html":{"title":"","content":""},"/hardware/en/tang/Tang-Nano-4K/Tang-nano-4k.html":{"title":"Tang Nano 4k examples","content":" title: Tang Nano 4k examples Before reading, we suggest using this [Programmer](https://dl.sipeed.com/shareURL/TANG/programmer) not that installed with IDE Detail [Files](https://github.com/sipeed/TangNano 4K example) After connecting the camera and HDMI display, flash the project to the development board to see the corresponding results. [Blink](./examples/led.html) HDMI display(Preparing, please wait) Display camera content by HDMI(Preparing, please wait) Cortex m3 blink(Preparing, please wait) others(Any ideas could be come up, and will be accepted if feasible)"},"/hardware/en/tang/Tang-Nano-4K/Nano-4K.html":{"title":"Tang Nano 4K ","content":"# Tang Nano 4K > Edit on 2022.08.16 ## Introduction Tang Nano 4K is a development board designed based on [Gowin](https://www.gowinsemi.com/en/) little bee GW1NSR LV4C FPGA chip. The board is equipped with camera interface and HDMI interface. There is also an onboard USG JTAG debugger, which make it convenient for users to use. Its Cortex M3 hardcore can help users study mcu. ![Tang Nano 4K](./assets/4k 1.jpg) ![Tang Nano 4K](./assets/4k 2.jpg) ## Specs The sheet below shows difference with previous product model Tang Nano Tang Nano 4K FPGA chip GW1N 1 LV GW1NSR LV4C logic units 1152 4608 Register 864 3456 Hard processor none ARM Cortex M3 Block SRAM(bits) 72K 180K User flash(bits) 96K 256K Number of PLL 1 2 Number of I/O Bank 4 4 Number of users I/O 41 44 Screen interface 40P RGB LCD interface HDMI interface camera interface None DVP interface Size 58.4mm\\*21.3mm 60mm\\*22.86mm ### Pinmap ![Pinmap](./../../../zh/tang/Tang Nano/assets/Tang_nano_4K_0813.png) ## Development software Visit [install ide](https://wiki.sipeed.com/hardware/en/tang/common doc/install the ide.html) to setup your programming environment. ## Burn firmware Tang Nano 4K uses the onboard BL702 for jtag, with which to burn bitstream. Run the Programmer in Gowin IDE to download firmware into FPGA. ## Informations [Datasheet](https://dl.sipeed.com/shareURL/TANG/Nano%204K/HDK/01_Specification) [Schematic](https://dl.sipeed.com/shareURL/TANG/Nano%204K/HDK/02_Schematic) [Bit number map](https://dl.sipeed.com/shareURL/TANG/Nano%204K/HDK/03_Bit%20number%20map) [Dimensional drawing](https://dl.sipeed.com/shareURL/TANG/Nano%204K/HDK/04_Dimensional%20drawing) [3D File](https://dl.sipeed.com/shareURL/TANG/Nano%204K/HDK/05_3D%20file) [hip Manual](https://dl.sipeed.com/shareURL/TANG/Nano%204K/HDK/06_Chip%20Manual) [Examples](https://wiki.sipeed.com/hardware/en/tang/common doc/examples.html) ## Addition 1. If you have trouble with this board, you can join our telegram (t.me/sipeed) or contact us on twitter (https://twitter.com/SipeedIO). Leaving message below is also OK. 2. Visit [Tang questions](https://wiki.sipeed.com/hardware/en/tang/common doc/questions.html) first if you have any trouble. 3. Debugging Cortex M3, we suggest to use serial port debug way. If you are excellent enough you can try other ways to debug it. 4. THe HDMI ports are multiplexed as IO and routed to the pin headers. The actual results of the IO which are multiplexed with HDMI pins on the pin headers may not be consistent with what you want because of the external pull up. ![nano_4k_hdmi_io](./../../../zh/tang/Tang Nano 4K/assets/nano_4k_hdmi_io.png)"},"/hardware/en/tang/Tang-Nano-4K/start.html":{"title":"摄像头和HDIM屏幕显示","content":"# 摄像头和HDIM屏幕显示 具体工程[文件](https://github.com/sipeed/TangNano 4K example) 接好摄像头和HDMI显示器之后，将这个工程烧录到开发板上即可使用了。"},"/hardware/en/tang/tang-mega-138k/mega-138k.html":{"title":"Tang Mega 138K Dock","content":" title: Tang Mega 138K Dock keywords: FPGA, Tang, Mega, 138K update: date: 2024 06 26 version: v0.1 author: Serika content: Create document date: 2024 09 26 version: v0.2 author: Serika content: Corrected description of PCIe bus widths date: 2025 01 24 version: v0.3 author: Serika content: Add Secondary lic server ip addr. date: 2025 09 30 version: v0.4 author: Serika content: Add configuration file maximum size Instructions for correcting flash capacity ## Overview Tang Mega 138K uses a 22nm process **GW5AST LV138PG484A** FPGA chip, which has 138,240 lookup table units and nearly 300 DSP units. It contains eight high speed transceivers with a speed range of 270Mbps ~ 8.0Gbps, suitable for transmitting data through high speed ports such as PCIe. In addition, the chip contains a hard core PCIe, which consumes better resources when using PCIe and achieves better performance. It is suitable for high speed communication, protocol conversion, high performance computing, and other occasions. Compared to the 138K Pro Dock, the 138K Dock has a smaller size and a lower price, and it replaces the SFP transceiver with USB3 SS(5Gbps). This not only effectively reduces the cost of high speed communication but also brings better versatility. aliexpress purchase link: [Click me](https://www.aliexpress.com/item/3256807078990410.html) ## Board Features Large capacity LUT4 Large capacity memory PCIe 2.0 x 4 USB3.0 x 1(5Gbps) RISC V hard core (AE350 @800MHz) HDMI TX/RX x 1 Gigabit Ethernet x 1 Onboard 3.7V li on battery(1 Series) charge/discharge management ## Product Appearance <img src \"./assets/mega_138k_top.png\" width \"45%\"> ## Block Diagram TBD ## Hardware Parameters ### SOM Board Parameters <table> \t<thead> \t\t<tr> \t\t\t<th style \"text align:center\">Item</th> \t\t\t<th style \"text align:center\">Parameter</th> \t\t\t<th style \"text align:center\">comment</th> \t\t</tr> \t</thead> \t<tbody> \t\t<tr> \t\t\t<td style \"text align:left\">FPGA Chip</td> \t\t\t<td style \"text align:left\"><a href \"https://www.gowinsemi.com/en/product/detail/60/\">GW5AST LV138PG484A</a> \t\t\t</td> \t\t\t<td style \"text align:left\"> \t\t\t\t<table> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Logic Unit (LUT4)</td> \t\t\t\t\t\t<td>138240</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Register (FF)</td> \t\t\t\t\t\t<td>138240</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Distributed SRAM<br>(S SRAM) (Kbits)</td> \t\t\t\t\t\t<td>1080</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Block SRAM (B SRAM) (Kbits)</td> \t\t\t\t\t\t<td>6120</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Number of Block SRAMs (B SRAM) (pcs)</td> \t\t\t\t\t\t<td>340</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Multiplier (18x18 Multiplier)/td> \t\t\t\t\t\t<td>298</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Phase Locked Loop (PLLs)</td> \t\t\t\t\t\t<td>12</td> \t\t\t\t\t</tr> <tr> <td>Global Clock</td> <td>16</td> </tr> <tr> <td>High Speed Clock</td> <td>24</td> </tr> <tr> <td>Transceivers</td> <td>4</td> </tr> <tr> <td>Transceivers Rate</td> <td>270Mbps 8.0Gbps</td> </tr> <tr> <td>PCIe HardCore</td> <td>x1<br>Speed optional x1, x2, x4 PCIe 3.0</td> </tr> <tr> <td>LVDS (Gbps)</td> <td>1.25</td> </tr> <tr> <td>DDR3 (Mbps)</td> <td>800</td> </tr> <td>Hard Core SoC</td> <td>RiscV AE350_SOC</td> </tr> <tr> <td>ADC</td> <td>2</td> </tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Total I/O Bank<</td> \t\t\t\t\t\t<td>10</td> \t\t\t\t\t</tr> \t\t\t\t</table> \t\t\t</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Memory</td> \t\t\t<td style \"text align:left\">1GB DDR3</td> \t\t\t<td style \"text align:left\">512MB x 2</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Flash</td> \t\t\t<td style \"text align:left\">128/64Mbits Flash x 1</td> \t\t\t<td style \"text align:left\">See <a href \"#burn_flash\">How to Burn to Flash</a></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Debug Interface</td> \t\t\t<td style \"text align:left\">JTAG + UART</td> \t\t\t<td style \"text align:left\">JST SH1.0 8 Pins CONN.</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Overall Package</td> \t\t\t<td style \"text align:left\">35mm x 45mm Size</td> \t\t\t<td style \"text align:left\">BTB CONN. Connects the SOM and the Dock Board</td> \t\t</tr> \t</tbody> </table> > *Note: 128Mbits Flash version available with the Anniversary Update (Oct. 2025) and for all later releases.* ### Dock board Parameters Item Quantity Remarks : LEDs 4+8 4x Battery Indicator+ 8x PMOD_LED WS2812 1 The WS2812 & aRGB strip CONN. share the same pin Buttons 3+1 3x User KEY + 1x Reconfig KEY PCIe 1 1 lane @ 5Gbps USB3 1 CH569 16bit HSPI, SuperSpeed @ 5Gbps Ethernet 1 1000Mbps Ethernet DVI(HDMI) 1 DVI supports both RX and TX PMOD 2 Multiplexed with the the DVP CONN. & 2x20P header at the top of the Dock board ADC 2 2x differential input channels DVP Interface 1 Multiplexed with the the PMOD & 2x20P header at the top of the Dock board RGB Interface 1 Supports RGB888 screen MIC ARRAY Interface 1 Supports Sipeed 6+1 microphone array SD Slot 1 1 bit SDIO/MMC or SPI mode BATT CONN. 1 Supports 3.7V li on battery, with built in charge management PWM FAN CONN. 1 Supports PWM fan with TACHO Speaker CONN. 2 Support stereo output, 2x 3W Speaker 3.5mm Headphone CONN. 1 Supports stereo output, without Mic MS5351 1 Provides RefClk for Serdes; control output via onboard UART USB JTAG & UART 1 Supports FPGA programming and provides UART function 2x20P headers 2 2x20P header at the top of the Dock board multiplexed with the the PMOD & DVP CONN. Power button 1 **Press and hold for 2 seconds to toggle power state** 12V DC 1 DC5521 ## Hardware Resources ~~[Specification](https://dl.sipeed.com/shareURL/TANG/Mega_138K_60K/01_Specification)~~ [Schematics](https://dl.sipeed.com/shareURL/TANG/Mega_138K_60K/02_Schematic) [PCB BOM](https://dl.sipeed.com/shareURL/TANG/Mega_138K_60K/03_Designator_drawing) [Dimension Diagram](https://dl.sipeed.com/shareURL/TANG/Mega_138K_60K/04_Mechanical_drawing) [3D Model](https://dl.sipeed.com/shareURL/TANG/Mega_138K_60K/05_3D_file) [Some Chip Manuals](https://dl.sipeed.com/shareURL/TANG/Mega_138K_60K/07_Datasheet) [All PIN Constraints](https://dl.sipeed.com/shareURL/TANG/Mega_138K_60K/08_Misc) ## Getting Started Note that 138K is currently supported by the educational version. You need to download the educational IDE version V1.9.9 or later. The commercial IDE requires V1.9.11.03 or later. To download the bitstream to flash memory, we recommend using **exFlash Erase, Program through GAO Bridge 5A** mode (V1.9.11.03 or later) or **exFlash Erase, Program through GAO Bridge Arora V** (V1. 9.12 or later). We recommend using the standalone **1.9.12 SP1** Programmer (also known as Gowin Programmer), which can be found on the **Yunyuan Software Commercial Version** page. This standalone programmer offers better compatibility. If you need to use the commercial IDE, you can apply for a license on the Gaoyun official website or use the online license service provided by Sipeed. Select Floating License in the IDE and fill in the following information: ~~~ Server 01 ip: 106.55.34.119 port: 10559 ~~~ Install IDE [Click me](https://wiki.sipeed.com/hardware/zh/tang/common doc/get_started/install the ide.html) Example code [github](https://github.com/sipeed/TangMega 138K example) Other Learning Resources Free online tutorial: [Verilog Tutorial](https://www.runoob.com/w3cnote/verilog tutorial.html) (Learn Verilog) Free online FPGA tutorial: [Verilog](https://www.asic world.com/verilog/index.html) (English website) Verilog practice website: [HDLBits](https://hdlbits.01xz.net/wiki/Main_Page) (English website) Online Gowin Semiconductor reference video tutorials: [Click here](http://www.gowinsemi.com.cn/video_complex.aspx?FId n15:15:26) ## Communication Methods **Reddit** : [reddit.com/r/GowinFPGA/](reddit.com/r/GowinFPGA/) **Telegram** : [t.me/sipeed](t.me/sipeed) Discussion forum: [maixhub.com/discussion](https://maixhub.com/discussion) QQ discussion group: [834585530](https://jq.qq.com/?_wv 1027&k wBb8XUan) Leave a message directly below this page Goto**[GitHub project page](https://github.com/sipeed/TangMega 138K example)**and submit issues Business email : [support@sipeed.com](support@sipeed.com) ## Precautions <table> <tr> <th>Item</th> <th>Precautions</th> </tr> <tr> <td>Chip Model</td> <td>The specific model of the FPGA chip used by Tang Mega 138K is <b>GW5AST LV138FPG676A</b>. <br>Please select the package model <span><b>PBG484A</b></span> & <span><b>Device Version: B/C</b></span> in the IDE. <a href \"../common doc/questions#How to Identify Device Version\">How to identify the device version</a></td> </tr> <tr> <td>Static Electricity</td> <td>Please avoid static electricity hitting the PCBA; release the static electricity from your hands before touching the PCBA.</td> </tr> <tr> <td>Tolerance Voltage</td> <td>When using GPIO pin headers for external communication, ensure that the IO voltage is 3.3V. Excessive voltage will permanently damage the PCBA.</td> </tr> <tr> <td>FPC Socket</td> <td>When connecting the FPC soft cable, please ensure that the cable is completely and correctly inserted into the socket without any deviation.</td> </tr> <tr> <td>PCIE Gold Finger</td> <td>When testing the PCIE gold finger, ensure that both the host and the board are in the off or unpowered state to avoid short circuiting the gold finger due to displacement during the insertion process.</td> </tr> <tr> <td>Plug and Unplug</td> <td>Please completely power off before plugging and unplugging.</td> </tr> <tr> <td>Avoid Short Circuit</td> <td>Please avoid any liquid or metal touching the solder pads of the components on the PCBA during the power on process, otherwise it may cause a short circuit and burn the PCBA.</td> </tr> </table> ## Contact Tang Mega 138K can meet different needs of customers in various scenarios. For technical support and business cooperation, please contact [support@sipeed.com](support@sipeed.com) ## Frequently Asked Questions (FAQs) ### The system does not recognize the onboard debugger Try connecting directly to the computer instead of through a USB HUB. Try using a better quality USB cable. Try another computer to rule out the computer being the problem. Try [update to the latest firmware](#How to update the firmware for the onboard debugger) and try again. ### The UART of the onboard debugger cannot be used Try reinstall FTDI drivers. IF the actual baudrate is always four times the set baudrate or the UART continuously outputs garbled characters. try [update to the latest firmware](#How to update the firmware for the onboard debugger) and try again. ### OpenFPGAloader not work Try [update to the latest firmware](#How to update the firmware for the onboard debugger) and try again. ### How to update the firmware for the onboard debugger See [Update the debugger](./../common doc/update_debugger) for details. ### After powering on the board, only four indicator lights on the dockboard are on, the SOM indicator light is not on 1. Please check if the board’s power has been turned on, press and hold the PWR button (next to the HDMI port) for 2 seconds to turn on the power. ### After powering on the board, the Battery Indicator light on the dcokboard is flashing 1. This is normal behavior, usually, the last LED (near the 12V DC connector) is flashing; 2. When the board is connected to a 3.7V lithium battery, these LEDs will serve as battery level indicators. ### After pressing and holding the PWR button for 2 seconds, all the indicator lights on the dockboard turn off and then light up in sequence 1. Check your power supply method, this situation means that the power supply is insufficient; 2. Solutions (choose one): a. Connect both the board’s **USB 3.0** and **USB DEBUG** for power supply, i.e., dual 5V USB power supply; b. Connect a 12V DC power supply to the board, if using the USB C to 12V DC connector from the accessories, a PD power source with 12V output capability is required; c. Connect a 3.7V lithium battery to power the board, note that the battery voltage must be ≥3.6V and the continuous discharge capacity must be ≥600mA. ### IDE cannot find the model GW5AST LV138PG484A 1. The GOWIN IDE version is too old. You must update to the commercial version IDE ≥ 1.9.9, or the educational version IDE ≥ 1.9.11.03. ### How to burn the bitstream to FLASH {#burn_flash} 1. Setting the **Programmer** as shown in the figure below: <img src \"./../assets/flash_mode_GAO.png\" alt \"flash_mode\" width 35%> 2. Check the position of the DIP switch; the correct position is shown in the figure below: <img src \"./assets/dip key_defualt.png\" alt \"dip key_defualt\" width 35%> ### No Response or Undesirable Pin Phenomenon After Burning 1. First, ensure that the IDE has selected the correct model **GW5AST LV138PG484AC1/10**; every parameter in the figure below **MUST** be consistent (for the [Device Version](../common doc/questions#How to Identify Device Version),please select according to the actual situation). <img src \"./assets/partno_138K.png\" alt \"device_choose\" width 35%> 2. Then, check your code and the corresponding simulation waveforms to meet the requirements. The GAO tools in GOWIN IDE maybe helpful. For more information, please refer to the GOWIN document [SUG100](https://www.gowinsemi.com/upload/database_doc/1885/document/660bb2366d0b3.pdf)(require login). ### For more questions and solutions, go to [Related Questions](./../common doc/questions) to view"},"/hardware/en/tang/tang-mega-138k/mega-138k-pro.html":{"title":"Tang Mega 138K Pro Dock","content":" title: Tang Mega 138K Pro Dock keywords: FPGA, Tang, Mega, 138K update: date: 2023 08 29 version: v author: wonder content: Creat document date: 2024 09 26 version: v0.2 author: Serika content: Update FAQs date: 2025 01 24 version: v0.3 author: Serika content: Add Secondary lic server ip addr. Product Overview Tang Mega 138K uses a 22nm process GW5AST LV138FPG676A FPGA chip, which has 138,240 lookup table units and nearly 300 DSP units. It contains eight high speed transceivers with a speed range of 270Mbps ~ 12.5Gbps, suitable for transmitting data through high speed ports such as fiber optics or PCIE. In addition, the chip contains a hard core PCIE, which consumes better resources when using PCIE and achieves better performance. It is suitable for high speed communication, protocol conversion, high performance computing, and other occasions. aliexpress purchase link: [Click me](https://www.aliexpress.us/item/3256805893801730.html) ## Board Features Large capacity LUT Large capacity memory PCIe 3.0 x 4 SFP+ x 2 RISCV hard core ## Product Appearance <img src \"./assets/mega_138k_pro_top.png\" width \"45%\"> ## Hardware Parameters ### SOM Board Parameters <table> \t<thead> \t\t<tr> \t\t\t<th style \"text align:center\">Item</th> \t\t\t<th style \"text align:center\">Parameter</th> \t\t\t<th style \"text align:center\">comment</th> \t\t</tr> \t</thead> \t<tbody> \t\t<tr> \t\t\t<td style \"text align:left\">FPGA Chip</td> \t\t\t<td style \"text align:left\"><a href \"https://www.gowinsemi.com/en/product/detail/60/\">GW5AST LV138FPG676A</a> \t\t\t</td> \t\t\t<td style \"text align:left\"> \t\t\t\t<table> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Logic Unit (LUT4)</td> \t\t\t\t\t\t<td>138240</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Register (FF)</td> \t\t\t\t\t\t<td>138240</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Distributed SRAM (S SRAM) (Kbits)</td> \t\t\t\t\t\t<td>1080</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Block SRAM (B SRAM) (Kbits)</td> \t\t\t\t\t\t<td>6120</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Number of Block SRAMs (B SRAM) (pcs)</td> \t\t\t\t\t\t<td>340</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Multiplier (18x18 Multiplier)</td> \t\t\t\t\t\t<td>298</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Phase Locked Loop (PLLs)</td> \t\t\t\t\t\t<td>12</td> \t\t\t\t\t</tr> <tr> <td>Global Clock</td> <td>16</td> </tr> <tr> <td>High Speed Clock</td> <td>24</td> </tr> <tr> <td>Transceivers</td> <td>8</td> </tr> <tr> <td>Transceivers Rate</td> <td>270Mbps 12.5Gbps</td> </tr> <tr> <td>PCIE Hard Core</td> <td>1<br>Speed optional x1, x2, x4, x8 PCIe 3.0</td> </tr> <tr> <td>LVDS (Gbps)</td> <td>1.25</td> </tr> <tr> <td>DDR3 (Mbps)</td> <td>1,333</td> </tr> <tr> <td>MIPI D PHY Hard Core</td> <td>2.5Gbps (RX),<br>8 data channels,<br>2 clock channels</td> </tr> <tr> <td>Hard Core SoC</td> <td>RiscV AE350_SOC</td> </tr> <tr> <td>ADC</td> <td>2</td> </tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Total I/O Bank</td> \t\t\t\t\t\t<td>10</td> \t\t\t\t\t</tr> \t\t\t\t</table> \t\t\t</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Memory</td> \t\t\t<td style \"text align:left\">1GB DDR3</td> \t\t\t<td style \"text align:left\">512MB x 2</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Flash</td> \t\t\t<td style \"text align:left\">128Mbits Flash x 2</td> \t\t\t<td style \"text align:left\">See <a href \"#burn_flash\">How to Burn to Flash</a></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Debug Interface</td> \t\t\t<td style \"text align:left\">Jtag + Uart</td> \t\t\t<td style \"text align:left\">JST SH1.0 8Pins Connector</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Overall Package</td> \t\t\t<td style \"text align:left\">50mm x 70mm Size</td> \t\t\t<td style \"text align:left\">BTB CONN. Connects the SOM and the Dock Board</td> \t\t</tr> \t</tbody> </table> ### Dock board Parameters Item Quantity Remarks : LED 6 WS2812 1 The WS2812 & aRGB strip CONN. share the same pin Button 4 PCIE 1 SFP+ 2 Gigabit Ethernet 1 DVI RX 2 Mutually occupied with DVI TX DVI TX 2 Mutually occupied with DVI RX PMOD 3 ADC 2 MIPI CSI 2 3 LANE MIPI CSI WS2812 1 The aRGB strip CONN. & WS2812 share the same pin DVP Interface 1 RGB Interface 1 Supports RGB888 screen MIC ARRAY Interface 1 Supports connecting Sipeed 6+1 microphone array SD Card Slot 1 EEPROM 1 Can store necessary information M.2 Socket 1 Reserved, can write peripheral driver yourself PWM Fan Interface 1 Speaker Interface 1 3.5mm Headphone Jack 1 Custom USB 1 Cannot power the board MS5351 2 Provides RefClk for Serdes; control output via onboard UART USB JTAG&UART 1 Supports FPGA programming and provides UART function 40P Pin Header 1 Power Switch 1 12V DC 1 ## Hardware Resources ~~[Board Specification](https://dl.sipeed.com/shareURL/TANG/Mega_138K_Pro/01_Specification)~~ [Board Schematic](https://dl.sipeed.com/shareURL/TANG/Mega_138K_Pro/02_Schematic) [PCB BOM](https://dl.sipeed.com/shareURL/TANG/Mega_138K_Pro/03_Designator_drawing) [Board Dimension Diagram](https://dl.sipeed.com/shareURL/TANG/Mega_138K_Pro/04_Mechanical_drawing) [Board 3D Model](https://dl.sipeed.com/shareURL/TANG/Mega_138K_Pro/05_3D_file) [Some Chip Manuals](https://dl.sipeed.com/shareURL/TANG/Mega_138K_Pro/07_Datasheet) ## Getting Started Note that 138K Pro is currently not supported by the education version, and you need to download V1.9.9 or a newer version of the commercial IDE for use. Lic can be applied on the Gowin official website, or you can use the online Lic service provided by Sipeed. In the IDE, select Float Lic and fill in the following information: ~~~ Server 01 ip: 45.33.107.56 port: 10559 Server 02 ip: 106.55.34.119 port: 10559 ~~~ if the ip not work, try use \"gowinlic.sipeed.com\" domain's IP. Install IDE [Click me](https://wiki.sipeed.com/hardware/zh/tang/common doc/get_started/install the ide.html) Example code [github](https://github.com/sipeed/TangMega 138KPro example) Other Learning Resources Free online tutorial: [Verilog Tutorial](https://www.runoob.com/w3cnote/verilog tutorial.html) (Learn Verilog) Free online FPGA tutorial: [Verilog](https://www.asic world.com/verilog/index.html) (English website) Verilog practice website: [HDLBits](https://hdlbits.01xz.net/wiki/Main_Page) (English website) Online Gowin Semiconductor reference video tutorials: [Click here](http://www.gowinsemi.com.cn/video_complex.aspx?FId n15:15:26) ## Communication Methods **Reddit** : [reddit.com/r/GowinFPGA/](reddit.com/r/GowinFPGA/) **Telegram** : [t.me/sipeed](t.me/sipeed) Discussion forum: [maixhub.com/discussion](https://maixhub.com/discussion) QQ discussion group: [834585530](https://jq.qq.com/?_wv 1027&k wBb8XUan) Leave a message directly below this page Business email : [support@sipeed.com](support@sipeed.com) ## Precautions <table> <tr> <th>Item</th> <th>Precautions</th> </tr> <tr> <td>Chip Model</td> <td>The specific model of the FPGA chip used by Tang Mega 138K Pro is GW5AST LV138FPG676A. Please select the package model <span><b>FCPBG676A</b></span> & <span><b>Device Version: B</b></span> in the IDE. <a href \"../common doc/questions#How to Identify Device Version\">How to identify the device version</a></td> </tr> </tr> <tr> <td>Static Electricity</td> <td>Please avoid static electricity hitting the PCBA; release the static electricity from your hands before touching the PCBA.</td> </tr> <tr> <td>Tolerance Voltage</td> <td>When using GPIO pin headers for external communication, ensure that the IO voltage is 3.3V. Excessive voltage will permanently damage the PCBA.</td> </tr> <tr> <td>FPC Socket</td> <td>When connecting the FPC soft cable, please ensure that the cable is completely and correctly inserted into the socket without any deviation.</td> </tr> <tr> <td>PCIE Gold Finger</td> <td>When testing the PCIE gold finger, ensure that both the host and the board are in the off or unpowered state to avoid short circuiting the gold finger due to displacement during the insertion process.</td> </tr> <tr> <td>Plug and Unplug</td> <td>Please completely power off before plugging and unplugging.</td> </tr> <tr> <td>Avoid Short Circuit</td> <td>Please avoid any liquid or metal touching the solder pads of the components on the PCBA during the power on process, otherwise it may cause a short circuit and burn the PCBA.</td> </tr> <tr> <td>Protecting the die</td> <td>Please avoid any impact on the exposed chip die during the process of removing and installing the heat sink. Do not press the heat sink hard after installing it. Otherwise, the chip die will be damaged.</td> </tr> </table> ## Contact Tang Mega 138K can meet different needs of customers in various scenarios. For technical support and business cooperation, please contact [support@sipeed.com](support@sipeed.com) ## Frequently Asked Questions (FAQs) ### The system does not recognize the onboard debugger Try connecting directly to the computer instead of through a USB HUB. Try using a better quality USB cable. Try another computer to rule out the computer being the problem. Try [update to the latest firmware](#How to update the firmware for the onboard debugger) and try again. ### The UART of the onboard debugger cannot be used Try reinstall FTDI drivers. IF the actual baudrate is always four times the set baudrate or the UART continuously outputs garbled characters. try [update to the latest firmware](#How to update the firmware for the onboard debugger) and try again. ### OpenFPGAloader not work Try [update to the latest firmware](#How to update the firmware for the onboard debugger) and try again. ### How to update the firmware for the onboard debugger See [Update the debugger](./../common/update_debugger) for details. ### The power light is not on after the board is powered on 1. Please check if the power switch of the board is turned on. 2. Check your power supply method. ### How to burn the bitstream to FLASH {#burn_flash} 1. Setting the **Programmer** as shown in the figure below: <img src \"./assets/flash_mode.png\" alt \"flash_mode\" width 35%> ### No Response or Undesirable Pin Phenomenon After Burning 1. First, ensure that the IDE has selected the correct model **GW5AST LV138FPG676AC1/10**; every parameter in the figure below **MUST** be consistent. <img src \"./assets/partno_138K_Pro.png\" alt \"device_choose\" width 35%> 2. Then, check your code and the corresponding simulation waveforms to meet the requirements. The GAO tools in GOWIN IDE maybe helpful. For more information, please refer to the GOWIN document [SUG100](https://www.gowinsemi.com/upload/database_doc/1885/document/660bb2366d0b3.pdf)(require login). ### For more questions and solutions, go to [Related Questions](./../common doc/questions) to view"},"/hardware/en/tang/index.html":{"title":"Tang FPGA Board","content":" title: Tang FPGA Board Tang FPGA Board contains Tang Nano and Tang Primer, and Tang Mega Tang Nano Tang Primer Tang Nano 1K<br> Tang Nano 4K<br> Tang Nano 9K<br> Tang Nano 20K Tang Primer 20K<br> Tang Primer 20K Dock<br> Tang Primer 20K Lite<br> ## Tang Nano Tang Nano FPGA Boards are in a tiny size, containing onboard Jatg debugger, can be programmed and simulated via only one TypeC cable. So many different Tang Nano FPGA Boards are listed, there must be one fits you. ### Spec. Item <p style \"white space:nowrap\">Tang Nano 20K</p> <p style \"white space:nowrap\">Tang Nano 9K</p> <p style \"white space:nowrap\">Tang Nano 4K</p> <p style \"white space:nowrap\">Tang Nano 1K</p> : : : : Logic units(LUT4) 20736 8640 4608 1152 Flip flop（FF） 15552 6480 3456 864 S SRAM (bits) 41472 17280 B SRAM (bits) 828K 468K 180K 72K User Flash (bits) 608K 256K 96K PLL 4 2 2 1 Onboard Flash 32Mbits NOR Flash 32Mbits NOR Flash 32Mbits NOR Flash Pad reserved Hardcore Cortex M3 ### Shape <table> <thead> <tr> <th style \"text align:center\">Tang Nano 20K</th> <th style \"text align:center\">Tang Nano 9K</th> </tr> </thead> <tbody> <tr> <td style \"text align:center\"><a href \"/nano20k\"><img src \"./../../assets/Tang/Nano_20K/Nano_20K.png\" alt \"Tang Nano 20K\"></a></td> <td style \"text align:center\"><a href \"./Tang Nano 9K/Nano 9K.html\"><img src \"./../../assets/Tang/Nano 9K/9K.png\" alt \"Tang Nano 9K\"></a></td> </tr> </tbody> <thead> <tr> <th style \"text align:center\">Tang Nano 4K</th> <th style \"text align:center\">Tang Nano 1K</th> </tr> </thead> <tbody> <tr> <td style \"text align:center\"><a href \"./Tang Nano 4K/Nano 4K.html\"><img src \"./../../assets/Tang/Nano_4K/Nano_4K.png\" alt \"Tang Nano 4K\"></a></td> <td style \"text align:center\"><a href \"./Tang Nano 1K/Nano 1k.html\"><img src \"./../../assets/Tang/Nano 1K/1K.png\" alt \"Tang Nano 1K\"></a></td> </tr> </tbody> </table> ## Tang Primer Tang Primer FPGA boards are for users secondary development ### Spec. Item <p style \"white space:nowrap\">Tang Primer 20K</p> <p style \"white space:nowrap\">Tang Primer 20K Dock</p> <p style \"white space:nowrap\">Tang Primer 20K Lite</p> : : : : Logic units(LUT4) 20736 20736 20736 Flip flop（FF） 15552 15552 15552 S SRAM (bits) 41472 41472 41472 B SRAM (bits) 828K 468K 180K PLL 2 2 2 Onboard Flash 32Mbits NOR Flash 32Mbits NOR Flash 32Mbits NOR Flash LEDs 6 ### Shape Tang Primer 20K Tang Primer 20K Dock Tang Primer 20K Lite <img src \"/hardware/zh/tang/tang primer 20k/assets/20k_core.png\" alt \"20k_core\" width \"85%\"> ![dock up](/hardware/zh/tang/tang primer 20k/assets/dock up.png) ![20k_lite_home](/hardware/zh/tang/tang primer 20k/assets/20k_lite_home.png) ## FPGA boards selection suggestion For the beginner, [Tang Nano 1K](https://wiki.sipeed.com/tang1k) and [Tang Nano 9K](https://wiki.sipeed.com/tang9k) are the good choice to start FPGA. For those who can design the PCB and want to know more about FPGA, [Tang Nano 4K](https://wiki.sipeed.com/tang4k) and [Tang Nano 20K](https://wiki.sipeed.com/nano20k) are good, because [Tang Nano 4K](https://wiki.sipeed.com/tang4k) can be used for driving DVP camera, and [Tang Nano 20K](https://wiki.sipeed.com/nano20k) is Retro Games friendly. Besides, [Tang Primer 20K](https://wiki.sipeed.com/primer20k) is a really good choice for secondary design, because it provides many pins. If you don't know how to design the PCB, but you want to know more about FPGA, [Tang Primer 20K Dock](https://wiki.sipeed.com/primer20k) and [Tang Primer 20K Lite](https://wiki.sipeed.com/primer20k) are really good. [Tang Primer 20K Dock](https://wiki.sipeed.com/primer20k) provides enough connector, while [Tang Primer 20K Lite](https://wiki.sipeed.com/primer20k) provides many and many pins. ## Comparison <table> <thead> <tr> <th style \"text align:left\"></th> <th style \"white space:nowrap\">Tang Primer 20K Dock</th> <th style \"white space:nowrap\">Tang Nano 20K</th> <th style \"white space:nowrap\">Tang Nano 9K</th> <th style \"white space:nowrap\">Tang Nano 4K</th> <th style \"white space:nowrap\">Tang Nano 1K</th> </tr> </thead> <tbody> <tr> <td style \"text align:left\">Chip series </td> <td style \"text align:left\">GW2A 18 </td> <td style \"text align:left\">GW2AR 18 </td> <td style \"text align:left\">GW1NR 9 </td> <td style \"text align:left\">GW1NSR 4C</td> <td style \"text align:left\">GW1NZ 1 </td> </tr> <tr> <td style \"text align:left\">Chip version </td> <td style \"text align:left\">C </td> <td style \"text align:left\">C </td> <td style \"text align:left\">C </td> <td style \"text align:left\"> </td> <td style \"text align:left\"> </td> </tr> <tr> <td style \"text align:left\">Logic units(LUT4)</td> <td style \"text align:left\">20736 </td> <td style \"text align:left\">20736 </td> <td style \"text align:left\">8640 </td> <td style \"text align:left\">4608 </td> <td style \"text align:left\">1152 </td> </tr> <tr> <td style \"text align:left\">Flip flop(FF)</td> <td style \"text align:left\">15552 </td> <td style \"text align:left\">15552 </td> <td style \"text align:left\">6480 </td> <td style \"text align:left\">3456 </td> <td style \"text align:left\">864 </td> </tr> <tr> <td style \"text align:left\">S SRAM (bits)</td> <td style \"text align:left\">41472</td> <td style \"text align:left\">41472</td> <td style \"text align:left\">17280</td> <td style \"text align:left\"></td> <td style \"text align:left\">4K</td> </tr> <tr> <td style \"text align:left\">B SRAM (bits)</td> <td style \"text align:left\">828K</td> <td style \"text align:left\">828K</td> <td style \"text align:left\">468K</td> <td style \"text align:left\">180K</td> <td style \"text align:left\">72K </td> </tr> <tr> <td style \"text align:left\">Users Flash</td> <td style \"text align:left\"></td> <td style \"text align:left\"></td> <td style \"text align:left\">608K</td> <td style \"text align:left\">256K</td> <td style \"text align:left\">64K</td> </tr> <tr> <td style \"text align:left\">DSP</td> <td style \"text align:left\">48</td> <td style \"text align:left\">48</td> <td style \"text align:left\">20</td> <td style \"text align:left\">16</td> <td style \"text align:left\"> </td> </tr> <tr> <td style \"text align:left\">Extra RAM</td> <td style \"text align:left\">DDR SDRAM<br>1G bits Capacity<br>16 bits width</td> <td style \"text align:left\">SDR SDRAM<br>64M bits Capacity<br>32 bits width</td> <td style \"text align:left\">PSRAM<br>64M bits Capacity<br>32 bits width</td> <td style \"text align:left\">HyperRAM<br>64M bits Capacity<br>8 bits width</td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">PLL</td> <td style \"text align:left\">4</td> <td style \"text align:left\">2</td> <td style \"text align:left\">2</td> <td style \"text align:left\">2</td> <td style \"text align:left\">1</td> </tr> <tr> <td style \"text align:left\">Onboard Flash</td> <td style \"text align:left\">64Mbits Flash</td> <td style \"text align:left\">32Mbits Flash</td> <td style \"text align:left\">32Mbits Flash</td> <td style \"text align:left\">32Mbits Flash</td> <td style \"text align:left\"> </td> </tr> <tr> <td style \"text align:left\">Hardcore</td> <td style \"text align:left\"></td> <td style \"text align:left\"></td> <td style \"text align:left\"></td> <td style \"text align:left\">Cortex M3</td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">Camera</td> <td style \"text align:left\">DVP</td> <td style \"text align:left\"></td> <td style \"text align:left\"></td> <td style \"text align:left\">DVP</td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">HDMI</td> <td style \"text align:left\">Y</td> <td style \"text align:left\">Y</td> <td style \"text align:left\">Y</td> <td style \"text align:left\">Y</td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">RGB Screen</td> <td style \"text align:left\">Y</td> <td style \"text align:left\">Y</td> <td style \"text align:left\">Y</td> <td style \"text align:left\"></td> <td style \"text align:left\">Y</td> </tr> <tr> <td style \"text align:left\">SPI interface</td> <td style \"text align:left\">Y</td> <td style \"text align:left\"></td> <td style \"text align:left\">Y</td> <td style \"text align:left\"></td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">Ethernet</td> <td style \"text align:left\">Y</td> <td style \"text align:left\"></td> <td style \"text align:left\"></td> <td style \"text align:left\"></td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">USB 2.0</td> <td style \"text align:left\">Y</td> <td style \"text align:left\"></td> <td style \"text align:left\"></td> <td style \"text align:left\"></td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">WS2812</td> <td style \"text align:left\">Y</td> <td style \"text align:left\">Y</td> <td style \"text align:left\"></td> <td style \"text align:left\"></td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">MS5351</td> <td style \"text align:left\"></td> <td style \"text align:left\">Y</td> <td style \"text align:left\"></td> <td style \"text align:left\"></td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">Features</td> <td style \"text align:left\">Many LUTs, many interfaces, easy to use.</td> <td style \"text align:left\">Many LUTs, tiny size, multiple clocks</td> <td style \"text align:left\">Good price, enough for softcore</td> <td style \"text align:left\">FPGA SOC board，can drive DVP camera</td> <td style \"text align:left\">Cheapest FPGA board</td> </tr> <tr> <td style \"text align:left\">Detailed information</td> <td style \"text align:left\"><a href \"https://wiki.sipeed.com/primer20k\">Click me</a></td> <td style \"text align:left\"><a href \"https://wiki.sipeed.com/nano20k\">Click me</a></td> <td style \"text align:left\"><a href \"https://wiki.sipeed.com/tang9k\">Click me</a></td> <td style \"text align:left\"><a href \"https://wiki.sipeed.com/tang4k\">Click me</a></td> <td style \"text align:left\"><a href \"https://wiki.sipeed.com/tang1k\">Click me</a></td> </tr> </tbody> </table>"},"/hardware/en/tang/Tang-Nano/examples/lcd.html":{"title":"Drive RGB screen","content":" title: Drive RGB screen > Edit on 2022.04.18 ## Introduce timing RGB LCD display protocol is similar to VGA protocol, both have horizon synchronization signal line and vertical synchronization signal line. The main difference is that RGB LCD display protocol transfers by digital signal while VGA protocol transfers by analog signal. Here we introduce VGA timing. ![](./../../../../zh/tang/assets/examples/lcd_pjt_1.png) There shows horizon synchronization timing and vertical synchronization timing in the picture above. From the timing picture, we know both display a horizon of data or display a vertical of data, data transfers during the two synchronization signal pulses. Each horizon of data contains back porch, visible data **(this is normally thought as active data)** and front porch. The visible data is resolution we normally think, while the parameter of back porch and front porch depends on the resolution and frame rate. Its typical parameters can be found in this web. http://www.tinyvga.com/vga timing The timing of this 5 inch screen we sell is a bit different, its parameters can be downloaded here. [Detail book](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/5.0inch_LCD_Datashet%20_RGB_.pdf) For other size screen parameters, they can be downloaded here. [Click me](https://dl.sipeed.com/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/) The following picture shows the screenshot about this LCD timing. ![](./../../../../zh/tang/assets/examples/lcd_pjt_2.png) ![](./../../../../zh/tang/assets/examples/lcd_pjt_3.png) The first picture form shows parameters of the screen and the the following picture is its timing. From its timing picture, we can know we don't need to set front porch time and back porch time, we just need to set blanking time. ## Create project Please refer to this [article](./led/led.html) to see how to create project. ## Generate screen clock Here we use gowin official IP The crystal oscillator onboard is 24MHz, but our screen needs 33.3MHZ clock, so we need to use the corresponding ip core to generate the corresponding clock. Here we use `IP Core Generate` which can be find in Tools > IP Core Generate ![](./../../../../zh/tang/Tang Nano 1K/assets/Gowin_IP_rpll.png) Double click `rPLL` and select Verilog in the pop up window language, set CLKIN 24MHz, CLKOUTD is 33.00MHz. Also config the tolerance. ![](./../../../../zh/tang/assets/examples/lcd_pjt_5.png) After click OK it asks whether add it to current project, here we choose yes. ![](./../../../../zh/tang/Tang Nano 1K/examples/led/assets/add_ip_file_in_project.png) Then a tmp file will appear, we can use it to generate the ip, like what is shown below. ![](./../../../../zh/tang/Tang Nano/examples/led/assets/ip_examples.png) ## Screen driver **To start this we should create a verilog file first** ### Port definition First define ports which are needed to drive screen ```verilog module VGAMod ( input CLK, input nRST, input PixelClk, output LCD_DE, output LCD_HSYNC, output LCD_VSYNC, \toutput [4:0] LCD_B, \toutput [5:0] LCD_G, \toutput [4:0] LCD_R ); ``` We use RGB565 driver mode. ### Timing constants Then we define the constants according to the timing form picture ```verilog localparam V_BackPorch 16'd6; //0 or 45 localparam V_Pluse \t 16'd5; localparam HightPixel 16'd480; localparam V_FrontPorch 16'd62; //45 or 0 localparam H_BackPorch 16'd182; \t localparam H_Pluse \t 16'd1; localparam WidthPixel 16'd800; localparam H_FrontPorch 16'd210; localparam PixelForHS WidthPixel + H_BackPorch + H_FrontPorch; \t localparam LineForVS HightPixel + V_BackPorch + V_FrontPorch; ``` First we define front porch, back porch and valid pixel data. As for the front porch timing and back porch timing which have been mentioned earlier, it can be combined into an erasing time, that is, one can be set to 0, and the other can be set to the erasing time. Anyway, the front porch timing and back porch timing can be added up to meet the timing requirements in the table is ok. ### Define variables Define some variables helps us to meet timing requirement ```verilog reg [15:0] LineCount; reg [15:0] PixelCount; reg\t[9:0] Data_R; reg\t[9:0] Data_G; reg\t[9:0] Data_B; ``` ### Synchronization signals This code generates synchronization signals. It should be noted that the synchronization signals of this screen enabled by negative polarity ```verilog always @( posedge PixelClk or negedge nRST )begin if( !nRST ) begin LineCount < 16'b0; PixelCount < 16'b0; end else if( PixelCount PixelForHS ) begin PixelCount < 16'b0; LineCount < LineCount + 1'b1; end else if( LineCount LineForVS ) begin LineCount < 16'b0; PixelCount < 16'b0; end else PixelCount < PixelCount + 1'b1; end always @( posedge PixelClk or negedge nRST )begin if( !nRST ) begin \t\t\tData_R < 9'b0; \t\t\tData_G < 9'b0; \t\t\tData_B < 9'b0; end else begin \t\t\tend \tend //Here note the negative polarity of HSYNC and VSYNC assign LCD_HSYNC (( PixelCount > H_Pluse)&&( PixelCount < (PixelForHS H_FrontPorch))) ? 1'b0 : 1'b1; assign LCD_VSYNC ((( LineCount > V_Pluse )&&( LineCount < (LineForVS 0) )) ) ? 1'b0 : 1'b1; ``` ### Enable signal This code decides whether display image. This driver needs a port which is set to 1 when the 800*480 data of the image is valid to enable display. ```verilog assign LCD_DE ( ( PixelCount > H_BackPorch )&& ( PixelCount < PixelForHS H_FrontPorch ) && ( LineCount > V_BackPorch ) && ( LineCount < LineForVS V_FrontPorch 1 )) ? 1'b1 : 1'b0; //It will shake if there not minus one ``` ### Test color bars This code generates color bars to test LCD ```verilog localparam Colorbar_width WidthPixel / 16; assign LCD_R ( PixelCount < ( H_BackPorch + Colorbar_width * 0 )) ? 5'b00000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 1 )) ? 5'b00001 : ( PixelCount < ( H_BackPorch + Colorbar_width * 2 )) ? 5'b00010 : ( PixelCount < ( H_BackPorch + Colorbar_width * 3 )) ? 5'b00100 : ( PixelCount < ( H_BackPorch + Colorbar_width * 4 )) ? 5'b01000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 5 )) ? 5'b10000 : 5'b00000; assign LCD_G ( PixelCount < ( H_BackPorch + Colorbar_width * 6 )) ? 6'b000001: ( PixelCount < ( H_BackPorch + Colorbar_width * 7 )) ? 6'b000010: ( PixelCount < ( H_BackPorch + Colorbar_width * 8 )) ? 6'b000100: ( PixelCount < ( H_BackPorch + Colorbar_width * 9 )) ? 6'b001000: ( PixelCount < ( H_BackPorch + Colorbar_width * 10 )) ? 6'b010000: ( PixelCount < ( H_BackPorch + Colorbar_width * 11 )) ? 6'b100000: 6'b000000; assign LCD_B ( PixelCount < ( H_BackPorch + Colorbar_width * 12 )) ? 5'b00001 : ( PixelCount < ( H_BackPorch + Colorbar_width * 13 )) ? 5'b00010 : ( PixelCount < ( H_BackPorch + Colorbar_width * 14 )) ? 5'b00100 : ( PixelCount < ( H_BackPorch + Colorbar_width * 15 )) ? 5'b01000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 16 )) ? 5'b10000 : 5'b00000; ``` **Do not forget to add endmodule in the end of the driver file** Up to now we have finished the driver module. ## Instantiated in the top **New a verilog file** Just copy the content below and save it is ok ```verilog module TOP //Name TOP module ( \tinput\t\t\tnRST, input XTAL_IN, \toutput\t\t\tLCD_CLK, \toutput\t\t\tLCD_HYNC, \toutput\t\t\tLCD_SYNC, \toutput\t\t\tLCD_DEN, \toutput\t[4:0]\tLCD_R, \toutput\t[5:0]\tLCD_G, \toutput\t[4:0]\tLCD_B ); // list ports \twire\t\tCLK_SYS;\t \twire\t\tCLK_PIX; //instantiate pll Gowin_rPLL chip_pll( .clkout(CLK_SYS), //output clkout //200M .clkoutd(CLK_PIX), //output clkoutd //33.00M .clkin(XTAL_IN) //input clkin );\t \tVGAMod\tVGAMod_inst //instantiate vga driver \t( \t\t.CLK\t\t(\tCLK_SYS ), \t\t.nRST\t\t(\tnRST\t\t), \t\t.PixelClk\t(\tCLK_PIX\t\t), \t\t.LCD_DE\t\t(\tLCD_DEN\t \t), \t\t.LCD_HSYNC\t(\tLCD_HYNC \t), \t.LCD_VSYNC\t(\tLCD_SYNC \t), \t\t.LCD_B\t\t(\tLCD_B\t\t), \t\t.LCD_G\t\t(\tLCD_G\t\t), \t\t.LCD_R\t\t(\tLCD_R\t\t) \t); \tassign\t\tLCD_CLK\t\t \tCLK_PIX; endmodule ``` ## Synthesize, constrain, Place&Route ### Synthesize After finishing steps above, go to the \"Process\" interface, synthesize the edited file, which means running \"Synthesize\". ![](./../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_synthsize.png) If the result is the same as shown below ![](./../../../../zh/tang/Tang Nano/assets/LED.png) It means that there is no bug in our code, we can continue the next steps. If there is some thing wrong, please fix by yourself. ### Constrain Here we only constraint pins The corresponding pins and ports are as follows form shows The way to constrain pins can refer to the [Light led](./led/create_led.html), it contains two ways to constrain pins. If you feel troublesome about the method above, you can copy the content in this [page](./../../../../zh/tang/Tang Nano/examples/lcd_constrains.html)， and paste it in \".cst\" file in this project (If there is no \".cst\" file, just create a \"physicsl constrains file\"). PORT I/O PIN PORT I/O PIN LCD_B[4] output 41 LCD_B[3] output 42 LCD_B[2] output 51 LCD_B[1] output 53 LCD_B[0] output 54 LCD_G[5] output 55 LCD_G[4] output 56 LCD_G[3] output 57 LCD_G[2] output 68 LCD_G[1] output 69 LCD_G[0] output 70 LCD_R[4] output 71 LCD_R[3] output 72 LCD_R[2] output 73 LCD_R[1] output 74 LCD_R[0] output 75 LCD_DEN output 33 LCD_SYNC output 34 LCD_HYNC output 40 LCD_CLK output 35 XTAL_IN input 52 nRST input 4 ### Place&Route After constraining, we need to open IO mux to complete Place&Route. Tick Project > Configuration > Place&Route > Dual Purpose Pin which is in the Menu Bar. ![](./../../../../zh/tang/Tang Nano/examples/led/assets/enable_io_mux.png) Then we can run Place&Route. ## Program Finishing Place&Route, we can download the generated .fs file to the development board to see color bar. ## End Now the tutorial ends, if you have any suggestions, just leave a message. <p id \"back\"> <a href \"#\" onClick \"javascript :history.back( 1);\">Back to the previous page(Back)</a> </p>"},"/hardware/en/tang/Tang-Nano/examples/led/github_led.html":{"title":"Blink by github project","content":"# Blink by github project First get sourcecode from github https://github.com/sipeed/Tang Nano examples Open led_prj.gprj file in Tang Nano examples\\example_led\\led_prj path Right click clean&Rerun all in process interface ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/github_place&route.png) Then there is an error(This is a historical question, you can search it by yourself if you wonder it) Change configuration which can be found in Project > Configuration > Syntheize of top menu bar and choose GowinSyntheize. Then right click Place&Route and clean&Rerun all ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/Change_Synthesis.png) Connet the board and download firmware. Double click `Program Device` in Process interface to open programmer tool. ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/Open_Programmer.png) Choose download to SRAM to verify codes quickly ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/Success_led.png) <p id \"back\"> <a href \"#\" onClick \"javascript :history.back( 1);\">返回上一页(Back)</a> </p>"},"/hardware/en/tang/Tang-Nano/examples/led/led.html":{"title":"blink","content":"# blink Edit on 2022.04.18 ## Preface Here we provide two ways to blink led [Blink by yourself](./create_led.html) [Using github project](./github_led.html) <p id \"back\"> <a href \"#\" onClick \"javascript :history.back( 1);\">Previous page(Back)</a> </p>"},"/hardware/en/tang/Tang-Nano/examples/led/create_led.html":{"title":"Blink led","content":"# Blink led > Edit on 2022.04.18 From this essay we can learn the basic usage of Gowin IDE ## Create project Create Project：File >NEW >FPGA Dsign Project >OK ![](./../../../../../zh/tang/Tang Nano/assets/LED 1.png) Set project name and project path (File name and project path shoule be English) ![](./../../../../../zh/tang/Tang Nano/assets/LED 2.png) Choose correct device: ![Tang_nano_device_choose](./../../../../../zh/tang/Tang Nano/examples/led/assets/Nano_device_choose.png) ## Prepare codes After creating project, we can start editing codes. To creat a new file, we can click where the arrow points to in the picture or use shortcut key Ctrl+N. Then choose Verilog File in the pop up window. ![](./../../../../../zh/tang/Tang Nano/assets/LED 5.png) Name for file (Suggested using English) ![](./../../../../../zh/tang/Tang Nano/assets/LED 6.png) Double click the created file, then edit in right window ![](./../../../../../zh/tang/Tang Nano/assets/LED 7.png) We use light led as an example, copy the following \"LED example codes\" into the created file or edit the created file by yourself. ### Verilog description Here I just introduction some basic grammer which we will use in our code about verilog, for more knowledge please refer to the official verilog grammer. The basic Verilog design unit is module, a module is build from 2 parts, one part describes the ports, another part describes the logic functions which show the relations between ports. Module is like a black box we normally said, we don't care what's inside the module, we only need to instantiate the module according to the input and output format defined by the module, provide input to the module, and let the module work on its own. A module is normally like following: ```v module module_name #(parameter) (port) ; Function description; endmodule ``` The module start with `module` and ends with `endmodule`. After declaring `module` we will declare the `module name`, then we can set `parameter` to make our module change automaticly to meet out depmands. Then `Port` is the singal dealing with this module.`Function description` is a kind of description how we will realize our depmands. There are 2 signal types in a module, wire type and reg type. `Function description` contains `always` and `assign` 2 functions. `assign` function is used for describing combinatorial logic. `alyays` function can be used for describing combinatorial logic, as well as timing logic. ### Example codes ~~~v module led ( input sys_clk, input sys_rst_n, output reg [2:0] led // 110 B, 101 R, 011 G ); reg [23:0] counter; always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) counter < 24'd0; else if (counter < 24'd1199_9999) // 0.5s delay counter < counter + 1'b1; else counter < 24'd0; end always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) led < 3'b110; else if (counter 24'd1199_9999) // 0.5s delay led[2:0] < {led[1:0],led[2]}; else led < led; end endmodule ~~~ ## Synthesize, constrain, place&route ### Synthesize After finishing steps above, go to the \"Process\" interface, synthesize the edited file, which means running \"Synthesize\". ![](./../../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_synthsize.png) If the result is the same as shown below ![](./../../../../../zh/tang/Tang Nano/assets/LED.png) It means that there is no bug in our code, we can continue the next steps. If there is some thing wrong, please fix by yourself. ### Constrain Clock constraint is not involved here To realize function of the code on FPGA, we must bind the ports we define with the chip pins. Double click the FloorPlanner in the Process interface to set pin constrain(This can be continued if failing Synthesize). ![](./../../../../../zh/tang/assets/examples/led_pjt_2.png) First time open FloorPlanner it will prompt lack of \".cst\" file, we just choose ok. ![](./../../../../../zh/tang/Tang Nano/assets/LED 9.png) The led schematic of nano is as shown below: ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/nano_led_pins.png) In this GUI interface we have two ways to constrain pins: Drag the corresponding port to the pin of chip Type the pin number corresponding to the port in IO constraint(This is shown as below) So we can do the ordered operations in the opened window as what the following picture shows:(Just choose one way) ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/pin_constrain_1.png) ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/pin_constrain_2.png) ### Place&Route After finishing Running \"Place&Route\" in the Process interface window, the result will be as same as below ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/RGB_LED_Place&Route.png) ## Program Then connect the board with computer, download firmware. Double click `Program Device` in Process interface to open programmer application ![](./../../../../../zh/tang/Tang Nano/examples/led/assets//Open_Programmer.png) You can config download mode according to the following picture. We use download to SRAM as an example. ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/tang nano programmer config.png) If you need to store firmware with no power, just choose download to flash mode. ## End Now the tutorial ends, if you have any suggestions, just leave a message."},"/hardware/en/tang/Tang-Nano/Nano.html":{"title":"Tang Nano","content":"# Tang Nano > Edit on 2022.03.23 ## Introduction Tang Nano is a core board designed based on [Gowin](https://www.gowinsemi.com/en/) GW1N 1 FPGA chip.The board is equipped with PSRAM, RGB LCD interface and onboard USG JTAG debugger, which make it convenient for users to use. ![](./../../../assets/Tang/Nano/Tang_Nano.jpg) ## Parameters ![Nano](./../../../assets/Tang/Nano/Tang Nano 4.png) **Note** : The Numeric number matches PIN number Numeric number with dot matches gclk pins Items Specs Core GW1N 1 FPGA Logic units(LUT4) 1152 Registers(FF) 864 Block SRAM(bits) 72K B SRAM block 4 User flash(bits) 96K PLL 1 I/O Bank 4 I/O numbers 41 Core quantity 1.2V Usb Jtag ch552 Onboard PSRAM 64Mbits ![Nano Pin](./../../../assets/Tang/Nano/Tang Nano Pin.png) ## Support Email to support@sipeed.com for technical support and Business cooperation. ## Resources [Schematic](https://dl.sipeed.com/shareURL/TANG/Nano/HDK) [Download center](https://dl.sipeed.com/shareURL/TANG/Nano) [Examples](./../common doc/examples.html)"},"/hardware/en/tang/Tang-Nano/Tang-Nano.html":{"title":"Tang Nano examples","content":" title: Tang Nano examples ## Note Before reading, we suggest using this [Programmer](https://dl.sipeed.com/shareURL/TANG/Nano/IDE) named `programmer2.7z` not that installed with IDE ## Examples [Blink](./../common doc/examples/1_led.html)(Preparing, please wait) [LCD screen](./../common doc/examples/2_lcd.html)(Preparing, please wait)"},"/hardware/en/tang/tang-primer-25k/primer-25k.html":{"title":"Tang Primer 25K","content":"# Tang Primer 25K ## Overview Tang Primer 25K is a minuscule core board (23x18mm) designed based on [GW5A LV25MG121](http://www.gowinsemi.com.cn/prod_view.aspx?TypeId 74&FId t3:10:3&Id 188), accompanied by a 25K Dock base board that exposes all pins (excluding MIPI high speed pins). The ultra small core board size can be applied in any volume restricted scenarios. The simple base board can connect a USB joystick, plug in a 40Pin SDRAM module, and three PMOD interfaces can connect to an HDMI display, PS2 joystick to form a typical RetroGame console configuration. It can also be paired with the series of PMOD modules produced by Sipeed, for use in FPGA university teaching. <div> <img src \"./assets/25k_45.jpg\" width 45%> <img src \"./assets/25k_dock_45.jpg\" width 45%> </div> Purchase link: [ALIEXPRESS](https://www.aliexpress.us/item/3256806038278266.html?gatewayAdapt glo2usa4itemAdapt) ## Core Board Overview <div> <img src \"./assets/25k_top.jpg\" width 45%> <img src \"./assets/25k_bot.jpg\" width 45%> </div> ## Basic Parameters <table> <thead> <tr> <th style \"text align:center\">Item</th> <th style \"text align:center\">Parameter</th> <th style \"text align:center\">Supplement</th> </tr> </thead> <tbody> <tr> <td style \"text align:left\">FPGA Chip</td> <td style \"text align:left\"> <a href \"http://www.gowinsemi.com.cn/prod_view.aspx?TypeId 74&FId t3:10:3&Id 188\">GW5A LV25MG121C1/l0</a> </td> <td style \"text align:left\"> <table> <tr> <td>Logic Unit (LUT4)</td> <td>23040</td> </tr> <tr> <td>Register (FF)</td> <td>23040</td> </tr> <tr> <td>Distributed Static Random Access Memory S SRAM (bits)</td> <td>180K</td> </tr> <tr> <td>Block Static Random Access Memory B SRAM (bits)</td> <td>1008K</td> </tr> <tr> <td>Number of Block Static Random Access Memory B SRAM</td> <td>56</td> </tr> <tr> <td>Multiplier (18x18 Multiplier)</td> <td>28</td> </tr> <tr> <td>Phase Locked Loop (PLLs)</td> <td>6</td> </tr> <tr> <td>Total I/O Bank</td> <td>8</td> </tr> <tr> \t\t\t\t\t\t<td><b>Device Version</b></td> \t\t\t\t\t\t<td><b>A</b></td> \t\t\t\t\t</tr> </table> </td> </tr> <tr> <td style \"text align:left\">Flash</td> <td style \"text align:left\">64Mbits NOR Flash</td> <td style \"text align:left\"> See <a href \"#burn_flash\">Burning to Flash</a> </td> </tr> <tr> <td style \"text align:left\">Overall Packaging</td> <td style \"text align:left\">2x60P BTB Core Board</td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">General IO</td> <td style \"text align:left\">75</td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">MIPI IO</td> <td style \"text align:left\">4lane Data</td> <td style \"text align:left\"></td> </tr> </tbody> </table> ## Dock Base Board Product Image <div> <img src \"./assets/25k_dock_top.jpg\" width 45%> <img src \"./assets/25k_dock_bot.jpg\" width 45%> </div> ## Board Parameters <table> <thead> <tr> <th style \"text align:center\">Item</th> <th style \"text align:center\">Parameter</th> <th style \"text align:center\">Remark</th> </tr> </thead> <tbody> <tr> <td style \"text align:left\">Debugger</td> <td style \"text align:left\">Onboard high speed debugger, supports JTAG+UART, uses USB C port for programming</td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">USB A</td> <td style \"text align:left\">One, can be used as a USB1.1 Host to connect game controllers and other HID devices</td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\"> IO Pin </td> <td style \"text align:left\"> One 2x20Pin 2.54 pin</td> <td style \"text align:left\">Supports SDRAM module</td> </tr> <tr> <td style \"text align:left\"> PMOD </td> <td style \"text align:left\"> 3</td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">Button</td> <td style \"text align:left\">2</td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">Size</td> <td style \"text align:left\">64x40mm</td> <td style \"text align:left\"></td> </tr> </tbody> </table> ## Hardware Information Specifications, schematics, dimension drawings, etc. can be found here: [Click here](https://dl.sipeed.com/shareURL/TANG/Primer_25K) [Board Specification](https://dl.sipeed.com/shareURL/TANG/Primer_25K/01_Specification) [Board Schematic](https://dl.sipeed.com/shareURL/TANG/Primer_25K/02_Schematic) [Board Designator Drawing](https://dl.sipeed.com/shareURL/TANG/Primer_25K/03_Designator_drawing) [Board Dimension Drawing](https://dl.sipeed.com/shareURL/TANG/Primer_25K/04_Mechanical_drawing) [3D Model File](https://dl.sipeed.com/shareURL/TANG/Primer_25K/05_3D_file) [Core Board Packaging](https://dl.sipeed.com/shareURL/TANG/Primer_25K/06_PCB_Lib) [Chip Part Information](https://dl.sipeed.com/shareURL/TANG/Primer_25K/07_Datasheet) [Routing Length Table](https://dl.sipeed.com/shareURL/TANG/Primer_25K/08_Pin_Length_table) 3. Getting Started \t`Prepare Development Environment` > `Learn Relevant Syntax` > `View Unboxing Guide` > `Basic Code Writing` > `View Official Documentation` \t \t1. Install IDE: [Click here](../common doc/get_started/install the ide.html) \t 2. Check out the [Getting Started Guide](https://wiki.sipeed.com/hardware/zh/tang/tang primer 20k/start.html) to avoid some problems, and you can start coding from there. 3. If you feel pressured after completing the above lighting operation, you can fill in the gaps yourself: You can learn Verilog on the following websites: + Online free tutorial: [Verilog Tutorial](https://www.runoob.com/w3cnote/verilog tutorial.html) (Learn Verilog) + Online free FPGA tutorial: [Verilog](https://www.asic world.com/verilog/index.html) (English website) + Verilog problem solving website: [HDLBits](https://hdlbits.01xz.net/wiki/Main_Page) (English website) + Online Gowin Semiconductor reference video tutorial: [Click here](http://www.gowinsemi.com.cn/video_complex.aspx?FId n15:15:26) If you have questions about using the IDE, you can check out some official documents to familiarize yourself with the relevant content [SUG100 2.6_Gowin Cloud Source Software User Guide.pdf](http://cdn.gowinsemi.com.cn/SUG100 2.6_Gowin%E4%BA%91%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf) [SUG949 1.1_Gowin_HDL Coding Style User Guide.pdf](http://cdn.gowinsemi.com.cn/SUG949 1.1_Gowin_HDL%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf) [UG286 1.9.1_Gowin Clock Resource User Guide](http://cdn.gowinsemi.com.cn/UG286 1.9.1_Gowin%E6%97%B6%E9%92%9F%E8%B5%84%E6%BA%90(Clock)%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf) [SUG940 1.3_Gowin Design Timing Constraint User Guide.pdf](http://cdn.gowinsemi.com.cn/SUG940 1.3_Gowin%E8%AE%BE%E8%AE%A1%E6%97%B6%E5%BA%8F%E7%BA%A6%E6%9D%9F%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf) [SUG502 1.3_Gowin_Programmer User Guide.pdf](http://cdn.gowinsemi.com.cn/SUG502 1.3_Gowin_Programmer%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf) [SUG114 2.5_Gowin Online Logic Analyzer User Guide.pdf](http://cdn.gowinsemi.com.cn/SUG114 2.5_Gowin%E5%9C%A8%E7%BA%BF%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90%E4%BB%AA%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf) All the above documents have been packaged into the download station [click me to jump](https://dl.sipeed.com/shareURL/TANG/Primer_20K/07_Chip_manual/CN/%E9%80%9A%E7%94%A8%E6%8C%87%E5%BC%95), if needed, you can click the compressed package to download them all. Example Summary Please note that 25K requires the use of V1.9.9Beta 4 or newer IDE version. http://www.gowinsemi.com.cn/faq.aspx ### Public Examples Github link: https://github.com/sipeed/TangPrimer 25K example ## Communication Methods **Reddit** : [reddit.com/r/GowinFPGA/](reddit.com/r/GowinFPGA/) **Telegram** : [t.me/sipeed](t.me/sipeed) Discussion forum: [maixhub.com/discussion](https://maixhub.com/discussion) QQ discussion group: [834585530](https://jq.qq.com/?_wv 1027&k wBb8XUan) Leave a message directly below this page Business email: [support@sipeed.com](support@sipeed.com) ## Related Questions ### The system does not recognize the onboard debugger Try connecting directly to the computer instead of through a USB HUB. Try using a better quality USB cable. Try another computer to rule out the computer being the problem. Try [update to the latest firmware](#how to update the firmware for the onboard debugger) and try again. ### The UART of the onboard debugger cannot be used Try reinstall FTDI drivers. IF the actual baudrate is always four times the set baudrate or the UART continuously outputs garbled characters. try [update to the latest firmware](#how to update the firmware for the onboard debugger) and try again. ### OpenFPGAloader not work Try [update to the latest firmware](#how to update the firmware for the onboard debugger) and try again. ### How to update the firmware for the onboard debugger See [Update the debugger](./../common/update_debugger.html) for details. ### How to Download to External FLASH {#burn_flash} Set the following options: <img src \"./assets/flash_mode.png\" alt \"flash_mode\" width 75%> ### No Response or Incorrect Pin Phenomenon After Burning First, make sure the correct model is selected, each parameter in the figure below is required to be consistent <img src \"./assets/partno.jpg\" alt \"device_choose\" width 75%> Then check whether your code and the corresponding simulation waveform meet the requirements ### For more questions and solutions, go to [Related Questions](./../common doc/questions.html) to view"},"/hardware/en/tang/common-doc/update_debugger.html":{"title":"Update debugger","content":" title: Update debugger keywords: Sipeed, Gowin, Tang, FPGA, Nano, Primer, Mega update: date: 2025 02 10 version: v0.1 author: Serika content: First release date: 2025 02 18 version: v0.2 author: Serika content: Enhance docs content date: 2025 04 18 version: v0.3 author: Serika content: Added a FaQ ## Overview All Sipeed Tang series have onboard debugger (except standalone SOM). The debuggers are separate MCUs with their own firmware. Users could update the firmware for these debuggers to get feature updates and bug fixes. We need to use the [**BouffaloLabDevCube**](https://dev.bouffalolab.com/download/) to program these onboard debugger chips, and documentation about the ***chips & tools*** can be found [here](https://dev.bouffalolab.com/document/). Here is a brief step by step guide: Download and install the corresponding edition of the ***tools*** according to your OS. Get the updated debugger firmware for your board from [**Sipeed Download Station**](https://dl.sipeed.com/shareURL/TANG/Debugger/onboard). Refer to the official documentation of [**BouffaloLabDevCube**](https://dev.bouffalolab.com/download/) to update the firmware of the onboard debugger. For Windows users, there are detailed step by step tutorial below. Also, the steps for other operating systems are similar. *** ## Tutorial ### Preparation for Hardware To put the onboard debugger into **DFU mode**, press the ***Update Button*** or short the corresponding ***Test Points*** before power on the board or connecting the board's debug USB port with a cable. Please refer to the below for the corresponding ***Update Button*** and ***Test Points***. #### Tang nano series Tang nano 1k The 2 **`Test Points`** is in the upper left corner of the board **TOP** side, behind the `KEY B`. <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/hardware/nano1k_update.jpg\"> </details> <br> Tang nano 4k The 2 **`Test Points`** is in the upper left corner of the board **TOP** side, behind the USB C connector. <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/hardware/nano4k_update.jpg\"> </details> <br> Tang nano 9k The 2 **`Test Points`** is in the middle left of the board **TOP** side, behind the USB C connector. <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/hardware/nano9k_update.jpg\"> </details> <br> Tang nano 20k The **`Update Button`** behind the HDMI connector on the **TOP** side has the silkscreen **`UPDATE`**. <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/hardware/nano20k_update.jpg\"> </details> <br> #### Tang Primer series Tang Primer 25k Dock The 2 **`Test Points`** is in the upper left corner of the board **BOT** side, marked as `3V3` & `TDO`. <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/hardware/Primer25k_update.jpg\"> </details> <br> Tang Primer 20k Dock The white **`Update Button`** is on the lower right side of the TOP side of the Dock board between USB C debug port and HDMI port, marked as **`702 BOOT`** <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/hardware/Primer20k_update.jpg\"> </details> <br> ~~Tang Primer 15k Dock~~ (**Not yet released**) TBD #### Tang Mega series(include Tang Console) Tang Mega Neo Dock(inclede Tang Mega 138K Dock) The **`Update Button`** is blow the USB C connector marked as **DEBUG USB2** on the **TOP** side. <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/hardware/Mega neo_update.jpg\"> </details> <br> Tang Mega 138K Pro Dock The **`Update Button`** is on the left of the USB C connector marked as **JATGUART** on the **TOP** side. <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/hardware/Mega 138kpro_update.jpg\"> </details> <br> Tang Console The **`Update Button`** is on the other side the USB C connector on the **TOP** side, the shorter of the 2 buttons marked ad **`BOOT`**. <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/hardware/Mega console_update.jpg\"> </details> <br> *** ### Preparation for Software First, download **BouffaloLabDevCube** from [**BouffaloLab Official Website**](https://dev.bouffalolab.com/download/), The latest version is **`1.9.0`** (February 10, 2025). <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/download_bldc.jpg\"> </details> <br> Unzip the downloaded content and execute the corresponding executable file, for Windows this is **`BLDevCube.exe`** <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/run_bldc.jpg\"> </details> <br> In the pop up window, select Chip model as BL616/618. <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/model sel_bldc.jpg\"> </details> <br> In the new window, check the **`Enable`** checkbox in blow the ***Single download option***. Click the **`Browse`** button to select the firmware file to be updated. <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/mainw_bldc.jpg\"> </details> <br> Let the onboard debugger into [**DFU mode**](#preparation for hardware), it should be a CDC ACM device for both BL702 or BL616. On Windows, this registers a new COM port, in this example is **`COM12`**. For Linux users, CDC ACM usual register as `/dev/ttyACMx`. For macOS users, it may register as `/dev/tty.usbmodemxxxx` or `/dev/cu.usbmodemxxxx`. (Each `x` represents a digit) <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/new_com port.jpg\"> </details> <br> Now, set the **BLDevCube** up as shown below. Set the firmware file location, the port for DFU mode, then click **`Open UART`**, and finally click **`Create & Download`**. <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/set_bldc.jpg\"> </details> <br> Wait for the download to complete as shown in the image below. <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/complete_bldc.jpg\"> </details> <br> *** ### Confirm the results After completing the above steps, we need to confirm that the firmware of the onboard debugger is successfully burned. Usually replug the USB cable or re poweron the board will confirm it. In Windows, you can see two new devices in the device manager: **`USB Converter A`** and **`USB Converter B`**. ![dual_usbconverter](./assets/ftdi_dual.jpg) To confirm the debugger firmware version, double click any **`USB Converter`** and go to the Details tab. Then select **`Parent`** Options from the drop down menu: <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/detail_usbconverter.jpg\"> </details> <br> As shown in the figure below, the last 10 digits **`2025102315`** are the serial number of the debugger firmware version. Linux & macOS users could use command **`dmesg`** to check the serial number in kernel log. <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> <img src \"./assets/serialnum_usbconverter.jpg\"> </details> <br> ### Additional notes for **Tang Core** <details> <summary><font color \"#4F84FF\">Click for details</font></summary> <br> For development boards that support [**Tang Core**](https://nand2mario.github.io/tangcore/) (such as the [Tang Console](../tang console/mega console)), the proper execution of [**Tang Core**](https://nand2mario.github.io/tangcore/) functionality requires both the [**Debugger Firmware**](#latest firmware) and the secondary boot [**TangCore firmware for BL616**](https://github.com/nand2mario/firmware bl616/). The [**Debugger Firmware**](#latest firmware) can be found at the bottom of this page, while the secondary boot [**TangCore firmware for BL616**](https://github.com/nand2mario/firmware bl616/) is currently maintained by **[nand2mario](https://github.com/nand2mario)**. The latest version is available in the [**TangCore Release Package**](https://github.com/nand2mario/tangcore/releases). The [**Debugger Firmware**](#latest firmware) should be written to the **flash** starting address `0x0`, whereas the [**TangCore firmware for BL616**](https://github.com/nand2mario/firmware bl616/) should be written to the **flash** address `0x40000`. The original installation documentation can be found [**here**](https://nand2mario.github.io/tangcore/user guide/installation/#firmware installation). Please note: For **BL616**, only [**Debugger Firmware**](#latest firmware) versions **`2025030317`** and later support the secondary boot functionality. </details> ### Latest firmware The latest firmware serial numbers of all Tang series onboard debuggers are recorded here: Board MCU model Download Serial num. Firmware SHA256 Checksum nano 1K BL702 N/A N/A N/A nano 4K BL702 N/A N/A N/A Nano 9K BL702 N/A N/A N/A Primer 20K BL702 N/A N/A N/A nano 20K BL616 [Click](https://api.dl.sipeed.com/TANG/Debugger/onboard/BL616/2025030317/bl616_fpga_partner_20kNano.bin) 2025030317 [bl616_fpga_partner_20kNano.sha256](https://api.dl.sipeed.com/TANG/Debugger/onboard/BL616/2025030317/bl616_fpga_partner_20kNano.sha256) Primer 25K BL616 [Click](https://api.dl.sipeed.com/TANG/Debugger/onboard/BL616/2025030317/bl616_fpga_partner_25kDock.bin) 2025030317 [bl616_fpga_partner_25kDock.sha256](https://api.dl.sipeed.com/TANG/Debugger/onboard/BL616/2025030317/bl616_fpga_partner_25kDock.sha256) Mega NEO BL616 [Click](https://api.dl.sipeed.com/TANG/Debugger/onboard/BL616/2025030317/bl616_fpga_partner_NeoDock.bin) 2025030317 [bl616_fpga_partner_NeoDock.sha256](https://api.dl.sipeed.com/TANG/Debugger/onboard/BL616/2025030317/bl616_fpga_partner_NeoDock.sha256) Mega 138K Pro BL616 [Click](https://api.dl.sipeed.com/TANG/Debugger/onboard/BL616/2025030317/bl616_fpga_partner_138kproDock.bin) 2025030317 [bl616_fpga_partner_138kproDock.sha256](https://api.dl.sipeed.com/TANG/Debugger/onboard/BL616/2025030317/bl616_fpga_partner_138kproDock.sha256) Console BL616 [Click](https://api.dl.sipeed.com/TANG/Debugger/onboard/BL616/2025041420/bl616_fpga_partner_Console.bin) 2025041420 [bl616_fpga_partner_Console.sha256](https://api.dl.sipeed.com/TANG/Debugger/onboard/BL616/2025041420/bl616_fpga_partner_Console.sha256) ### Troubleshooting If you encounter any problems during use, or have any comments or suggestions on the document, please feel free to give us your feedback. Contact details are below. In most cases, BouffaloLab's official documentation is sufficient for troubleshooting. Click [here](https://dev.bouffalolab.com/document/) to get them. #### Communication Methods **Reddit** : [reddit.com/r/GowinFPGA/](reddit.com/r/GowinFPGA/) **Telegram** : [t.me/sipeed](t.me/sipeed) Discussion forum: [maixhub.com/discussion](https://maixhub.com/discussion) QQ discussion group: [834585530](https://jq.qq.com/?_wv 1027&k wBb8XUan) Leave a message directly below this page Business email : [support@sipeed.com](support@sipeed.com) ### FAQ #### After updating the firmware, **`USB Converter A`** and **`USB Converter B`** do not appear, and only a single **`COM`** port is displayed. 1. This may be caused by abnormal efuse content on the BL616. Please contact after sales support for assistance with replacement related services."},"/hardware/en/tang/common-doc/get_started/install-the-ide.html":{"title":"Install IDE","content":" title: Install IDE keywords: Sipeed, Gowin, Tang, Nano, fpga, primer update: date: 2025 04 24 version: v1.2 author: Serika content: Improve the board/device model Add online lic server addr. date: 2023 05 29 version: v1.1 author: wonder content: Update to Gowin 1.9.8.11 IDE Education version date: 2023 01 13 version: none author: ali raheem content: Minor language fixes We need to use the Gowin IDE to program Gowin FPGA chips, and documentation about the ide can be found [here](https://www.gowinsemi.com/en/support/database/14/). Download and install the corresponding edition of the IDE according to your OS For linux users we suggested using Openfpgaloader to burn fpga. Read the end of this page [burn in linux](#burn in linux) for more details. ## Install the IDE ### Download the IDE The IDE can be downloaded from [this page](https://www.gowinsemi.com/en/support/download_eda/) after logging in. ![download_ide](../assets/download_ide.png) It may look difference as this screenshot is from 2023.05.29 and the IDE has since been updated. The IDE is available in two editions: Standard Edition and Education Edition. The Standard Edition IDE requires license, which you can get from GOWIN Semiconductor Corp. The Education Edition IDE is free to use, but supports fewer devices and includes fewer IP cores. The following figure (updated 2025/09/29) shows the part numbers (PN) supported in the latest Education Edition IDE ![educational_device](../assets/educational_device.png) The chips and boards in the following table can be synthesized and programmed via Educational IDE. The FPGA models of the Tang series boards currently on sale are as follows: Chip full name Chip SeriesChip model Board GW1NZ LV1QN48C6/l5 GW1NZ GW1NZ Nano 1K GW1NSR LV4CQN48PC6/l5 GW1NSR GW1NSR 4C Nano 4K GW1NR LV9QN88PC6/l5 GW1NR GW1NR 9C Nano 9K GW2AR LV18QN88C8/l7 GW2AR GW2AR 18C Nano 20K GW2A LV18PG256C8/l7 GW2A GW2A 18C Primer 20K GW5AT LV15MG132C1/l0 GW5AT GW2A 15A Primer 15K GW5A LV25MG121NC1/l0 GW5A GW5A 25A Primer 25K GW5AT LV60PG484AC1/l0 GW5AT GW5AT 60B Mega/Console 60K GW5AST LV138PG484AC1/l0 GW5AST GW5AT 138B/C Mega/Console 138K GW5AST LV138FPG676AC1/l0 GW5AST GW5AT 138B/C Mega 138K Pro All boards listed above, except the **Mega 138K Pro**, can be used with the Education Edition IDE. ~~For those who want to use Tang Nano (Onboard jtag is CH552), you'll need to use the Standard Edition IDE and apply for a license from GOWIN Semiconductor Corp.~~ > **Notes** > Starting from July 2025, the chip model for both 138K packages (PG484A and FPG676A) will change from **GW5AST 138B** to **GW5AST 138C**. The older B version FPGA has been discontinued by the manufacturer. > For the C Version 138K, you must select **Device Version: C** in the IDE; otherwise, SSRAM cannot be used and unexpected compatibiliHow to Identify Device Version. > [**Click Here**](../questions#How to Identify Device Version) to see how to identify the **device version**. ### Install #### macOS For macOS, just download the DMG image of macOS edition IDE, double click the DMG file to mount it, then drag the `GOWIN_IDE.app` to your `Application` Folder. Because the GOWIN IDE DMG image is not signed, it may be blocked by macOS Gatekeeper. To proceed, you will need to manually allow it to run. When the warning dialog appears, open System Settings → Privacy & Security, then click “Open Anyway.” Alternatively, you can remove the quarantine attribute from the DMG via Terminal with: ```zsh xattr c <path to dmg> ``` After that, double‑click the DMG to mount and run it. #### Linux OS For linux, download the Linux edition IDE and decompress it, the executable file `gw_ide` is in the decompressed folder /IDE/bin/. Execute it on command line to run the GOWIN IDE. Remember to change the permission of the software to make it executable with `chmod + x` if running the software fails. #### Windows OS Simply download the software and install it. Making sure to install all components. <div> <img src \"../../../../zh/tang/common doc/get_started/assets/IDE 2.png\" width 45% alt \"install ide\"> <img src \"../../../../zh/tang/common doc/get_started/assets/IDE 4.png\" width 45% alt \"install programmer\"> </div> In the second picture, Gowin is the IDE which we will use to generate the bitstream file, and the Gowin programmer is what we use to burn it to the fpga. But the programmer installed with IDE does not match the USB Jtag we provide. So we suggest you visit [Tang questions](./../common doc/questions) to see how to replace programmer software with one will work better. <! so we recommand you use this [programmer](https://dl.sipeed.com/shareURL/TANG/programmer) to avoid situations such as failing downloading bitstream file. > After you finish installing IDE, you will need to install 2 drivers. ![install driver](../assets/ide install driver.png) After installing everything there will be an IDE icon, like the one below, on your desktop. ![IDE icon](../assets/ide icon.png) ## Use the IDE ### About the license License can be applied on the Gowin official website, or you can use the online Lic service provided by Sipeed. In the IDE, select Float Lic and fill in the following information: ~~~ Server 01 ip: 106.55.34.119 port: 10559 ~~~ if the ip not work, try use \"gowinlic.sipeed.com\" domain's IP. The Educational edition IDE does not require a license. The Standard edition IDE requires a license, which you should apply for from the Gowin official website, visit https://www.gowinsemi.com/en/support/license/ for more information, and there you will be able to make a choice of software between `GOWIN EDA` and `GOWIN GMD`. `GOWIN EDA` is what we use to program FPGA and the `GOWIN GMD` is what we use to program the hardcore or softcore in FPGA, so you should choose `GOWIN EDA` to get a license to run GOWIN IDE. ### Verify license When you run GOWIN IDE, a license manager message box will appear. Once you have a license file you can click `Browse...` and select your license file, then `Check` and finally `Save`. <img src \"../assets/IDE 13.png\" alt \"Browser lic\" width 45%> <img src \"../assets/check.png\" alt \"Check lic\" width 45%> Now you can use the GOWIN IDE. ### Programmer Because the Programmer installed with IDE may not match the USB JTAG we provide it may not work. So for Windows users we recommended using this [Programmer](https://dl.sipeed.com/shareURL/TANG/programmer) instead. For Linux users, go to the end of this page to see the section [burn in linux](#burn in linux) if you have issues with the Gowin programmer. ## Other It may take some time to receive a license. During this time we suggest you read the GOWIN Semiconductor Corp official documents, which are installed with the IDE. There are three things in the IDE installation path: IDE folder, Programmer folder, uninst.exe ![ide_folder](../../../../zh/tang/common doc/get_started/assets/ide_folder.png) **IDE** folder：Here I suggest you look in the **doc** folder, where many GOWIN Semiconductor Corp official documents are, as shown below. ![IDE](../../../../zh/tang/common doc/get_started/assets/doc folder.png) **Programmer folder**: There are also many documents here. ![programmer](../../../../zh/tang/common doc/get_started/assets/programmer folder.png) We suggest you delete the Programmer folder installed with the IDE and use this version [Click me](https://dl.sipeed.com/shareURL/TANG/programmer)，which can solve some issues. **uninst.exe**：This program uninstalls the IDE. ## Burn in linux [Click here](../flash in linux) is how to burn the development board in linux."},"/hardware/en/tang/common-doc/examples.html":{"title":"Tang Nano Examples","content":" title: Tang Nano Examples tags: Tang Nano, example, guide keywords: Tang Nano，example update: date: 2023 01 09 author: wonder content: Add Tang Nano 9K Lushay Labs link Here are Tang Nano series examples and continuously updated ## Preface Basic guide to use Tang FPGA. ## Tang Nano The onboard downloader is ch552 Github: https://github.com/sipeed/Tang Nano examples [Blink](./../Tang Nano/examples/led/led) [LCD screen](./../Tang Nano/examples/lcd) ## Tang Nano 1K Github: https://github.com/sipeed/TangNano 1K examples [Blink](./../Tang Nano 1K/examples/led/led) [LCD screen](./../Tang Nano 1K/examples/lcd) ## Tang Nano 4K Github: https://github.com/sipeed/TangNano 4K example [Blink](./../Tang Nano 4K/examples/led) (Basic tutorial) [Keyflag Blink](https://github.com/sipeed/TangNano 4K example/tree/main/key_blink)(github) [HDMI display project](https://github.com/sipeed/TangNano 4K example/tree/main/hdmi_720p)(github) [Display camera content on HDMI](https://github.com/sipeed/TangNano 4K example/tree/main/camera_hdmi)(github) Run GBA on Nano 4K ：https://github.com/Martoni/GbHdmi Litex on Tang Nano 4K : https://github.com/litex hub/litex boards Other example Blink by Cortex M3：[Github](https://github.com/verilog indeed/gowin_fpga_tutorials) ## Tang Nano 9K Github: https://github.com/sipeed/TangNano 9K example [Blink](./../Tang Nano 9K/examples/led) [LCD screen](./../Tang Nano 9K/examples/rgb_screen) [Examples of PicoRV](./../Tang Nano 9K/examples/picorv) [FPGA drives 1.14 inch SPI screen](./../Tang Nano 9K/examples/spi_lcd) HDMI display : [Examples of PicoRV](./../Tang Nano 9K/examples/picorv) Litex on Tang Nano 9K : https://github.com/litex hub/litex boards Powerful NeoRV32 riscv core on 9K: [NEORV32](./../Tang Nano 9K/examples/neorv32) Partner tutorials: <a href \"https://learn.lushaylabs.com/tang nano series/\"><img src \"./../../../zh/tang/common doc/assets/lushaylab_logo.png\" alt \"lushaylab_logo\" width \"35%\"></a> [Lushay Labs](https://lushaylabs.com/) are willing to make series around ethernet, graphics and GPU basics, and in the future there is 2 processor project. Those who are interested in these projects can read the following guides provided by [Lushay Labs](https://lushaylabs.com/), and if you want to join these projects, contact to `contact@lushaylabs.com`. 1. [Installation & Getting Started](https://learn.lushaylabs.com/getting setup with the tang nano 9k/) 2. [Debugging & UART](https://learn.lushaylabs.com/tang nano 9k debugging/) 3. [OLED 101](https://learn.lushaylabs.com/tang nano 9k graphics/) 4. [Creating a Text Engine](https://learn.lushaylabs.com/tang nano 9k creating a text engine/) 5. [Data Conversion & Visualization](https://learn.lushaylabs.com/tang nano 9k data visualization/) 6. [Reading from the External Flash](https://learn.lushaylabs.com/tang nano 9k reading the external flash/) 7. [Generating Random Numbers](https://learn.lushaylabs.com/tang nano 9k generating random/) 8. [Sharing Resources](https://learn.lushaylabs.com/tang nano 9k sharing resources/) 9. [I2C, ADC and Micro Procedures](https://learn.lushaylabs.com/i2c adc micro procedures/) 10. [Our First CPU](https://learn.lushaylabs.com/tang nano 9k first processor/) 11. [Read HDMI EDID](https://learn.lushaylabs.com/tang nano 9k project edid/) Other Blogs [Blink by Softcore](https://blog.ruux.de/tang nano 9k softcore blink) ## Tang Nano 20K Github: https://github.com/sipeed/TangNano 20K example [Unbox device](https://wiki.sipeed.com/hardware/en/tang/tang nano 20k/example/unbox.html) [Drive led](https://wiki.sipeed.com/hardware/en/tang/tang nano 20k/example/led.html) ## End If you have questions to discuss, join the [reddit](https://www.reddit.com/r/GowinFPGA) or [telegram group](https://t.me/sipeed). Leave message in this site is also ok. Reddit: https://www.reddit.com/r/GowinFPGA Telegram: https://t.me/sipeed ## Troubles Here are the most common troubles or questions we gathered: [Tang Solutions](https://wiki.sipeed.com/hardware/en/tang/common doc/questions.html)"},"/hardware/en/tang/common-doc/questions.html":{"title":"Solutions","content":" title: Solutions tags: Tang keywords: Programmer desc: update: date: 2023 05 18 version: v0.3 author: wonder content: Add some information <! date: 2022 10 19 version: v0.1 author: wonder content: Rewrite some solutions date: 2023 02 23 version: v0.2 author: wonder content: Add extra information about programmer > Here are some normal questions. ## Device Information ### How to Identify Device Version On the FPGA laser marking, the **third line, fifth character** indicates the device version. If the character is **A**, then it is **Device Version: A**. If the character is **B**, then it is **Device Version: B**. If the character is **C**, then it is **Device Version: C**. ...and so on. This method applies to all **GOWIN FPGAs**. The following example shows the marking position for the **GW5AST** of the 138K Pro series. <!DOCTYPE html> <html lang \"en\"> <head> <meta charset \"UTF 8\"> <title>CSS Indentation</title> <style> .indent { margin left: 0ch; /* width of 0 characters */ } </style> </head> <body> <details class \"indent\"> <summary><font color \"#4F84FF\">Click here to view the 138K B FPG676A device version marking</font></summary> <img src \"./assets/questions/138K Pro Ver.B.png\"> </details> </body> <br> </html> ## Programmer Make sure there are 2 `converter` and `COM` device, this means the debugger works well. ![tang_bl702_device_convertor](./../../../zh/tang/common doc/assets/qusetions/tang_bl702_device_convertor.png) The debugger can be used for Jtag and UART, when using its uart function, Jtag is disabled. To solve this, replug the TypeC cable of your board to disconnect the uart connection. ### No `COM` devices If there is no `COM` device but 2 `converter` devices, right click `converter B` > `Properties` > `Advanced` > `Load VCP` , then Click `OK` and reconnect your USB device. ![tang_bl702_device_convertor_load_vcp](./../../../zh/tang/common doc/assets/qusetions/tang_bl702_device_convertor_load_vcp.png) ### No `convertor` device It takes 10 seconds for debugger loading the driver. And you can install the driver manually. [Click me to download driver](https://dl.sipeed.com/shareURL/TANG/programmer) ![no_convertor_install_driver](./../../../zh/tang/common doc/assets/qusetions/no_convertor_install_driver.png) ### Download frequency Make sure the frequency is equal or lower than `2.5MHz`, otherwise it may lead some troubles like burning bitstream file really slow or failed burning bitstream file. <img src \"./../../../zh/tang/assets/questions/cable.png\"> Choose Frequency equal to or lower than 2.5MHz <img src \"./../../../zh/tang/assets/questions/frequency.png\" > Then cilck Save ### Error found This error means the Programmer application does detect debugger or your driver is wrong. Visit [this programmer](https://dl.sipeed.com/shareURL/TANG/programmer) compressed file, download it and extract it, replace the programmer folder install with GOWIN IDE by this extracted file. If you don't know how to replace the programmer folder, just execute the programmer application in the extracted folder to download bitstream file instead of the programmer application installed with GOWIN IDE. If this problem still occurs after you use our recommended programmer application, try to rerun this application. If all attempts fail, see the begin of this documents about `converter`. ### Cable lost Reflash bitstream to solve this. This occurs when flashing bitstream, board and computer does not well disconnected. ### Cable open failed ![cable_open_failed](./../../../zh/tang/common doc/assets/qusetions/cable_open_failed.png) This means the programmer application does not detect the debugger, try this programmer application mentioned in [Error found](#error found). If this problem still occurs after you use our recommended programmer application, try to rerun this application. If all attempts fail, see the begin of this documents about `converter`. <! After finishing replacing **programmer** as mentioned previously,Do following steps in programmer application. Click Edit >Cable Setting >Cable >Query in the top menu bar,then save. <details> <summary><font color \"#4F84FF\">Click to see steps by pictures</font></summary> <img src \"./../../../zh/tang/assets/questions/cable.png\"> <p>Click Query in the following picture</p> <img src \"./../../../zh/tang/assets/questions/click_query.png\" > <p>Click Save</p> </details> > ### No Gowin devices found ![no_gowin_device_found](./../../../zh/tang/common doc/assets/qusetions/no_gowin_device_found.png) This means the debugger does not detect the FPGA chip, you can use the latest [GOWIN Programmer](http://www.gowinsemi.com.cn/faq.aspx) to solve this problem. ![gowin_programmer_download](./assets/questions/gowin_programmer_download.png) #### Nano 9K Because the FPGA JTAG_SEL pin is routed to Key S2, from the GOWIN manual we can see when JTAGSEL_N 0 (Active low), Jtag is enabled. ![gw1nr_9c_jtag_sel](./assets/questions/gw1nr_9c_jtag_sel.png) For Nano 9K, hold S2 key to solve the trouble caused by JTAGSEL_N and JTAG pins are being used as I/O. #### Primer 20K For 20K Dock kits, it's necessary to enable the core board before using debugger debug the chip, just put the 1 switch on the dip switch down, otherwise this error occurs. Enable Core Board Disable state Additional comments <img src \"./../../../zh/tang/tang primer 20k/assets/start/switch_1_on.png\" alt \"switch_1_on\" width 100%><img src \"./../../../zh/tang/tang primer 20k/assets/start/reset_led_on.png\" alt \"reset_led_on\" width 100%> When disabled, the LDE0 and LED1 is on, and core board doesn't work. When using RV Debugger Plus burning firmware into 20K core board this error occurs, possibly the order of connecting wire is wrong, make sure your connecting order is same as following sheet, or you can check your core board jtag connector inside pins, make sure none of them are crooked(One time we get problem connecting Debugger with core board and finally check out that there is a crooked pin in the jtag connector, this maybe because of doing wrong connection operations when connecting) The JTAG pin orders can be found in the back of 20K core board. <table> <tr> <td>Core Board</td> <td>5V0</td> <td>TMS</td> <td>TDO</td> <td>TCK</td> <td>TDI</td> <td>RX</td> <td>TX</td> <td>GND</td> </tr> <tr> <td>Debugger</td> <td>5V0</td> <td>TMS</td> <td>TDO</td> <td>TCK</td> <td>TDI</td> <td>TX</td> <td>RX</td> <td>GND</td> </tr> </table> ![cable_connect](./../../../../../news/others/20k_lite_start/assets/cable_connect.png) ### ID code mismatch ![id_code_mismatch](./../../../zh/tang/common doc/assets/qusetions/id_code_mismatch.png) This means the selected device in the project mismatch your burning chip. All that refers chip model(The project device, pin constrain, IP modules and programmer device choose) need to be reset. Board name Series Device Package Speed Tang Nano GW1N GW1N 1 QN48 C6/I5 Tang Nano 1K GW1NZ GW1NZ 1 QN48 C6/I5 Tang Nano 4K GW1NSR GW1NSR 4C QN48P C6/I5 or C7/I6 Tang Nano 9K GW1NR GW1NR 9C QN88P C6/I5 Tang Nano 20K GW2AR GW2AR 18C QN88 C8/I7 Tang Primer 20K GW2A GW2A 18C PBGA256 C8/I7 <! For Nano 9K it should be choose as follow: > <! <details> <summary><font color \"#4F84FF\">Click to see the choice of 9K</font></summary> <img src \"./../../../zh/tang/Tang Nano 9K/nano_9k/Tang_nano_9k_Device_choose.png\"> </details> For other boards, just make sure your device selection corresponds to the laser mark on chip package. > ### spi flash selected mismatch The board using GOWIN Semiconductor LittleBee product family (Series of chip names beginning with GW1N) incorporates embedded FLASH in main chip, so when burning firmware we burn into embedded FLASH, and regard the external FLASH as a peripheral. The board using GOWIN Semiconductor Arora product family (Series of chip names beginning with GW1N) does not incorporate embedded FLASH, so when burning firmware we burn into external FLASH, and the operations are as followed . <table> <tr> <td rowspan \"2\"><img src \"./../../../zh/tang/tang primer 20k/examples/assets/led_assets/flash_mode.png\" alt \"flash_mode\"></td> <td style \"white space:nowrap\">Operation is<br><code>exFlash Erase,Program thru GAO Bridge</code></td> </tr> <tr> <td>Flash Device we choose <code>Generic Flash</code></td> </tr> </table> ### Download slowly Don't choose Operation containing Verify ![never_choose_verify](./../../../zh/tang/assets/questions/never_choose_verify.png) Make sure the frquency is equal or lower than `2.5MHz`, normally `2.5MHz` everything is ok. <img src \"./../../../zh/tang/assets/questions/cable.png\"> Choose Frequency equal to or lower than 2.5MHz <img src \"./../../../zh/tang/assets/questions/frequency.png\" > Then click Save ### Directory *** has null character. Error character of the project path. Close IDE. Check project path, only English works and `_` are Ok, take care of the blank character ` ` in the path. Reopen the project, clean and rerun your project. ### Can't find bitstream file Normally the bitstream file with extension name `.fs` is in the impl/pnr folder under the project path. <img src \"./../../../zh/tang/assets/questions/fs_path.png\"> From the picture above we can know the of this bitstream file path is `fpga_project1/impl/pnr/fpga_project1.fs` The fpga_project1 is the project directory, the impl folder is generated by IDE, and the download is in the pnr folder. The file with extension name `.fs` is the firmware we will burn into fpga. ## IDE ### See IP manual In the IP Core generate interface of IDE, click your target IP, then choose your language reference to see the IP manual. <details> <summary><font color \"#4F84FF\">Click to see instructions</font></summary> <img src \"./../../../zh/tang/assets/ip reference.png\"> </details> ### Reconfigure generated IP In the IP Core generate interface of IDE, click the folder icon next to device selection at the top to open the generated IP configuration interface. <details> <summary><font color \"#4F84FF\">Click to see instructions</font></summary> <img src \"./../../../zh/tang/assets/ip reconfigure.png\"> </details> ### Set top module For project that contains multiple projects, if you succeed generating your module, right click the module you want to set as the top module IDE > Hierarchy interface. ![set_top_module](./../../../zh/tang/common doc/assets/set_top_module.png) If your Hierarchy interface is the same as what is in the left picture, this means there are logic errors in the code, such as syntax errors or generate errors. Click 'RTL Analysis Error' in the upper right corner then you can see the error type code and location of the error in the dialog box that pops up, as shown in the right picture in the following table. <table> <tr> <td align \"center\">RTL Analysis Error</td> <td align \"center\">Error type and details</td> </tr> <tr> <td><img src \"./../../../zh/tang/common doc/assets/top_error.png\" alt \"top_module_error\" ></td> <td><img src \"./../../../zh/tang/common doc/assets/error_detail.png\" alt \"error_detail\" ></td> </tr> </table> ### Using GAO GAO is Gowin Analyzer Oscilloscope, its document can be found in the path like what is shown below ![gao](./assets/gao.png) Using this [programmer application](https://dl.sipeed.com/shareURL/TANG/programmer) instead of the programmer application installed with, then you can use GAO.(GAO need run by IDE, so you need to replace the Programmer bin folder by your downloaded one)"},"/hardware/en/tang/common-doc/flash-in-linux.html":{"title":"Flashing on linux","content":" title: Flashing on linux keyeords: Linux, FPGA, Gowin It's recommended to use **openFPGALoader** to flash the development board from linux environments. This page covers installation instructions and has been verified on Ubuntu but may work on other linux distributions. The currently available package on Ubuntu is older ('openfpgaloader') and does not support the latest boards (i.e. tangnano20k), because of this compiling the latest git source is recommended and covered below (adapted from the official projects documentation: https://trabucayre.github.io/openFPGALoader/guide/install.html). ### Compiling openFPGALoader from git 1. Install build dependences 2. Clone the source code 3. Configure and compile the code 4. Install ```bash # Install build dependencies sudo apt get install libftdi1 2 libftdi1 dev libhidapi hidraw0 libhidapi dev libudev dev zlib1g dev cmake pkg config make g++ # compile git clone https://github.com/trabucayre/openFPGALoader.git cd openFPGALoader mkdir build cd build cmake ../ # add DBUILD_STATIC ON to build a static version # add DENABLE_UDEV OFF to disable udev support and d /dev/xxx # add DENABLE_CMSISDAP OFF to disable CMSIS DAP support cmake build . # or # make j$(nproc) # install sudo make install ``` ### Optionally install Udev rules Using the board may require root permissions if Uden rules are not used. If this is not done you will likely need to run `openFPGAloader` as root or with `sudo` each time. ```bash # Working in the openFPGAloader/ directory # Copy the Udev rules to the correct directory sudo cp 99 openfpgaloader.rules /etc/udev/rules.d/ # Reload the udev rules and activate them sudo udevadm control reload rules && sudo udevadm trigger # force udev to take new rule # Add the current user to the plugdev group sudo usermod a $USER G plugdev # add user to plugdev group ``` ### Flashing the board First ensure openFPGAloader detects the cable and device. ```bash $ sudo ./openFPGALoader detect # This command should be executed in the directory where you previously executed make install # The log of succeed running is shown below Jtag frequency : requested 6.00MHz > real 6.00MHz index 0: idcode 0x100481b manufacturer Gowin family GW1N model GW1N(R) 9C irlength 8 ``` Flash the bitstream to the device as shown below. The board name must be specified after the ` b` option, ` f` options means the file is programmed to the non volatile flash, without it it will be stored in SRAM but lost if the device loses power. ```bash $ sudo ./openFPGALoader b tangnano9k f ../../nano9k_lcd/impl/pnr/Tang_nano_9K_LCD.fs # b means target model，this can be found in the form below # f means download to flash，with it means download to sram # The last is what need to be downloaded, it should be the related .fs file # The log of succeed running is shown below write to flash Jtag frequency : requested 6.00MHz > real 6.00MHz Parse file Parse ../../nano9k_lcd/impl/pnr/Tang_nano_9K_LCD.fs: Done DONE Jtag frequency : requested 2.50MHz > real 2.00MHz erase SRAM Done erase Flash Done write Flash: [ ] 100.00% Done CRC check: Success ``` #### Board names You can find the list of supported tang boards using the command `openFPGAloader list boards grep tang`. Board name FPGA Memory Flash tangnano GW1N 1 QN48 OK Internal Flash tangnano1k GW1NZ 1 QN48 OK Internal Flash tangnano4k GW1NSR 4C QN48 OK Internal Flash tangnano9k GW1NR 9C QN88P OK Internal Flash tangnano20k GW2AR 18C QN88 OK External Flash tangprimer20k GW2A 18C BGA256 OK External Flash tangprimer25k GW5A 25A BGA121 OK External Flash tangmega60k GW5AT 60B BGA484 OK External Flash tangmega138k GW5AT 138B/C BGA484 OK External Flash "},"/hardware/en/tang/common-doc/summary.html":{"title":"Tang Nano","content":" title: Tang Nano Tang Nano series development boards are designed based on [Gowin](https://www.gowinsemi.com/en/) FPGA chip. Multiple models of development board meets various requirements. Tang nano 1K with a extremely low price can lead user into FPGA fields Tang nano 4K with a Cortex m3 hardcore, almost the cheapest heterogeneous core board Tang nano 9K with rich logic units can be used to verify RISC V core ## Comparation Model Tang Nano 1K Tang Nano 4K Tang Nano 9K Appreance ![Generated](/hardware/zh/tang/Tang Nano/assets/clip_image002.gif) ![Generated](/hardware/zh/tang/Tang Nano/assets/clip_image004.gif) ![Generated](/hardware/zh/tang/Tang Nano/assets/clip_image006.gif) Logic units（LUT4） 1152 4608 8640 Hard core Cortex M3 Crystal oscillator frequency 27Mhz 27Mhz 27Mhz Display interface RGB screen interface HDMI HDMI,<br> RGB screen interface,<br> SPI screen interface Camera OV2640 External SPI FLASH Pads are reserved Default welding<br>32Mbit SPI FLASH Default welding<br>32Mbit SPI FLASH TF card slot yes Programmer Onboard USB JTAG Onboard USB JTAG Onboard USB JTAG &<br> USB UART The blank in the form means none ## Preparation [Install IDE](./install the ide) ## Questions [Questions&Answers](./programmer)"},"/hardware/en/maixcam/microscope.html":{"title":"Microscope Kit","content":" title: Microscope Kit <div style \"width:100%; display:flex;justify content: center;\"> ![maixcam pro microscope](../../assets/maixcam/maixcam_microscope.png) </div> <div style \"padding: 1em 0 0 0; display: flex; justify content: center\"> <a target \"_blank\" style \"margin: 1em;color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color: #a80202\" href \"https://item.taobao.com/item.htm?id 878126152834\">Taobao</a> <a target \"_blank\" style \"margin: 1em;color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color: #a80202\" href \"https://wiki.sipeed.com/store\">Aliexpress</a> </div> ## Microscope Kit The MaixCAM Microscope Kit transforms your MaixCAM / MaixCAM Pro into a portable digital microscope. It surpasses similarly priced digital microscopes in performance while offering open source capabilities, allowing you to customize unique functions for your digital microscope. The MaixCAM Microscope Kit is ideal for soldering small components, observing biological specimens, focus stacking photography, and more. Explore various applications with this versatile kit! ### Single Lens Kit Includes only the 10mm tapered lens, 10mm spacer ring, and anti glare flocking stickers. It is suitable for handheld use or if you already have a universal microscope stand. ![Single Lens Kit](../../assets/maixcam/micro_lens.jpg) **Usage:** Unscrew the original MaixCAM lens and replace it with the tapered lens. For higher magnification, attach the 10mm spacer ring first, followed by the tapered lens. ![Lens Installation Method](../../assets/maixcam/micro_lens_install.jpg) The closer the lens is screwed inward, the lower the magnification, and the lens to object distance increases (up to ~10 cm). The farther the lens is screwed outward, the higher the magnification, and the lens to object distance decreases (down to ~1 cm). Installation Method Optical Magnification Field of View Suitable Objects 10mm tapered lens (fully inward) 0.25X 20.5x11.5mm PCBs, FPC soldering 10mm tapered lens (fully outward) 0.6X 8.5x4.8mm IC markings, fine soldering Tapered lens + 10mm spacer (inward) 1.0X 5.1x2.9mm IC chips, larger specimens Tapered lens + 10mm spacer (outward) 2.0X 2.56x1.44mm IC chip details, cells 1. The magnifications above are optical, not exaggerated marketing values like hundreds or thousands of times. 2. Field of view examples are based on GC4653. For OS04A10, scale proportionally by 3/1.8 1.67x. After installation, you can observe and capture images using the built in camera app on MaixCAM. For low light conditions, turn on the flashlight via the app. If glare occurs, trim the anti glare flocking and attach it to the inner side of the tapered lens. ![Anti Glare Flocking Suppression](../../assets/maixcam/xiaoguang.jpg) ### Manual Stand Kit Includes: 1. **Lens:** 10mm tapered lens, 10mm spacer ring 2. **Stand:** Precision aluminum alloy stand components 3. **Biological Specimen:** Onion epidermis specimen, white stage 4. **Extras:** Anti glare flocking ![Manual Stand Kit](../../assets/maixcam/focusing_stand_suit.jpg) Refer to the lens installation method above. The assembled stand and MaixCAM setup appear as follows. For larger targets like PCBs, the spacer ring is typically unnecessary: ![Stand Installation](../../assets/maixcam/stand_install.jpg) The package comes with a mounting bracket to help secure the MaixCAM Pro, which can be installed as follows ![Bracket package](../../assets/maixcam/install_bracket.png) A mini heating table can be added for soldering tasks: ![Soldering with Stand](../../assets/maixcam/stand_solder.jpg) For small biological specimens, use the spacer ring, enable the flashlight, and optionally activate focus magnification in the camera app. Place the provided onion epidermis specimen on the white stage and observe with lighting and magnification enabled: ![Onion Epidermis Setup](../../assets/maixcam/stand_onion.jpg) Example results: ![Onion Epidermis](../../assets/maixcam/onion.jpg) ![Pine Stem Cross Section](../../assets/maixcam/pine.jpg) ### Motorized Stand Kit A future release featuring a motorized sliding platform for automatic focusing and stacked photography. <video playsinline controls muted preload style \"width:100%\" src \"../../assets/maixcam/micro_focus.mp4\"></video> ## Performance Comparison ### Specification Table **MaixCAM Microscope Kit** **Darwin M2 Microscope** Sensor Resolution 2560x1440 1600x1200 Display 2.4 inch 640x480 4 inch 800x480 Interaction Full screen touch Physical + touch buttons Aperture F1:2.5 (brighter) F1:4.5 Photo Capture ✓ Adjustable parameters ✓ Fixed parameters Video Recording MP4 (smaller size) AVI (larger size) Timelapse ✓ X Optical Magnification No spacer: 0.25~0.6<br>With spacer: 1.0~2.0 0.42~0.92 Single Pixel Size (Max Magnification) 1µm 2.7µm Stand Sturdy aluminum alloy Basic plastic stand ### Picture Comparison Each image below shows the maximum magnification for both microscopes: **Top Image:** Darwin M2 Microscope **Bottom Image:** MaixCAM Microscope ![c1](../../assets/maixcam/c1.jpg) ![c2](../../assets/maixcam/c2.jpg) ![c3](../../assets/maixcam/c3.jpg) ![c4](../../assets/maixcam/c4.jpg) ![c5](../../assets/maixcam/c5.jpg) ![c6](../../assets/maixcam/c6.jpg) <div style \"padding: 1em 0 0 0; display: flex; justify content: center\"> <a target \"_blank\" style \"margin: 1em;color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color: #a80202\" href \"https://item.taobao.com/item.htm?id 878126152834\">Taobao</a> <a target \"_blank\" style \"margin: 1em;color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color: #a80202\" href \"https://wiki.sipeed.com/store\">Aliexpress</a> </div>"},"/hardware/en/maixcam/maixcam_pro.html":{"title":"MaixCAM-Pro -- Rapid Deployment of AI Vision and Auditory Applications","content":" title: MaixCAM Pro Rapid Deployment of AI Vision and Auditory Applications <div style \"width:100%; display:flex;justify content: center;\"> ![maixcam pro](/static/image/maixcam_pro.png) </div> <div style \"padding: 1em 0 0 0; display: flex; justify content: center\"> <a target \"_blank\" style \"margin: 1em;color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color: #a80202\" href \"https://item.taobao.com/item.htm?id 846226367137\">Taobao</a> <a target \"_blank\" style \"margin: 1em;color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color: #a80202\" href \"https://www.aliexpress.com/store/911876460\">AliExpress</a> </div> ## Introduction to MaixCAM Pro MaixCAM is a hardware product designed for the rapid implementation of AI vision, auditory, and AIoT applications. It serves as a platform for quickly verifying product prototypes and rapid mass production. MaixCAM Pro provides a powerful yet cost effective processor, along with accessories such as a camera, display, WiFi, and a comprehensive, easy to use software ecosystem. <div style \"display: flex; justify content: left\"> <a target \"_blank\" style \"margin: 1em;color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color: #a80202\" href \"https://wiki.sipeed.com/maixpy/\">For more usage, visit MaixPy</a> </div> **Application Scenarios and Target Audience**: * **AI Algorithm Implementation**: AI algorithm engineers can quickly deploy their AI models onto hardware (MaixCAM) with easy to use model conversion tools and SDK. * **STEM Education**: Offers an easy to use MaixPy SDK and development tools, as well as an online model training platform, allowing teachers to focus on teaching without the need for software or hardware development, enabling students to get started quickly. * **University Research and Education**: Provides rich documentation and tutorials suitable for students at all levels, with RISC V and AI frontier technologies being helpful for research purposes. * **A Powerful Tool for Maker and Engineer Prototyping**: Thoughtfully designed hardware, rich peripherals, and extremely easy to use software help quickly bring your creative ideas and products to life without getting bogged down in basic software and hardware development. * **Enterprise Product Upgrades and Deployment**: Quickly deploy products without expensive R&D costs, or use them as an auxiliary tool, for example, in production line QA, or for adding AI vision capabilities to legacy equipment. * **Competition Assistant**: MaixCAM + MaixPy + MaixCDK can quickly implement various innovations and functions, making it suitable as a designated platform for competitions. Maix products and MaixPy have already been used in various competitions and have won awards. ## Overview of MaixCAM Pro Hardware > Compared with [MaixCAM](./index.html), MaixCAM Pro has redesigned PCB and casing, and upgraded some peripherals. Differences with MaixCAM are in **bold**. Component Description CPU Main Core 1GHz RISC V C906 processor (plus an optional 1GHz ARM A53 core), running Linux CPU Small Core 700MHz RISC V C906, running RTOS CPU Low Power Core 25~300MHz 8051 processor for low power applications NPU 1TOPS@INT8, supports BF16 models, supports operators for common models such as Mobilenetv2, YOLOv5, YOLOv8 Memory 256MB DDR3 Storage TF card boot / SD NAND boot Camera Supports up to 5MP camera, officially supports 4MP GC4653 and OS04A10 cameras (4 lane MIPI CSI input, 22 pin interface, dual CSI split supported) Display **2.4 inch high definition IPS capacitive touch screen, resolution 640x480** (2 lane MIPI DSI output, standard 31 pin interface, 6 pin capacitive touch) Audio Output Built in PA amplifier + **1W speaker** Audio Input Built in analog silicon microphone for direct voice recording Network Onboard WiFi6 + BLE5.4 module, customizable Ethernet version USB Type C USB2.0, support device and host mode, support USB camera IO Interface **2.54mm PMOD interface, 12 IO + Vsys/3.3v/GND interface + 1.25mm 6 pin extension interface** Buttons 1 x RST button + 1 x USER (function) button + **1 x power button** LED Power indicator + User LED + **illumination LED** Codec H.264 / H.265 / MJPEG hardware decoding, supports 2k@30fps encoding and decoding Peripherals I2C/SPI/UART/ADC/PWM/WDT, etc. Power **Independent power management chip AXP2101, supports lithium battery charging and discharging, available with lithium battery version** Case **3D printed acrylic case, standard 1/4 inch threaded hole** IMU **Onboard six axis IMU sensor (3 axis accelerometer + 3 axis gyroscope)** RTC **Onboard BM8653 RTC chip + button cell, keeps time even when powered off** Dimensions **No battery version: 67x51x12mm, battery version thickness: 16mm** ## MaixCAM Software Ecosystem We don't just provide hardware; MaixCAM comes with a complete software ecosystem, including: Name Description Image/Video **[MaixPy](https://wiki.sipeed.com/maixpy/)** Python development package with rich and easy to use APIs optimized for MaixCAM, supporting hardware acceleration, with extensive documentation and tutorials Visit [MaixPy homepage](https://wiki.sipeed.com/maixpy/) [MaixVision](https://wiki.sipeed.com/maixvision) AI vision IDE for programming, code execution, real time image preview, even graphical programming, lowering development and usage thresholds ![MaixVision](../../assets/maixcam/maixvision.jpg) <video playsinline controls muted preload style \"width:100%\" src \"https://wiki.sipeed.com/maixpy/static/video/maixvision.mp4\"></video> [MaixHub](https://maixhub.com) Online AI model training platform that allows training and deployment of models with a single click, without needing AI knowledge or expensive training equipment ![MaixVision](../../assets/maixcam/maixhub.jpg) [MaixCDK](https://github.com/sipeed/MaixCDK) C++ version of MaixPy for developers familiar with C/C++ to get started immediately Visit [MaixCDK homepage](https://github.com/sipeed/MaixCDK) [App Store](https://maixhub.com/app) Provides various applications and tools for direct download and use, allowing developers to share their apps Visit [MaixHub App Store](https://maixhub.com/app) [Community Plaza](https://maixhub.com/share) Developers share their projects and experiences Visit [MaixHub Community Plaza](https://maixhub.com/share) ## Resource Summary ### MaixCAM Exclusive Resources (Provided by Sipeed) * [MaixCAM Pro Official Documentation](https://wiki.sipeed.com/maixcam pro) (This documentation) * [MaixPy Official Documentation](https://wiki.sipeed.com/maixpy/) (Python SDK) ([MaixPy Source Code](https://github.com/sipeed/MaixPy)) * [MaixCDK](https://github.com/sipeed/MaixCDK) (C/C++ SDK) ([MaixCDK Source Code](https://github.com/sipeed/MaixCDK)) * [System Source Code](https://github.com/sipeed/LicheeRV Nano Build) * [Hardware related Materials](https://dl.sipeed.com/shareURL/MaixCAM/MaixCAM_Pro) * Case and Stand: See [Case Documentation](./assemble.html). The casing and bracket 3D model files are also open source. Please visit [makerworld.com](https://makerworld.com/) (recommended) or [makerworld.com.cn](https://makerworld.com.cn) and search for `MaixCAM`. * Interface Diagram: ![maixcam_pro_io](../../assets/maixcam/maixcam_pro_io.png) ### Chip Resources MaixCAM Pro is based on the Sophgo SG2002 chip, so the related documents can also be referenced, along with the documents of Sipeed's LicheeRV Nano core board. >! Note: MaixCAM Pro can use the documents of LicheeRV Nano and SG2002. **LicheeRV Nano and other SG2002 based products cannot use MaixPy, MaixCDK, or MaixVision software**, so please make sure you purchase the correct product to avoid wasting time and money. > If you want to get started developing applications quickly, choose MaixCAM. If you are an experienced Linux developer interested in developing based on original SG2002 resources, you may consider choosing LicheeRV Nano. * [Datasheet](https://github.com/sophgo/sophgo doc/releases) (Register level data) * [LicheeRV Nano Development Board Documentation](https://wiki.sipeed.com/hardware/zh/lichee/RV_Nano/1_intro.html) * [Toolchain Download](https://sophon file.sophon.cn/sophon prod s3/drive/23/03/07/16/host tools.tar.gz) * [Sophgo SDK Development Documentation Summary](https://developer.sophgo.com/thread/471.html) * [Sophgo HDK Development Documentation Summary](https://developer.sophgo.com/thread/472.html) * [Sophgo TPU Development Documentation Summary](https://developer.sophgo.com/thread/473.html) * [Sophgo TDL Development Documentation Summary](https://developer.sophgo.com/thread/556.html) (High level API encapsulation based on TPU) ### Community Resources * [MaixHub App Store](https://maixhub.com/app) * [MaixHub Community Plaza](https://maixhub.com/share) * [makerworld.com](https://makerworld.com/) (recommended) or [makerworld.com.cn](https://makerworld.com.cn), search for `MaixCAM` * [Bilibili](https://bilibili.com) Search for `MaixCAM` or `MaixPy` ## Purchase * [Sipeed Taobao](https://sipeed.taobao.com/) * [AliExpress](https://www.aliexpress.com/store/911876460)"},"/hardware/en/maixcam/tof_thermal.html":{"title":"ToF/Thermal PMOD","content":" title: ToF/Thermal PMOD ## PMOD_Thermal32 The PMOD_Thermal32 module is a low cost thermal imaging module compliant with the PMOD interface standard. It can be directly inserted into the PMOD slot of the MaixCAM Pro and combined with a visible light camera to achieve dual light fusion functionality. **Module Name** PMOD_Thermal32 **Resolution** 32x24 **Temperature Range** 40°C to 450°C **Field of View (FOV)** 55° x 35° **Frame Rate** 1~30fps **Interface** I2C PMOD_Thermal32 Installation Guide ![PMOD_Thermal32 Installation](../../assets/maixcam/pmod_thermal32.jpg) Thermal Imaging with Pseudo color Display ![Pseudo color Thermal Imaging](../../assets/maixcam/th32_1.jpg) Thermal Imaging + Visible Light Fusion Display ![Thermal + Visible Light Fusion](../../assets/maixcam/th32_2.jpg) Reference Code: [GitHub Repository](https://github.com/sipeed/MaixPy/blob/main/examples/ext_dev/sensors/thermography_mlx90640/mlx90640_example.py) ## PMOD_TOF100 The PMOD_TOF100 module is a low cost array ToF module compliant with the PMOD interface standard. It can be directly inserted into the PMOD slot of the MaixCAM Pro and combined with a visible light camera to achieve dual light fusion functionality. **Module Name** PMOD_TOF100 **Resolution** 100x100, 50x50, 25x25 **Measuring Range** 0.2~2.5m **Field of View (FOV)** 70°H x 60°V **Laser Emitter** 940nm VCSEL **Frame Rate** 100x100: 6fps, 50x50: 22fps, 25x25: 30fps **Interface** SPI PMOD_TOF100 Installation Guide ![PMOD_TOF100 Installation](../../assets/maixcam/pmod_tof100.jpg) Depth Imaging with Pseudo color Display ![Pseudo color Depth Imaging](../../assets/maixcam/tof100_1.jpg) Depth + Visible Light Fusion Display ![Depth + Visible Light Fusion](../../assets/maixcam/tof100_2.jpg) Reference Code: [GitHub Repository](https://github.com/sipeed/MaixPy/blob/main/examples/ext_dev/sensors/tof100/tof100_example.py)"},"/hardware/en/maixcam/maixcam2_isp.html":{"title":"MaixCAM2 ISP Tuning","content":" title: MaixCAM2 ISP Tuning ## Can I tune the ISP myself if I want a specific image style? In theory, yes, but it’s quite complicated. This article will not go into detail for now, but just provides you with the possibility. If you’re not prepared to hit some roadblocks, you can assume it’s not supported. That said, you’re welcome to try, share your experiences, and contribute to this document. ## Brief overview of ISP tuning Simply put, the ISP loads configuration files and reads parameters at runtime (you can see many configuration files under `/opt/etc/` in the system, such as `sc850sl_hdr_4lane_sipeed_0716.bin`). We can use the chip vendor’s ISP tuning tool to connect to the development board for tuning. Once finished, you’ll get a configuration file that can replace the original one. The official chip documentation and tools are available on the [download site](https://dl.sipeed.com/shareURL/MaixCAM/MaixCAM2/Software/Tools). Just download, read, and use them."},"/hardware/en/maixcam/maixcam2_faq.html":{"title":"MaixCAM2 FAQ (Frequently Asked Questions)","content":" title: MaixCAM2 FAQ (Frequently Asked Questions) **If you can't find your problem below, you can also refer to [MaixPy FAQ](https://wiki.sipeed.com/maixpy/doc/zh/faq.html).** ## The product comes with a case, but I don’t need the case, screen, or camera. Can these be removed for mass production? Yes. The included case, screen, and camera are mainly for quick product and idea validation. For actual mass production, you can contact **Sipeed** ([support@sipeed.com](mailto:support@sipeed.com) or through the online store) to customize and remove certain components. Larger orders will receive better support. In addition, a **core board version** is also available. If you have PCB design capabilities, you can directly purchase the core board and design your own baseboard. ## Why does the 4GB RAM version show only 2GB in the system? The hardware has **4GB RAM**, but the memory is divided into **user space memory** and **system reserved memory**. In a **Linux** system, the memory you see with the `free` command is the **user space memory**. A large portion of the system reserved memory is allocated as **dedicated hardware memory**, for example for **model inference**, **camera**, **display**, etc. You can adjust the allocation ratio by modifying the value of `maix_memory_cmm 1` in the `/boot/configs` file. * ` 1` is the default value. * For example, if you change it to `3072` (no unit needed, the default unit is **MiB**), then **3072 MiB** will be reserved for models and other hardware usage, and the rest will be available for the **Linux system**. **A reboot is required for changes to take effect.** For more details, please refer to [MaixPy Memory Usage Guide](https://wiki.sipeed.com/maixpy/doc/en/pro/memory.html)."},"/hardware/en/maixcam/maixcam2_camera_lens.html":{"title":"MaixCAM2 – Camera and Lens Selection & Usage","content":" title: MaixCAM2 – Camera and Lens Selection & Usage ## Camera Sensors Officially Supported by MaixCAM2 Parameter \\ Model OS04D10 SC850SL OS04A10 Resolution & FPS 2568x1448\\@30fps (2K / 4MP) 3856x2176\\@60fps (10bit) (4K / 8MP) 2688x1520\\@30fps (2K / 4MP) Pixel Size 1.998µm x 1.998µm 2.0µm x 2.0µm 2.9µm x 2.9µm Sensor Size 5130.864µm x 2893.104µm 7841.6µm x 4454.4µm Lens Size 1/3\" 1/1.8\" 1/1.79\" Output Format 10bit RAW RGB 12/10/8bit RAW RGB 16/12/10bit RAW RGB Shutter Type Rolling Shutter Rolling Shutter Rolling Shutter CRA 12° 9° 9° Max Exposure 0.5s 45s Dynamic Range Linear mode 75dB<br>WDR mode > 100dB >120dB (2x/3x staggered HDR) SNR 39dB Sensitivity 5034 mV/lux·s 32,000 e /Lux sec (green pixel @ 530nm illumination) Operating Temp 30°C \\~ 85°C<br>Optimal 20°C \\~ 60°C 30°C \\~ 85°C<br>Optimal 20°C \\~ 60°C 30°C \\~ 85°C Application Lower resolution, lower heat, good image quality, suitable for general AI detection/recognition High resolution & clarity, higher heat High quality imaging, color night vision, HDR, higher heat > ` ` not listed in datasheet or not tested. More sensor datasheets can be found on the [download site](https://dl.sipeed.com/shareURL/MaixCAM/MaixCAM2/Hardware/sensors). ## Lens and Mount Parameters & Replacement Each official camera module comes with a standard M12 lens. Note: Lens parameters vary by sensor. If you want to purchase different lenses, use the sensor specs above and the reference lens table below. Datasheets for more lenses and mounts are available at the [download site](https://dl.sipeed.com/shareURL/MaixCAM/MaixCAM2/Hardware/sensors). ⚠️ Actual lenses may differ slightly from the datasheet (e.g. OS04D10 and SC850SL default lenses don’t use `650 IR Cut` even though listed). Always go by actual parts. ### Lenses #### Official MaixCAM2 Kit Lenses ![SC850SL Lens](../../assets/maixcam/cam_len.png) Parameter \\ Model OS04D10 SC850SL OS04A10 Interface **M12** **M12** **M12** Diameter 12mm 12mm 12mm Thread Pitch 0.5mm 0.5mm 0.5mm FOV H 90°<br>V 81°<br>D 90° H 86.7°<br>V 48.8°<br>D 99.5° H 88°<br>V 49.9°<br>D 100.2° Distortion None 25.6% 25.6% IR Cut None None None Lens Size **1/3\"** **1/1.8\"** **1/1.8\"** CRA 12° 16.2° 16.2° TTL 22.28±0.2mm 22.28±0.2mm Focal Length **3.05mm** **4.9±5%mm** **4.9±5%mm** Back Focal Length 3.1mm 6.41±0.2mm 6.41±0.2mm Flange Distance 3.1mm **6.17±0.2mm** **6.17±0.2mm** F Number 2.5 1.65±10% 1.6±10% Lens Elements 2G2P 4G4P 4G4P Resolution Std. 4MP 8MP 4MP ### Focusing Default M12 lenses are **manual focus**. If the image looks blurry, rotate the lens until focus is achieved. Some lenses include a **lock ring**—loosen it before adjusting focus, then tighten it to secure. ### Zoom Default M12 lenses are **fixed focal length**—they support focusing (sharpness) but not zooming (optical magnification). If needed, purchase an **M12 zoom lens**, referencing the specs above. ### Replacing the Lens Choose another **M12 compatible** lens. Important factors: **lens length**, **mount height**, and **focal length**. To ensure proper focus: 1. **Focus before bottoming out:** Sensor to lens distance (at screw in) must ≤ flange distance. Otherwise, it can’t focus. 2. **Focus before falling out:** When focusing on close objects, lens may need to move outward (`v_d`). Ensure flange + `v_d` < mount height, or the lens will slip out before focusing. > If unsure, provide your sensor + mount specs to the lens vendor for confirmation. ### Mounts ![](../../assets/maixcam/cam_len_base.png) Mounts are generally **not replaceable** (glued to PCB). Choose lenses that fit the existing mount. Parameter \\ Model OS04D10 SC850SL OS04A10 IR Cut **650nm IR Cut** **650nm IR Cut** **650nm IR Cut** Height **12mm** **13mm<br>(12mm + 1mm spacer)** **13mm<br>(12mm + 1mm spacer)** * **IR Cut:** Filters infrared. If you need IR capture, you must remove or replace the filter (not easy). ## Can I Replace the Sensor? In theory, yes. Official sensors are already tuned and plug and play. If you want a new sensor, you’ll need **sensor driver integration** experience and **ISP tuning**. The process is complex and **not covered in this doc**. ## Real World Camera Comparisons TODO:"},"/hardware/en/maixcam/index.html":{"title":"MaixCAM — Fast Deployment for AI Vision and Audio Projects","content":" title: MaixCAM — Fast Deployment for AI Vision and Audio Projects <script src \"/static/js/tailwind.js\"></script> <style> #content_body .h1 { font size: 2.2em; font weight: 800; } .flex_center { display:flex; flex direction: column; justify content: center; align items: center; } #content_body .card_item { color: #f0f5f9; background: linear gradient(90deg, #26d0ce, #1a2980); border radius: 1em; padding: 1em; margin: 1em 0.1em; } #content_body .card_item img { transition: transform 0.4s ease; } #content_body .item2 { width: 90%; align self: start; background: linear gradient( 45deg, #c471ed, #f64f59); } #content_body .item3 { width: 90%; align self: end; background: linear gradient( 45deg, #12c2e9, #c471ed); } #content_body .card_item:visited { color: #f0f5f9; } #content_body .card_item:hover { border radius: 1em; background: linear gradient(70deg, #26d0ce, #1a2980); padding: 1em; margin: 1em 0.1em; } #content_body .item2:hover { background: linear gradient( 20deg, #c471ed, #f64f59); } #content_body .item3:hover { background: linear gradient( 20deg, #12c2e9, #c471ed); } #content_body .card_item:hover > img { transform: rotate(10deg) scale(1.3) ; } .cams_wrapper { } .mask_wrapper { position: relative; } .mask { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } .item_name { font size: larger; font weight: 800; } #content_body .btn_blue { margin: 1em; color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color: #0b4294; } #content_body .btn_blue:visited { color: white; } #content_body .btn_blue:hover { margin: 1em; color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color: #082a5e; } #content_body .btn_red { margin: 1em; color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color: #a80202 } #content_body .btn_red:visited { color: white; } #content_body .btn_red:hover { margin: 1em; color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color:#630606; } .dark #content_body .card_item { color: #f0f5f9; } .dark #content_body a.card_item:visited { color: #f0f5f9; } .dark .card_item { background: #292929; } @media screen and (max width: 768px) { #content_body .item1 { flex direction: column reverse; } #content_body .item1 img { padding bottom: 1em; } #content_body .item2 { width: 98%; } #content_body .item3 { width: 98%; } } </style> </style> <div style \"width:100%;\" class \"flex_center\"> <! ![MaixCAM](../../assets/maixcam/maixcam.jpeg) > </div> <div style \"margin bottom: 4em\"></div> <div class \"flex_center w full cams_wrapper\"> <div class \"flex flex row w full\"> <a href \"./maixcam2.html\" class \"flex flex row items center justify around w full card_item mask_wrapper\"> <div class \"item_name\">MaixCAM2</div> <img src \"/static/image/maixcam2_small.png\"> <div class \"mask\"></div> </a> </div> <div class \"flex flex row w full justify between\"> <div class \"flex_center flex row w 1/2 justify start\"> <a href \"./maixcam.html\" class \"flex_center card_item mask_wrapper\"> <img src \"/static/image/maixcam_small.png\"> <div class \"item_name pt 1\">MaixCAM</div> <div class \"mask\"></div> </a> </div> <div class \"flex_center flex row w 1/2 justify end\"> <a href \"./maixcam_pro.html\" class \"flex_center card_item mask_wrapper\"> <img src \"/static/image/maixcam_pro_small.png\"> <div class \"item_name pt 1\">MaixCAM Pro</div> <div class \"mask\"></div> </a> </div> </div> </div> <div class \"center mb 20\"></div> <div style \"padding: 1em 0 0 0; display: flex; justify content: center\"> <a target \"_blank\" class \"btn_blue\" href \"https://wiki.sipeed.com/maixpy/\">MaixPy </a> <a target \"_blank\" class \"btn_blue\" href \"https://wiki.sipeed.com/maixcdk/\">MaixCDK</a> <a target \"_blank\" class \"btn_blue\" href \"https://maixhub.com\">MaixHub online Model Train</a> <a target \"_blank\" class \"btn_blue\" href \"https://maixhub.com/app\">MaixHub App Store</a> </div> <div style \"padding: 1em 0 0 0; display: flex; justify content: center\"> <a target \"_blank\" class \"btn_red\" href \"https://item.taobao.com/item.htm?id 784724795837\">Taobao</a> <a target \"_blank\" class \"btn_red\" href \"https://www.aliexpress.com/store/911876460\">AliExpress</a> </div>"},"/hardware/en/maixcam/maixcam.html":{"title":"MaixCAM — Fast Deployment for AI Vision and Audio Projects","content":" title: MaixCAM — Fast Deployment for AI Vision and Audio Projects <div style \"width:100%; display:flex;justify content: center;\"> ![MaixCAM](https://wiki.sipeed.com/maixpy/static/image/maixcam.png) </div> <div style \"padding: 1em 0 0 0; display: flex; justify content: center\"> <a target \"_blank\" style \"margin: 1em;color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color: #a80202\" href \"https://item.taobao.com/item.htm?id 784724795837\">Taobao</a> <a target \"_blank\" style \"margin: 1em;color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color: #a80202\" href \"https://www.aliexpress.com/store/911876460\">AliExpress</a> </div> ## Introduction to MaixCAM MaixCAM is a hardware product designed for the rapid deployment of AI vision, audio, and AIOT applications. It serves as a platform for quickly verifying product prototypes and moving to mass production, featuring a powerful yet cost effective processor with integrated cameras, screens, WiFi, and a complete, easy to use software ecosystem. <div style \"padding: 1em 0 0 0; display: flex; justify content: left\"> <a target \"_blank\" style \"margin: 1em;color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color: #a80202\" href \"https://wiki.sipeed.com/maixpy/\">More Features on the MaixPy Homepage</a> </div> **Target Use Cases and Audience**: * **AI Algorithm Deployment**: AI engineers can quickly deploy their AI models on real hardware (MaixCAM) using easy to use model conversion tools and SDKs. * **STEM Education**: With the MaixPy SDK and development tools, teachers can focus on teaching while students quickly get hands on experience without needing to develop hardware or software. * **University Research and Education**: Comprehensive documentation and tutorials provide learning paths for students at all levels, while RISC V and AI technologies offer tools for research. * **Prototyping for Makers and Engineers**: Well designed hardware, extensive peripherals, and easy to use software let you quickly turn ideas into reality without getting bogged down by basic development tasks. * **Enterprise Product Upgrades and Deployment**: Quickly deploy products without high R&D costs, or add AI vision to existing equipment for smart enhancements. * **Competitions**: MaixCAM + MaixPy + MaixCDK provide rapid innovation for competitions. The platform has already been used to win various awards. ## MaixCAM Hardware Overview MaixCAM hardware info, more info please refer to CPU's datasheet. And there is another model called [MaixCAM Pro](./maixcam_pro.html). Component Description CPU Big Core 1GHz RISC V C906 (plus an optional 1GHz ARM A53 for Linux) CPU Small Core 700MHz RISC V C906 running RTOS Low Power Core 25~300MHz 8051 for low power applications NPU 1TOPS@INT8, BF16 model support, operators for popular models like Mobilenetv2, YOLOv5, YOLOv8 Memory 256MB DDR3 Storage TF card or SD NAND boot Camera Up to 5MP, officially supports 4MP GC4653 and OS04A10 (4 lane MIPI CSI, 22 pin interface, supports dual CSI split) Screen 2.3\" HD IPS touch screen, 552x368 resolution (2 lane MIPI DSI output, 31 pin standard interface, 6 pin capacitive touch) Audio Output Onboard PA amplifier for 1W or less speakers Audio Input Built in analog silicon mic for audio input Network Onboard WiFi6 + BLE5.4 module, Ethernet versions available USB Type C USB2.0, support device and host mode, support USB camera IO Ports 2 x 14 pin 2.54mm headers, 800mil spacing, breadboard compatible Buttons 1 x RST button + 1 x USER (function) button LEDs Power LED + User LED Codec H.264/H.265/MJPEG hardware decode, supports 2K@30fps encoding/decoding Peripherals I2C/SPI/UART/ADC/PWM/WDT Case 3D printed with two screw mounts for attaching to stands ## MaixCAM Software Ecosystem MaixCAM offers more than just hardware. It comes with a complete software ecosystem, including: Name Description Image/Video [MaixPy](https://wiki.sipeed.com/maixpy/) Python SDK optimized for MaixCAM with simple APIs and hardware acceleration Refer to[MaixPy](https://wiki.sipeed.com/maixpy/) [MaixVision](https://wiki.sipeed.com/maixvision) AI vision IDE for programming, running code, live image preview, and graphical programming ![MaixVision](../../assets/maixcam/maixvision.jpg) <video playsinline controls muted preload style \"width:100%\" src \"https://wiki.sipeed.com/maixpy/static/video/maixvision.mp4\"></video> [MaixHub](https://maixhub.com) Online AI model training platform that requires no AI expertise or expensive hardware ![MaixHub](../../assets/maixcam/maixhub.jpg) [MaixCDK](https://github.com/sipeed/MaixCDK) C++ version of MaixPy for C/C++ developers Refer to [MaixCDK](https://github.com/sipeed/MaixCDK) [App Store](https://maixhub.com/app) Download tools and applications, or upload your own Refer to [App Store](https://maixhub.com/app) [Share Center](https://maixhub.com/share) A space for developers to share projects and experiences Refer to [Share center](https://maixhub.com/share) ## MaixCAM Documentation ### Official Resources (by Sipeed) * [MaixCAM Documentation](https://wiki.sipeed.com/maixcam)(This documentation) * [MaixPy Documentation](https://wiki.sipeed.com/maixpy/) (Python SDK) ([Source Code](https://github.com/sipeed/MaixPy)) * [MaixCDK Documentation](https://github.com/sipeed/MaixCDK) (C/C++ SDK) ([Source Code](https://github.com/sipeed/MaixCDK)) * [System Source Code](https://github.com/sipeed/LicheeRV Nano Build) * [Schematic](https://dl.sipeed.com/shareURL/LICHEE/LicheeRV_Nano/02_Schematic) * [Camera and Lens Documentation](https://dl.sipeed.com/shareURL/MaixCAM/MaixCAM/Camera) * [Core Board Hardware Documentation](https://dl.sipeed.com/shareURL/LICHEE/LicheeRV_Nano) * [MaixCAM Case Model](https://makerworld.com.cn/zh/models/467141) * [MaixCAM Stand Model](https://makerworld.com.cn/zh/models/467152) ### Chip Documentation MaixCAM is based on Sipeed's LiecheeRV Nano core board, which uses the SG2002 chip. The following resources may also be useful: > Note: While MaixCAM can use documentation from LicheeRV Nano and SG2002, **LicheeRV Nano and other SG2002 products cannot use MaixPy, MaixCDK, or MaixVision software.** Please ensure you choose the right product for your development needs. * [Datasheet](https://github.com/sophgo/sophgo doc/releases) * [LicheeRV Nano Development Board Documentation](https://wiki.sipeed.com/hardware/zh/lichee/RV_Nano/1_intro.html) * [Toolchain Download](https://sophon file.sophon.cn/sophon prod s3/drive/23/03/07/16/host tools.tar.gz) * [Sophon SDK Documentation](https://developer.sophgo.com/thread/471.html) * [Sophon HDK Documentation](https://developer.sophgo.com/thread/472.html) * [Sophon TPU Documentation](https://developer.sophgo.com/thread/473.html) * [Sophon TDL Documentation](https://developer.sophgo.com/thread/556.html) ### Community Resources * [MaixHub App Store](https://maixhub.com/app) * [MaixHub Share Plaza](https://maixhub.com/share) * [makerworld.com](https://makerworld.com/) (recommended) or [makerworld.com.cn](https://makerworld.com.cn) — search for `MaixCAM` * [Bilibili](https://bilibili.com) — search for `MaixCAM` or `MaixPy` * [GitHub](https://github.com) Open Source Projects: github.com Search: [MaixCAM](https://github.com/search?q maixcam&type repositoriese) / [MaixCAM2](https://github.com/search?q maixcam2&type repositoriese) / [MaixPy](https://github.com/search?q maixpy&type repositoriese) ## Purchase MaixCAM comes in two versions. For details, please visit [Sipeed Taobao](https://sipeed.taobao.com/) or [AliExpress](https://www.aliexpress.com/store/911876460)."},"/hardware/en/maixcam/maixcam2.html":{"title":"MaixCAM2 -- Rapid Deployment of AI Vision and Audio Applications","content":" title: MaixCAM2 Rapid Deployment of AI Vision and Audio Applications <style> #content_body .h1 { font size: 2.2em; font weight: 800; } .flex_center { display:flex; flex direction: column; justify content: center; align items: center; } .flex { display: flex; } .flex row { flex direction: row; } .items center { align items: center; } .justify center { justify content: center; } .justify around { justify content: space around; } .w full { width: 100%; } #content_body .card_item { color: #f0f5f9; background: linear gradient(90deg, #26d0ce, #1a2980); border radius: 1em; padding: 1em; margin: 1em 0.1em; } #content_body .card_item img { transition: transform 0.4s ease; } #content_body .card_item:visited { color: #f0f5f9; } #content_body .card_item:hover { border radius: 1em; /* background: linear gradient(70deg, #26d0ce, #1a2980); */ padding: 1em; margin: 1em 0.1em; } #content_body .card_item:hover > img { transform: rotate(1deg) scale(1.05) ; } .mask_wrapper { position: relative; } .mask { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } .item_name { font size: larger; font weight: 800; } #content_body .btn_blue { margin: 1em; color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color: #0b4294; } #content_body .btn_blue:visited { color: white; } #content_body .btn_blue:hover { margin: 1em; color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color: #082a5e; } #content_body .btn_red { margin: 1em; color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color: #ad3838 } #content_body .btn_red:visited { color: white; } #content_body .btn_red:hover { margin: 1em; color: white; font size: 0.9em; border radius: 0.3em; padding: 0.5em 2em; background color: #630606; } .dark #content_body .card_item { color: #f0f5f9; } .dark #content_body a.card_item:visited { color: #f0f5f9; } .dark .card_item { background: #292929; } </style> <div style \"width:100%; display:flex;justify content: center;\"> <! ![maixcam2](/static/image/maixcam2_front_back.png) > </div> <div class \"flex_center w full\"> <div class \"flex flex row w full\"> <div class \"flex flex row items center justify around w full card_item mask_wrapper item1\"> <img src \"/static/image/maixcam2_front_back.png\" style \"width: 80%\"> </div> </div> </div> <div style \"padding: 1em 0 0 0; display: flex; justify content: center\"> <a target \"_blank\" class \"btn_red\" href \"https://www.aliexpress.com/store/911876460\">AliExpress</a> <a target \"_blank\" class \"btn_red\" href \"https://sipeed.taobao.com\">Taobao</a> </div> <div class \"mb 10\"></div> ## Introduction to MaixCAM2 `MaixCAM2` is a hardware product designed for better implementation of AI vision, audio, and AIoT applications. It provides a platform for rapid prototype verification and mass production. ### **Key Features**: 1. **Outstanding hardware performance**: Dual core `A53` + `12.8Tops@INT4 / 3.2Tops@INT8` + `4GB LPDDR4` + multiple hardware codecs. At `640x640` resolution, `YOLO11n` reaches up to `113FPS`, and `YOLO11s` up to `62FPS`. Here are some SOC run YOLO11n's benchmark: ![](../../assets/maixcam/maixcam2_benchmark.jpg) 2. **Integrated hardware package**: Supports up to `4K 1/1.8\"` camera, `640x480` high definition touchscreen, dual microphones, `WiFi6` + `BLE5.4`, and more. No complex hardware adaptation required, ready to use out of the box. 3. **Various hardware form factors**: Versions available with enclosures and different accessory configurations, as well as a `core board`. 4. **Offline AI large model support**: In addition to `convolutional models`, supports `Transformer models`, with plug and play `LLM / VLM / ASR / TTS`. 5. **Comprehensive and easy to use software ecosystem**: Provides well polished [MaixPy](https://wiki.sipeed.com/maixpy) (`Python`) + [MaixCDK](https://wiki.sipeed.com/maixcdk) (`C++`) SDKs, extensive documentation, professional IDE, and cloud platform support. ### Based on `MaixCAM2`, you can create: * **DIY Smart Camera**: Equipped with `4K` large format `1/1.8\"` sensor, supporting `JPEG / RAW / H.264 / H.265` encoding, easy to use software, and `NPU` accelerated `AI` features, making DIY smart cameras simple. * **Robots**: Dual mics + HD camera + HD touchscreen + AI acceleration + rich peripherals. Supports `convolutional models` and `Transformer models` with plug and play `YOLO / LLM / VLM / ASR / TTS`. Suitable for everything from toys to professional intelligent robots. * **Production Line Quality Inspection Assistant**: Traditional algorithms (OpenMV / OpenCV) plus hardware accelerated AI recognition easily meet the demands of high precision, real time, and low cost production line applications. * **Competition Weapon**: A strong tool for competitions, offering high performance, compact size, and easy to use Python (MaixPy) and C++ (MaixCDK) SDKs. Enables lightning fast development of competitive projects. Many students have already won top awards using MaixCAM. * **Educational Aid**: For university research, teaching, STEM education, spreading cutting edge knowledge, and inspiring future technologies. * **And more**: Waiting to be discovered by you! ### Feature Showcase **For more feature introductions, please refer to:** <a target \"_blank\" class \"btn_red\" href \"https://wiki.sipeed.com/maixpy/\">MaixPy 主页</a> ## MaixCAM2 Hardware Specifications Bold items are upgrades compared to MaixCAM / MaixCAM Pro (first generation). Component Description CPU (Big Cores) **1.2GHz A53 x2, runs Linux (Ubuntu)** CPU (Small Core) RISC V 32bit E907, runs RTT NPU **12.8Tops@INT4 / 3.2TOPS@INT8**, supports convolution and **Transformer models** such as YOLO/**LLM/VLM**, **YOLO11n 640x640 reaches up to 113FPS** Memory **1GB / 4GB LPDDR4** options Storage **Onboard 32GB eMMC**, onboard TF card slot Camera Supports up to **8MP (4K)@30fps**, 4 lane MIPI CSI input, 22 pin interface, supports split dual CSI Display 2.4 inch HD IPS capacitive touchscreen, resolution 640x480 (4 lane MIPI DSI output, standard 31 pin interface, 6 pin capacitive touch), supports up to 1080p\\@60fps output Audio Output Onboard PA amplifier + **1W speaker** Audio Input Onboard **analog silicon mics x2**, direct audio capture Networking Onboard WiFi6 + BLE5.4 module, **6 pin FPC Ethernet interface (with external FPC to RJ45 module)** USB Type C USB2.0, supports both Device and Host modes, supports USB cameras IO Interface 2.54mm PMOD interface, provides **20 IOs** + Vsys/3.3V/GND + 1.25mm 6 pin expansion interface, **core board offers more IOs** Buttons 1 x Power switch + 1 x Func (function) button LEDs Power indicator + User LED + **Illumination LED** Codec H.264 / H.265 / MJPEG hardware codec, supports **4K\\@30fps encoding, 1080p\\@60fps decoding** Peripherals I2C / SPI / UART / ADC / PWM / WDT and other common peripherals Power **Supports Li ion battery charge/discharge management, with battery equipped version available** Enclosure **Protective case with 1/4 inch standard tripod mount** IMU **Onboard six axis IMU (3 axis accelerometer + 3 axis gyroscope)** RTC **Onboard BM8563EMA RTC chip + rechargeable coin battery, maintains time during power off** Core Board **Gold finger core board containing only chip core circuit + DDR**, for easy custom hardware design <! Dimensions **67x51x12mm (non battery enclosure version)** > ## MaixCAM2 Software Ecosystem We don’t just provide hardware — MaixCAM2 comes with a complete software ecosystem, including: Name Description Image/Video **[MaixPy](https://wiki.sipeed.com/maixpy/)** Python SDK with rich and easy to use APIs, optimized for MaixCAM, supports hardware acceleration, and comes with comprehensive documentation and tutorials 1. [MaixPy Homepage](https://wiki.sipeed.com/maixpy/)<br>2. [MaixPy Source Code](https://github.com/sipeed/MaixPy) [MaixVision](https://wiki.sipeed.com/maixvision) AI vision IDE for coding, code execution, real time image preview, even graphical programming. Greatly lowers the difficulty and barriers to setup. ![MaixVision](../../assets/maixcam/maixvision.jpg) <video playsinline controls muted preload style \"width:100%\" src \"https://wiki.sipeed.com/maixpy/static/video/maixvision.mp4\"></video> [MaixHub](https://maixhub.com) Online AI model training platform. No AI knowledge or expensive hardware required — train models with one click and deploy them to MaixCAM instantly ![MaixVision](../../assets/maixcam/maixhub.jpg) [MaixCDK](https://github.com/sipeed/MaixCDK) C++ SDK equivalent of MaixPy. Developers familiar with C/C++ can get started immediately See [MaixCDK Homepage](https://github.com/sipeed/MaixCDK) [App Store](https://maixhub.com/app) Various apps and tools available for download without development. Developers can also upload and share apps See [MaixHub App Store](https://maixhub.com/app) [Sharing Hub](https://maixhub.com/share) A community for developers to share experiences and projects See [MaixHub Sharing Hub](https://maixhub.com/share) ## Resources ### MaixCAM Exclusive Resources (Provided by Sipeed) * [MaixCAM Pro Official Docs](https://wiki.sipeed.com/maixcam2) (this documentation) * [MaixPy Official Docs](https://wiki.sipeed.com/maixpy/) (Python SDK) ([MaixPy Source Code](https://github.com/sipeed/MaixPy)) * [MaixCDK](https://github.com/sipeed/MaixCDK) (C/C++ SDK) ([MaixCDK Source Code](https://github.com/sipeed/MaixCDK)) * [System Flashing Guide](./maixcam2_os.html) * [Camera and Lens](./maixcam2_camera_lens.html) * [Hardware Resource Downloads](https://dl.sipeed.com/shareURL/MaixCAM/MaixCAM2) * Enclosure and Mounts: Open source 3D model files for enclosures, mounts, etc. are available on [makerworld.com](https://makerworld.com/) (recommended) or [makerworld.com.cn](https://makerworld.com.cn). Search for `MaixCAM` / `MaixCAM2`. * Pinout Diagram: ![maixcam2\\_pins](../../assets/maixcam/maixcam2_pins.jpg) ### Chip Resources MaixCAM2 is based on the AX630C chip from Axera, so their resources can also be referenced. * [Chip Vendor Resource Downloads](https://dl.sipeed.com/shareURL/MaixCAM/MaixCAM2) * [Chip Vendor AI Models](https://huggingface.co/AXERA TECH) * [Chip Vendor GitHub](https://github.com/AXERA TECH) ### Accessories * [TOF Ranging and Thermal Imaging Module](./tof_thermal.html) * [Microscope Kit](./microscope.html) ### Community * [MaixHub App Store](https://maixhub.com/app) * [MaixHub Sharing Hub](https://maixhub.com/share) * Search `MaixCAM` or `MaixPy` on [GitHub](https://github.com) * Search `MaixCAM` or `MaixPy` on [Bilibili](https://bilibili.com) * Search `MaixCAM` on [makerworld.com](https://makerworld.com/) (recommended) or [makerworld.com.cn](https://makerworld.com.cn) * QQ Group: 862340358 * Telegram: [MaixPy](https://t.me/maixpy) ## Purchase * [Sipeed Taobao](https://sipeed.taobao.com/) * [AliExpress](https://www.aliexpress.com/store/911876460)"},"/hardware/en/maixcam/os.html":{"title":"MaixCAM System Flashing","content":" title: MaixCAM System Flashing ## Download the System Find the **latest** system image file on the [MaixPy Releases page](https://github.com/sipeed/MaixPy/releases), for example, `maixcam 2024 10 22 maixpy v4.7.6.img.xz`. Make sure to download the correct version based on your device model: * For `MaixCAM`, download `maixcam xxxx.xz`. * For `MaixCAM Pro`, download `maixcam pro xxxxx.xz`. Backup download link: [Sourceforge](https://sourceforge.net/projects/maixpy/files/) ## Prepare Flashing Tools Download [Etcher](https://etcher.balena.io/) (highly recommended), install and open it. For Windows, you can also use [Win32DiskImager](https://sourceforge.net/projects/win32diskimager/) or [Rufus](https://rufus.ie/) if Etcher doesn't work. ## Launch the Flashing Tool Normally, double click the application icon to launch it. If you encounter the error `Something went wrong. If the source image was previously compressed, please check if it's corrupted. Error spawning the child process`, it might be due to insufficient permissions. Right click the application icon and run it as an administrator. ## Flash the TF Card There are two ways to flash the TF card: * If the TF card already has a system installed (for example, if you purchased the official TF card package or previously flashed the card yourself), using the USB update method is quicker (and for MaixCAM, it avoids opening the case). * If you're using your own card and it has never had a system flashed, you must first use a card reader to flash it at least once. After that, you can use the USB to update the system. ### Method 1: Flash TF Card with a Card Reader 1. Remove the TF card, insert it into the card reader, and connect it to your computer. 2. Open Etcher, select the image file, choose the TF card, and click `Flash`. 3. After flashing, if the computer prompts with `You need to format the disk in drive G: before you can use it`, **do not** format the disk! This would erase the newly flashed system. Close the window, right click the disk, and select \"Eject\" to safely remove the TF card. 4. Insert the TF card into MaixCAM, power it on, and wait for the system to boot. The first boot may take a little longer, so be patient. ### Method 2: USB Update for TF Card Image **Note: USB can only update the system, not be used for the initial flash.** Ensure the TF card has already been flashed using a card reader and the **system is running properly** before using this method. * For **MaixCAM Pro**: 1. Power off MaixCAM Pro (for battery versions, long press the power button to shut down), keep the TF card inserted. 2. Press and hold the `user` button without releasing, then power on (connect the USB cable to the computer or press the power button on battery versions). Wait for the USB device to appear on the computer, then release the `user` button. 3. Open `Etcher`, select the image file, select the USB device, and click `Flash`. 4. After flashing, if the computer prompts with `You need to format the disk in drive G: before you can use it`, **do not** format the disk! Close the window, right click the disk, and select \"Eject\" to safely remove the TF card. 5. Restart the device and wait for the system to boot. The first boot may take a bit longer, so wait about 1 minute. During booting, do not disconnect the power to avoid corrupting any files (if this happens, you can reflash the image). * For **MaixCAM**: 1. Power off MaixCAM and keep the TF card inserted. 2. Press and hold the `user` button, connect the USB cable to the computer (or first connect the USB cable, then press and hold the `user` button, quickly press the `reset` button and immediately release `reset`). Wait for the USB device to appear on the computer, then release the `user` button. 3. Open `Etcher`, select the image file, select the USB device, and click `Flash`. 4. After flashing, if the computer prompts with `You need to format the disk in drive G: before you can use it`, **do not** format the disk! Close the window, right click the disk, and select \"Eject\" to safely remove the TF card. 5. Press the `reset` button or power the device back on and wait for the system to boot. The first boot may take a bit longer, so wait about 1 minute. During booting, do not disconnect the power to avoid corrupting any files (if this happens, reflash the image). > If you're unable to enter USB upgrade mode, the system files might be corrupted. Use a card reader to reflash the TF card. ## Important System Usage Notes ### Force Shutdown Other than using the `reset` button in special cases mentioned above, **do not press the `reset` button** during normal use, as this button forces a power cut. If the system is writing to the TF card at the time, it may cause system and data corruption. Similarly, forcefully unplugging the power or pressing `reset` is equally harmful. Always try to **shut down the system via software** before disconnecting the power. For normal use, you can perform a **software shutdown or restart** using the following methods: * Method 1: From the interface, go to `Settings` > `Power` for software shutdown or restart. * Method 2: Use the terminal command `poweroff` or `reboot` for software shutdown or restart. * Method 3: Other software methods, such as using `Python` with the command `import os;os.system(\"poweroff\")` for shutdown or restart. * Method 4: For MaixCAM Pro, long pressing the power button for 4 seconds will trigger a software shutdown via the `maix` module. Continuing to hold for 8 seconds will trigger a forced power off shutdown (firmware version > 4.8.0 supports this). ### File Writing and Data Loss The system uses a caching mechanism, so when your code writes to a file, it might be writing to memory first. The system will automatically write the data to disk after some time. If the power is cut during this time, the data may not be saved to the disk (TF card), and the next time you boot, the data may be missing. Solutions: * Avoid forcefully cutting power or pressing the `reset` button. Use software shutdown as explained above. * For important data, manually force the system to write the cached data to the disk. In `Python`, you can use `os.sync()` to tell the system to immediately write all cached files to disk. For other methods or languages, search for keywords like \"Linux flush data to disk\"."},"/hardware/en/maixcam/faq.html":{"title":"MaixCAM FAQ (Frequently Asked Questions)","content":" title: MaixCAM FAQ (Frequently Asked Questions) **If you can't find your problem below, you can also refer to [MaixPy FAQ](https://wiki.sipeed.com/maixpy/doc/zh/faq.html).** ## What's the difference between MaixCAM and LicheeRV Nano? MaixCAM can use the resources of LicheeRV Nano and SG2002, but **LicheeRV Nano and other SG2002 chip products cannot use software like MaixPy, MaixCDK, MaixVision, etc.** Please do not make a wrong purchase to avoid wasting time and money. If you want to quickly start developing applications, please choose MaixCAM. If you are a seasoned Linux developer and only want to develop based on the original SG2002 resources, you can choose LicheeRV Nano. ## Why is there no purchase link in the official AliExpress store? AliExpress may close the purchase link when it encounters a shortage of stock. The purchase link will be automatically opened when the stock is available. You can consult the official customer service. ## Power on Black Screen, No Display on the Screen * Check if the TF (micro SD) card is installed. * Check if the latest system image is burned onto the TF card (strongly recommended to update to the latest system image); see documentation for specific burning methods. * Check if the TF card is fully inserted into the TF card slot, ensuring there are no gaps and it is not loose. * Check if the screen and camera ribbon cables are correctly and securely connected; there should be no looseness. * Check if the power LED (red light) and the system operation status LED (blue light) on the board are lit. If the red light is off, consider hardware issues such as no power supply, insufficient power supply, or a damaged board. * Connect the board to a computer using a USB to TTL cable, open the serial port assistant on the computer, restart the board, and check the boot logs for any errors. > If there is no log output, try swapping the TX and RX wires. For MaixCAM, the orientation of the Type C to serial port adapter may vary, and TX RX might be reversed, meaning it does not support reversible plugging. The `UART0_TX` pin of the chip has a characteristic where the system cannot boot if TX is pulled low. Therefore, check whether any circuit connected to `UART0_TX` is pulling it low during startup. Simply releasing the pin and restarting the system should resolve the issue. Another issue is that all pins of the chip used in the MaixCAM must not have any current injected into them before power on. Otherwise, the circuit will malfunction and fail to start. For example, if the MaixCAM is connected to an external MCU via serial communication, and the MCU’s TX/RX pins are at a high level, it will inject current into the MaixCAM, preventing it from starting. Similarly, if the MCU's TX pin outputs a low level, making the RX pin of the MaixCAM low, the MaixCAM will also fail to start. **Solutions:** The simplest solution is to power on the MaixCAM first, then power on the MCU, or power them on simultaneously. If the MCU powers on first, you can connect a diode to the MCU's TX/RX pins to prevent current from flowing into the MaixCAM. Additionally, ensure that the MCU's TX pin is set to a floating input state. ## Stuck at Boot Screen, Unable to Enter System The issue could be caused by a problem with the application environment or hardware. You can follow the steps below to troubleshoot: * If there is important data on the card, first try to back up the data: * Try using MaixVision to scan and connect to the device. Use the file management function to back up important data. * If MaixVision cannot connect, use a card reader to back up the data. Since Windows might not directly display system contents, you can use DiskGenius to read the data. * Reflash the latest system. If the system boots successfully, it means the system files were corrupted, and it's not a hardware issue. * If reflashing the **latest** system image still doesn't resolve the issue, it might be a hardware problem. You can: * First check if the camera connection is normal. * Then inspect the PCB for any obvious issues, such as loose components, soldering problems, burns, or short circuits. * You can also try using a USB to TTL adapter to connect the computer to the board's serial port (A16/A17 pins). Open a serial port assistant on the computer, restart the board, and check the boot log for any errors. > If there's no log output, try swapping the TX and RX wires. For MaixCAM, the Type C to serial board might have reversed TX and RX, meaning it doesn't support both orientations for plugging in."},"/hardware/en/maixcam/assemble.html":{"title":"MaixCAM / MaixCAM-Pro Case","content":" title: MaixCAM / MaixCAM Pro Case ## Overview When you receive your MaixCAM, there are several accessories to **pay attention to**: * **Lens Cap**: Protects the lens during transportation. Please remove it before use; otherwise, the screen will be black. * **Screen Protector**: There is a plastic film on the screen to prevent scratches during transport. Please peel it off upon receipt, as it will significantly affect the viewing experience if left on. * **Manual Lens Focus**: The lens supports manual focus. Gently rotate the lens to adjust the focus. If the image is blurry, it may be due to incorrect focus. * **Case**: A 3D printed case designed for easy handling and installation, while also adding aesthetic value. ## Open Source Model Files * [MaixCAM Case Model](https://makerworld.com.cn/zh/models/467141) (Recommended to use resin with a temperature resistance of 70°C for UV curing printing) * [MaixCAM Stand Model](https://makerworld.com.cn/zh/models/467152) * [MaixCAM Pro Case Model](https://makerworld.com.cn/zh/models/575886) * 6 x M2*5 self tapping screws * 1 x H1.5 Allen wrench ## MaixCAM ### MaixCAM Disassembly It is strongly recommended to choose the version with the TF card pre installed, as it is assembled at the factory and can be used directly without further disassembly. The factory version comes pre assembled. However, if you need to replace the TF card or solder pin headers, you can attempt to disassemble it. Some points to note: * Ensure the device is powered off before disassembly. * There is a thermal pad between the CPU and the case. Be careful not to damage it during disassembly. * Be cautious not to damage the camera, touch, or display ribbon cables (which can be loose). Do not bend the cables. * Pay attention to the direction of the cables; do not insert them incorrectly. ### Replacing the TF Card in MaixCAM 1. Pry open the clips on both sides of the device to separate the front and back covers. ![](../../assets/maixcam/assemble 1.jpg) 2. Lift the shell holding the display to access the TF card. ![](../../assets/maixcam/assemble 2.jpg) 3. Before reinstalling the display, ensure the display ribbon cable is properly connected. If it is misaligned, reconnect it correctly. ![](../../assets/maixcam/assemble 3.jpg) ## MaixCAM Pro For MaixCAM Pro, disassembly is not recommended unless necessary. * First, you will need a hex screwdriver. * Unscrew the screws at the back to remove the rear panel. * To remove the PCB, carefully lift the display by prying the gaps (be aware of the ribbon cables behind the display to avoid damaging them). * You will see screws that hold the PCB in place. Once unscrewed, you can remove the PCB. If it is the battery version, the battery is located behind the display. **Note**: Removing the display will cause the adhesive between the display and the case to lose its stickiness. You will need to reapply adhesive to secure it properly."},"/hardware/en/maixcam/maixcdk.html":{"title":"Using MaixCDK on MaixCAM","content":" title: Using MaixCDK on MaixCAM ## Introduction MaixCDK is a C++ SDK designed for Maix series products, which makes it convenient for developers to quickly develop AI applications. It has a simple and easy to use API, supports various AI related functions, and multiple peripheral operations. For more details, please see [MaixCDK](https://wiki.sipeed.com/maixcdk/). In addition, its Python version of the SDK is [MaixPy](https://wiki.sipeed.com/maixpy/), which is a simpler and easier to use Python SDK."},"/hardware/en/maixcam/maixcam2_os.html":{"title":"MaixCAM2 System Flashing","content":" title: MaixCAM2 System Flashing ## Downloading the System For MaixCAM2, there are two types of systems and flashing methods: * **Method 1**: The original chip manufacturer’s flashing format (`.axp`). Requires [AXDL](https://dl.sipeed.com/shareURL/MaixCAM/MaixCAM2/Software/Tools) to flash. * Pros: Works regardless of whether the EMMC has a boot partition or system. * Cons: Only supported on Windows, flashing speed is slow. * **Method 2**: USB flashing (`.img.xz` format), which contains a complete system. You can flash it with general tools such as `etcher / rufus / win32diskimager / imageUSB`. * Pros: Simple, OS/software independent, faster (TF > USB2.0 > AXDL). * Cons: Only works if the EMMC already has a **boot partition**. If the boot partition is missing or corrupted, you must first flash a `*.axp` system using Method 1 before Method 2 can be used. * **Method 3**: TF card flashing (`.img.xz` format), which contains a complete system. * Pros: Simple, OS/software independent, no extra 3rd parth PC software needed, faster (TF > USB2.0 > AXDL). * Cons: Need a TF card. Only works if the EMMC already has a **boot partition**. If the boot partition is missing or corrupted, you must first flash a `*.axp` system using Method 1 before Method 2 can be used. **Recommended**: Normally, devices are shipped with a boot partition already flashed, so Method 2 is sufficient. Only use Method 1 if the boot partition is damaged. Follow the [MaixPy system flashing guide](https://wiki.sipeed.com/maixpy/doc/zh/basic/upgrade.html) to download the appropriate system image for your model, and remember to back up your data. ## System Boot Process (Overview) To help you understand, here’s a simplified version of the boot process: 1. On power up, the chip’s internal bootrom checks if the `boot/Func` pin is pulled low (the MaixCAM2 `Func` button pressed). If yes, it enters `AXDL` USB download mode and waits for AXDL software to communicate via USB for at least **5 seconds**. If not pressed, it proceeds to normal boot. 2. It then loads the **boot partition** firmware from internal EMMC storage (where the system and data are stored). This firmware also checks if `boot/Func` is pressed—if yes, it enters USB/TF upgrade mode; if not, it continues loading the system from EMMC. ## Method 1: Flashing `.axp` System via USB to EMMC As mentioned earlier, there are three flashing methods. Here we’ll cover the first in detail. ### Launch AXDL Software Download [AXDL](https://dl.sipeed.com/shareURL/MaixCAM/MaixCAM2/Software/Tools).(Only have Windows version) Open the AXDL software interface. ### Preparing the System You should already have downloaded the `.axp` format system. Usually, two types are provided, e.g.: * `maixcam2 2025 09 01 maixpy v4.11.9.axp`: A **full** `.axp` system (\\~8GB). * `boot_parts_maixcam2 2025 09 01 maixpy v4.11.9.axp`: A **boot partition only** file (<50MB). This means you can: * Use AXDL once to flash the complete system, then boot and run directly. * Or, if you prefer USB/TF flashing but your boot partition is damaged (“bricked”), quickly restore just the **boot partition** with `boot_parts_xxx.axp`, then use Method 2 to flash the full system. ### Load and Flash the System File * Click the “Load System File” button and select your `.axp` system file. * After loading, click “Start” to begin USB detection. * Hold the `boot/Func` button, connect the board to the PC via USB, and AXDL will start flashing. Release the button and wait. * Alternatively, connect USB first, then hold `boot/Func` and power on. Once detected by AXDL, release the button. * Do not touch the USB cable or board during flashing. * After completion, the board reboots into the system. The **first boot** may take longer—wait until it reaches the main interface before powering off. ## Method 2 (Recommended): Flashing `.img` System via USB to EMMC This method is faster and easier than flashing `.axp` files. It works on any OS and achieves higher speeds (\\~40MiB/s). ### Choosing the Right Flashing Software We’ll use [Etcher](https://etcher.balena.io/) as an example. Other software works similarly. On Windows, you can also use [Win32DiskImager](https://sourceforge.net/projects/win32diskimager/), [Rufus](https://rufus.ie/), or [imageUSB](https://www.osforensics.com/tools/write usb images.html). If Etcher fails, try one of these alternatives. If you encounter errors like `Error spawning the child process`, it’s likely a permissions issue. Run as administrator. If problems persist, or the system won’t boot after flashing, try `rufus` or `win32diskimager`. ### Load and Flash the System File * Load the system image you downloaded (e.g. `maixcam2 2025 09 01 maixpy v4.11.9.img.xz`). Most of software will automatically decompress `xz` to `img`, if not you must do it manually first. `Etcher`may occurs `Missing partition table` `not a bootable image ...` warning, it's normall for `MaixCAM2`, just click `Continue` to continue. * Enter USB/TF upgrade mode: * Method 1: Plug one end of USB into the PC, then within `1 second` of connecting to the board, press and hold `boot/Func`. Release after `3 seconds`. * Method 2: Power off, connect USB, power on, then within `1 second` press and hold `boot/Func`. Release after `3 seconds`. > Don’t hold the button before power on—this enters AXDL mode, which takes at least 10 seconds. Too slow. * After a few seconds, you’ll see a virtual U disk appear. The blue LED flashes in a `off on on` pattern. * Click the software’s “Flash” button to begin. The blue LED flashes `0.5s on / 0.5s off`. * If Windows prompts to format the new drive—**do not format it**! Just close the window. * When done, the blue LED becomes solid on. Software may still be verifying data—wait for it. * Safely eject the drive. * Reboot to enter the new system. Again, wait for the first boot to reach the main interface before powering off. ## Method 3: Flashing `.img` System via TF Card to EMMC This is similar to USB flashing but often faster (depending on TF card speed, e.g. \\~90MiB/s). ### Preparing a TF Upgrade Card * Insert the TF card into your PC using a card reader. * Format the TF card as `exFAT` or `ext4` (not `FAT32`). Make sure to partition the TF card. * Extract the `xxx.img.xz` file to `xxx.img` and be sure to copy it to the first partition of the TF card. If other, img files were previously copied, delete the old image files. * Safely eject the card to ensure data is fully written. * Power off the MaixCAM2, then insert the TF card into the MaixCAM2. * Power on the MaixCAM2, and within `1 second`, press and hold the `boot/Func` button. * The board will auto detect and flash the system. Blue LED flashes `0.5s on / 0.5s off`. > If it doesn’t, check previous steps. * When complete, the LED stays solid on. Fast flashing (`0.3s on / 0.3s off`) indicates failure. Do not power off—use Method 2 (USB) to recover. If powered off and still failing, use AXDL to restore the boot partition. * Reboot to enter the new system. As before, wait for the first boot to finish before shutting down. ## Power Supply Notes ### Shutdown and Power Off Aside from the above flashing situations, do **not** power off by cutting power (including using the power switch, which is also a hard cut). If the system is writing to the TF card, forced power off can corrupt data. The same risk applies when pressing `reset`. Always **shutdown via software first**. Ways to safely shutdown/reboot: * Method 1: From the main interface, long press `Func` to select shutdown, or go to `Settings > Power`. * Method 2: In terminal, run `poweroff` or `reboot`. * Method 3: From code, e.g. in Python: `import os; os.system(\"poweroff\")`. ### File Writing and Data Loss The system uses caching. When writing files, data may remain in memory before being flushed to disk. If power is cut in this period, data is lost. Solutions: * Avoid forced shutdowns/resets; use software shutdown. * To ensure data is written, manually flush caches. For example, in Python: ```python import os os.sync() ``` This tells the system to immediately write cached data to disk. Other languages/contexts have equivalent APIs (search for “Linux flush cache to disk”)."},"/hardware/en/maixcam/cameras.html":{"title":"Sensor Introduction","content":" title: Sensor Introduction ## Camera Module Parameter Comparison **Sensor Model** GC4653 OS04A10 SC035HGS **Resolution** 2560x1440 2688x1520 640x480 **Size** 1/3\" **1/1.79\"** 1/6\" **Pixel Size** 2.0um 2.9um 3.744um **Shutter Type** Rolling Shutter Rolling Shutter **Global Shutter** **Frame Rate** 30fps@2K, 60fps@720P 30fps@2K 180fps@VGA **Max Exposure** 0.5s 45s TBD **Sensitivity** 2.4V/Lux.s 32000e/Lux.s 6.5V/Lux.s **Dynamic Range** 81dB 120dB 60dB * [Sensor Manual Download](https://dl.sipeed.com/shareURL/MaixCAM/Sensors) ## Sensor Selection Recommendations 1. **GC4653**: Suitable for general applications with good image quality. It achieves a high frame rate of 60fps at 720P resolution. 2. **OS04A10**: Ideal for low light scenarios (e.g., astrophotography, dark field imaging, uniform light imaging). It has better noise control than GC4653 and supports up to 1 minute long exposure. The sensor itself supports extremely high frame rates (2K@90fps, 720P@180fps, 360P@360fps, 180P@720fps), although these are not yet tuned for MaixCAM. 3. **SC035HGS**: A global shutter camera that avoids the \"jelly\" distortion caused by rolling shutters. Suitable for capturing fast moving objects, as demonstrated in a video capturing QR codes on a fast spinning record. ## Sensor Real World Performance Comparison Test Item GC4653 OS04A10 Color Chart ![gc4653_color](../../assets/maixcam/GC4653_color_1.jpg) ![OS04A10_color](../../assets/maixcam/OS04A10_color_1.jpg) Distant Details ![gc4653_far](../../assets/maixcam/GC4653_far_1.jpg) ![OS04A10_far](../../assets/maixcam/OS04A10_far_1.jpg) Low Light Performance ![gc4653_dark](../../assets/maixcam/GC4653_dark_1.jpg) ![OS04A10_dark](../../assets/maixcam/OS04A10_dark_1.jpg) Comparison in indoor, hallway, and stairwell completely dark environments: <video playsinline controls muted preload style \"width:100%\" src \"../../assets/maixcam/comapre_gc4653_os04a10.mp4\"></video> ### **Star Time Lapse Captured by OS04A10** Shot using a fisheye lens: <video playsinline controls muted preload style \"width:100%\" src \"../../assets/maixcam/os04a10_stars.mp4\"></video> ### **M42 Nebula Captured by OS04A10** Shot with a 400mm telescope, 15s exposure, multiple frames stacked: ![OS04A10_m42](../../assets/maixcam/os04a10_m42.jpg) ### **Diatom Micrograph Captured by OS04A10** Shot using a dark field microscope, multiple frames stitched: ![OS04A10_guizao](../../assets/maixcam/os04a10_guizao.jpg) Close up single frame detail: ![OS04A10_guizao1](../../assets/maixcam/os04a10_guizao1.jpg)"},"/hardware/en/kvm/NanoKVM_Pro/lcd.html":{"title":"Customize Auxiliary Screen","content":" title: Customize Auxiliary Screen keywords: NanoKVM, Auxiliary Screen update: date: 2025 10 10 version: v0.1 author: zepan content: initial docs date: 2025 10 18 version: v0.2 author: bugu content: improve docs ## Introduction The NanoKVM Pro Desk is equipped with a 1.47 inch 320x172 mini display. In addition to serving as a basic configuration interface, it can also display user customized content in various ways, functioning as a secondary screen. ## HDMI Secondary Screen When NanoKVM Pro is operating, it virtually emulates a monitor, allowing it to capture HDMI images and display them on its own screen, enabling HDMI secondary screen functionality. In the UI, select the HDMI output video source to display the captured video image on the small screen. When used as a desktop accessory, this feature can serve as a desktop mini secondary screen for performance monitoring, video thumbnail player, and other functions. ![](./../../../assets/NanoKVM/pro/lcd/hdmi.jpg) <div style \"display: grid; grid template columns: 1fr 1fr; gap: 10px;\"> <video playsinline controls muted preload src \"../../../assets/NanoKVM/pro/lcd/cat.mp4\"></video> <video playsinline controls muted preload src \"../../../assets/NanoKVM/pro/lcd/video.mp4\"></video> </div> ## USB Secondary Screen Currently, the USB secondary screen feature only supports Windows systems. 1. Download and extract the USB secondary screen driver: https://github.com/sipeed/NanoKVM Pro/releases/download/v1.0.5/nanokvmpro_usb_graphic_win.zip 2. On the Desk: From the screen, tap `Settings` → `USB` to enter the USB configuration page, then enable `Panel`. 3. On the controlled machine: Open `Device Manager` → `Other devices` Find `NanoKVMPro` → Right click `Properties` → `Driver` → `Update Driver` Select `Browse my computer for drivers` → `Let me pick from a list of available drivers on my computer` Double click `Show all devices` Find `USB Composite Device` under `Standard USB Host Controller` / `标准 USB 主机控制器` / `Standard system devices` / `标准系统设备` → Double click to install > **Note**: Driver locations may vary across different Windows versions. Please search patiently. 4. After completion, a new `loop input to output` device will appear under `Other devices` in `Device Manager`. 5. Right click the device → `Update Driver` → `Browse my computer for drivers` → `Browse` → Select the USB secondary screen driver folder → `Next` → Follow the prompts to complete installation. > If you encounter errors like \"Windows found drivers for your device but encountered an error while attempting to install them\" during driver installation, you can use the following methods to resolve this: > > **Method 1: Temporarily Disable Driver Signature Enforcement** > 1. Hold down the `Shift` key, click `Start Menu` → `Restart` > 2. After entering Advanced Startup Options, select `Troubleshoot` → `Advanced options` → `Startup Settings` → `Restart` > 3. After restart, press `F7` or `7` to select `Disable driver signature enforcement` > 4. Reinstall the driver after the system starts > 5. Note that this method may not work on newer Windows 11 versions > > **Method 2: Enable Test Mode (Requires Secure Boot to be Disabled)** > 1. Enter the BIOS setup and disable Secure Boot following your motherboard's instructions > 2. Open `Command Prompt` or `PowerShell` as Administrator > 3. Execute the command: `bcdedit /set testsigning on` > 4. Restart your computer, then you can install unsigned drivers > 5. To disable test mode, execute: `bcdedit /set testsigning off` and restart > > **Note**: In test mode, a \"Test Mode\" watermark will appear in the bottom right corner of the desktop. This is normal behavior. 6. After driver installation is complete, a new NanoKVM graphics device will appear in the `Display adapters` section. 7. On the Desk, navigate to the secondary screen page from the screen and select USB to use the Desk as a USB secondary screen. 8. To disable, refer to step 2 and turn off `Panel`. 9. When re enabling, some systems may require reinstalling the USB driver. ## Custom Display > Note: This feature requires the NanoKVM Desk application to be updated to version `1.1.5` or higher. NanoKVM Desk introduces a user defined APP function in version `1.1.5`. By long pressing the screen/knob and switching to the fourth page, you can view all APPs. Three demo apps are pre installed by default: `coin`, `conway`, and `hello`. [hello.py](../../../assets/NanoKVM/pro/lcd/hello.py) [conway.py](../../../assets/NanoKVM/pro/lcd/conway.py) [coin.py](../../../assets/NanoKVM/pro/lcd/coin.py) <div style \"display: grid; grid template columns: 1fr 1fr; gap: 10px;\"> <video playsinline controls muted preload src \"../../../assets/NanoKVM/pro/lcd/doom.mp4\"></video> <video playsinline controls muted preload src \"../../../assets/NanoKVM/pro/lcd/conway.mp4\"></video> </div> <div style \"display: grid; grid template columns: 1fr 1fr; gap: 10px;\"> <video playsinline controls muted preload src \"../../../assets/NanoKVM/pro/lcd/pao.mp4\"></video> <video playsinline controls muted preload src \"../../../assets/NanoKVM/pro/lcd/coin.mp4\"></video> </div> ### How to Build Your Own Application NanoKVM Desk will search for all folders in the system's `/userapp` directory and use the folder names as APP names. It is recommended to keep folder names under 8 characters. In the `User APP` interface, when you click on a user defined application, the system will attempt to launch a Python application named `main.py` inside the corresponding folder. At this point, the small screen uses the standard FB driver, allowing users to utilize `/dev/fb0` to implement custom screen display operations. Clicking the screen or pressing the knob will exit the application."},"/hardware/en/kvm/NanoKVM_Pro/introduction.html":{"title":"Introduction","content":" title: Introduction keywords: NanoKVM, Remote desktop, Lichee, PiKVM, ARM, tool, PCIe update: date: 2025 8 25 version: v0.1 author: BuGu content: Release docs ## Introduction NanoKVM Pro is the continuation of NanoKVM, inheriting the extreme compactness and powerful expandability of the NanoKVM series as an IP KVM product. It has made a significant leap in performance, making it more suitable for remote working scenarios. To meet different user needs, NanoKVM Pro offers two forms: NanoKVM Desk and NanoKVM ATX: ![](./../../../assets/NanoKVM/pro/introduce/combine.png) NanoKVM Desk is the desktop version of NanoKVM Pro, featuring an anodized matte metal shell. The front panel has a 1.47 inch touchscreen that displays core KVM information and allows for easy hardware function settings or can be used as a mini secondary screen, providing a more tactile user experience with the left side infinite knob. NanoKVM ATX is the internal version of NanoKVM Pro, equipped with half height/full height brackets for installation inside a case. It allows for easier installation for host users with built in USB cables and power control interfaces. Remote control can be achieved via external HDMI, network, and USB connections. NanoKVM Pro uses the AX630 as its main control core, featuring an ARM 1.2G dual core A53 CPU. The external 1GB LPDDR4 memory provides strong computing support for remote desktop connections. It has built in HDMI loop out and capture chips, offering up to 4K60FPS HDMI loop out and 4K45FPS video capture. Thanks to AX630's efficient and powerful image processing architecture, NanoKVM Pro can transmit high resolution images with very low latency, with typical delays as low as 60ms at 2K resolution. The IP KVM series products are hardware add ons for remote desktops, capturing images via HDMI, synchronizing images and keyboard/mouse operations in real time over the network, and simulating keyboard/mouse control of the computer. Since this entire process does not require host software and is completely implemented by external hardware, NanoKVM can achieve BIOS level control of the host, making it widely applicable in scenarios such as remote power on/off, multi system switching, BIOS configuration, and remote installation. Due to its upgraded powerful performance, NanoKVM Pro not only provides reliable support for temporary maintenance but also excels in the remote working field due to its low latency and high resolution characteristics. We will continue to upgrade the software of NanoKVM Pro, offering more convenient automation/MCP features and broader compatibility. To meet different user needs, NanoKVM Pro offers optional features such as WiFi, PoE, and screen edge synchronized LED strips. Please refer to the purchase page for related configurations and pricing. ## Specifications Product NanoKVM Pro NanoKVM GxxKVM JxxKVM Main Control AX630C SG2002 RV1126 RV1106 Core 2xA53@1.2G 1xC906@1.0G 4xA7@1.5G 1xA7@1.2G Memory 1G LPDDR4X 256M DDR3 1G DDR3 256M DDR3 Storage 32G eMMC 32G microSD 8G eMMC 16G eMMC System NanoKVM+PIKVM NanoKVM GxxKVM JxxKVM Resolution 4K@45fps, 2K@95fps[4] 1080P@60fps 4K@30fps, 2K@60fps 1080P@60fps HDMI Loop Out 4K Loop Out × × × Video Encoding MJPG/H264/H265[5] MJPG/H264 MJPG/H264 MJPG/H264 Audio Transmission √ × √ × UEFI/BIOS Support √ √ √ √ Simulated USB Keyboard/Mouse √ √ √ √ Simulated USB ISO √ √ √ √ IPMI √ √ √ × Wake on LAN (WOL) √ √ √ √ WebSSH √ √ √ √ Custom Scripts √ √ × × Serial Terminal 2 Channels 2 Channels None 1 Channel Storage Performance 32G eMMC 300MB/s 32G MicroSD 12MB/s 8G eMMC 120MB/s 8G eMMC 60MB/s Ethernet 1000M 100M 1000M 100M Internal Form Factor Optional ATX version Optional PCIe version × × WiFi Optional WiFi6 Optional WiFi6 × × MicroSD Expansion √ × × × ATX Power Control √ √ +15$ +10$ Display 1.47 inch 320x172 LCD<br>0.96 inch 128x64 OLED 0.96 inch 128x64 OLED None 1.66 inch 280x240 Additional Features Synchronized LED effects, Smart Assistant – – – Power Consumption 0.6A@5V 0.2A@5V 0.4A@5V 0.2A@5V Power Input USB C/PoE USB C/PoE/PCIe USB C USB C Dimensions 65x65x28mm 40x36x36mm 80x60x7.5mm 60x6x24 30mm ## NanoKVM PCIe Information + [NanoKVM Pro Image Download (To be updated)](https://github.com/sipeed/NanoKVM Pro/releases/latest) + [ATX Getting Started Guide](https://wiki.sipeed.com/hardware/en/kvm/NanoKVM_Pro/atx_start.html) + [Advanced Applications](https://wiki.sipeed.com/hardware/en/kvm/NanoKVM_Pro/extended.html) + [FAQ](https://wiki.sipeed.com/hardware/en/kvm/NanoKVM_Pro/faq.html) ## Purchase Links [Pre sale Page](https://sipeed.com/nanokvm/pro) [Official Taobao Purchase Link (To be updated)]() [AliExpress Purchase Link (To be updated)]() ## Product Feedback If you encounter any issues or have suggestions during use, please provide feedback through the following channels: + [Github Issues](https://github.com/sipeed/NanoKVM Pro/issues) + [MaixHub Forum](https://maixhub.com/discussion/nanokvm) + QQ Group: 703230713 > [1] In scenarios with only loop out, the capture function can be turned off to directly loop out 4K60 images; when loop out and capture are running simultaneously, it can achieve 4K30FPS. > [2] Latency may vary due to network bandwidth and nodes; the measured data comes from Sipeed Labs. > [3] The USB HID interface can be wired internally in the case or connected externally; choose one. > [4] Due to 4K45FPS being a non standard mode, the factory default uses 4K30+2K60; methods to unlock 4K45FPS/2K95FPS/1080P144FPS will be provided in future updates. > [5] Currently, the factory supports H264/MJPEG modes; future updates will provide H265 support."},"/hardware/en/kvm/NanoKVM_Pro/ledstrip.html":{"title":"Screen Sync Ambient Lighting","content":" title: Screen Sync Ambient Lighting keywords: NanoKVM, LED Strip update: date: 2025 10 07 version: v0.2 author: zepan content: improve docs date: 2025 09 05 version: v0.1 author: iawak9lkm content: Release docs ## Introduction The Screen Sync LED Strip is a signature expansion accessory for NanoKVM Pro. When using NanoKVM Pro with a desktop computer, it can capture the screen content and control an LED strip to display colors matching the edges of your screen—creating a dreamy, immersive lighting effect! ![ledstrip_pic](../../../assets/NanoKVM/pro/ledstrip/ledstrip_pic.jpg) <video playsinline controls muted preload src \"../../../assets/NanoKVM/pro/ledstrip/sync_led2.mp4\"></video> ⚠️ Note: To use this feature, ensure your power supply meets the specification: 5V ≥ 3A. ## Package Accessories Overview If you purchased the LED strip package, you will receive the following items: ![ledstrip\\_ov](../../../assets/NanoKVM/pro/ledstrip/ledstrip_ov.jpg) 1. 1 to 2 data cable 2. LED strip adapter kit (includes 6 adapters and 3 right angle cables) 3. One roll of LED strip ## Installation Steps ### Confirm Installation Orientation ![ledstrip_screen](../../../assets/NanoKVM/pro/ledstrip/ledstrip_screen.jpg) > Segment ④ is optional. You can choose between three sided or four sided mode based on your needs. > > The sampling order of the strip is: **Bottom left → Top left → Top right → Bottom right → Bottom left**. > Ensure consistency during installation. The green end is the strip’s Type C connector, and the other end connects to NanoKVM Pro via the adapter cable. ### Cut the LED Strip ![ledstrip_cut_st0](../../../assets/NanoKVM/pro/ledstrip/ledstrip_cut_st0.jpg) Cut the LED strip according to the screen’s width and height. > The number of LEDs on opposite sides must remain consistent. Example: Screen height 18 LEDs, width 30 LEDs. * Segment ①: 18 LEDs * Segment ②: 30 LEDs * Segment ③: 18 LEDs * Segment ④: 30 LEDs When cutting, make sure to cut along the red line (the midpoint between contacts): ![ledstrip_cut_st1](../../../assets/NanoKVM/pro/ledstrip/ledstrip_cut_st1.jpg) ### Open the Adapter Connector In the image below, the right side shows the **side view** of the adapter connector. Pry open the connector at the red marked area, resulting in the state shown on the left: ![ledstrip_con_st2](../../../assets/NanoKVM/pro/ledstrip/ledstrip_con_st2.jpg) ### Insert the Cables Insert the LED strip and right angle cable into opposite sides of the adapter connector, ensuring that the metal contacts align with the bridging metal inside the connector. Close the connector to secure. ![ledstrip_con_st3](../../../assets/NanoKVM/pro/ledstrip/ledstrip_con_st3.jpg) Connect the other end of the right angle cable. **Ensure that the arrow direction on the LED strip (signal flow direction) remains consistent**. Repeat this process until all strips are connected. ![ledstrip_con_st4](../../../assets/NanoKVM/pro/ledstrip/ledstrip_con_st4.jpg) ### Attach the LED Strip Peel off the protective film of the double sided adhesive on the back of the strip, then firmly attach it to the back of the screen. ![ledstrip_install](../../../assets/NanoKVM/pro/ledstrip/ledstrip_install.jpg) ### Connect to NanoKVM Pro The connection layout is as follows: * ① Connect to NanoKVM Pro PWR port * ② Connect to LED strip * ③ Connect to power adapter > ⚠️ Note: Please ensure the power supply specification is **5V ≥ 3A**. ![ledstrip_pwr](../../../assets/NanoKVM/pro/ledstrip/ledstrip_pwr.jpg) ## Enable the LED Strip * Enable via Web 1. Log in to NanoKVM via a browser 2. Navigate to **Settings → Device → LED Strip Settings**, enable it and set the correct parameter. ![ledstrip_setting](../../../assets/NanoKVM/pro/ledstrip/ledstrip_setting.jpg) * Enable via Desk UI 1. Go to the `Settings` page 2. Select `Ambilight` to enter the sub settings page 3. Configure the number of LEDs and enable the feature ## Demonstration ![ledstrip_show](../../../assets/NanoKVM/pro/ledstrip/ledstrip_show.png)"},"/hardware/en/kvm/NanoKVM_Pro/cua.html":{"title":"Experimental AI Agent","content":" title: Experimental AI Agent keywords: NanoKVM, AI Agent, Computer Use update: date: 2025 10 06 version: v0.1 author: zepan content: Release docs ## Introduction NanoKVM Pro experimentally introduces an AI Agent feature, enabling users to quickly experience the currently trending **Computer Use Agent** capability. **Computer Use** leverages multimodal Vision Language Models (VLMs) to empower users to control their computers via natural language—eliminating the need for complex scripting previously required. For an overview of the Computer Use concept, refer to Anthropic’s demonstration video and user experiences shared on Reddit: https://www.reddit.com/r/ClaudeAI/comments/1ga3uqn/mindblowing_experience_with_claude_computer_use <iframe width \"560\" height \"315\" src \"https://www.youtube.com/embed/ODaHJzOyVCQ\" frameborder \"0\" allowfullscreen></iframe> ## Advantages of NanoKVM Pro How does NanoKVM Pro’s implementation of Computer Use compare favorably to Anthropic’s offering? 1. **Out of the box usability** NanoKVM Pro comes with the Computer Use application built in. Users can launch it directly from the web UI with a single click—no complex environment setup required, unlike Anthropic’s demo which demands significant pre configuration. 2. **Hardware level Computer Use** Anthropic’s solution is software based, limiting support to macOS 11+ and Windows 10+. Linux and Android are not supported. NanoKVM Pro’s Computer Use operates at the hardware level. As an IP KVM device, it natively captures screenshots and controls mouse/keyboard at the hardware layer, enabling compatibility with Windows, macOS, Linux, and even Android. 3. **Support for self hosted deployment** Anthropic uses a closed source large model, requiring users to upload screenshots to their servers—making it unsuitable for privacy sensitive tasks. NanoKVM Pro supports custom VLM model endpoints. You can connect to either online commercial APIs or your own self hosted open source VLM server (via OpenAI compatible API). Until recently (mid 2025), no open source VLM could perform basic Computer Use tasks. However, Alibaba’s newly released open source models—**qwen3 vl 235b a22b instruct** and **qwen3 vl 30b a3b instruct** (October 2025)—now enable foundational Computer Use capabilities. With the rapid advancement of AI models, we believe that by next year, open source VLMs will deliver practical, self hosted Computer Use functionality. Below are mobile screen recordings of NanoKVM Pro performing simple demonstration tasks (downloading an ESP32 datasheet and setting DNS): <div class \"video row\"> <video playsinline controls muted preload src \"../../../assets/NanoKVM/pro/cua/download_esp32.mp4\"></video> <video playsinline controls muted preload src \"../../../assets/NanoKVM/pro/cua/set_dns.mp4\"></video> </div> <style> .video row { display: flex; gap: 12px; flex wrap: wrap; justify content: center; } .video row video { flex: 1; min width: 280px; aspect ratio: 9/16; } @media (max width: 600px) { .video row { flex direction: column; } } </style> As an experimental feature, NanoKVM Pro’s Computer Use Agent (CUA) is implemented as a standalone Python service, making it easy for community developers to modify and test. Contributions from developers interested in AI Agents are welcome: https://github.com/sipeed/nanokvm_cua ## Critical Warnings Before Use!!! Before explaining how to try this feature, we must **emphatically stress** the current limitations and risks of CUA. Today’s large models are still very limited and prone to **hallucinations**. When granted hardware level control, these hallucinations can cause **irreversible damage** to your computer. For example, in 2025, a user reportedly lost an entire database due to unintended actions by Anthropic’s Computer Use feature. **While using CUA, please stay physically near your computer**, monitor every action the AI performs, and be ready to interrupt it immediately if it attempts a dangerous operation. Additionally, CUA requires connection to a VLM model server. You must either: Purchase token credits from a VLM provider and enter your API key, **or** Deploy your own VLM server. **Users are solely responsible for any data loss, system damage, or incurred costs resulting from the use of CUA.** ## Quick Start Guide ### Set Video Mode CUA captures screenshots from the KVM stream. Before using CUA, switch the **Video Mode** to **MJPEG**, and we recommend setting your desktop resolution to **1280×720**: 1. Higher resolution images increase VLM inference time and token costs. 2. Lower resolutions (e.g., 800×600) make on screen elements too small, forcing CUA to take more steps—increasing cost and failure rate. ![set_mjpeg](../../../assets/NanoKVM/pro/cua/set_mjpeg.jpg) ### Read the Safety Notice Click the **\"Smart Assistant\"** icon in the floating toolbar to view CUA’s safety notice. We **strongly urge** you to fully read and understand all risks before proceeding. ![note](../../../assets/NanoKVM/pro/cua/note.jpg) ### Install Dependencies Since CUA is experimental and involves privacy sensitive operations, we do **not** pre install its dependencies. On first use, click the **\"Install Dependencies\"** button to automatically install required packages. A terminal window will appear showing installation progress—please wait until it completes. ### Launch CUA Service After dependencies are installed, click **\"Try It Now\"** to start the CUA service. A new CUA window will appear within 5–10 seconds. *(If no window appears, check if your browser blocked pop ups.)* > Note: The current CUA implementation increases CPU usage on the KVM host, which may cause lag in the main KVM interface. For security reasons: Only **one CUA instance** is allowed at a time. Opening the CUA URL in a new tab will **not** work. Closing or refreshing the CUA webpage **automatically stops** the service. You must restart it from the main page. The CUA web interface is responsive and works on both desktop and mobile browsers. Desktop layout example: ![web_pc](../../../assets/NanoKVM/pro/cua/web_pc.jpg) > **For developers**: You can manually run CUA via terminal: > `python /kvmapp/cua/cua_webapp.py auth` ### Configure CUA Settings On first use, go to the **Settings** tab and fill in the following: 1. **API Type** **DashScope** (default): Lightweight, see https://www.aliyun.com/product/bailian **OpenAI**: Most universal format—ideal for self hosted VLM servers (e.g., vLLM/SGLang) **Genai**: *TODO* 2. **API Key** Enter the key from your VLM provider or your self hosted server. 3. **Base URL** Required for OpenAI style APIs. Examples: `https://dashscope.aliyuncs.com/compatible mode/v1` `https://192.168.0.xxx:8000/v1` 4. **Model Name** Specify the VLM model name: Commercial: `qwen3 vl plus` Open source: `qwen3 vl 235b a22b instruct`, `qwen3 vl 30b a3b instruct` For self hosted vLLM deployments: use the ` served model name` you configured 5. **IMG_KEEP_N** To reduce token usage, only the most recent *N* screenshots are retained. 6. **MAX_ROUNDS** Maximum steps per task—to prevent infinite loops and excessive token consumption. 7. **Initial Prompt** This is the system prompt we designed for CUA tasks. Minor tuning is allowed, but **do not modify** the instruction generation part unless you also update the corresponding Python script. Click **\"Submit\"** to save your configuration. ### Issue Automation Tasks Switch back to the **Chat** tab, enter your desired task in the text box (e.g., *\"download raspberrypi datasheet\"* or *\"set dns server to 8.8.8.8\"*), and click **\"Send\"** to observe CUA in action. > The right side preview window is **read only**—you cannot interact with it via mouse/keyboard. The chat window displays each step’s screenshot and CUA’s planned action. If CUA gets stuck in a loop, click **\"Pause\"**, provide corrective instructions, then click **\"Send\"**. If CUA is about to perform a dangerous action, **pause immediately**. To start a new task, click **\"Reset\"**. ![chat_task](../../../assets/NanoKVM/pro/cua/chat_task.jpg) ## Self Hosting a VLM Model ### Hardware Requirements Thanks to the Qwen3 VL series release, self hosting a VLM for CUA is now feasible. As of October 2025, the open source **Qwen3 VL** models have significantly improved: `qwen3 vl 235b a22b instruct` surpasses last year’s `qwen vl max` `qwen3 vl 30b a3b instruct` outperforms `qwen2.5 vl 72b instruct` Both now meet the threshold for basic computer control tasks. > It is expected that Qwen3 VL 4B will be released in mid October. It may also feature CUA capabilities, which would make self deployment on regular consumer grade computers possible! However: The **235B** model requires at least **4×H100 GPUs** (320GB total)—impractical for most users. We focus on demonstrating **qwen3 vl 30b a3b instruct** (30B parameters), which needs ~40GB of memory (depending on precision). Possible deployment setups: 1. **1× L40S / RTX6000 / H100** → FP8 2. **2× RTX4090 / RTX5090** → FP8 3. **4× RTX3090** → FP16 4. **CPU**: 48GB+ RAM, 16+ cores → Q4 quantization > Note: Community released [Q4 quantized models](https://huggingface.co/yairpatch/Qwen3 VL 30B A3B Thinking GGUF) appear to suffer from excessive quantization error, leading to inaccurate UI clicks. Official AWQ quantized versions may resolve this. Thus, **4×RTX3090** or **2×RTX4090/5090** are the most practical options for individual users. We’ve successfully tested deployments using **vLLM** (SGLang is also supported)—both provide OpenAI compatible APIs. **2025.10.15 Updated** The Qwen3 VL 8B and 4B models were released today! After testing, the Qwen3 VL 8B Instruct model is also capable of achieving basic CUA functionality! This means the barrier for individual users to self deploy and experience CUA has been lowered to a single RTX 3090 graphics card, or a CPU with 32GB of RAM or more. This is a configuration accessible to most digital enthusiasts. Come and try it out! ### Deploying VLM with vLLM 1. Install vLLM: https://docs.vllm.ai/en/stable/getting_started/installation/gpu.html 2. Download model weights (FP16 or FP8): https://modelscope.cn/models/Qwen/Qwen3 VL 30B A3B Instruct https://modelscope.cn/models/Qwen/Qwen3 VL 30B A3B Instruct FP8 https://modelscope.cn/models/Qwen/Qwen3 VL 8B Instruct 3. Launch the server: 4xGPU run Qwen3 VL 30B A3B Instruct： ```shell vllm serve \\ /your_models_path//Qwen/Qwen3 VL 30B A3B Instruct \\ host 0.0.0.0 \\ port 8000 \\ tensor parallel size 4 \\ gpu memory utilization 0.90 \\ max model len 65536 \\ served model name qwen3 vl 30b a3b instruct \\ api key skxxxxxx ``` 1xGPU Run Qwen3 VL 8B Instruct: ```shell vllm serve \\ /your_models_path//Qwen/Qwen3 VL 8B Instruct \\ host 0.0.0.0 \\ port 8000 \\ tensor parallel size 1 \\ gpu memory utilization 0.90 \\ max model len 32768 \\ served model name qwen3 vl 8b instruct \\ api key skxxxxxx ``` Then configure CUA with your local server details—and enjoy fully private, local Computer Use! Example server output: ``` (vllm) zp@server105:~/work/vllm$ vllm serve \\ \\ /home/zp/work/models/Qwen/Qwen3 VL 30B A3B Instruct \\ host 0.0.0.0 \\ port 8000 \\ tensor parallel size 4 \\ gpu memory utilization 0.90 \\ max model len 65536 \\ served model name Qwen3 VL 30B A3B Instruct\\ api key sk123 INFO 10 06 15:56:22 [__init__.py:216] Automatically detected platform cuda. (APIServer pid 41428) INFO 10 06 15:56:26 [api_server.py:1839] vLLM API server version 0.11.0 (APIServer pid 41428) INFO 10 06 15:56:26 [utils.py:233] non default args: {'model_tag': '/home/zp/work/models/Qwen/Qwen3 VL 30B A3B Instruct', 'host': '0.0.0.0', 'api_key': ['sk123'], 'model': '/home/zp/work/models/Qwen/Qwen3 VL 30B A3B Instruct', 'max_model_len': 65536, 'served_model_name': ['Qwen3 VL 30B A3B Instruct'], 'tensor_parallel_size': 4} (APIServer pid 41428) INFO 10 06 15:56:26 [model.py:547] Resolved architecture: Qwen3VLMoeForConditionalGeneration (APIServer pid 41428) `torch_dtype` is deprecated! Use `dtype` instead! (APIServer pid 41428) INFO 10 06 15:56:26 [model.py:1510] Using max model len 65536 (APIServer pid 41428) INFO 10 06 15:56:27 [scheduler.py:205] Chunked prefill is enabled with max_num_batched_tokens 2048. INFO 10 06 15:56:32 [__init__.py:216] Automatically detected platform cuda. (EngineCore_DP0 pid 41565) INFO 10 06 15:56:35 [core.py:644] Waiting for init message from front end. (EngineCore_DP0 pid 41565) INFO 10 06 15:56:35 [core.py:77] Initializing a V1 LLM engine (v0.11.0) with config: model '/home/zp/work/models/Qwen/Qwen3 VL 30B A3B Instruct', speculative_config None, tokenizer '/home/zp/work/models/Qwen/Qwen3 VL 30B A3B Instruct', skip_tokenizer_init False, tokenizer_mode auto, revision None, tokenizer_revision None, trust_remote_code False, dtype torch.bfloat16, max_seq_len 65536, download_dir None, load_format auto, tensor_parallel_size 4, pipeline_parallel_size 1, data_parallel_size 1, disable_custom_all_reduce False, quantization None, enforce_eager False, kv_cache_dtype auto, device_config cuda, structured_outputs_config StructuredOutputsConfig(backend 'auto', disable_fallback False, disable_any_whitespace False, disable_additional_properties False, reasoning_parser ''), observability_config ObservabilityConfig(show_hidden_metrics_for_version None, otlp_traces_endpoint None, collect_detailed_traces None), seed 0, served_model_name Qwen3 VL 30B A3B Instruct, enable_prefix_caching True, chunked_prefill_enabled True, pooler_config None, compilation_config {\"level\":3,\"debug_dump_path\":\"\",\"cache_dir\":\"\",\"backend\":\"\",\"custom_ops\":[],\"splitting_ops\":[\"vllm.unified_attention\",\"vllm.unified_attention_with_output\",\"vllm.mamba_mixer2\",\"vllm.mamba_mixer\",\"vllm.short_conv\",\"vllm.linear_attention\",\"vllm.plamo2_mamba_mixer\",\"vllm.gdn_attention\",\"vllm.sparse_attn_indexer\"],\"use_inductor\":true,\"compile_sizes\":[],\"inductor_compile_config\":{\"enable_auto_functionalized_v2\":false},\"inductor_passes\":{},\"cudagraph_mode\":[2,1],\"use_cudagraph\":true,\"cudagraph_num_of_warmups\":1,\"cudagraph_capture_sizes\":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],\"cudagraph_copy_inputs\":false,\"full_cuda_graph\":false,\"use_inductor_graph_partition\":false,\"pass_config\":{},\"max_capture_size\":512,\"local_cache_dir\":null} (EngineCore_DP0 pid 41565) WARNING 10 06 15:56:35 [multiproc_executor.py:720] Reducing Torch parallelism from 44 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed. (EngineCore_DP0 pid 41565) INFO 10 06 15:56:35 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks [0, 1, 2, 3], buffer_handle (4, 16777216, 10, 'psm_9b2ff0e4'), local_subscribe_addr 'ipc:///tmp/012ca9e5 5641 4fb7 a15a 3031d0bab01f', remote_subscribe_addr None, remote_addr_ipv6 False) INFO 10 06 15:56:39 [__init__.py:216] Automatically detected platform cuda. INFO 10 06 15:56:39 [__init__.py:216] Automatically detected platform cuda. INFO 10 06 15:56:39 [__init__.py:216] Automatically detected platform cuda. INFO 10 06 15:56:39 [__init__.py:216] Automatically detected platform cuda. INFO 10 06 15:56:44 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks [0], buffer_handle (1, 10485760, 10, 'psm_c289f912'), local_subscribe_addr 'ipc:///tmp/1da89172 ec87 4616 92cb 37f804606ec3', remote_subscribe_addr None, remote_addr_ipv6 False) INFO 10 06 15:56:44 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks [0], buffer_handle (1, 10485760, 10, 'psm_e3f33e50'), local_subscribe_addr 'ipc:///tmp/d22d4439 f2d4 4ad5 bf43 c8aefa75d97d', remote_subscribe_addr None, remote_addr_ipv6 False) INFO 10 06 15:56:44 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks [0], buffer_handle (1, 10485760, 10, 'psm_202b7486'), local_subscribe_addr 'ipc:///tmp/8dfcea44 3e7d 46c0 881a bb2913de8283', remote_subscribe_addr None, remote_addr_ipv6 False) INFO 10 06 15:56:44 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks [0], buffer_handle (1, 10485760, 10, 'psm_acb66435'), local_subscribe_addr 'ipc:///tmp/a79c13a7 b107 4974 bc22 d18fbb753f4a', remote_subscribe_addr None, remote_addr_ipv6 False) [Gloo] Rank 2 is connected to 3 peer ranks. Expected number of connected peer ranks is : 3 [Gloo] Rank 0 is connected to 3 peer ranks. Expected number of connected peer ranks is : 3 [Gloo] Rank 1 is connected to 3 peer ranks. Expected number of connected peer ranks is : 3 [Gloo] Rank 3 is connected to 3 peer ranks. Expected number of connected peer ranks is : 3 [Gloo] Rank 2 is connected to 3 peer ranks. Expected number of connected peer ranks is : 3 [Gloo] Rank 0 is connected to 3 peer ranks. Expected number of connected peer ranks is : 3 [Gloo] Rank 1 is connected to 3 peer ranks. Expected number of connected peer ranks is : 3 [Gloo] Rank 3 is connected to 3 peer ranks. Expected number of connected peer ranks is : 3 INFO 10 06 15:56:46 [__init__.py:1384] Found nccl from library libnccl.so.2 INFO 10 06 15:56:46 [pynccl.py:103] vLLM is using nccl 2.27.3 INFO 10 06 15:56:46 [__init__.py:1384] Found nccl from library libnccl.so.2 INFO 10 06 15:56:46 [pynccl.py:103] vLLM is using nccl 2.27.3 INFO 10 06 15:56:46 [__init__.py:1384] Found nccl from library libnccl.so.2 INFO 10 06 15:56:46 [pynccl.py:103] vLLM is using nccl 2.27.3 INFO 10 06 15:56:46 [__init__.py:1384] Found nccl from library libnccl.so.2 INFO 10 06 15:56:46 [pynccl.py:103] vLLM is using nccl 2.27.3 WARNING 10 06 15:56:46 [symm_mem.py:58] SymmMemCommunicator: Device capability 8.6 not supported, communicator is not available. WARNING 10 06 15:56:46 [symm_mem.py:58] SymmMemCommunicator: Device capability 8.6 not supported, communicator is not available. WARNING 10 06 15:56:46 [symm_mem.py:58] SymmMemCommunicator: Device capability 8.6 not supported, communicator is not available. WARNING 10 06 15:56:46 [symm_mem.py:58] SymmMemCommunicator: Device capability 8.6 not supported, communicator is not available. WARNING 10 06 15:56:46 [custom_all_reduce.py:144] Custom allreduce is disabled because it's not supported on more than two PCIe only GPUs. To silence this warning, specify disable_custom_all_reduce True explicitly. WARNING 10 06 15:56:46 [custom_all_reduce.py:144] Custom allreduce is disabled because it's not supported on more than two PCIe only GPUs. To silence this warning, specify disable_custom_all_reduce True explicitly. WARNING 10 06 15:56:46 [custom_all_reduce.py:144] Custom allreduce is disabled because it's not supported on more than two PCIe only GPUs. To silence this warning, specify disable_custom_all_reduce True explicitly. WARNING 10 06 15:56:46 [custom_all_reduce.py:144] Custom allreduce is disabled because it's not supported on more than two PCIe only GPUs. To silence this warning, specify disable_custom_all_reduce True explicitly. INFO 10 06 15:56:46 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks [1, 2, 3], buffer_handle (3, 4194304, 6, 'psm_a8cdf3eb'), local_subscribe_addr 'ipc:///tmp/f25bfe61 de00 442b 9f93 e5edf37c4389', remote_subscribe_addr None, remote_addr_ipv6 False) [Gloo] Rank 0 is connected to 0 peer ranks. Expected number of connected peer ranks is : 0 [Gloo] Rank 0 is connected to 0 peer ranks. Expected number of connected peer ranks is : 0 [Gloo] Rank 0 is connected to 0 peer ranks. Expected number of connected peer ranks is : 0 [Gloo] Rank 0 is connected to 0 peer ranks. Expected number of connected peer ranks is : 0 [Gloo] Rank 0 is connected to 0 peer ranks. Expected number of connected peer ranks is : 0 [Gloo] Rank 0 is connected to 0 peer ranks. Expected number of connected peer ranks is : 0 [Gloo] Rank 0 is connected to 0 peer ranks. Expected number of connected peer ranks is : 0 [Gloo] Rank 0 is connected to 0 peer ranks. Expected number of connected peer ranks is : 0 [Gloo] Rank 0 is connected to 0 peer ranks. Expected number of connected peer ranks is : 0 [Gloo] Rank 0 is connected to 0 peer ranks. Expected number of connected peer ranks is : 0 [Gloo] Rank 0 is connected to 0 peer ranks. Expected number of connected peer ranks is : 0 [Gloo] Rank 0 is connected to 0 peer ranks. Expected number of connected peer ranks is : 0 [Gloo] Rank 0 is connected to 3 peer ranks. Expected number of connected peer ranks is : 3 [Gloo] Rank 2 is connected to 3 peer ranks. Expected number of connected peer ranks is : 3 [Gloo] Rank 1 is connected to 3 peer ranks. Expected number of connected peer ranks is : 3 [Gloo] Rank 3 is connected to 3 peer ranks. Expected number of connected peer ranks is : 3 INFO 10 06 15:56:46 [__init__.py:1384] Found nccl from library libnccl.so.2 INFO 10 06 15:56:46 [__init__.py:1384] Found nccl from library libnccl.so.2 INFO 10 06 15:56:46 [pynccl.py:103] vLLM is using nccl 2.27.3 INFO 10 06 15:56:46 [pynccl.py:103] vLLM is using nccl 2.27.3 INFO 10 06 15:56:46 [__init__.py:1384] Found nccl from library libnccl.so.2 INFO 10 06 15:56:46 [pynccl.py:103] vLLM is using nccl 2.27.3 INFO 10 06 15:56:46 [__init__.py:1384] Found nccl from library libnccl.so.2 INFO 10 06 15:56:46 [pynccl.py:103] vLLM is using nccl 2.27.3 INFO 10 06 15:56:46 [parallel_state.py:1208] rank 3 in world size 4 is assigned as DP rank 0, PP rank 0, TP rank 3, EP rank 3 INFO 10 06 15:56:46 [parallel_state.py:1208] rank 2 in world size 4 is assigned as DP rank 0, PP rank 0, TP rank 2, EP rank 2 INFO 10 06 15:56:46 [parallel_state.py:1208] rank 0 in world size 4 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0 INFO 10 06 15:56:46 [parallel_state.py:1208] rank 1 in world size 4 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1 WARNING 10 06 15:56:47 [topk_topp_sampler.py:66] FlashInfer is not available. Falling back to the PyTorch native implementation of top p & top k sampling. For the best performance, please install FlashInfer. WARNING 10 06 15:56:47 [topk_topp_sampler.py:66] FlashInfer is not available. Falling back to the PyTorch native implementation of top p & top k sampling. For the best performance, please install FlashInfer. WARNING 10 06 15:56:47 [topk_topp_sampler.py:66] FlashInfer is not available. Falling back to the PyTorch native implementation of top p & top k sampling. For the best performance, please install FlashInfer. WARNING 10 06 15:56:47 [topk_topp_sampler.py:66] FlashInfer is not available. Falling back to the PyTorch native implementation of top p & top k sampling. For the best performance, please install FlashInfer. (Worker_TP3 pid 41702) INFO 10 06 15:56:51 [gpu_model_runner.py:2602] Starting to load model /home/zp/work/models/Qwen/Qwen3 VL 30B A3B Instruct... (Worker_TP0 pid 41699) INFO 10 06 15:56:51 [gpu_model_runner.py:2602] Starting to load model /home/zp/work/models/Qwen/Qwen3 VL 30B A3B Instruct... (Worker_TP3 pid 41702) INFO 10 06 15:56:51 [gpu_model_runner.py:2634] Loading model from scratch... (Worker_TP2 pid 41701) INFO 10 06 15:56:51 [gpu_model_runner.py:2602] Starting to load model /home/zp/work/models/Qwen/Qwen3 VL 30B A3B Instruct... (Worker_TP3 pid 41702) INFO 10 06 15:56:51 [cuda.py:366] Using Flash Attention backend on V1 engine. (Worker_TP1 pid 41700) INFO 10 06 15:56:51 [gpu_model_runner.py:2602] Starting to load model /home/zp/work/models/Qwen/Qwen3 VL 30B A3B Instruct... (Worker_TP0 pid 41699) INFO 10 06 15:56:51 [gpu_model_runner.py:2634] Loading model from scratch... (Worker_TP0 pid 41699) INFO 10 06 15:56:51 [cuda.py:366] Using Flash Attention backend on V1 engine. (Worker_TP2 pid 41701) INFO 10 06 15:56:51 [gpu_model_runner.py:2634] Loading model from scratch... Loading safetensors checkpoint shards: 0% Completed 0/13 [00:00<?, ?it/s] (Worker_TP1 pid 41700) INFO 10 06 15:56:51 [gpu_model_runner.py:2634] Loading model from scratch... (Worker_TP2 pid 41701) INFO 10 06 15:56:52 [cuda.py:366] Using Flash Attention backend on V1 engine. (Worker_TP1 pid 41700) INFO 10 06 15:56:52 [cuda.py:366] Using Flash Attention backend on V1 engine. Loading safetensors checkpoint shards: 8% Completed 1/13 [00:02<00:24, 2.02s/it] Loading safetensors checkpoint shards: 15% Completed 2/13 [00:04<00:22, 2.02s/it] Loading safetensors checkpoint shards: 23% Completed 3/13 [00:06<00:20, 2.04s/it] Loading safetensors checkpoint shards: 31% Completed 4/13 [00:08<00:18, 2.05s/it] Loading safetensors checkpoint shards: 38% Completed 5/13 [00:10<00:16, 2.09s/it] Loading safetensors checkpoint shards: 46% Completed 6/13 [00:12<00:14, 2.08s/it] Loading safetensors checkpoint shards: 54% Completed 7/13 [00:13<00:09, 1.64s/it] Loading safetensors checkpoint shards: 62% Completed 8/13 [00:15<00:08, 1.78s/it] Loading safetensors checkpoint shards: 69% Completed 9/13 [00:17<00:07, 1.87s/it] Loading safetensors checkpoint shards: 77% Completed 10/13 [00:19<00:05, 1.94s/it] Loading safetensors checkpoint shards: 85% Completed 11/13 [00:20<00:03, 1.84s/it] Loading safetensors checkpoint shards: 92% Completed 12/13 [00:23<00:01, 1.91s/it] (Worker_TP2 pid 41701) INFO 10 06 15:57:16 [default_loader.py:267] Loading weights took 24.06 seconds (Worker_TP2 pid 41701) INFO 10 06 15:57:16 [gpu_model_runner.py:2653] Model loading took 14.7708 GiB and 24.325636 seconds (Worker_TP3 pid 41702) INFO 10 06 15:57:16 [default_loader.py:267] Loading weights took 25.29 seconds (Worker_TP1 pid 41700) INFO 10 06 15:57:17 [default_loader.py:267] Loading weights took 24.85 seconds Loading safetensors checkpoint shards: 100% Completed 13/13 [00:25<00:00, 1.97s/it] Loading safetensors checkpoint shards: 100% Completed 13/13 [00:25<00:00, 1.94s/it] (Worker_TP0 pid 41699) (Worker_TP0 pid 41699) INFO 10 06 15:57:17 [default_loader.py:267] Loading weights took 25.24 seconds (Worker_TP3 pid 41702) INFO 10 06 15:57:17 [gpu_model_runner.py:2653] Model loading took 14.7708 GiB and 25.534107 seconds (Worker_TP1 pid 41700) INFO 10 06 15:57:17 [gpu_model_runner.py:2653] Model loading took 14.7708 GiB and 25.147370 seconds (Worker_TP0 pid 41699) INFO 10 06 15:57:17 [gpu_model_runner.py:2653] Model loading took 14.7708 GiB and 25.517781 seconds (Worker_TP3 pid 41702) INFO 10 06 15:57:18 [gpu_model_runner.py:3344] Encoder cache will be initialized with a budget of 153600 tokens, and profiled with 1 video items of the maximum feature size. (Worker_TP2 pid 41701) INFO 10 06 15:57:18 [gpu_model_runner.py:3344] Encoder cache will be initialized with a budget of 153600 tokens, and profiled with 1 video items of the maximum feature size. (Worker_TP1 pid 41700) INFO 10 06 15:57:18 [gpu_model_runner.py:3344] Encoder cache will be initialized with a budget of 153600 tokens, and profiled with 1 video items of the maximum feature size. (Worker_TP0 pid 41699) INFO 10 06 15:57:18 [gpu_model_runner.py:3344] Encoder cache will be initialized with a budget of 153600 tokens, and profiled with 1 video items of the maximum feature size. (Worker_TP1 pid 41700) INFO 10 06 15:57:44 [backends.py:548] Using cache directory: /home/zp/.cache/vllm/torch_compile_cache/f062b114ba/rank_1_0/backbone for vLLM's torch.compile (Worker_TP1 pid 41700) INFO 10 06 15:57:44 [backends.py:559] Dynamo bytecode transform time: 12.36 s (Worker_TP2 pid 41701) INFO 10 06 15:57:44 [backends.py:548] Using cache directory: /home/zp/.cache/vllm/torch_compile_cache/f062b114ba/rank_2_0/backbone for vLLM's torch.compile (Worker_TP2 pid 41701) INFO 10 06 15:57:44 [backends.py:559] Dynamo bytecode transform time: 12.67 s (Worker_TP0 pid 41699) INFO 10 06 15:57:45 [backends.py:548] Using cache directory: /home/zp/.cache/vllm/torch_compile_cache/f062b114ba/rank_0_0/backbone for vLLM's torch.compile (Worker_TP0 pid 41699) INFO 10 06 15:57:45 [backends.py:559] Dynamo bytecode transform time: 12.90 s (Worker_TP3 pid 41702) INFO 10 06 15:57:45 [backends.py:548] Using cache directory: /home/zp/.cache/vllm/torch_compile_cache/f062b114ba/rank_3_0/backbone for vLLM's torch.compile (Worker_TP3 pid 41702) INFO 10 06 15:57:45 [backends.py:559] Dynamo bytecode transform time: 13.11 s (Worker_TP1 pid 41700) INFO 10 06 15:57:50 [backends.py:164] Directly load the compiled graph(s) for dynamic shape from the cache, took 4.849 s (Worker_TP2 pid 41701) INFO 10 06 15:57:50 [backends.py:164] Directly load the compiled graph(s) for dynamic shape from the cache, took 4.916 s (Worker_TP0 pid 41699) INFO 10 06 15:57:50 [backends.py:164] Directly load the compiled graph(s) for dynamic shape from the cache, took 4.527 s (Worker_TP3 pid 41702) INFO 10 06 15:57:50 [backends.py:164] Directly load the compiled graph(s) for dynamic shape from the cache, took 4.870 s (Worker_TP3 pid 41702) WARNING 10 06 15:57:52 [fused_moe.py:798] Using default MoE config. Performance might be sub optimal! Config file not found at ['/home/zp/work/vllm/.venv/lib/python3.12/site packages/vllm/model_executor/layers/fused_moe/configs/E 128,N 192,device_name NVIDIA_GeForce_RTX_3090.json'] (Worker_TP2 pid 41701) WARNING 10 06 15:57:52 [fused_moe.py:798] Using default MoE config. Performance might be sub optimal! Config file not found at ['/home/zp/work/vllm/.venv/lib/python3.12/site packages/vllm/model_executor/layers/fused_moe/configs/E 128,N 192,device_name NVIDIA_GeForce_RTX_3090.json'] (Worker_TP0 pid 41699) WARNING 10 06 15:57:52 [fused_moe.py:798] Using default MoE config. Performance might be sub optimal! Config file not found at ['/home/zp/work/vllm/.venv/lib/python3.12/site packages/vllm/model_executor/layers/fused_moe/configs/E 128,N 192,device_name NVIDIA_GeForce_RTX_3090.json'] (Worker_TP1 pid 41700) WARNING 10 06 15:57:52 [fused_moe.py:798] Using default MoE config. Performance might be sub optimal! Config file not found at ['/home/zp/work/vllm/.venv/lib/python3.12/site packages/vllm/model_executor/layers/fused_moe/configs/E 128,N 192,device_name NVIDIA_GeForce_RTX_3090.json'] (Worker_TP3 pid 41702) INFO 10 06 15:57:52 [monitor.py:34] torch.compile takes 13.11 s in total (Worker_TP1 pid 41700) INFO 10 06 15:57:52 [monitor.py:34] torch.compile takes 12.36 s in total (Worker_TP2 pid 41701) INFO 10 06 15:57:52 [monitor.py:34] torch.compile takes 12.67 s in total (Worker_TP0 pid 41699) INFO 10 06 15:57:52 [monitor.py:34] torch.compile takes 12.90 s in total (Worker_TP3 pid 41702) INFO 10 06 15:57:53 [gpu_worker.py:298] Available KV cache memory: 2.31 GiB (Worker_TP2 pid 41701) INFO 10 06 15:57:53 [gpu_worker.py:298] Available KV cache memory: 2.31 GiB (Worker_TP0 pid 41699) INFO 10 06 15:57:53 [gpu_worker.py:298] Available KV cache memory: 2.31 GiB (Worker_TP1 pid 41700) INFO 10 06 15:57:53 [gpu_worker.py:298] Available KV cache memory: 2.31 GiB (EngineCore_DP0 pid 41565) INFO 10 06 15:57:53 [kv_cache_utils.py:1087] GPU KV cache size: 100,752 tokens (EngineCore_DP0 pid 41565) INFO 10 06 15:57:53 [kv_cache_utils.py:1091] Maximum concurrency for 65,536 tokens per request: 1.54x (EngineCore_DP0 pid 41565) INFO 10 06 15:57:53 [kv_cache_utils.py:1087] GPU KV cache size: 100,752 tokens (EngineCore_DP0 pid 41565) INFO 10 06 15:57:53 [kv_cache_utils.py:1091] Maximum concurrency for 65,536 tokens per request: 1.54x (EngineCore_DP0 pid 41565) INFO 10 06 15:57:53 [kv_cache_utils.py:1087] GPU KV cache size: 100,752 tokens (EngineCore_DP0 pid 41565) INFO 10 06 15:57:53 [kv_cache_utils.py:1091] Maximum concurrency for 65,536 tokens per request: 1.54x (EngineCore_DP0 pid 41565) INFO 10 06 15:57:53 [kv_cache_utils.py:1087] GPU KV cache size: 100,752 tokens (EngineCore_DP0 pid 41565) INFO 10 06 15:57:53 [kv_cache_utils.py:1091] Maximum concurrency for 65,536 tokens per request: 1.54x Capturing CUDA graphs (mixed prefill decode, PIECEWISE): 100%█████████████████████████████████████████████████████████████████████████ 67/67 [00:11<00:00, 5.66it/s] Capturing CUDA graphs (decode, FULL): 100%████████████████████████████████████████████████████████████████████████████████████████████ 35/35 [00:06<00:00, 5.78it/s] (Worker_TP0 pid 41699) INFO 10 06 15:58:12 [gpu_model_runner.py:3480] Graph capturing finished in 19 secs, took 1.92 GiB (Worker_TP2 pid 41701) INFO 10 06 15:58:12 [gpu_model_runner.py:3480] Graph capturing finished in 19 secs, took 1.92 GiB (Worker_TP1 pid 41700) INFO 10 06 15:58:12 [gpu_model_runner.py:3480] Graph capturing finished in 19 secs, took 1.92 GiB (Worker_TP3 pid 41702) INFO 10 06 15:58:12 [gpu_model_runner.py:3480] Graph capturing finished in 19 secs, took 1.92 GiB (EngineCore_DP0 pid 41565) INFO 10 06 15:58:12 [core.py:210] init engine (profile, create kv cache, warmup model) took 54.87 seconds (APIServer pid 41428) INFO 10 06 15:58:17 [loggers.py:147] Engine 000: vllm cache_config_info with initialization after num_gpu_blocks is: 6297 (APIServer pid 41428) INFO 10 06 15:58:18 [api_server.py:1634] Supported_tasks: ['generate'] (APIServer pid 41428) WARNING 10 06 15:58:18 [model.py:1389] Default sampling parameters have been overridden by the model's Hugging Face generation config recommended from the model creator. If this is not intended, please relaunch vLLM instance with ` generation config vllm`. (APIServer pid 41428) INFO 10 06 15:58:18 [serving_responses.py:137] Using default chat sampling params from model: {'temperature': 0.7, 'top_k': 20, 'top_p': 0.8} (APIServer pid 41428) INFO 10 06 15:58:18 [serving_chat.py:139] Using default chat sampling params from model: {'temperature': 0.7, 'top_k': 20, 'top_p': 0.8} (APIServer pid 41428) INFO 10 06 15:58:18 [serving_completion.py:76] Using default completion sampling params from model: {'temperature': 0.7, 'top_k': 20, 'top_p': 0.8} (APIServer pid 41428) INFO 10 06 15:58:18 [api_server.py:1912] Starting vLLM API server 0 on http://0.0.0.0:8000 (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:34] Available routes are: (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /openapi.json, Methods: HEAD, GET (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /docs, Methods: HEAD, GET (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /docs/oauth2 redirect, Methods: HEAD, GET (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /redoc, Methods: HEAD, GET (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /health, Methods: GET (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /load, Methods: GET (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /ping, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /ping, Methods: GET (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /tokenize, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /detokenize, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /v1/models, Methods: GET (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /version, Methods: GET (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /v1/responses, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /v1/responses/{response_id}, Methods: GET (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /v1/responses/{response_id}/cancel, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /v1/chat/completions, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /v1/completions, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /v1/embeddings, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /pooling, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /classify, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /score, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /v1/score, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /v1/audio/transcriptions, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /v1/audio/translations, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /rerank, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /v1/rerank, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /v2/rerank, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /scale_elastic_ep, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /is_scaling_elastic_ep, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /invocations, Methods: POST (APIServer pid 41428) INFO 10 06 15:58:18 [launcher.py:42] Route: /metrics, Methods: GET (APIServer pid 41428) INFO: Started server process [41428] (APIServer pid 41428) INFO: Waiting for application startup. (APIServer pid 41428) INFO: Application startup complete. (APIServer pid 41428) INFO 10 06 15:58:23 [chat_utils.py:560] Detected the chat template content format to be 'openai'. You can set ` chat template content format` to override this. (APIServer pid 41428) INFO: 192.168.1.11:54734 \"POST /v1/chat/completions HTTP/1.1\" 200 OK (APIServer pid 41428) INFO 10 06 15:58:28 [loggers.py:127] Engine 000: Avg prompt throughput: 170.4 tokens/s, Avg generation throughput: 5.7 tokens/s, Running: 0 reqs, Waiting: 0 reqs, GPU KV cache usage: 0.0%, Prefix cache hit rate: 0.0% (APIServer pid 41428) INFO: 192.168.1.11:54734 \"POST /v1/chat/completions HTTP/1.1\" 200 OK (APIServer pid 41428) INFO: 192.168.1.11:54734 \"POST /v1/chat/completions HTTP/1.1\" 200 OK (APIServer pid 41428) INFO 10 06 15:58:38 [loggers.py:127] Engine 000: Avg prompt throughput: 642.9 tokens/s, Avg generation throughput: 9.9 tokens/s, Running: 0 reqs, Waiting: 0 reqs, GPU KV cache usage: 0.0%, Prefix cache hit rate: 56.3% (APIServer pid 41428) INFO 10 06 15:58:48 [loggers.py:127] Engine 000: Avg prompt throughput: 0.0 tokens/s, Avg generation throughput: 0.0 tokens/s, Running: 0 reqs, Waiting: 0 reqs, GPU KV cache usage: 0.0%, Prefix cache hit rate: 56.3% ```"},"/hardware/en/kvm/NanoKVM_Pro/desk_start.html":{"title":"NanoKVM-Desk Getting Started Guide","content":" title: NanoKVM Desk Getting Started Guide keywords: NanoKVM, Remote desktop, Lichee, PiKVM, ARM, tool, PCIe update: date: 2025 9 10 version: v0.1 author: iawak9lkm content: Release docs ## Interface Definition ![desk_interface](../../../assets/NanoKVM/pro/start/Desk Interface.png) ## Wiring 1. Connect Power > NanoKVM Pro requires a relatively stable power supply. Some motherboard USB ports may not provide sufficient current. > To ensure stable operation, we strongly recommend using an external 5V 1A or higher power adapter (actual power consumption is around 3W). > If you plan to use it with an LED strip, we strongly recommend using an external 5V 3A or higher power adapter. ![desk_con_pwr](../../../assets/NanoKVM/pro/start/desk_con_pwr.jpg) 2. Connect the USB HID interface: ![desk_con_hid](../../../assets/NanoKVM/pro/start/desk_con_hid.jpg) 3. Use an Ethernet cable to connect the router/switch and NanoKVM Pro. If no wired network is available, you may skip this step and configure Wi Fi after startup (Wi Fi version required; see the Wi Fi configuration section). ![desk_con_eth](../../../assets/NanoKVM/pro/start/desk_con_eth.jpg) 4. Connect HDMI IN. If your motherboard has only one video output and you also need an external monitor, connect HDMI OUT to your display. ![desk_con_hdmi_in](../../../assets/NanoKVM/pro/start/desk_con_hdmi_in.jpg) > Note: NanoKVM Pro supports up to 4K30FPS capture. The built in HDMI splitter actively reads the external display's resolution and refresh rate, then provides a common mode list to the host. > If you connect a 4K60 display, the computer will recognize it as a maximum 4K30 display (limited by the capture module). You may disable capture to allow full 4K60 output to the monitor. > If you connect a 1080P display, the computer will recognize it as a maximum 1080P display (limited by the passthrough monitor). 5. (Optional) Connect ATX power control interface ![desk_con_atx](../../../assets/NanoKVM/pro/start/desk_con_atx.jpg) Use a USB C to A data cable to connect the KVM B board with the NanoKVM Desk ATX interface. The KVM B board includes a general 9 pin header, which can be directly attached to the motherboard. The case’s power button, Power LED, and other connectors can be plugged into the KVM B header. Reference diagram (only power button connected here): ![img](../../../assets/NanoKVM/unbox/new ATX B.png) ## UI Operation Guide ### Appearance The Desk version features two interactive components on the front: * 1.47 inch IPS capacitive touch TFT display * Rotary encoder with button ### Rotary Encoder Operations The rotary encoder supports the following actions: * **Rotate Left**: Move focus to the left interactive/focusable component * **Rotate Right**: Move focus to the right interactive/focusable component * **Short Press**: Trigger the action of the focused component * **Long Press**: If on the main page, enter switching mode and display page options ### Touch Operations Touch screen supports the following actions: * **Swipe Left**: Move the overall view to the left * **Swipe Right**: Move the overall view to the right * **Short Tap**: Trigger the action of the tapped component * **Long Press**: If on the main page, enter switching mode and display page options ## LAN Access ### Network Connection 1. **Wired Connection**: After powering on, KVM will automatically obtain an IP address from the router via DHCP. No extra configuration is required. 2. **Wi Fi Connection**: 1. Open `Settings` → `Wi Fi` 2. Short press the `Wi Fi` switch 3. If Wi Fi has not been configured, KVM will start a Wi Fi hotspot (AP) and display AP information on the screen 4. Use a phone or computer to connect to the AP with the displayed password, or scan the QR code for quick connection 5. Once successfully connected, the UI will automatically jump and display a web link 6. Open the link in a browser or scan the QR code to enter the Wi Fi configuration page > **Note**: > You can switch between the AP info page and the web link page by swiping left/right. > Once Wi Fi is successfully connected and the Wi Fi function is not disabled, the device will automatically connect on each startup. 3. **USB NCM Connection**: If needed, you can establish a network connection via USB NCM. ### Network Access 1. After successful connection, the home page will display the device’s IP address. Priority is Ethernet (ETH) first, then Wi Fi. For detailed IP info, go to `Settings` under the corresponding network card. 2. In the same LAN, use a browser on the host (Chrome recommended) and enter the device IP address to access the page. ![ssl](../../../assets/NanoKVM/pro/start/SSL.png) > **Tip**: A security warning on the first visit is normal. NanoKVM Pro enables HTTPS by default with a self signed SSL certificate for enhanced security. 3. Use the default account `admin` and password `admin` to log in. **We strongly recommend changing the account and password immediately after your first login.** 4. Once logged in, check whether image display, keyboard/mouse control, and power buttons function properly. ![4k](../../../assets/NanoKVM/pro/start/nanokvm4K.png) ## Remote Connection 1. **Tailscale**: NanoKVM Pro comes with Tailscale preinstalled. You can log in to your Tailscale account via the web settings. All devices logged into Tailscale will automatically join the same virtual LAN and be assigned an IP starting with `100.xxx.xxx.xxx`. You can use this IP to remotely access and control your host. 2. **Other Remote Networking Tools**: NanoKVM Pro runs on Ubuntu and supports installing third party applications (e.g., ZeroTier) via `apt`. Please follow the official documentation of the respective tool for installation and configuration. ## Rack Mounting The NanoKVM Pro Desk is designed with the possibility of rack mounting, though this requires some hands on modification by the user. There are four screws located under the rubber feet on the bottom of the Desk unit. The two rear screws can be used for structural mounting. (Note: The two front screws are shorter and are located close to internal PCBA components, so they are not recommended for mounting.) We provide the 3D model of the Desk unit and a reference design for the rack adapter plate (single unit and triple unit) You may download and 3D print these, or design your own. [3d_zh](https://makerworld.com.cn/zh/models/1659366 nanokvm pro desk mo xing#profileId 1821374) [3d_en](https://makerworld.com/zh/models/1873387 nanokvm pro desk model#profileId 2005371) Installation Steps 1. Peel off the rear rubber feet and remove the original M2x6 mm screws. (new batch after Oct 2025 is M2x7mm already) 2. Replace them with M2x7 mm screws and fasten the unit to the adapter plate. 3. Secure the adapter plate to the screw holes on the rack rail edge. Diagrams of the installed unit: ![rack1](../../../assets/NanoKVM/pro/start/rack1.jpg) ![rack3](../../../assets/NanoKVM/pro/start/rack3.jpg) ## Heat Dissipation and Working Temperature For long term operational longevity, the NanoKVM Pro Desk utilizes passive cooling. The KVM's main body uses an aluminum alloy casing. The primary heat dissipation path is from the bottom of the PCBA, transferring heat through thermal paste to the bottom of the enclosure, and then dissipating heat through the bottom surface or radiating from the top surface. Therefore, placing the KVM on a highly conductive metal surface (such as a metal case or a rack) or in a well ventilated environment will significantly aid in cooling. Temperature Specifications The KVM's typical working power consumption is 3–4W. The operating temperature rise of the chassis surface is about 15–20°C, and the CPU's temperature rise is around 50°C. For touch scenarios (e.g., desktop use): We recommend an ambient working temperature of under 25°C. This keeps the chassis surface temperature below 45°C. (Note: Since the enclosure is metal, it will feel hotter to the touch than plastic at the same temperature.) For non touch scenarios (e.g., rack mounting): We recommend an ambient working temperature of under 40°C. The figure below shows the surface temperature at an ambient temperature of 26°C ![temp](../../../assets/NanoKVM/pro/start/temperature.jpg)"},"/hardware/en/kvm/NanoKVM_Pro/extended.html":{"title":"Advanced Applications","content":" title: Advanced Applications keywords: NanoKVM, Remote desktop, Lichee, PiKVM, RISCV, tool, PCIe update: date: 2025 8 26 version: v0.1 author: BuGu content: Release docs date: 2025 9 11 version: v0.2 author: iawak9lkm content: Add new feature description ## Switching to PiKVM In addition to running the NanoKVM framework, NanoKVM Pro is also compatible with the PiKVM software framework. You can switch between them as needed. ### Switching to PiKVM By default, the NanoKVM Pro uses the NanoKVM framework. You can switch to PiKVM in `Settings` > `About` > `Switch Device`. ![](./../../../assets/NanoKVM/pro/extended/SwitchtoPiKVM.png) After clicking, the system will automatically restart and boot into the PiKVM framework. This process takes about 30 seconds. If it does not switch automatically for a long time, please refresh the webpage manually. ![](./../../../assets/NanoKVM/pro/extended/PiKVMLogin.png) The default username and password for the PiKVM framework are also `admin`, `admin`. However, the two platforms use their own usernames and passwords, which are not unified. It is strongly recommended to change them after logging in. ![](./../../../assets/NanoKVM/pro/extended/PiKVM Setting.png) > Some functions in the PiKVM framework require the use of a web terminal, such as Wi Fi configuration and Tailscale setup. > When updating NanoKVM, the PiKVM framework will be updated simultaneously. ### Switching to NanoKVM Switching back from the PiKVM system to NanoKVM is equally simple. Just go to `Options` > `Switch to NanoKVM` and click `Switch Now`. ![](./../../../assets/NanoKVM/pro/extended/SwitchtoNanoKVM.png) After clicking, the system will automatically restart and boot into the NanoKVM framework. This process takes about 30 seconds. If it does not switch automatically for a long time, please refresh the webpage manually. ## SSH & mDNS ### SSH By default, NanoKVM Pro disables SSH to ensure system security. If you need to enable the SSH service or use it when previewing new versions, you can turn it on as follows: * **ATX/Desk**: From the web interface, go to `Settings` → `Device` → enable `SSH` * **Desk**: From the screen, tap `Settings` → `SSH` to enable `SSH` The default account is `root` with the password `sipeed`. If you change the web account password in the NanoKVM interface, the SSH password will be updated accordingly. ### mDNS To enable or disable mDNS, use the following methods: * **ATX/Desk**: From the web interface, go to `Settings` → `Device` → enable/disable `mDNS` * **Desk**: From the screen, tap `Settings` → `mDNS` to enable/disable `mDNS` ## HDMI Input & Loop Out > Currently, configuration is only supported on the Desk version’s screen. > Support for ATX/Desk web interface will be added soon. If HDMI functionality is not required, you can disable it to reduce power consumption. Operation: On Desk: From the screen, tap `Settings` → `HDMI` to enter the HDMI configuration page, which has two options: * **INPUT**: When disabled, Desk stops capturing HDMI input signals. * **LOOP OUT**: When disabled, Desk stops outputting HDMI loop out signals. ## Display Adjustment ### ATX Currently, the OLED screen supports the following function: * Short press the `USR` button to toggle the OLED display on or off. ### Desk The LCD screen supports the following functions (all configured from the screen): * Adjust backlight brightness: `Settings` → `Brightness` * Standby clock: `Settings` → `Auto Clock` * When disabled, the LCD remains always on. * When enabled, the LCD switches to a clock display after a long period of inactivity. ## Factory Reset ### Quick Reset * **ATX**: Long press the `USR` button until the screen shows `Reset`, then release. > Requires version ≥ `1.0.13` * **Desk**: From the screen, tap `Settings` → `Help` to enter the Help page. Repeatedly tap the reset button until `0` appears, and the device enters recovery mode. > **Note**: Do not perform any other operations until the device has fully restarted and refreshed the screen. ### Deep Reset For details, see the [FAQ](https://wiki.sipeed.com/hardware/en/kvm/NanoKVM_Pro/faq.html#Image Burning Methods) section on `Image Burning Methods`. ## HDMI Secondary Display Since NanoKVM Pro can emulate a display, capture screen content, and features a small built in screen, it can function as an HDMI secondary display. In the UI, simply select **HDMI** as the video output source to display the captured video feed on the small screen. When used as a desktop accessory, this feature can serve as a: Mini secondary monitor System performance monitor Video thumbnail player and more. ![](./../../../assets/NanoKVM/pro/extended/hdmi.jpg) <video playsinline controls muted preload src \"../../../assets/NanoKVM/pro/extended/cat.mp4\"></video> <video playsinline controls muted preload src \"../../../assets/NanoKVM/pro/extended/video.mp4\"></video> ## USB Expansion Features ### USB NCM The NCM function allows the NanoKVM to simulate a USB network card, enabling users to log in directly via USB. To enable: * **ATX/Desk**: From the web interface, go to `Settings` → `Device` → enable `Virtual Network` * **Desk**: From the screen, tap `Settings` → `USB` → enable `NCM` ### USB Secondary Display > **Supported only on NanoKVM Desk** > Currently, the USB secondary display function is supported only on Windows systems. 1. Download and extract the USB secondary display driver. 2. On Desk: From the screen, tap `Settings` → `USB` to enter the USB configuration page, then enable `Panel`. 3. On the controlled PC: * Open `Device Manager` → `Other devices` * Find `NanoKVMPro` → right click `Properties` → `Driver` → `Update driver` * Choose `Browse my computer for drivers` → `Let me pick from a list of available drivers on my computer` * Double click `Show all devices` * Under `Standard USB Host Controller` / `Standard system devices`, locate `USB Composite Device` → double click to install > **Note**: Driver locations may vary depending on Windows version. Please search carefully. 4. After installation, a new `loop input to output` device will appear under `Other devices` in Device Manager. 5. Right click this device → `Update driver` → `Browse my computer for drivers` → `Browse` → select the USB secondary display driver folder → `Next` → follow the prompts to complete installation. 6. Once installed, a new NanoKVM graphics device will appear under `Display adapters`. 7. On Desk, enter the secondary display page from the screen, select USB, and the Desk will function as a USB secondary display. 8. To disable, refer to step 2 to turn off `Panel`. 9. When re enabling, some systems may require reinstalling the USB driver. ## Updates NanoKVM Pro will periodically push new application versions that include new features and bug fixes. You can update the application version in `Settings` > `Check for Updates`. ![](./../../../assets/NanoKVM/pro/extended/Update.png) After clicking download, the new application installation package will be automatically downloaded, which includes `kvmcomm_x.x.x_arm64.deb`, `nanokvmpro_x.x.x_arm64.deb`, and `pikvm_x.x.x_arm64.deb`: * `kvmcomm_x.x.x_arm64.deb` is responsible for driving the shared hardware in the NanoKVM and PiKVM frameworks; * `nanokvmpro_x.x.x_arm64.deb` is the NanoKVM application software; * `pikvm_x.x.x_arm64.deb` is the PiKVM application software. Enabling the preview update feature will allow you to access the latest experimental application, which usually includes updated features but may lack stability. It is recommended to enable SSH before downloading preview updates. You can also download specific versions and install them manually. ```shell # Taking download of version 1.1.6 as an example # Download file sudo curl L https://cdn.sipeed.com/nanokvm/preview/nanokvm_pro_1.1.6.tar.gz sudo tar xz # Enter folder cd nanokvm_pro_1.1.6 # Install deb packages sudo apt install ./*.deb ``` > Software version 1.1.5 and later underwent an architectural adjustment. Older NanoKVM Pro units can only fetch up to version 1.1.5 initially; after updating, they will be able to retrieve the latest versions. ## How to Use TF Card for Storage Expansion The NanoKVM Desk version features a TF card slot on the rear panel. Inserting a TF card expands the storage capacity and enables the `Virtual U Disk` function. The TF card is mounted by default under the NanoKVM system's `/sdcard` directory. When `Virtual U Disk` is enabled, the TF card is simultaneously mounted as a mass storage device through the USB composite interface, allowing file transfer to the controlled host via this feature. > Note: > The ATX version cannot expose the TF card slot due to bracket size constraints. > The first batch of Desk versions does not support TF card hot plugging. Please insert the TF card when the device is powered off. > The Virtual U Disk and image mounting functions cannot be enabled simultaneously. ## How to Set a Static IP NanoKVM Pro introduced static IP configuration for Ethernet cards in version `1.1.6` and above. You can assign a static IP by configuring the `/boot/eth.nodhcp` file. The detailed setup method is as follows: Create a file named `/boot/eth.nodhcp` in NanoKVM Pro, then edit it according to the following rules: Each line represents a custom IP in the format: `addr/netid gw[optional]`; Multiple static IPs can be preset across multiple lines. Simplified steps: ```shell # Perform the following operations in the NanoKVM Pro web terminal or SSH terminal # Create the /boot/eth.nodhcp file and write the configuration echo \"192.168.2.2/22\" > /boot/eth.nodhcp ``` > During system startup, the static IP address list in the `/boot/eth.nodhcp` file will be read. The setup process is as follows: > 1. **Sequential detection**: The system reads the IPs in the file line by line and checks whether each one is already in use by another device on the network. > 2. **Detection mechanism**: `arping` is used for detection first; if `arping` is not installed in the system, it automatically falls back to using the `ping` command. > 3. **Set available IP**: Once the first available (unused) IP is found, the system immediately sets it as the static address for the device, and the process terminates. > 4. **Fallback option**: If all IPs in the list are occupied, the system will attempt to obtain an IP automatically via DHCP. > 5. **Guaranteed address**: If DHCP also fails to assign an address (for example, if there is no DHCP server on the network), the system will use the fixed guaranteed address `192.168.90.1`. ## How to Use Serial Port NanoKVM Pro provides two sets of available serial ports: UART1/UART2. (Note: The ATX version, limited by the standard bracket size, does not have these ports externally exposed; only the internal solder pads are retained.) The interface definition diagram for the Desk version is as follows: ![](./../../../assets/NanoKVM/pro/extended/UART.png) Using the Serial Terminal via the Web Interface **Requires firmware version 1.1.5 or higher** Navigate to: Web Menu Bar > Terminal > Serial Terminal. Here, you can configure the serial port number, baud rate, and other options. ![](./../../../assets/NanoKVM/pro/extended/UART 2.png) Send serial commands only: ```shell # Set ttyS1 to 115200 baud rate stty F /dev/ttyS1 115200 # Send hexadecimal data 0x11, 0x22, 0x33 echo n e '\\x11\\x22\\x33' > /dev/ttyS1 ``` ## How to Modify EDID EDID (Extended Display Identification Data) is a set of data provided by a display device to the host, including device information, resolution and frame rate lists, color characteristics, audio capabilities, etc. The host adjusts the display settings based on the received EDID. NanoKVM Pro supports modifying the EDID exposed by the virtual display. You can clone the EDID from a monitor or write your own EDID to achieve specific screen ratios, refresh rates, or color characteristics. > Modifying the EDID may risk improper display functionality. Please proceed with caution. If issues arise, restore the default EDID. Writing method: ```shell # 1. Prepare the EDID file, typically 256 bytes, and scp it to the system ls l /root/customize.bin # rw r r 1 1000 1000 256 Aug 19 14:44 /root/customize.bin # 2. Write the EDID cat /root/customize.bin > /proc/lt6911_info/edid # 3. Restore the default EDID: cat /kvmcomm/edid/e18.bin > /proc/lt6911_info/edid ``` Version 1.0.15 includes two EDID files: `e18.bin` and `e48.bin`. `e18.bin` uses conservative parameters compatible with most systems. `e48.bin` adds currently tested stable resolutions, but compatibility is not guaranteed for all devices. Supported resolutions and refresh rates are listed below: Resolution Refresh Rate Aspect Ratio e18.bin e48.bin 3840×2160 39 FPS 16:9 × ✓ 3840×2160 30 FPS 16:9 ✓ ✓ 3840×2160 25 FPS 16:9 ✓ × 2560×1440 83 FPS 16:9 ✓ ✓ 2560×1440 60 FPS 16:9 × ✓ 2560×1440 30 FPS 16:9 ✓ × 1920×1200 60 FPS 16:10 ✓ ✓ 1920×1080 125 FPS 16:9 × ✓ 1920×1080 120 FPS 16:9 ✓ ✓ 1920×1080 100 FPS 16:9 ✓ ✓ 1920×1080 60 FPS 16:9 ✓ ✓ 1920×1080 30 FPS 16:9 ✓ ✓ 1680×1050 60 FPS 16:10 ✓ ✓ 1440×900 60 FPS 16:10 ✓ ✓ 1280×1024 60 FPS 5:4 ✓ ✓ 1280×960 60 FPS 4:3 ✓ ✓ 1280×800 60 FPS 16:10 ✓ ✓ 1280×720 60 FPS 16:9 ✓ ✓ 1152×864 60 FPS 4:3 ✓ ✓ 1024×768 60 FPS 4:3 ✓ ✓ 800×600 60 FPS 4:3 ✓ ✓ > Resolutions not listed above may exhibit display errors or fail to show. ## About Latency NanoKVM Pro has made significant improvements in latency, with end to end latency controlled at around 100ms at any resolution. > The latency mentioned by other competitors is not end to end latency, but one way latency. The actual end to end latency is much higher than what they claim. > Actual tests show that choosing different frame rates has little impact on end to end latency, meaning the latency for 1080P120 and 1080P30 is almost the same. Video Mode End to End Latency Direct H264 100ms WebRTC H264 100ms MJPEG 100~150ms Note: We use \"end to end\" latency to reflect the actual latency perceived by users: The delay from when a user moves the mouse in the local browser window to when the remote desktop mouse starts moving in the browser. You can use [this Python script](../../../assets/NanoKVM/pro/extended/lat_mouse.py) to actually measure the \"end to end\" latency. Maximize the browser window or place it on the left side, ensuring the current remote desktop background color has maximum contrast with the mouse pointer color (for example, use a white background for a black pointer, or a black background for a white pointer). ``` python lat_mouse.py TEST_CNT RECORD_NAME ``` 4K30 webrtc end to end latency record: ![](./../../../assets/NanoKVM/pro/extended/4K30_latency.png)"},"/hardware/en/kvm/NanoKVM_Pro/faq.html":{"title":"F&Q","content":"# F&Q ## Updating to Solve Issues NanoKVM Pro will periodically update applications, and some issues may have been resolved in newer versions. Therefore, please try updating the application first. ## System Boot ### Green LED Blinking The green LED serves as the power indicator for NanoKVM Pro. If a power source with insufficient capacity is connected, the green LED may blink due to voltage instability and fail to start up. Please disconnect all power connections and replace the power adapter. ## Video Related Issues ### HDMI Icon Lit on NanoKVM Screen but No Video Displayed in Web Interface NanoKVM Pro supports video capture and loop out functions. When only capturing video, it reports a maximum resolution of 4K30FPS to the host by default. When a loop out display is connected, it reports a common resolution list. For the default resolution and frame rate list, please refer to [here](https://wiki.sipeed.com/hardware/en/kvm/NanoKVM_Pro/extended.html#How to Modify EDID). When connected through video adapters or docking stations, the reported capabilities may change (e.g., reporting 4K60FPS capture support, which may cause capture failure). In such cases, adjust the display settings in the host system: On Windows: Go to `Settings` → `Display` → `Advanced Display Settings` → Select `NanoKVM Pro` display → `Display Adapter Properties` → `List All Modes` → Choose the desired mode → Click Apply or OK. ![](./../../../assets/NanoKVM/pro/faq/res.png) ### Blurry Image, Not Matching the Captured Resolution In the image above, box ③: If the desktop resolution is lower than the active signal resolution, the captured image may appear blurrier than expected. Follow the steps above to output a clear image. ## Image Burning Methods ### USB Burning NanoKVM Pro supports restoring or updating the system via USB image burning. #### Preparation Prepare a USB data cable Download the latest NanoKVM Pro image file Prepare a burning tool (such as balenaEtcher, Rufus, or the dd command) #### Burning Steps 1. **Download the Image and Burning Tool** Visit the [NanoKVM Pro Release Page](https://github.com/sipeed/NanoKVM Pro/releases/latest) to download the latest image file. Download and install the burning tool [balenaEtcher](https://etcher.balena.io/). 2. **Enter Burning Mode** Use the USB data cable to connect the NanoKVM Pro's HID interface to your computer. Press and hold the User button on the NanoKVM, then power it on (or press the Reset button while powered on) until the orange LED turns off. The device will then enter burning mode, and the orange LED will start flashing again. Check if your computer recognizes the new disk device. <div style \"display: flex; justify content: center; gap: 20px; flex wrap: wrap; align items: flex end;\"> <div style \"text align: center; flex: 1; max width: 400px; min width: 300px;\"> <img src \"./../../../assets/NanoKVM/pro/faq/update_win.jpeg\" alt \"Windows Recognizing Device\" style \"width: 100%; height: auto; object fit: contain; border radius: 4px; box shadow: 0 2px 8px rgba(0,0,0,0.1);\"> <p style \"margin top: 8px; margin bottom: 0; font style: italic; color: #666; font size: 16px;\">Windows Recognizing Device</p> </div> <div style \"text align: center; flex: 1; max width: 400px; min width: 300px;\"> <img src \"./../../../assets/NanoKVM/pro/faq/update_linux.jpeg\" alt \"Linux Recognizing Device\" style \"width: 100%; height: auto; object fit: contain; border radius: 4px; box shadow: 0 2px 8px rgba(0,0,0,0.1);\"> <p style \"margin top: 8px; margin bottom: 0; font style: italic; color: #666; font size: 16px;\">Linux Recognizing Device</p> </div> </div> 3. **Burn Using balenaEtcher (Recommended)** Launch balenaEtcher. Click \"Flash from file\" and select the downloaded image file. Click \"Select target\" and choose the recognized NanoKVM Pro device. Click \"Flash!\" to start the burning process. Wait for the burning to complete and verify. <div align \"center\"> <img src \"./../../../assets/NanoKVM/pro/faq/flash.jpeg\" style \"width: 80%; height: auto; border radius: 4px; box shadow: 0 2px 8px rgba(0,0,0,0.1);\" alt \"Flash\"> </div> If prompted that the partition table cannot be found, it is normal; click continue. <div align \"center\"> <img src \"./../../../assets/NanoKVM/pro/faq/miss_part.jpeg\" style \"width: 70%; height: auto; border radius: 4px; box shadow: 0 2px 8px rgba(0,0,0,0.1);\" alt \"Missing Partition\"> </div> 4. **Burn Using Command Line** ```bash # Find the device name sudo fdisk l # Decompress the image file (if it is in .xz format) xz dv 20250828_NanoKVMPro_1_0_10.img.xz # Burn the image (replace /dev/sdX with the actual device name) sudo dd if 20250828_NanoKVMPro_1_0_10.img of /dev/sdX bs 4M status progress sudo sync ``` 5. **Restart the Device** After burning is complete, safely eject the device. Disconnect the USB connection. Reconnect the power, and the device will automatically start the new system. #### Notes Ensure you select the correct device to avoid accidentally operating on other storage devices. Do not disconnect the power or remove USB connections during the burning process. The first startup may take a long time for initialization and configuration. If the orange light does not turn on or the disk device does not appear, please refer to the methods below to use AXDL for burning. ### AXDL Burning AXDL is an official burning tool provided by Aixin, designed for burning AXP format system images. It currently supports Windows platform only. #### Preparation Prepare a USB data cable. Visit the [NanoKVM Pro Release Page](https://github.com/sipeed/NanoKVM Pro/releases) to download the latest AXP format image file. Download and install the AXDL tool and corresponding drivers [Download Link](https://dl.sipeed.com/shareURL/MaixIV/M4N Dock/10_PC_Software). #### Burning Steps 1. **Connect the Device** Use the USB data cable to connect the NanoKVM Pro's HID interface to your computer. 2. **Configure the Burning Tool** Open the AXDL tool. Select the downloaded AXP format image file. Click the start burning button. <div align \"center\"> <img src \"./../../../assets/NanoKVM/pro/faq/axdl.jpeg\" style \"width: 80%; height: auto; border radius: 4px; box shadow: 0 2px 8px rgba(0,0,0,0.1);\" alt \"AXDL Burning Tool Interface\"> </div> 3. **Enter Burning Mode and Start Burning** Press and hold the User button on the NanoKVM, then power it on (or press the Reset button while powered on). The burning process will start automatically, wait for the progress bar to complete. Wait until the prompt indicates that burning was successful; the entire process is complete. ## Desk Version LCD Not Lighting Up This may be caused by a loose FPC cable connection of the LCD during transportation. Click [here](https://wiki.sipeed.com/nanokvmpro lcd) to view the issue and repair details. ## Appearance Issues ### \"Missing\" Bottom Screw In the first batch of NanoKVM Desk units, the screw in the top left position (shown below) was found to affect WiFi connection stability due to structural design considerations. This screw hole is intentionally left empty in later assemblies. ![](./../../../assets/NanoKVM/pro/faq/screw.jpg)"},"/hardware/en/kvm/NanoKVM_Pro/lcd_fix.html":{"title":"NanoKVM Desk LCD Screen Malfunction","content":" title: NanoKVM Desk LCD Screen Malfunction ## Applicable Scenarios 1. Screen fails to display properly: No logo appears on startup, but the orange LED on the back blinks normally. 2. Touchscreen malfunctions: No response regardless of tapping, long pressing, or swiping. ## Cause of Issue The NanoKVM Desk may experience display anomalies due to the FPC flex cable of the screen becoming dislodged or having poor contact as a result of transportation jolts. ## Repair Steps > ❗❗❗The following steps involve disassembly, which carries risks. Please read the steps carefully before proceeding with caution❗❗❗ **Materials Required** 1. NanoKVM Desk with screen malfunction 2. Screwdriver 3. Thin shim (a piece of paper can be used as an alternative) 4. Tweezers ![](../../../assets/NanoKVM/pro/lcd_fix/lcd_fix_00.jpg) **Detailed Steps** 1. Peel off the two silicone pads at the bottom (applying a slight diagonal pull can prevent adhesive residue); unscrew the four screws. Note that the screws near the screen side are two short self tapping screws, while the ones near the rear interface are two long M2 screws. Keep the pads and screws safe. ![](../../../assets/NanoKVM/pro/lcd_fix/lcd_fix_01.jpg) 2. The screen bracket is secured to the anodized aluminum casing by four clips at the bottom and top. Start by prying open the screen cover from the bottom, then from the top. > ❗❗❗This step is high risk and may cause the screen flex cable at the bottom to break. Please control the force applied❗❗❗ ![](../../../assets/NanoKVM/pro/lcd_fix/lcd_fix_02.jpg) ![](../../../assets/NanoKVM/pro/lcd_fix/lcd_fix_03.jpg) 3. Push the NanoKVM Desk chassis out from behind the rear panel. ![](../../../assets/NanoKVM/pro/lcd_fix/lcd_fix_04.jpg) 4. Use tweezers to remove the sticker on the screen FPC flex cable; lift the black locking clip on the FPC seat and remove the screen flex cable. ![](../../../assets/NanoKVM/pro/lcd_fix/lcd_fix_05.jpg) ![](../../../assets/NanoKVM/pro/lcd_fix/lcd_fix_06.jpg) 5. Insert a thin paper strip into the FPC seat; place the screen FPC flex cable into the paper strip, push it all the way in, and then secure the seat. > Note: The screen flex cable connects to the seat with the contacts facing up. ![](../../../assets/NanoKVM/pro/lcd_fix/lcd_fix_07.jpg) ![](../../../assets/NanoKVM/pro/lcd_fix/lcd_fix_08.jpg) 6. Power on for testing; the logo should light up on startup. 7. Reassemble the casing, ensuring that the screen bracket is first secured at the top clip and then at the bottom. ![](../../../assets/NanoKVM/pro/lcd_fix/lcd_fix_03.jpg) ![](../../../assets/NanoKVM/pro/lcd_fix/lcd_fix_02.jpg) 8. Screw everything back together, using the shorter screws near the screen side and the longer screws near the interface side; finally, reattach the foot pads."},"/hardware/en/kvm/NanoKVM_Pro/atx_start.html":{"title":"ATX Getting Started Guide","content":" title: ATX Getting Started Guide keywords: NanoKVM, Remote desktop, Lichee, PiKVM, RISCV, tool, PCIe update: date: 2025 8 26 version: v0.1 author: BuGu content: Release docs ## Unboxing ### NanoKVM ATX Unboxing List ![](./../../../assets/NanoKVM/pro/start/unbox1.png) ![](./../../../assets/NanoKVM/pro/start/unbox2.png) The NanoKVM ATX includes: + NanoKVM ATX host with full height PCIe bracket + OLED *1; + HDMI cable 150cm *1; + HDMI cable 50cm *1; + USB Type A to Type C 100cm *2; + 4Pin internal USB cable 40cm *1; + ATX 9Pin split power switch cable 30+30cm *1; + Small Phillips screwdriver *1; + Antenna *1 (WiFi version only); ## Interface Definition ![](./../../../assets/NanoKVM/pro/start/ATX Interface.jpg) ## Wiring 1. Connect the power. The NanoKVM Pro has slightly higher power requirements, and some motherboard USB ports may not provide sufficient current. To ensure the proper operation of the NanoKVM Pro, it is strongly recommended to use an external power supply of 5V 1A or higher (actual power consumption is about 3W). ![](./../../../assets/NanoKVM/pro/start/01_Power.png) 2. Connect the USB HID interface: + ATX version: can use either internal case wiring or external USB C connection. ![](./../../../assets/NanoKVM/pro/start/02_USB.png) > ❗❗❗For the first batch of users (the cable is different from Figure B below), if you choose the internal chassis wiring method, please check your email and follow the modification instructions provided in the email to connect the cables. Alternatively, refer to [here](https://wiki.sipeed.com/nanokvmpro usb) to modify the cable. ![](./../../../assets/NanoKVM/pro/start/cable.png) 3. Use an Ethernet cable to connect the router/switch to the NanoKVM Pro. If there is no wired network, this step can be skipped; Wi Fi can be configured after powering on (requires purchasing the WiFi version). ![](./../../../assets/NanoKVM/pro/start/05_ETH.png) 4. Connect HDMI IN. If the motherboard has only one video port and an external display is needed, connect HDMI OUT to your display. ![](./../../../assets/NanoKVM/pro/start/06_HDMI.png) > Note that NanoKVM Pro supports a maximum capture of 4K30FPS. The built in HDMI splitter actively reads the resolution and frame rate of the external display and provides a common mode list to the host. > If you connect a 4K60FPS display, the computer will recognize it as a maximum supported 4K30 display (limited by the capture device; you can turn off capture to allow 4K60 direct output to the monitor). > If you connect a 1080P display, the computer will recognize it as a maximum 1080P display (limited by the loop out display). 5. (Optional) Connect the ATX power control interface. ![](./../../../assets/NanoKVM/pro/start/07_ATX.png) ## Internal Network Access ### Connecting to the Network 1. If using a wired connection, after powering on, the KVM will obtain an IP address assigned by the router's DHCP, and this step can be skipped. 2. Wi Fi Connection + The ATX version can configure the network via OLED. The steps are as follows: 1. Connect to the NanoKVM ATX's AP: Long press the USR button, and the KVM will release a Wi Fi signal (AP). The OLED will display this IP information, allowing you to scan the QR code for quick connection. 2. Log in to the webpage to enter the Wi Fi account and password: After connecting to Wi Fi, the OLED will display the webpage link. You can manually enter the URL or scan the QR code for quick access to the webpage for configuration. 3. If needed, you can also connect via USB NCM. ### Accessing the Page 1. For the ATX version: After connecting to the network, the OLED will display the local IP address (E IP is the IP obtained from the wired network; W IP is the IP obtained from the Wi Fi network, automatically switching display by default). 2. Use a computer on the same internal network to input the IP address in a browser (Chrome is recommended) to access the page. ![](./../../../assets/NanoKVM/pro/start/SSL.png) > It is normal to see this warning. NanoKVM Pro has enabled HTTPS for enhanced security and uses a self signed SSL certificate. 3. The default initial account is `admin`, and the password is `admin`. It is strongly recommended to change the account password immediately. 4. Check if the image, keyboard/mouse, and power buttons are functioning correctly. ![](./../../../assets/NanoKVM/pro/start/nanokvm4K.png) ## Remote Connection 1. NanoKVM Pro comes pre installed with the Tailscale application, allowing you to log in with your Tailscale account in the web settings. All devices logged into Tailscale will automatically join the same virtual internal network environment, assigning each device a `100.xxx.xxx.xxx` IP, which can be used to remotely access and control your host. 2. Other remote networking tools: NanoKVM Pro is based on Ubuntu and can install applications via `apt`, such as ZeroTier. Please follow the official instructions to install related applications."},"/hardware/en/kvm/NanoKVM_Pro/usb_connect.html":{"title":"How to Modify USB 4-Pin","content":" title: How to Modify USB 4 Pin ## Method 1: Connect as Shown Below ![](./../../../assets/NanoKVM/pro/usb/usb1.png) Note: The black 5V cable needs to be cut at the position indicated in the figure below. Avoid having the wire end touch other components, which could cause a short circuit. ![](./../../../assets/NanoKVM/pro/usb/usb2.png) ## Method 2: Requires Swapping Some Wire Positions 1. Use a tool like tweezers, a toothpick, or a small screwdriver to lift the plastic tab of the 1.27mm terminal header. ![](./../../../assets/NanoKVM/pro/usb/usb3.png) 2. Pull out the cable (repeat steps 1/2 for all 4 cables). ![](./../../../assets/NanoKVM/pro/usb/usb4.png) 3. Press here. ![](./../../../assets/NanoKVM/pro/usb/usb5.png) 4. Use a tool like tweezers, a toothpick, or a small screwdriver to lift the plastic tab for the red wire on the 2.54mm terminal header. ![](./../../../assets/NanoKVM/pro/usb/usb6.png) 5. Cut both ends of the red wire. Be sure to insert the scissors deep into the heat shrink tubing to cut, avoiding any exposed wire ends. ![](./../../../assets/NanoKVM/pro/usb/usb7.png) ![](./../../../assets/NanoKVM/pro/usb/usb8.png) 6. Insert the 1.27mm wires into the connector as shown in the figure below. ![](./../../../assets/NanoKVM/pro/start/cable.png)"},"/hardware/en/kvm/NanoKVM/introduction.html":{"title":"Introduction","content":" title: Introduction keywords: NanoKVM, Remote desktop, Lichee, PiKVM, RISCV, tool update: date: 2024 6 21 version: v0.1 author: BuGu content: Release docs date: 2024 8 14 version: v1.1 author: BuGu content: Update docs ## Introduction ![](./../../../assets/NanoKVM/introduce/NanoKVM_3.png) The NanoKVM is an IP KVM product based on the LicheeRV Nano, inheriting its compact size and powerful features. NanoKVM includes an HDMI input interface that can be recognized as a monitor by a computer, capturing the computer's screen. It has a USB 2.0 interface to connect to the computer host, recognized as HID devices like keyboard, mouse, and touchpad, and uses extra storage space on the Micro SD card, mounted as a USB flash drive. It comes with a 100 Mbps Ethernet port for video and control signal transmission. Additionally, the Full version features an ATX power control interface (USB C form) for remote control and monitoring of the host's power status. Under the Full version's shell, there is an OLED display for showing the device's IP and KVM related status. To meet different user needs, NanoKVM is available in two versions: **NanoKVM Lite**: Basic version suitable for DIY enthusiasts and enterprises with bulk requirements. **NanoKVM Full**: Complete version with a sleek shell and full accessories, including a pre installed system image card, recommended for individual users. ## Use Cases ![](./../../../assets/NanoKVM/introduce/web_ui.gif) **Server Management**: For real time monitoring and control of servers. **Remote Desktop and Power Control**: Provides remote control functionality without requiring the host to be networked or run specific software. **Remote Installation**: Simulates a USB flash drive to mount installation images and set up the system, also allows BIOS access. **Remote Serial Port (Not exposed in Full beta version)**: Provides two serial ports for IPMI use or connecting other development boards for web based serial terminal interaction. More features are coming soon (e.g., live streaming), stay tuned. ![](./../../../assets/NanoKVM/introduce/application.png) ## Specifications Product NanoKVM (Lite) NanoKVM (Full) PiKVM V4 Computing Unit LicheeRV Nano (RISCV) LicheeRV Nano (RISCV) CM4 (ARM) Resolution 1080P @ 60fps 1080P @ 60fps 1080P @ 60fps Video Encoding MJPEG, H264 (WIP) MJPEG, H264 (WIP) MJPEG, H264 Video Latency 90 230ms 90 230ms 100 230ms UEFI/BIOS ✓ ✓ ✓ Emulated USB Keyboard/Mouse ✓ ✓ ✓ Emulated USB Storage ✓ ✓ ✓ IPMI ✓ ✓ ✓ Wake on LAN ✓ ✓ ✓ Tailscale ✓ ✓ ✓ WebSSH ✓ ✓ ✓ Custom Scripts ✓ ✓ ETH 100M/10M 100M/10M 1000M/100M/10M ATX Power Control None, user configurable USB interface IO control board RJ45 interface IO control board OLED Display None, user expandable 128x64 0.96\" white 128x32 0.91\" white Serial Terminal 2 channels 2 channels Micro SD Card None, user provided Included, ready to use Included Expansion Accessories None PoE WiFi/LTE Power Consumption 0.2A@5V 0.2A@5V Peak 2.6A@5V Power Input Powered by PC USB Powered by PC USB <br> Supports auxiliary power Requires DC 5V 3A Cooling Silent, fanless Silent, fanless Requires active fan cooling Dimensions 23x37x15mm <br> ~1/30 PiKVM V4 size 40x36x36mm <br> ~1/7 PiKVM V4 size 120x68x44mm ## NanoKVM Hardware and Software Resources NanoKVM is built on the Sipeed [LicheeRV Nano](https://wiki.sipeed.com/hardware/en/lichee/RV_Nano/1_intro.html) core board. You can find the hardware specifications, schematics, and dimensions here: [Click here](http://cn.dl.sipeed.com/shareURL/LICHEE/LicheeRV_Nano) NanoKVM Lite consists of the LicheeRV Nano E and HDMItoCSI board, while NanoKVM Full adds the NanoKVM A/B board and shell to the Lite version. The HDMItoCSI board converts HDMI signals; NanoKVM A includes OLED, ATX control output (TypeC interface), auxiliary power (TypeC interface), and ATX power/reset buttons; NanoKVM B connects the A board to the computer's ATX pins for remote power control. The NanoKVM Cube/PCIe software is now fully open source: [KVM application open source location](https://github.com/sipeed/NanoKVM), [image open source location](https://github.com/sipeed/LicheeRV Nano Build/tree/NanoKVM). > The NanoKVM image is built on the LicheeRV Nano SDK and MaixCDK, and it is compatible with materials that use the LicheeRV Nano. Conversely, the KVM software cannot be used with the LicheeRV Nano or other SG2002 products. If you would like to build HDMI input related applications on the NanoKVM, please contact us for technical support. > NanoKVM Cube hardware is built on the LicheeRV Nano platform. To coordinate production and maintain consistency with the LicheeRV Nano for the SMT project, the hardware retains the display, touch, MIC, and amplifier circuits. To address potential privacy concerns, versions 2.2.6 of the application and 1.4.1 of the firmware and above will remove the relevant drivers. We will also eliminate these components in future productions. + [Schematics](https://cn.dl.sipeed.com/shareURL/KVM/nanoKVM/HDK/02_Schematic) + [3D Structure](https://cn.dl.sipeed.com/shareURL/KVM/nanoKVM/HDK/04_3D_file) + [NanoKVM Image Download](https://github.com/sipeed/NanoKVM/releases) ## Purchase Links [Official Taobao Store](https://item.taobao.com/item.htm?id 811206560480) [AliExpress Store](https://www.aliexpress.com/item/1005007369816019.html) [Pre sale Page](https://sipeed.com/nanokvm) ## Product Feedback If you encounter any issues or have suggestions, please contact us through the following channels: + [Github Issues](https://github.com/sipeed/NanoKVM) + [MaixHub Forum](https://maixhub.com/discussion/nanokvm) + QQ Group: 703230713"},"/hardware/en/kvm/NanoKVM/network/frp.html":{"title":"frp","content":" title: frp keywords: NanoKVM, Remote desktop, Lichee, PiKVM, RISCV, tool update: date: 2024 8 13 version: v0.1 author: xwj content: Release docs > Note: Exposing services directly to the public internet is very dangerous! It is recommended to use HTTPS. To use frp, you need to create your own configuration file. You can refer to the [frp documentation](https://gofrp.org). Here is an example to access an [internal web service via frp](https://gofrp.org/zh cn/docs/examples/vhost http/). ## Start the frps Service First, you need a server with a public IP address and start the frps service on it. Let's assume the server IP address is `20.190.1.1`. Replace this IP with your own public IP. 1. Download and extract [frp](https://github.com/fatedier/frp/releases/download/v0.59.0/frp_0.59.0_linux_riscv64.tar.gzf). After extracting, go to the folder: ```bash wget https://github.com/fatedier/frp/releases/download/v0.59.0/frp_0.59.0_linux_riscv64.tar.gz tar xzvf frp_0.59.0_linux_riscv64.tar.gz cd frp_0.59.0_linux_riscv64 ``` 2. Create the configuration file `frps.yaml`: ```yaml bindPort: 7000 vhostHTTPPort: 8080 ``` 3. Start the frps service: ```bash ./frps c frps.yaml ``` ## Start the frpc Service 1. SSH into the NanoKVM; 2. Run `frpc v` to check the version. If there is no output, install frpc manually; Download and extract [frp](https://github.com/fatedier/frp/releases/download/v0.59.0/frp_0.59.0_linux_riscv64.tar.gzf); Move the `frpc` file to the `/usr/bin/` directory. 3. Create the configuration file `/etc/kvm/frpc.yaml`: ```yaml serverAddr: 20.190.1.1 # Your public IP serverPort: 7000 proxies: name: nanokvm type: http localPort: 80 customDomains: 20.190.1.1 ``` 4. Start the frpc service: ```bash frpc c /etc/kvm/frpc.yaml ``` After both frps and frpc services are started, you can access the NanoKVM via the public internet by entering `20.190.1.1:8080` in your browser. ## Configure Domain To configure a domain for NanoKVM, modify the `frpc.yaml` file: ```yaml serverAddr: 20.190.1.1 # Your public IP serverPort: 7000 proxies: name: nanokvm type: http localPort: 80 customDomains: www.yourdomain.com # Your domain ``` Then point the domain [`www.yourdomain.com`](http://www.yourdomain.com) to `20.190.1.1`. You can now access NanoKVM by opening [`http://www.yourdomain.com:8080`](http://www.yourdomain.com:8080/) in your browser. ## Configure HTTPS Refer to the frp documentation: [Enable HTTPS for local HTTP services](https://gofrp.org/zh cn/docs/examples/https2http/). 1. Configure the `frps.yaml` file: ```yaml bindPort: 7000 vhostHTTPSPort: 443 ``` 2. Configure the `frpc.yaml` file: ```yaml serverAddr: 20.190.1.1 # Your public IP serverPort: 7000 proxies: name: nanokvm type: https customDomains: yourdomain.com # Your domain plugin: type: https2http localAddr: 127.0.0.1:80 crtPath: ./server.crt # Certificate path keyPath: ./server.key # Private key path hostHeaderRewrite: 127.0.0.1 requestHeaders: set: x from where: frp ``` 3. Start both frps and frpc services, then access [`https://yourdomain.com`](https://yourdomain.com) in your browser."},"/hardware/en/kvm/NanoKVM/network/tailscale.html":{"title":"Tailscale","content":" title: Tailscale keywords: NanoKVM, Remote desktop, Lichee, PiKVM, RISCV, tool update: date: 2024 8 13 version: v0.1 author: xwj content: Release docs > **It is recommended to use NanoKVM with Tailscale for accessing remote hosts over the internet.** *Note: Tailscale is not supported in v1.0.0 of the image. If your NanoKVM image version is v1.0.0, please [update the image](https://wiki.sipeed.com/hardware/zh/kvm/NanoKVM/start/flashing.html) first.* NanoKVM now comes with Tailscale built in, and you can start using it with just a few simple steps. There are two methods for configuring Tailscale: via the browser and via the terminal. Browser configuration is recommended. However, if you need more customization, you can also configure it via the terminal. ## Configuring via Browser 1. Enter the IP address of NanoKVM in your browser and access it. 2. Click on Settings Tailscale: ![ipconfig](../../../../assets/NanoKVM/tailscale/setting.png) 3. If prompted that Tailscale is not installed, click Install and wait for the installation to complete. If it shows as installed, proceed to the next step: ![ipconfig](../../../../assets/NanoKVM/tailscale/install.png) 4. Click Login and wait for Tailscale to start and generate a login link (this step only needs to be done once; Tailscale will start automatically on boot): ![ipconfig](../../../../assets/NanoKVM/tailscale/login.png) 5. Once the login link is generated, the browser will automatically open it. If it does not redirect automatically, manually visit the generated link. Log in to your Tailscale account and click `Connect` to add NanoKVM to your account. ![ipconfig](../../../../assets/NanoKVM/tailscale/connect.png) 6. You should now see NanoKVM under your Tailscale account. In a public network environment, run Tailscale and access NanoKVM using `100.79.236.88 (replace with your Tailscale IP)` in your browser: ![ipconfig](../../../../assets/NanoKVM/tailscale/machines.png) ## Configuring via Terminal 1. SSH into NanoKVM. 2. Execute `tailscale version` to check if Tailscale is already installed. If not, manually install it: Download [Tailscale](https://pkgs.tailscale.com/stable/tailscale_latest_riscv64.tgz) and extract it; Move the `tailscale` file to the `/usr/bin/` directory; Move the `tailscaled` file to the `/usr/sbin/` directory. 3. Execute `/etc/init.d/S98tailscaled restart` to start the Tailscale service. 4. Execute `tailscale login` and wait for the login link to be generated, then visit the generated link in your browser. 5. Click `Connect` in the browser to add NanoKVM to your Tailscale account. 6. You're all set! You can now access NanoKVM via Tailscale."},"/hardware/en/kvm/NanoKVM/network/static_ip.html":{"title":"Static IP","content":" title: Static IP keywords: NanoKVM, Remote desktop, Lichee, PiKVM, RISCV, tool update: date: 2024 8 13 version: v0.1 author: xwj content: Release docs By default, NanoKVM obtains its IP address via DHCP, which means the IP address may change. If you want to always access NanoKVM using the same IP address, you can set a static IP. Here are two methods to set a static IP: ## Setting Static IP via Router Most routers have a feature for setting static IPs for devices. If you can easily access the router's management page, it's recommended to use this method. In the router management interface, you can find the device with the name `kvm` and set the IP directly. ## Setting Static IP in NanoKVM If accessing the router's backend is not convenient, you can also set the static IP directly in NanoKVM. Here’s how: ### Setting Static IP Create a file `/boot/eth.nodhcp` in NanoKVM and edit it as follows: Each line represents a custom IP in the format `addr/netid gw[optional]`; You can preset multiple static IPs on multiple lines. ```bash # Example 192.168.0.101/24 192.168.0.1 # addr/netid gw 192.168.3.116/22 # addr/netid ``` After editing and saving the file, run the command `/etc/init.d/S30eth restart` to apply the configuration. **Note:** If all preset static IP addresses are detected by ARP as already in use, setting the static IP will fail. In this case, DHCP will be triggered to obtain an IP address. If this also fails, the IP will be forcibly set to `192.168.90.1/24`. This ensures that NanoKVM always has a usable IP address, allowing network access to operate NanoKVM. If NanoKVM does not receive a valid IP address, you will need to manually modify the file on the TF card or reflash the image to use it normally. ### Canceling the Static IP Delete the `/boot/eth.nodhcp` file to cancel the static IP setting. NanoKVM will then obtain its IP address via DHCP again."},"/hardware/en/kvm/NanoKVM/quick_start.html":{"title":"Quick Start","content":" title: Quick Start keywords: NanoKVM, Remote desktop, Lichee, PiKVM, RISCV, tool update: date: 2024 7 4 version: v0.1 author: BuGu content: Release docs update: date: 2024 8 15 version: v0.1 author: BuGu content: Update docs ## Unboxing ![](./../../../assets/NanoKVM/unbox/full_ubox.png) The Full version includes NanoKVM (with case, with card), KVM B board, 2 USB A to C cables, and Dupont cables. ![](./../../../assets/NanoKVM/unbox/lite_ubox.png) The Lite version includes NanoKVM (without case and Micro SD card) and a heatsink. ## Interface Introduction ![](./../../../assets/NanoKVM/unbox/Interface.png) + **The Full version features three USB Type C interfaces with the following names and functions** + HID Interface (also called PC USB), located below the HDMI interface, is used to connect the host, simulate keyboard and mouse, USB drive, and RNDIS devices. + AUX Interface, located above the HDMI interface, provides auxiliary power supply. + KVM B Interface (also called ATX Power), located above the Ethernet port, connects to KVM B for power control functions. ## Power Supply + NanoKVM supports 5V power supply via regular USB, with a power consumption of about 1W. Some older motherboard models may have insufficient current, requiring additional power supply through the AUX interface. ![](./../../../assets/NanoKVM/unbox/U I W.jpg) + Some motherboards' BIOS settings may default to turning off USB power when shut down. To ensure NanoKVM remains powered, please provide an additional 5V power supply through the AUX interface. + NanoKVM's USB CC interface features a 5.1K pull down resistor, allowing the use of standard PD chargers. Some low quality power supplies may output 12V directly without negotiation, which can damage NanoKVM. Note: The first batch of internal test versions of the AUX interface does not include a CC pull down resistor and cannot use C C PD chargers. Please use a conventional 5V USB power adapter. ## Wiring The wiring diagram for the NanoKVM Full version is as follows. The Lite version only includes USB C, HDMI, and Ethernet ports, and can refer to the Full version for wiring. + Use a USB C to A data cable to connect the remote host to the PC USB interface of NanoKVM (located below the HDMI interface). + Connect an HDMI (standard size) cable between the remote host and the HDMI interface of NanoKVM. ![](./../../../assets/NanoKVM/unbox/hdmi.png) + Connect NanoKVM to a router/switch using an Ethernet cable. > Note: In some cases NanoKVM Ethernet port might not work вгу ещ electromagnetic interference. In such cases shielded Ethernet cable is recommended. + Use another USB C to A data cable to connect the KVM B board to the ATX interface of NanoKVM (located above the Ethernet port). The official KVM B board features a standard 9 pin header interface compatible with most motherboards, allowing direct connection. The case's power button and Power LED can be connected to the KVM B header, as shown in the diagram (only the power button is connected here): ![](./../../../assets/NanoKVM/unbox/new ATX B.png) > Note: The KVM B board with version number 30132 cannot be directly connected to the pin header on the board with the built in 9 pin bus header of the chassis, and must be connected with the included male to female cable according to the figure above. The wiring diagram for the internal test version of the KVM B board and the host's 9 pin interface is shown below. The double row headers are interconnected, allowing the connection of the case's power button and Power LED to the other row. > Note: In the early stage, the NanoKVM reboot will briefly pull up the RESET control pin, causing the connected computer to restart, in order to avoid this problem, please do not connect the RESET jumper, which has been fixed in the later official version ![](./../../../assets/NanoKVM/unbox/old ATX B.png) ![](./../../../assets/NanoKVM/unbox/old ATX B w.png) Note: NanoKVM Cube does not monitor HDD status. ## Updates ### Update Image > **The Lite version requires preparing a Micro SD card and flashing the image before use!** The Full version comes with a pre flashed image and can skip this step. Images are updated periodically. It is recommended to update to the latest version for the best experience. For detailed instructions, please refer to [Flashing Image](https://wiki.sipeed.com/hardware/en/kvm/NanoKVM/system/flashing.html). ### Update Application New applications often bring more features or fix important bugs. It is recommended to update NanoKVM applications to the latest version. For detailed instructions, please refer to [Updating Application](https://wiki.sipeed.com/hardware/zh/kvm/NanoKVM/system/updating.html). The update records for version 2.1.1 and subsequent versions can be found here: [Application Update Log](https://github.com/sipeed/NanoKVM/blob/main/CHANGELOG.md). ## Basic Operations ### How to Obtain an IP Address The Full version of NanoKVM has an OLED display that shows the IP address on the first line when connected to the network. ![](./../../../assets/NanoKVM/unbox/oled.jpg) Lite version users, please refer to [Obtaining IP](https://wiki.sipeed.com/hardware/zh/kvm/NanoKVM/system/updating.html#%E8%8E%B7%E5%8F%96 IP). **Note:** In version 1.4.0, SSH is disabled by default. Lite users should log in to the web interface using the RNDIS IP (10.xxx.xxx.1), where you can view the IP in the settings. ### Viewing Remote Desktop Open a browser and enter the obtained IP address to access the login page. The default username and password are admin/admin. After logging in, it is recommended to **check for updates** (Settings > Check for Updates). Detailed steps can be found in [Updating Application](https://wiki.sipeed.com/hardware/zh/kvm/NanoKVM/system/updating.html). For Lite version users, or Full version users who re flashed the card and see no remote screen on the login page, please upgrade the application and refresh the webpage to start using. **Note:** In some versions, there may be issues accessing the web interface or crashes after login. Please disconnect the HDMI interface, power cycle the device, update to the latest application, and then reconnect the HDMI. **Note:** It is recommended to use Chrome browser, as other browsers may experience compatibility issues such as inability to display images or operate keyboard and mouse. ![](./../../../assets/NanoKVM/unbox/frist_update.png) ### Changing Account Password **For security, please change the account password after confirming the functions are working properly.** ![](./../../../assets/NanoKVM/unbox/unbox_9.png) **Note:** After changing the password in the web interface, the SSH login password will be synchronized. For example, if you change the web password to `123456`, you can log in using `ssh root@192.168.xxx.xxx` with `123456` as the password. ### ATX Power Control The Full version package includes NanoKVM A/B boards for controlling and viewing the host's power status. + The 5V LED (blue) on the top board indicates the power status of NanoKVM. + The PWR LED (green) indicates the power status of the host. + The POWER button functions as the host's power button, controlling the power on/off. + The RESET button acts as the host's reset button, forcing a restart when pressed while powered on. + Power status can also be viewed and controlled via the web interface. Refer to the [User Guide](https://wiki.sipeed.com/hardware/zh/kvm/NanoKVM/user_guide.html) for details."},"/hardware/en/kvm/NanoKVM/development.html":{"title":"Development","content":" title: Development keywords: NanoKVM, Remote desktop, Lichee, PiKVM, RISCV, tool update: date: 2024 9 26 version: v0.1 author: BuGu content: Release docs date: 2025 4 10 version: v1.0 author: BuGu content: Update docs In addition to implementing KVM functionality, NanoKVM has opened up some data for secondary development by users. This document describes the purpose of this data and the considerations for development. ## Obtaining Streaming Related Data Streaming and image parameters are located in the `/kvmapp/kvm` folder. ### HDMI Obtained Image Native Resolution **Image Width**: `/kvmapp/kvm/width` **Image Height**: `/kvmapp/kvm/height` Example: Check the current resolution in the terminal ```bash echo \"$(cat /kvmapp/kvm/width) * $(cat /kvmapp/kvm/height)\" ``` > Note: width/height is read only and cannot be written to. `kvm_stream` dynamically modifies vi parameters based on this data; manual modification will cause the vi subsystem to misinterpret the correct image. When either or both parameters are 0, it indicates the HDMI cable has been unplugged or the HDMI resolution is switching. ### Stream Transmission Resolution **Transmission Resolution**: `/kvmapp/kvm/res` 0: Automatic, follows HDMI native resolution 480: Transmit at 640x480 600: Transmit at 800x600 720: Transmit at 1280x720 1080: Transmit at 1920x1080 > Note: This parameter is readable and writable. Example: Set `kvm_stream` to transmit at 1280x720 resolution in the terminal ```bash echo 720 > /kvmapp/kvm/res ``` ### Stream Maximum Transmission Frame Rate **Maximum Transmission Frame Rate**: `/kvmapp/kvm/fps` **Range**: 0 60 Example: Limit `kvm_stream` to a maximum of 45 fps in the terminal ```bash echo 45 > /kvmapp/kvm/fps ``` ### Stream Current Transmission Frame Rate **Current Transmission Frame Rate**: `/kvmapp/kvm/now_fps` Example: View current stream frame rate ```bash cat /kvmapp/kvm/now_fps ``` ### Check Hardware Version NanoKVM has different versions, and there are hardware differences between versions. Please refer to the [schematic diagram]. The boot script will detect hardware differences and save them in `/etc/kvm/hw`. alpha: Early access version NanoKVM Full beta: Official version NanoKVM Full and Lite pcie: NanoKVM PCIe ### Network Related Configuration `/etc/kvm/server.yaml` For details, refer to WiKi > KVM > NanoKVM Cube > Network ### USB Status Retrieval ```bash cat /sys/class/udc/4340000.usb/state ``` configured: Connected not attached: Not connected ### HDMI Status Retrieval ```bash cat /kvmapp/kvm/state ``` 1: HDMI Normal 0: HDMI Abnormal ### ETH Status Retrieval ```bash cat /sys/class/net/eth0/carrier ``` 1: Ethernet Cable Connected 0: Ethernet Cable Disconnected (inaccurate) ### WiFi Presence The file `/etc/kvm/wifi_exist` indicates the presence of the WiFi module. ### WiFi Status Retrieval ```bash cat /kvmapp/kvm/wifi_state ``` 0: WiFi exists but not connected 1: WiFi connected ### Enable Watchdog (Real time) ```bash touch /etc/kvm/watchdog # Enable rm /etc/kvm/watchdog # Disable ``` ### Disable Ping Function ```bash touch /etc/kvm/stop_ping # Disable rm /etc/kvm/stop_ping # Enable ``` ## USB HID Simulation Devices **Initialization**: NanoKVM uses USB Gadget to simulate USB HID devices, initializing keyboard, mouse, and touchscreen in the device boot script `/etc/init.d/S03usbdev`. ### Simulated Keyboard **Device**: `/dev/hidg0` **Message**: 8 bytes ```plaintext 0x00 0x00 0xXX 0x00 0x00 0x00 0x00 0x00 ``` The fourth byte represents the ordinary key value, e.g., F11: 0x44. After sending the key value, it must be released promptly. Example: Pressing the F11 key ```bash echo ne \\\\x00\\\\x00\\\\x44\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00 > /dev/hidg0 # Press F11 key echo ne \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00 > /dev/hidg0 # Release ``` ### Simulated Mouse **Device**: `/dev/hidg1` **Message**: 4 bytes ```plaintext b8 Button s8 X axis Relative Movement s8 Y axis Relative Movement s8 Wheel ``` #### Buttons Left button down: 0x01 Right button down: 0x12 (compatible with multiple systems) Release: 0x00 Example: Clicking the left button ```bash echo ne \\\\x01\\\\x00\\\\x00\\\\x00 > /dev/hidg1 # Press left button echo ne \\\\x00\\\\x00\\\\x00\\\\x00 > /dev/hidg1 # Release ``` #### Movement (Relative Movement) X/Y axis relative movement is signed, where positive x moves right and positive y moves down. Example: Move right by 5 units, up by 1 unit ```bash echo ne \\\\x00\\\\x05\\\\xff\\\\x00 > /dev/hidg1 ``` #### Wheel The wheel is signed, where positive values move down. Example: Move down by 1 unit ```bash echo ne \\\\x00\\\\x00\\\\x00\\\\x01 > /dev/hidg1 ``` ### Simulated Touchscreen **Device**: `/dev/hidg2` **Message**: 6 bytes ```plaintext Button X axis Absolute Position Low 8 bits X axis Absolute Position High 8 bits Y axis Absolute Position Low 8 bits Y axis Absolute Position High 8 bits Wheel ``` #### Buttons Left button down: 0x01 Right button down: 0x10 Release: 0x00 Example: Clicking the left button ```bash echo ne \\\\x01\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00 > /dev/hidg2 # Press left button echo ne \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00 > /dev/hidg2 # Release ``` #### Movement (Absolute Position) X/Y are unsigned numbers, with (0x0001, 0x0001) representing the top left corner and (0x7fff, 0x7fff) representing the bottom right corner. Example: Move the mouse to the center of the screen ```bash echo ne \\\\x00\\\\xff\\\\x3f\\\\xff\\\\x3f\\\\x00 > /dev/hidg2 ``` #### Wheel The wheel is signed, where positive values move down. Example: Move down by 1 unit ```bash echo ne \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01 > /dev/hidg2 ``` ## IO The ATX power control function is implemented through IO and the external KVM B. The corresponding relationship between IO and functions is as follows: Alpha version definition (including early NanoKVM Cube) Function Linux GPIO Number PWR LED Input 504 PWR KEY Output 503 RST KEY Output 507 Beta version definition (including later NanoKVM Cube and all NanoKVM PCIe) Function Linux GPIO Number PWR LED Input 504 PWR KEY Output 503 RST KEY Output 505 + Read LED status (using Beta as an example) ```shell cat /sys/class/gpio/gpio504/value # 0 > LED on # 1 > LED off ``` + Operate power button (using Beta as an example) ```shell # Press down echo 1 > /sys/class/gpio/gpio503/value # Wait for 1 second sleep 1 # Release echo 0 > /sys/class/gpio/gpio503/value ``` + Operate reset button (using Beta as an example) ```shell # Press down echo 1 > /sys/class/gpio/gpio505/value # Wait for 1 second sleep 1 # Release echo 0 > /sys/class/gpio/gpio505/value ``` + For other IO: Please refer to [LicheeRV Nano GPIO](https://wiki.sipeed.com/hardware/zh/lichee/RV_Nano/5_peripheral.html#LicheeRV Nano%E5%BC%95%E8%84%9A%E5%9B%BE%26amp%3BLinux GPIO%E7%BC%96%E5%8F%B7%EF%BC%9A) for development. ## Precautions Users should not place their own built programs in the `/kvmapp` directory, as any updates will reset all contents within the folder. Simulated keyboard and mouse operations may conflict with operations on the front end page."},"/hardware/en/kvm/NanoKVM/user_guide.html":{"title":"User Guide","content":" title: User Guide keywords: NanoKVM, Remote desktop, Lichee, PiKVM, RISCV, tool update: date: 2024/7/4 version: v0.1 author: BuGu content: Release docs date: 2024/8/14 version: v1.1 author: BuGu content: Update docs date: 2024/12/11 version: v1.2 author: BuGu content: Modify error description ## OLED Interface ![](./../../../assets/NanoKVM/unbox/oled.jpg) + Displays the connection status of Ethernet, USB, and HDMI. Icons will invert color when connected. + IP: When Ethernet is connected, NanoKVM will automatically obtain an IP and display it on the OLED. If the gateway is unreachable, a `!` will be displayed before the IP. + RES: Shows the current transmission resolution, default is 720P. + TYPE: Displays the transmission type, currently only supports MJPG, H264 is under development. + STREAM: Shows the real time transmission frame rate. Frame difference detection is enabled by default (transmission stops when the screen is static). When the screen is static, FPS shows 0. + QUALITY: Shows compression quality, ranging from 50 100%, default is 80%. + The main interface provides an OLED sleep function to prevent screen burn in; a short press of the BOOT button can turn the OLED off or on. + After applying version `2.1.4`, the OLED automatic sleep feature has been added: After setting the sleep time in the settings, the OLED will automatically enter sleep mode after the specified time. Pressing the BOOT button can temporarily wake up the OLED. ## Management Page Features ![](./../../../assets/NanoKVM/introduce/web_ui.gif) The floating toolbar from left to right includes: Image Settings, On Screen Keyboard, Mouse Style, Image Mounting, Custom Scripts, KVM Web Terminal, WOL, ATX Control/Indicator, Settings, Full Screen, and Hide Floating Toolbar. ### Resolution, Frame Rate, and Image Quality Settings + NanoKVM supports 1080P, 720P, 600P, and 480P image transmission. Different resolutions can be selected in Image Settings > Resolution. Higher resolutions use more bandwidth and lower real time frame rates. + Note: This only changes the transmitted image size, not the HDMI input image size. To change that, please go to the host system's settings menu. + The Frame Rate setting option is used to modify the maximum transmission frame rate, which can limit network bandwidth usage. However, lower frame rates result in choppier images. Configure according to network conditions. Full version users can see the real time video frame rate on the OLED. + The Image Quality option can modify the compression ratio. If the image appears choppy or has high latency, you can reduce the image quality. + Frame Difference Detection + NanoKVM enables frame difference detection by default, stopping image transmission when the screen is static to save bandwidth. + This feature uses approximately 2.5% of CPU resources, with a 0.2s delay from static to dynamic images. Click `Display` > `Frame Difference Detection` to disable or enable this feature. ### Virtual Keyboard and Mouse Usage + The USB port of NanoKVM simulates keyboard and mouse devices. Once the browser page is opened, the system will automatically capture keyboard and mouse input and sync operations to the host connected to NanoKVM in real time. Users can choose to hide the mouse or change its display style on the screen. + For users who find it inconvenient to use a keyboard, we provide an on screen keyboard. Click the keyboard icon on the floating toolbar to bring up the on screen keyboard. ### ISO Image Mounting and Remote Installation + Besides simulating keyboard and mouse devices, the USB C port of NanoKVM also simulates a USB drive, mounting part of the TF card's storage space for installation needs. This USB drive is formatted as exFAT by default. The Full version NanoKVM has a built in TF card with approximately 21GB of storage for the simulated USB drive. + Unlike a regular USB drive, NanoKVM's virtual USB drive can store multiple images simultaneously. Before starting, users can select the system image to be installed through the web page options. Users need to download the installation images (usually ending in .iso) in advance, insert NanoKVM USB C into the computer, and copy the downloaded images directly into the USB drive (multiple systems can be copied). Then, disconnect it. Connect the remote host to NanoKVM as described above, log in to the system via the browser, click the CD icon, and select the system to be installed for ISO mounting. ![](./../../../assets/NanoKVM/guide/imgsl.png) Next, start the installation process by clicking `Power On (Short Press)` and quickly pressing the F11 key on the keyboard (keys may vary by host, refer to the host manual), select the corresponding image to boot and complete the installation process. ![](./../../../assets/NanoKVM/guide/install.png) Note: + The virtual USB drive feature is enabled by default. If not needed, it can be disabled by clicking `Settings` > `Virtual USB Drive`. + Please eject the original 21G virtual USB flash drive on the host before mounting the image to avoid data loss. + The virtual USB drive can also be used as a regular USB drive. If no image is selected in the web interface, the entire 21GB virtual USB drive will be mounted by default. + Users can also use the conventional card burning method to burn images, though it's not recommended. + The speed of copying images to NanoKVM is limited by USB2.0 transfer speed and SG2002 card writing speed, which may be slow. Users can remove the TF card, insert it into the computer, [unlock the hidden](https://jingyan.baidu.com/article/e4511cf34faece2b845eaf34.html) third partition of the TF card, and directly copy the images into it. + The virtual USB drive is also mounted to the `/data` directory of NanoKVM, allowing users to read and write to this partition directly from the NanoKVM terminal. + Canceling the virtual USB flash drive operation in the settings will force the USB flash drive to eject the USB flash drive, please eject the USB flash drive safely before setting it up to avoid data loss. ### Web Terminal + By clicking the `Terminal` > `NanoKVM Terminal` icon on the floating toolbar, users can open the web terminal and access the NanoKVM system directly without SSH. + When NanoKVM reconnects after a network disconnection or system reboot, the web terminal will prompt for re login. The username is `root` and the password is `root`. ![](./../../../assets/NanoKVM/guide/ssh.png) ### Serial Terminal NanoKVM is built on the LicheeRV Nano, which has 3 UART ports. UART0 is used for system log output by default. In the Full version of NanoKVM, UART1/2 are exposed, allowing users to expand functionality (the first batch of beta versions have holes in the shell for this purpose). ![](./../../../assets/NanoKVM/guide/uart_to_3H.jpg) Click `Terminal` on the management page, select `Serial Terminal`, choose the serial port to use, enter the baud rate, and click Start to use it. ![](./../../../assets/NanoKVM/guide/uart1.png) ![](./../../../assets/NanoKVM/guide/uart2.png) Note: The serial terminal feature uses WebSSH + picocom, and the usage is similar to picocom. ### RNDIS NanoKVM's USB will default to simulate an RNDIS USB network card (slave device), which can be used for system maintenance when the NanoKVM service is abnormal. Refer to [here](https://wiki.sipeed.com/hardware/zh/kvm/NanoKVM/system/updating.html#%E9%80%9A%E8%BF%87 usb rndis %E7%BD%91%E5%8F%A3%E8%8E%B7%E5%8F%96) to connect to a computer, and explore more usages yourself. If you do not use the RNDIS feature, it can be disabled by clicking `Settings` > `RNDIS`. Note: The NCM connection method was added after version 2.1.5, but the default remains RNDIS. To enable it, use: touch /boot/usb.ncm or create an empty file named usb.ncm in the /boot partition. ### ATX Power Control + On the right side of the floating toolbar, there are power and hard disk icons. Normally, they are gray. After powering on, the power icon turns green. + Click the power icon to see the reset button and power button (long/short press). + The Full version ATX control board is limited by the number of extension lines, only the power, reset buttons, and power light are exposed, so it is normal for the HDD LED to not light up. Lite users can extend functionality according to the schematic. Note: + The official version of NanoKVM A hardware reserves pins for the WiFi module and modifies the OLED and some ATX pins. The firmware will automatically detect the hardware version and adapt. + The Lite version of NanoKVM does not include NanoKVM A/B, and the firmware will directly recognize it as the official version. ### Settings + Switch between Chinese and English. + About NanoKVM: Click to open the Wiki. + Check for updates: When updates are available, users can click to update. The web page will automatically refresh and re login after about 15 seconds to complete the update. + Version 2.2.5 introduces a preview update feature. Enable this option to pull the latest preview version. Note: Preview applications generally include feature updates, bug fixes, and performance improvements, but there is still a chance of introducing new bugs. Please update with caution. ### About SSH + In version 2.1.6 and later, SSH can be enabled or permanently disabled from the web interface under Settings > Devices > SSH. + In version 1.4.0, SSH is disabled by default. 1. **Permanently Disable:** Execute `touch /etc/kvm/ssh_stop` to disable SSH login on the next boot. To enable it again, remove the file using `rm /etc/kvm/ssh_stop`. 2. **Temporarily Enable:** Execute `touch /boot/start_ssh_once` or create an empty file named `start_ssh_once` in the /boot partition. This will enable SSH on the next boot, and the file will be automatically deleted. ### Setting DNS + If you need to set a DNS list, create `/boot/resolv.conf`. This will enforce your own DNS configuration after booting. ### About mDNS + mDNS (Multicast DNS) is a protocol used for name resolution within a local network, allowing devices to discover and communicate with each other using hostnames instead of IP addresses. It enables automatic discovery of services and devices on the network without a central DNS server. + NanoKVM generates mDNS hostnames based on the device code to minimize conflicts when multiple devices are present. + The device name for NanoKVM can be modified in the settings and will take effect after a restart. + mDNS services can lead to higher CPU usage in complex network environments, affecting image smoothness. It is recommended to disable it when not in use: Settings > Devices > mDNS. ### About the Watchdog + The watchdog system was added in version 2.2.2 to continuously monitor the server service. If the service encounters an exception, the system will restart. By default, it is disabled. You can enable it by executing `touch /etc/kvm/watchdog` in the web terminal and disable it with `rm /etc/kvm/watchdog`. ### More Features Coming Soon! ## Network Latency Estimation Connect the host to KVM and a regular screen, play a stopwatch video, capture the remote desktop and display screen, and calculate the difference to estimate network latency. ## Hardware and Structure ### Disassembly Full version NanoKVM requires disassembly for re flashing the card. Follow the steps below to disassemble the shell. ![](./../../../assets/NanoKVM/guide/fix1.png) 1. Remove the 4 screws at the bottom. 2. Push the NanoKVM out of the shell using the HDMI and Ethernet ports. 3. Remove the heatsink to pull out the TF card. ### Differences Between Beta and Official Versions The official version hardware reserves pins for the WiFi module and modifies the OLED and ATX pin allocations as shown below. ![](./../../../assets/NanoKVM/guide/PinDefine.png) To ensure compatibility with both hardware versions, the software has been designed with adaptive features. Beta users and official version users can update with confidence. ATX Wiring: ![](./../../../assets/NanoKVM/guide/atx_2024.png) NanoKVM Full version comes with an integrated ATX control board. Beta users can add the ATX extension board to the Lite version. The official firmware for NanoKVM Full version is universal and compatible with all versions. The ATX control interface supports configurations for power light, hard disk light, reset, and power buttons. Refer to the wiring diagram for assembly. For Lite version users, the software adapts to their board, and there's no hardware auto detection feature. If users need ATX support, they can manually update the firmware to the Full version and add the necessary hardware extensions. ## Firmware and Software Updates ### Firmware Update Updating the firmware requires disassembling the Full version NanoKVM. For Lite version users, follow these steps to update: 1. Visit the official NanoKVM website to download the latest firmware. 2. Power off the NanoKVM and remove the TF card. 3. Connect the TF card to your computer using a card reader. 4. Copy the downloaded firmware to the root directory of the TF card. 5. Reinsert the TF card into NanoKVM, reassemble, and power it on. 6. The NanoKVM will automatically update the firmware. ### Software Update Users can check for software updates via the NanoKVM management page: 1. Open the NanoKVM management page in a browser. 2. Click `Settings` > `Check for Updates`. 3. If an update is available, click `Update` to begin the process. 4. The page will refresh and re login after about 15 seconds to complete the update. ### Troubleshooting + If the update process fails, try restarting NanoKVM and repeating the steps. + Ensure a stable network connection during the update. + For persistent issues, contact NanoKVM support for assistance. ## Contact and Support For further assistance and support, visit the NanoKVM [official website](https://nanokvm.com) or join the community forums to connect with other users and developers. > Note: The TF card described in this article is a microSD card End of User Guide."},"/hardware/en/kvm/NanoKVM/faq.html":{"title":"F&Q","content":" title: F&Q keywords: NanoKVM, Remote desktop, Lichee, PiKVM, RISCV, tool ## Exception Fixes **The following solutions are based on the latest application version. If you encounter issues, please update the application first. If you cannot update via the web interface, please follow the steps below for a forced update:** 1. Refer to [this link](https://wiki.sipeed.com/hardware/zh/kvm/NanoKVM/system/updating.html#%E8%8E%B7%E5%8F%96 IP) to connect the development board. 2. Execute: `python /etc/kvm/update nanokvm.py` > Users outside of China may experience download failures due to DNS issues. Please add `nameserver 119.29.29.29` or `nameserver 223.5.5.5` to `/etc/resolv.conf` and try again. > Earlier versions of the application may not have this script file. Please download [here](https://github.com/sipeed/NanoKVM/blob/main/kvmapp/system/update nanokvm.py), extract it, and grant execute permissions before trying again. ### About Password 1. After updating to version 2.1.5, if you haven't set a web password before, you will be prompted to change the password upon logging in. When you change the password, the backend `root` password will also be synchronized to the web password. If you have already changed the web password before, the backend `root` password will not be changed automatically. You can modify it using `passwd` in the terminal or click \"Reset Password\" in the web settings. 2. If the application version is greater than 2.1.5 and you forget the password, you can press the `BOOT` button on the device for more than 10 seconds (the BOOT button for the NanoKVM Cube is located next to the USB HID interface, while the PCIe version can be found on the panel. Older versions of the NanoKVM Full may not have a hole in the corresponding location and require disassembly). 3. If holding down the button does not reset the password, it may be because the application version is less than 2.1.5. Please refer to [here](https://wiki.sipeed.com/hardware/en/kvm/NanoKVM/system/flashing.html) to reflash the image. Note that reflashing the image will erase all configuration information. ### HID Keyboard and Mouse Not Working 1. Use the \"Reset HID\" feature in the web interface. 2. Some host systems have high requirements for USB keyboards and mice, needing to use \"HID Only\" mode. In this mode, USB only simulates keyboard and mouse devices. Please switch to this mode using the mouse icon in the web interface. 3. Some motherboard systems require HID keyboard and mouse devices to have a BIOS identifier. NanoKVM can create a BIOS in `/boot` to enable this feature. Execute `touch /boot/BIOS && restart`. 4. Check if the USB connection is stable. You can see if the HID icon on the OLED is lit, or use `cat /sys/class/udc/4340000.usb/state` in the web terminal. If it shows \"not connected,\" then the USB cable may be faulty. Please replace the USB cable and try again. ### BIOS Does Not Recognize HID Keyboard and Mouse 1. Some host systems have high requirements for USB keyboards and mice, needing to use \"HID Only\" mode. In this mode, USB only simulates keyboard and mouse devices that support BIOS. Please switch to this mode using the mouse icon in the web interface. 2. Use the \"Reset HID\" feature in the web interface. ### Incorrect Key Mapping for Non English Keyboards + The keyboard layout needs to be modified in the controlled host system settings. For example, to modify a French keyboard in Ubuntu: Settings > Keyboard > Input Sources > ‘+’ > Add > Search \"French,\" then add. ### STA LED Not Flashing Normally The STA LED indicates the operating status of the NanoKVM. When functioning properly, the STA LED should flash irregularly. If the STA LED is continuously on or off, or exhibits regular intermittent extinguishing, the NanoKVM may be malfunctioning. 1. If the STA LED intermittently extinguishes after powering on: The system did not detect the system on the TF card. Please check if the TF card is properly inserted and reflash the TF image. 2. If the STA LED is off for an extended period: This is usually due to a lack of power. Please check the power supply status. > If powered only by USB HID, the USB power may disconnect when the computer is shut down. Please refer to relevant documentation to set USB to always supply power in the BIOS, or use auxiliary power. > Connecting to an unconventional power supply may damage the NanoKVM and cause the STA LED to extinguish. 3. If the STA LED remains on for an extended period without flashing: This situation generally should not occur with the official system and applications. If custom functions are configured within the NanoKVM system, there is a chance it may cause the system to freeze, leaving the STA LED lit. It is recommended to reflash the image. ### Unable to Obtain IP Address 1. Lite users should first check if a TF card is inserted. The Lite version is shipped without a card by default, so users need to provide their own TF card. Please follow the instructions [here](https://wiki.sipeed.com/hardware/zh/kvm/NanoKVM/system/flashing.html) to flash the card and retry. 2. Check if the network switch supports 100M. Some newer switches do not support 100M connections; please replace the switch and try again. 3. The NanoKVM Cube (including NanoKVM Full and NanoKVM Lite) may be unable to obtain an IP address when connecting to certain power sources/HDMI. Please confirm the following: > Disconnect all interfaces and power the device using a power bank, then connect the network cable to see if an IP can be obtained. > If an IP can be obtained, reconnect HDMI/computer USB to check if the IP exists. > If the IP exists only when powered by the power bank, but disappears after connecting HDMI/computer USB, this indicates the issue. Please contact customer service to purchase an isolator to resolve it. ### No Display After Logging into the Browser Interface 1. The controlled host may be in sleep mode. Try pressing any key on the keyboard to wake it up. 2. Non Chrome browsers may experience issues with H264 not displaying, while MJPEG mode works normally. Please try again using Chrome. 3. For the PCIe version, try clicking the reset HDMI option under the \"Video\" icon. 4. For the Cube version, you can try unplugging and replugging the HDMI cable after opening the webpage. 5. Check the resolution on the OLED or enter `echo \"$(cat /kvmapp/kvm/width) * $(cat /kvmapp/kvm/height)\"` in the web terminal, and compare it with the resolution of the controlled host. If they differ, you can manually set the resolution using `echo xxx > /kvmapp/kvm/width && echo xxx > /kvmapp/kvm/height`. > If the host system is Windows, the resolution shown in display settings may not match the actual resolution. Check in Advanced > Active Signal Resolution. 6. The early test version of Full NanoKVM uses standard cables to connect to the HDMI capture board, which may not detect the HDMI signal due to poor connections. You can reconnect the cable as shown in the image below or contact customer service to purchase dedicated cables. [](./../../../assets/NanoKVM/guide/Old_fix.png) 7. Try restarting to resolve the issue: execute `reboot` in the web terminal. 8. If the above methods do not identify the problem, execute `cat /proc/cvitek/vi_dbg` in the web terminal. > If `VIDevFPS` is 0, it means NanoKVM cannot get HDMI input. Check the following issues: Is the host outputting a video signal? Is the HDMI cable damaged? Is the Cube an early version with possible connection issues? > If `VIDevFPS` is not 0 and `VIFPS` is 0, it indicates that NanoKVM is not correctly configured for HDMI parameters. The Cube can replug the HDMI to auto detect, while PCIe can click `Reset HDMI` under `Video` to auto detect. > Check if `VIInImgWidth` and `VIInImgHeight` match the actual HDMI resolution. If they are different, it means NanoKVM did not auto detect the correct HDMI parameters. Manually configure the resolution parameters as described in point 4. ### No Display After Host Wakes from Sleep 1. Check if you are using a cheap DP to HDMI (passive adapter). These types of adapters lack a proper wake mechanism and cannot notify the NanoKVM that the display has been restored. 2. For PCIe versions, you can click the \"Reset HDMI\" button to forcefully retrieve the display. 3. The Cube/Lite versions lack a reset function; please switch to an active DP adapter. ### Serious screen delay in internal network environment 1. Try replacing the switch or power supply 2. If it is invalid, please contact after sales service ### OLED Displaying Information Normally, But Unable to Open Webpage 1. Please force update the application. ### OLED Not Lighting Up The NanoKVM Full and PCIe versions come with an OLED to display information such as IP. If the OLED does not light up, please follow these steps to troubleshoot: 1. Version `2.1.4` added an OLED sleep function; pressing the BOOT button can temporarily turn on the OLED. 2. If the STA LED is flashing abnormally, first check whether the system is booting normally, and follow the steps outlined in “STA LED Not Flashing Normally” to troubleshoot. 3. Try a forced update or reflash the system. ### About Memory 1. The total memory (RAM) space of NanoKVM is 256MB, with a dedicated ion memory area used for video image processing. The memory viewed in user space will be less than 256MB. 2. Firmware versions lower than 1.3.0 reserve only 128MB of memory for user space. All images from version 1.3.0 and later increase the memory size to 158MB, which is beneficial for Tailscale to run for long periods. Users in need should update the image according to the steps [here]. 3. Enable \"Memory Optimization\" in the settings. ### Host Abnormal Restart + In the early beta version, when the Full NanoKVM ATX board is connected to the host's RESET pin, the host may restart when the NanoKVM is rebooted. Please disconnect the RESET jumper or contact customer service to purchase stable version accessories. ### Current Backflow + The early beta version of the Full NanoKVM has a current backflow issue: When the host is powered off and the USB has no power output, current will flow back into the host when connecting the auxiliary power supply. 1. It is recommended to set the USB to remain powered after the host is shut down. 2. For Full version users: Use a soldering iron to disconnect the 5V resistor or header short circuit at the indicated position in the image below, supplying power only through the auxiliary power port. ![](./../../../assets/NanoKVM/guide/fix2.png) ### Try Power Cycling to Solve Unknown Issues ### If there are network disconnections or other abnormal situations during the update, it may lead to a failed update. Please refer to the following solutions: 1. Refer to [here](https://wiki.sipeed.com/hardware/zh/kvm/NanoKVM/system/updating.html#%E8%8E%B7%E5%8F%96 IP) to connect the development board. 2. Execute `rm r /kvmapp && cp r /root/old/ / && mv /old/kvmapp && reboot` to restore the previous version. 3. Manually force the update using the method outlined above. 4. Reflash the system. ### If the Above Methods Do Not Resolve the Issue, Please Describe Your Model and Problems Encountered in the Forum, GitHub, or QQ Group. We Will Respond Patiently. + When providing feedback, please specify the version of your NanoKVM, the environment in which you are using it (motherboard model, system name, etc.), and the system configuration (e.g., image version 1.4.0; application version 2.2.5; H264; 1080P; high quality; frame rate 30). This information will help us reproduce and resolve the issue. + If there is a problem with no image display, please execute the following commands during the anomaly and paste the output logs into the issue: ```shell cat /etc/kvm/hw cat /etc/kvm/hdmi_version cat /etc/kvm/hdmi_mode ``` + Some issues require collecting runtime application logs. Please follow these steps: ```shell # Enable SSH functionality in the web interface (Settings > Devices > SSH) # Log in to SSH using the password set in the web interface. If no password is set, the default password is root. ssh root@xxx.xxx.xxx.xxx # Change the log level: /etc/kvm/server.yaml > logger > level: info to debug vi /etc/kvm/server.yaml # Use ‘i’ to edit; use ‘Esc’ + :wq to exit # Restart the KVM service /etc/init.d/S95nanokvm restart # Copy the log ``` ## Feedback Methods * MaixHub Forum: [https://maixhub.com/discussion/nanokvm](https://maixhub.com/discussion/nanokvm) * GitHub: [https://github.com/sipeed/NanoKVM](https://github.com/sipeed/NanoKVM) * QQ Group: 703230713"},"/hardware/en/kvm/NanoKVM/system/introduction.html":{"title":"System Overview","content":" title: System Overview keywords: NanoKVM, Remote desktop, Lichee, PiKVM, RISCV, tool update: date: 2024 8 14 version: v0.1 author: BuGu content: Release docs ## Firmware (Image) and Applications (APP) The NanoKVM application runs on a modified LicheeRV Nano [firmware](https://github.com/sipeed/NanoKVM/releases). You can check the version numbers of both the image and the application on the webpage > `Settings` > `About`. + Application updates include new features and bug fixes for the KVM, which can be updated directly through the webpage and are pushed frequently. + Firmware updates include major system features and hardware adaptations. These need to be downloaded from GitHub and re flashed onto the SD card, and are pushed less frequently. > The NanoKVM image is built on the LicheeRV Nano SDK and MaixCDK. It can use LicheeRV Nano resources, but LicheeRV Nano or other SG2002 products cannot use the KVM software. If you want to build HDMI input related applications on NanoKVM, please contact us for technical support. ## Open Source Repository + NanoKVM frontend is now open source, and the backend will be open sourced soon (after the GitHub repository reaches 2K stars). + [NanoKVM Open Source Repository](https://github.com/sipeed/NanoKVM) ## Firmware Version Information The Full version of NanoKVM includes KVM A/B boards. There are hardware differences between early beta versions and official versions. + Firmware version 1.2.0 and above supports both beta and official versions. + Firmware versions 1.1.0 and 1.0.0 only support the beta version hardware. The latest firmware includes more system features and ensures support for different hardware. To ensure all functions are available, please use the latest firmware. ## Image Compilation The NanoKVM image is based on the [LicheeRV Nano SDK](https://github.com/sipeed/LicheeRV Nano Build) and is built using Buildroot. Image modification Todo ## PiKVM Support Coming Soon"},"/hardware/en/kvm/NanoKVM/system/configuration.html":{"title":"Configuration File","content":" title: Configuration File keywords: NanoKVM, Remote desktop, Lichee, PiKVM, RISCV, tool update: date: 2024 8 13 version: v0.1 author: xwj content: Release docs The configuration file is located at `/etc/kvm/server.yaml`. The default configuration file content: ```yaml protocol: http port: http: 80 https: 443 cert: crt: server.crt key: server.key ``` **protocol**: Network protocol, either `http` or `https` **port**: The port on which the service runs When the protocol is `http`, the service will use the `port.http` port When the protocol is `https`, the service will use the `port.https` port When the protocol is `https`, you need to prefix the address with `https://` in the browser (e.g., `https://192.168.1.210`) If you change the port, please include the port in the browser address. For example, if you change `port.http` to 8080, the browser address will be `192.168.1.210:8080` Do not set the port to 0. If the service detects the port is 0, it will override the current configuration file with the default settings **cert**: Service certificate. This parameter must be configured if the protocol is set to `https` **crt**: Path to the certificate file **key**: Path to the private key file Note: Enabling `https` increases CPU usage, which may cause video stuttering."},"/hardware/en/kvm/NanoKVM/system/flashing.html":{"title":"Flashing the System","content":" title: Flashing the System keywords: NanoKVM, Remote desktop, Lichee, PiKVM, RISCV, tool update: date: 2024 8 13 version: v0.1 author: xwj content: Release docs *The NanoKVM Full version comes pre flashed with an image and can skip this step if desired.* ## Burning the TF card using a card reader 1. Prepare the SD Card: The Full version comes with a 32G SD card. You will need to remove it by opening the case. The Lite version requires you to prepare an SD card of at least 8G. 1. Go to [Github](https://github.com/sipeed/NanoKVM/releases/latest) to download the latest version image. 1. Install the flashing software. We recommend using [Etcher](https://etcher.balena.io). 1. Run Etcher: ![run Ethcer](../../../../assets/NanoKVM/flashing/run_etcher.png) 1. Click `Flash from file` and select the image file: ![select image](../../../../assets/NanoKVM/flashing/select_image.png) 1. Click `Select target` and choose the SD card: ![select target](../../../../assets/NanoKVM/flashing/select_target.png) 1. Click `Flash!` to start the flashing process: ![select target](../../../../assets/NanoKVM/flashing/flashing.png) 1. Wait for the flashing process to complete. ![select target](../../../../assets/NanoKVM/flashing/flashed.png) Congratulations! The image has been successfully flashed! You can now insert the SD card into the NanoKVM and proceed to the next steps. ## USB Update TF Card Image **Note: Using USB can only update the system; it cannot be used for the initial flashing.** Please ensure that the TF card already has the system installed and **the system can run normally** before using this method. For **NanoKVM cube**: Power off the device, keeping the TF card inserted. Use a sharp object like a toothpick or SIM eject tool to press down on the reset button located in the small round hole next to the USB C port. While pressing down, connect the USB cable to the computer. Wait for the USB drive to appear on your computer, and once the `boot` drive icon shows up, you can release the tool. ![select target](../../../../assets\\NanoKVM\\flashing\\boot.png) Open `Etcher`, select the image file, choose the USB drive, and click `Flash`. ![select image](../../../../assets/NanoKVM/flashing/select_image.png) Wait for the flashing process to complete. If your computer prompts you with a message like `You need to format the disk in drive G: before you can use it`, **do not** format the disk! If you do, the newly flashed system will be erased. Simply close the window, right click the disk, and select \"Eject\" to safely remove the TF card. Then, disconnect the USB C cable, power the device back on, and wait for the system to boot. The first boot may take a little longer, so it's recommended to wait for about 1 minute (until something appears on the screen). Do not power off during boot, as doing so may corrupt system files being processed (the solution for such corruption is to re flash the image). > If you cannot enter USB upgrade mode, the system files may be corrupted. In this case, use a card reader to flash the TF card."},"/hardware/en/kvm/NanoKVM/system/updating.html":{"title":"Update Application","content":" title: Update Application keywords: NanoKVM, Remote desktop, Lichee, PiKVM, RISCV, tool update: date: 2024 8 13 version: v0.1 author: xwj content: Release docs ## Power On 1. Connect the NanoKVM's wired network port with an Ethernet cable. 2. Use a standard HDMI cable to connect the remote host to the NanoKVM's HDMI port. 3. Use a USB C to A data cable to connect the remote host to the NanoKVM's PC USB port. Once all cables are connected, the NanoKVM will automatically power on. It takes about one to two minutes to boot up. ## Obtain IP Address The NanoKVM Full version will display the IP address on the screen after booting, so you can skip this step. The NanoKVM Lite version can obtain the IP address using the following methods. ### Check on the Router or Switch The NanoKVM will obtain an IP address via DHCP after booting. You can find the IP address assigned to the NanoKVM on your router or switch. ### Check via Serial Port Connect to the NanoKVM using a serial tool to get its IP address. ### Check via USB RNDIS Network Interface > If the remote host is running Windows, refer to [usb rndis network interface](https://wiki.sipeed.com/hardware/zh/lichee/RV_Nano/5_peripheral.html#usb rndis 网口) for driver installation. 1. Open a terminal on the remote host. 2. Execute the `ifconfig` command (or `ipconfig` on Windows). 3. Find the IPv4 address starting with 10 in the network list, as shown below: ![ipconfig](../../../../assets/NanoKVM/updating/ipconfig.png) 4. SSH into the NanoKVM using: `ssh root@10.223.155.1` (note, not 10.223.155.100), with the password `root`: ![ipconfig](../../../../assets/NanoKVM/updating/ssh.png) 5. After entering the NanoKVM, execute `ifconfig` and find the address of the `eth0` network card. This is the NanoKVM's IP address: ![ipconfig](../../../../assets/NanoKVM/updating/ifconfig.png) 6. Once you have the IP address, you can use it to access the NanoKVM. ## Check for Updates 1. Use any computer connected to the same network as the NanoKVM. 2. Open a browser (Chrome is recommended) and enter the obtained IP address in the address bar. 3. You will be directed to a login page. Enter the default username `admin` and password `admin` to log in: ![ipconfig](../../../../assets/NanoKVM/updating/login.png) 4. After logging in, click on check for updates: ![ipconfig](../../../../assets/NanoKVM/updating/check_for_update.png) 5. If there is an update available, click start update: ![ipconfig](../../../../assets/NanoKVM/updating/update.png) 6. Wait for the application update to complete. The browser will automatically refresh and return to the login page. Log in again. ## Update Complete Congratulations! The image and application are now updated to the latest versions. You can now control the remote host by entering the NanoKVM's IP address in your browser."},"/hardware/en/kvm/NanoKVM_USB/introduction.html":{"title":"Introduction","content":" title: Introduction keywords: NanoKVM, Remote desktop, tool, USB update: date: 2024 12 25 version: v0.1 author: xwj content: Release docs ## Introduction ![](./../../../assets/NanoKVM/usb/NanoKVM USB.png) The NanoKVM USB is a convenient tool for operations and multi device collaboration. It allows you to perform maintenance tasks without the need for a keyboard, mouse, or monitor. Using just a single computer and no additional software downloads, you can start graphical operations directly through the Chrome browser. NanoKVM USB captures HDMI video signals and transmits them to the host via USB 3.0. Unlike typical USB capture cards, NanoKVM USB also captures keyboard and mouse input from the host and sends it to the target machine in real time, eliminating the need for traditional screen and peripheral connections. It also supports HDMI loop out, with a maximum resolution of 4K@30Hz, making it easy to connect to a large display. Notably, NanoKVM USB comes with a USB A port that supports switching between HOST and TARGET sides. When a USB drive is connected, data can be easily transferred between two computers. Additional features can be explored freely. ![](./../../../assets/NanoKVM/usb/wiring.png) ## Use Cases ![](./../../../assets/NanoKVM/usb/use cases.jpg) ## Interface ![](./../../../assets/NanoKVM/usb/interface.jpg) ## Parameters NanoKVM USB Mini KVM KIWI KVM : : : : : : HDMI Input 4K@30fps 1080P@60fps 4K@30fps HDMI Loopback 4K@30fps None None USB Capture 2K@30fps 1080P@60fps 1080P@60fps USB Interface USB3.0 USB2.0 USB3.0 USB Switch Y Y N Keyboard&Mouse Y Y Y Clipboard Y Y Y Software No setup needed, works in chrome Host App install required Host App install required Latency 50 100ms 50 100ms 50 100ms Volume 57x25x23mm 61x13.5x53mm 80x80x10mm Shell Material Aluminum Alloy Aluminum Alloy Plastics Color Black / Blue / Red Black Black Price `$39.9 / $49.9` `$89 / $109` `$69 / $99` <div style \"display: flex; padding: 30px 0 20px 0\"> <img src \"./../../../assets/NanoKVM/usb/black.png\" width \"200\" height \"150\" alt \"black\" style \"margin right: 10px;\"> <img src \"./../../../assets/NanoKVM/usb/blue.png\" width \"200\" height \"150\" alt \"blue\" style \"margin right: 10px;\"> <img src \"./../../../assets/NanoKVM/usb/red.png\" width \"200\" height \"150\" alt \"red\" style \"margin right: 10px;\"> </div> ## Purchase Links [Official Taobao Store]() (To be released) [AliExpress Store]()(To be released) [Pre sale Page](https://sipeed.com/nanokvm/usb) ## Feedback If you encounter any issues or have suggestions, please contact us through the following channels: [Github issues](https://github.com/sipeed/NanoKVM) [MaixHub Forum](https://maixhub.com/discussion/nanokvm) QQ Group: 703230713"},"/hardware/en/kvm/NanoKVM_USB/quick_start.html":{"title":"Quick Start","content":" title: Quick Start keywords: NanoKVM, Remote desktop, tool, USB update: date: 2024 12 25 version: v0.1 author: xwj content: Release docs ## Interface ![](./../../../assets/NanoKVM/usb/interface.jpg) ## Wiring Use a USB3.0 or Type C cable to connect NanoKVM USB and the Host device. ![](./../../../assets/NanoKVM/usb/quick_start/wiring1.png) Use an HDMI cable to connect NanoKVM USB and Target device. ![](./../../../assets/NanoKVM/usb/quick_start/wiring2.png) Use a USB3.0 cable to connect NanoKVM USB and Target device. ![](./../../../assets/NanoKVM/usb/quick_start/wiring3.png) ## Use in Web ### Open the webpage Use Chrome browser to visit `https://usbkvm.sipeed.com`. > Please use the desktop Chrome browser, and the version number must be greater than 89. > > Mobile Chrome or other browsers that do not support [Web Serial API](https://developer.mozilla.org/en US/docs/Web/API/Serial) cannot use keyboard and mouse. ### Authorization NanoKVM USB will simulate a USB camera to transmit video and audio data. Therefore, the web page must obtain permission to use the camera. ![](./../../../assets/NanoKVM/usb/quick_start/auth_camera.png) > If you rejected the authorization or want to turn off the authorization, you can choose to reset all permissions. > > ![](./../../../assets/NanoKVM/usb/quick_start/reset.png) ### Select USB devices After obtaining authorization, We need to select two USB devices: 1. USB camera: for video and audio input; 2. Serial device: for sending keyboard and mouse data. #### USB Camera Click the drop down button and select the camera device named in the format of `USB Video`. Once the device is selected, the web page will start to display the video image. ![](./../../../assets/NanoKVM/usb/quick_start/usb_video.png) #### Serial Port Device Click the \"Select Serial Port\" button to display a list of all available serial devices, from which you can choose the corresponding serial device. > On Windows, the format is `COMx`; on macOS, it is `USB Serial`; on Linux, it is generally `/dev/ttyUSBx`. > If the browser does not support Web Serial API, the button will not be displayed and the keyboard and mouse is not available. ![](./../../../assets/NanoKVM/usb/quick_start/usb_serial.png) Setup complete! Enjoy it! ### Audio If the webpage does not play sound automatically, some manual setups are required. Here is an example of Mac controlling Windows: #### Target side On the Target side(Windows), select NanoKVM as the **audio output** device. The name of the audio device depends on whether a loopback device is connected: If the loopback device is not connected, the audio device name is `HDMI TO USB`; If the loopback device is connected, the name of the audio device is the same as the loopback device. ![](./../../../assets/NanoKVM/usb/quick_start/audio_output.jpg) #### Host side On the Host side(Mac), select NanoKVM as the **audio input** device. The name format of the audio device is generally `USB Digital Audio`. ![](./../../../assets/NanoKVM/usb/quick_start/audio_input.png) ### Mouse The mouse uses the `absolute mode` by default. In the BIOS or some systems, this mode may not work properly. Please switch to the `relative mode` if the mouse is not available. ![](./../../../assets/NanoKVM/usb/quick_start/mouse_mode.png)"},"/hardware/en/kvm/NanoKVM_USB/development.html":{"title":"Development","content":" title: Development keywords: NanoKVM, Remote desktop, tool, USB update: date: 2025 01 15 version: v0.1 author: xwj content: Release docs Visit the [Releases page](https://github.com/sipeed/NanoKVM USB/releases) to download the `browser` version file. Then unzip it and you'll get a folder named `NanoKVM USB`. ## Local deployment > If only access through the local machine (localhost), certificates can be omitted. Examples are provided here for Node.js and Python. ### Node.js Service 1. Open the terminal and enter the `NanoKVM USB` directory in the previous step. 2. Execute `npm install g http server` to install `http server`. 3. Execute `http server p 8080 a localhost` to run the service. ### Python Service 1. Open the terminal and enter the `NanoKVM USB` directory in the previous step. 2. Execute `python m http.server 8080` to run the service. ### Visit on browser After the service is started, open the browser and visit `http://localhost:8080`. Note that you can only use the `http` protocol, not the `https` protocol. ## Local network deployment > If access is needed within the local area network, a certificate is required. Examples are provided here for Node.js and Python. The difference from the above is that a certificate is required. ### Generate Certificate > Make sure you have `openssl` installed. 1. Open the terminal and enter the `NanoKVM USB` directory in the previous step. 2. Execute `openssl req newkey rsa:2048 new nodes x509 days 3650 keyout key.pem out cert.pem`. 3. The terminal ask you to enter information. You can pressing the Enter key to skip it, or you can enter information as needed. After completion, two files `key.pem` and `cert.pem` will be generated in the current directory. ### Node.js Service 1. Execute `npm install g http server` to install `http server`. 2. Execute `http server p 8080 S C cert.pem K key.pem` to run the service. ### Python Service Create a file `server.py` in the `NanoKVM USB` directory, and save it with the following code: ```python import http.server import ssl server_address ('0.0.0.0', 8080) httpd http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler) context ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER) context.load_cert_chain(certfile 'cert.pem', keyfile 'key.pem') httpd.socket context.wrap_socket(httpd.socket, server_side True) print(f\"Serving HTTPS on {server_address[0]}:{server_address[1]}\") httpd.serve_forever() ``` Execute `python server.py` to run the service。 ### Visit on browser Open the browser and enter the service address, such as `https://127.0.0.1:8080`. After opening the URL, you may be prompted with a \"Privacy Error\" and need to click to access manually: ![](./../../../assets/NanoKVM/usb/privacy error.png) ## Public network deployment > If you need to access it on the public network, it is recommended to use `Nginx`. Here is a simple configuration example. For detailed configuration methods, please refer to the `Nginx` documentation. ```nginx server { listen 80; server_name your_domain.com www.your_domain.com; # Please replace with your domain name return 301 https://$host$request_uri; } server { listen 443 ssl; server_name your_domain.com www.your_domain.com; # Please replace with your domain name root /var/www/your_website; # Please replace with the NanoKVM USB directory path index index.html index.htm; ssl_certificate /etc/nginx/ssl/cert.pem; # Please replace it with your certificate file path ssl_certificate_key /etc/nginx/ssl/key.pem; # Please replace it with your private key file path location / { try_files $uri $uri/ /index.html; } } ```"},"/hardware/en/kvm/NanoKVM_USB/faq.html":{"title":"F&Q","content":" title: F&Q keywords: NanoKVM USB, Lichee, PiKVM, RISCV, tool ## Exception Fixes ### No ttyUSBx Serial Device After Opening Web Page on Linux + This may be due to a missing serial driver. Please reinstall the CH34x driver using the following steps: 1. Download the driver from the WCH official website (download link: [https://www.wch.cn/download/CH341SER_LINUX_ZIP.html](https://www.wch.cn/download/CH341SER_LINUX_ZIP.html)), extract it, and navigate to the `driver` directory. 2. Run `uname r` to check your operating system's release version. Find the corresponding version in (this link)[https://elixir.bootlin.com/linux/v6.2/source/drivers/usb/serial/ch341.c] and copy the content into `ch341.c`. 3. Execute the `make` command to compile the driver. 4. Run `sudo make load` to install the driver. 5. Replace the old driver: `cp ch341.ko /lib/modules/$(uname r)/kernel/drivers/usb/serial/ch341.ko`. + Some Linux distributions come with `brltty`, a Braille display tool that occupies the `/dev/ttyUSB0` serial port, causing the webpage to be unable to detect it. If you are not using `brltty`, it is recommended to uninstall it with `sudo apt remove brltty`. ### Poor Video Quality + First, check if you're using a USB 2.0 cable/HOST interface. When the resolution is high, USB 2.0 may not provide sufficient bandwidth, which can lower the video quality. It is recommended to use a USB 3.0 cable. + At 2K resolution, the video quality may decrease due to the chip's encoding capability. Please switch to 1080P. + If the target device is connected to a Windows host, go to System Settings > Display Settings > Advanced Display Settings, and change to 1080P60 in the \"List all modes\" section. Also, check if the \"Desktop Resolution\" and \"Active Signal Resolution\" are consistent. ### Unable to Open NanoKVM USB Corresponding Serial Device After Opening Web Page + This may be due to other programs occupying the serial port. Please ensure it is not in use before trying again. + Linux may lack permissions to open the serial port. Execute `sudo chmod 777 /dev/ttyUSB*` in the terminal. + The Chrome browser may not have detected the serial port. Please refresh the webpage or restart Chrome. + Chrome may lack sufficient permissions. Please grant the necessary permissions. ### DP HDMI Adapter + Some passive DP to HDMI converters only perform level conversion in their internal circuitry, resulting in poor compatibility with NanoKVM USB. This manifests as the video signal not appearing when waking from sleep; the NanoKVM USB still shows a black screen, requiring manual unplugging and replugging of the HDMI cable. ### No HDMI Loop Out + The beta version hardware only supports USB power from the HOST side. Please ensure proper power supply from the HOST side during use. ### Loop Out Display + The NanoKVM USB uses its own EDID (Extended Display Identification Data) before connecting to the loop out display. After connecting to the loop out display, it switches to the EDID of the loop out display. + Since the EDID contains information about the display manufacturer and color settings, the resolution list in the Target system settings may appear different before and after connecting the loop out display. Additionally, the color of the video captured via USB may vary before and after the connection. ### Other + If the above methods do not resolve the issue, please describe your purchased model and the encountered problem on the forum, GitHub, or QQ group, and we will respond patiently. ## Known Issues ### Latency: + The ARM version of macOS experiences increased latency when connected to a Raspberry Pi via NanoKVM USB; other combinations are not affected. ## Feedback Methods [GitHub Issues](https://github.com/sipeed/NanoKVM) [MaixHub Forum](https://maixhub.com/discussion/nanokvm) QQ Group: 703230713"},"/hardware/en/kvm/NanoKVM_PCIe/introduction.html":{"title":"Introduction","content":" title: Introduction keywords: NanoKVM, Remote desktop, Lichee, PiKVM, RISCV, tool, PCIe update: date: 2024/12/11 version: v0.1 author: BuGu content: Release docs ## Introduction ![](./../../../assets/NanoKVM/introduce/NanoKVM PCIe.png) NanoKVM PCIe is a new form of NanoKVM, featuring a built in PCIe bracket that can be securely installed inside a chassis, providing a better experience for desktop users. Based on the NanoKVM Cube, the NanoKVM PCIe adds optional WiFi and PoE functionality; it comes with a PCIe slot that can draw power from the motherboard's PCIe slot. In addition, the wired connection (ETH) is more stable and meets more professional requirements. The NanoKVM series products include an HDMI input interface, which can be recognized by computers as a display to capture computer graphics. It features a USB 2.0 interface that connects to the computer host and can be recognized as HID devices such as keyboards, mice, and touchpads. It also utilizes extra storage space on the TF card, which is mounted as a USB drive. All models are equipped with a 100 Mbps Ethernet port for network transmission of video and control signals. The PCIe version of NanoKVM comes standard with a 0.49 inch OLED display to show various status information in real time, including WiFi network configuration and other information. > Note: The PCIe version of NanoKVM draws power only from the PCIe interface and cannot directly obtain images from the PCIe as a graphics/display device. To meet diverse user needs, the NanoKVM PCIe offers two optional modules for WiFi and PoE, allowing for flexible combinations during purchase. ## Use Cases ![](./../../../assets/NanoKVM/introduce/web_ui.gif) + **Server Management**: Used for real time monitoring of servers, obtaining the operating status of servers, and controlling them. + **Remote Power&Desktop**: NanoKVM frees itself from the limitations of having the host connected to the network and dependent on system software. As an external hardware solution, it directly provides remote control functionality. + **Remote Installation**: NanoKVM simulates a USB drive, allowing users to mount installation images and install operating systems, as well as access BIOS settings for the computer. + **Remote Serial Port**: NanoKVM exposes two sets of serial ports that can work in conjunction with IPMI or connect to other development boards for web based serial terminal interaction. Additionally, users can expand with more accessories as needed. + **Dual Computer Collaborative Operation**. ## Parameters Product NanoKVM (PCIe) NanoKVM (Full) PiKVM V4 Computing Unit SG2002 (RISCV) LicheeRV Nano (RISCV) CM4 (ARM) Resolution 1080P @ 60fps 1080P @ 60fps 1080P @ 60fps Video Encoding MJPEG, H264 MJPEG, H264 MJPEG, H264 Video Latency 90–230ms 90–230ms 100–230ms UEFI/BIOS ✓ ✓ ✓ Emulated USB Keyboard & Mouse ✓ ✓ ✓ Emulated USB Storage ✓ ✓ ✓ IPMI ✓ ✓ ✓ Wake on LAN ✓ ✓ ✓ Tailscale ✓ ✓ ✓ WebSSH ✓ ✓ ✓ Custom Scripts ✓ ✓ ETH 100M/10M 100M/10M 1000M/100M/10M PoE Optional Only external connection 1000M/100M/10M WiFi Optional ✓ ATX Power Control Directly connects to 9Pin power header USB interface IO control board RJ45 interface IO control board OLED Display 64*32 0.49\" white 128x64 0.96\" white 128x32 0.91\" white Serial Terminal 2 channels 2 channels Micro SD Card Yes, ready to use on boot Yes, ready to use on boot Yes Power Consumption 0.2A@5V 0.2A@5V Peak 2.6A@5V Power Input Multiple power modes Powered by PC USB <br> Also supports additional auxiliary power Requires DC 5V 3A power Cooling Silent, fanless Silent, fanless Requires active cooling fan Dimensions 66x57x18mm (without panel) 40x36x36mm 120x68x44mm ## NanoKVM PCIe Information NanoKVM uses the same SOC as Sipeed [LicheeRV Nano](https://wiki.sipeed.com/hardware/zh/lichee/RV_Nano/1_intro.html). For those interested in secondary development, you can find more information [here](https://wiki.sipeed.com/hardware/zh/kvm/NanoKVM/development.html). The NanoKVM Cube/PCIe software is now fully open source: [KVM Application Open Source Location](https://github.com/sipeed/NanoKVM), [Image Open Source Location](https://github.com/sipeed/LicheeRV Nano Build/tree/NanoKVM). > The NanoKVM image is built on the LicheeRV Nano SDK and MaixCDK, allowing compatibility with LicheeRV Nano resources. Conversely, the LicheeRV Nano or other SG2002 products cannot utilize KVM software. If you wish to develop HDMI input related applications on NanoKVM, please contact us for technical support. NanoKVM Cube and NanoKVM PCIe share the same image and applications, automatically adapting to different hardware versions. + [Download NanoKVM Image](https://github.com/sipeed/NanoKVM/releases) ## Purchase Links [Official Taobao Store]()(To be updated) [AliExpress Store]()(To be updated) [Pre sale Page](https://sipeed.com/nanokvm/pcie) ## Product Feedback If you encounter any issues or have suggestions, please contact us through the following channels: + [Github Issues](https://github.com/sipeed/NanoKVM) + [MaixHub Forum](https://maixhub.com/discussion/nanokvm) + QQ Group: 703230713"},"/hardware/en/kvm/NanoKVM_PCIe/quick_start.html":{"title":"Quick Start","content":" title: Quick Start keywords: NanoKVM, Remote desktop, Lichee, PiKVM, RISCV, tool update: date: 2024/12/11 version: v0.1 author: BuGu content: Release docs ## Unboxing ![](./../../../assets/NanoKVM/unbox/PCIe_unbox.jpg) The NanoKVM PCIe package includes the main unit, a half height PCIe bracket, two USB A to C cables, one HDMI cable, one antenna, a 16 pin male to female ribbon cable, a 4 pin female to female ribbon cable, and a small screwdriver. The main unit features Dupont jumpers (2+4P) and an SMA antenna socket. Note: The image above shows the NanoKVM PCIe version with WiFi and PoE. The version without WiFi will have one less antenna and will be missing the SMA antenna socket on the bracket. ## Interface Introduction ![](./../../../assets/NanoKVM/unbox/PCIe_new_interface.jpg) The two USB C ports on the old version of the beta hardware are reversed. Please refer to the diagram, and follow the labels on the backplate once you receive it. ![](./../../../assets/NanoKVM/unbox/PCIe Interface1.png) ![](./../../../assets/NanoKVM/unbox/PCIe Interface2.png) ## Power Supply + NanoKVM PCIe offers multiple power supply options: USB HID direct power, USB PWR IN auxiliary power, power from the PCIe slot, and PoE power (optional). You can choose any one of these options. Having multiple power sources will not interfere with the operation of the NanoKVM PCIe, but at least one power supply must be used. Note: If you need USB HID direct power, you must enable the \"Always Power USB\" setting in the BIOS, otherwise, it will affect the remote power on functionality. Note: The USB PWR IN CC interface of the NanoKVM PCIe has a 5.1K pull down resistor, allowing it to be powered by a standard PD charger. Some low quality PD chargers may pose a risk of damaging the NanoKVM PCIe. ## Assembly 1. The wiring for NanoKVM PCIe is similar to that of the Cube. Please install the NanoKVM PCIe while the main unit is powered off and disconnected from power. Only after testing all functions as normal should you install it into the case. 2. Use a USB C to A data cable to connect the remote host to the USB HID interface of the NanoKVM (located below the HDMI interface) You can also connect directly to the nine pin USB 2.0 inside the case, as shown in the diagram below. ![](./../../../assets/NanoKVM/unbox/PCIe USB.jpg) When connecting, be sure to refer to the diagram above and the internal interface diagram of the NanoKVM PCIe below. Please check repeatedly before powering on; incorrect connections may risk damaging the NanoKVM! The silkscreen for \"HDD LED\" on the connection lines of some batches is incorrect. Please adjust according to the actual situation. ![](./../../../assets/NanoKVM/unbox/PCIe Pin.jpg) 3. Use the included HDMI cable to connect the remote host to the HDMI interface of the NanoKVM. 4. Use an Ethernet cable to connect the router/switch to the NanoKVM. If you ordered the WiFi version of NanoKVM PCIe after 24/12/07, this step can be skipped. Refer to the WiFi configuration section for connecting via WiFi. 5. ATX Power Control: The principle of remote control of the main power supply is to simulate the action of pressing the power button and read the LED status to synchronize with the webpage. For this, you need to disconnect the nine pin connector on the motherboard that was originally connected to the case power button and connect it to the corresponding interface on the NanoKVM PCIe. Additionally, to allow the case button to still control the power, you need to connect the power wiring from the case to the NanoKVM PCIe. ![](./../../../assets/NanoKVM/unbox/PCIE ATX.jpg) When wiring, please be sure to refer to the diagram above and the internal interface diagram of the NanoKVM PCIe. ![](./../../../assets/NanoKVM/unbox/PCIe Pin.jpg) Note: NanoKVM PCIe does not monitor HDD status. Note: Some early users of the NanoKVM PCIe with a full height PCIe bracket may encounter issues related to the installation being too long. Please use longer screws to secure it (be careful not to overtighten) or purchase washers with specifications of outer diameter 7mm, inner diameter 4.2mm, height 3mm. If you still encounter difficulties with the installation, please contact Taobao/AliExpress customer service or email kvm@sipeed.com for support. ## WiFi Configuration + This step is only applicable to the NanoKVM PCIe version with WiFi; other versions will display \" \" in the WiFi icon position. + If you are unable to connect an Ethernet cable, NanoKVM PCIe provides an AP configuration function. Connect your phone to the AP created by NanoKVM > enter the web configuration. The specific steps are as follows: 1. Power on the device and wait for the main UI to appear. The current WiFi status will not be lit, indicating no WiFi IP. ![](./../../../assets/NanoKVM/unbox/wifi0.jpg) 2. Use the included small screwdriver to press and hold the BOOT button in the PCIe panel for more than 2 seconds. ![](./../../../assets/NanoKVM/unbox/wifi1.jpg) 3. Wait for the WiFi AP QR code to appear, then scan the code to connect to the AP. ![](./../../../assets/NanoKVM/unbox/wifi2.jpg) ![](./../../../assets/NanoKVM/unbox/wifi3.jpg) 4. Once your phone is successfully connected, a web QR code will appear on the OLED display. Scan the code to automatically redirect to the configuration page. ![](./../../../assets/NanoKVM/unbox/wifi5.jpg) ![](./../../../assets/NanoKVM/unbox/wifi6.jpg) 5. Enter the WiFi account (SSID) and password for the NanoKVM PCIe, then click OK to complete the configuration. ![](./../../../assets/NanoKVM/unbox/wifi8.jpg) ![](./../../../assets/NanoKVM/unbox/wifi9.jpg) Note: + If you cannot connect to the AP via the QR code, you can short press the BOOT button. The OLED will display the AP SSID and password, which can be used to connect through your phone's system settings. + If you cannot open the webpage via the QR code, you can short press the BOOT button, and the OLED will display the WiFi configuration address. Enter this address in your phone's browser to configure. ![](./../../../assets/NanoKVM/unbox/wifi7.jpg) + If you cannot open the configuration webpage, please turn off mobile data and try again. + If the WiFi account or password is set incorrectly, the OLED will return to step 3. Please reconnect to the AP for configuration. + Long pressing the BOOT button will exit the WiFi configuration interface. + For security reasons, a random AP password will be generated each time you configure WiFi. It is recommended to follow the above steps to complete the configuration. ## Updates ### Update Application New applications often bring more features or fix important bugs. It is recommended to update NanoKVM applications to the latest version. For detailed instructions, please refer to [Updating Application](https://wiki.sipeed.com/hardware/zh/kvm/NanoKVM/system/updating.html). The update records for version 2.1.1 and subsequent versions can be found here: [Application Update Log](https://github.com/sipeed/NanoKVM/blob/main/CHANGELOG.md). ## Basic Operations ### How to Obtain an IP Address The PCIe version of NanoKVM comes with an OLED display, which will show the IP address after connecting to the network. For the WiFi version of NanoKVM PCIe, the IP addresses obtained via ETH and WiFi will alternate on the display. The IP address with an 'E' prefix is the ETH IP, while the one with a 'W' prefix is the IP obtained via WiFi. ![](./../../../assets/NanoKVM/unbox/wifi9.jpg) ### Viewing Remote Desktop Enter the obtained IP directly in your browser to access the login page. The default username and password are both admin. After logging in, it is recommended to change your password and [update](https://wiki.sipeed.com/hardware/zh/kvm/NanoKVM/system/updating.html) to the latest applications. ![](./../../../assets/NanoKVM/unbox/frist_update.png) **Note:** It is recommended to use the Chrome browser, as other browsers may experience compatibility issues such as inability to display the screen or operate the keyboard and mouse. **Note:** In some versions, there may be issues accessing the web interface or crashes after login. Please disconnect the HDMI interface, power cycle the device, update to the latest application, and then reconnect the HDMI. ### ATX Power Control If the power control interface is connected, you can remotely control the computer's power on from the web page. + The web interface provides power status indicators and functions for the power and reset buttons, but it cannot monitor the HDD activity light status."},"/hardware/en/kvm/NanoKVM_PCIe/user_guide.html":{"title":"User Guide","content":" title: User Guide keywords: NanoKVM, Remote desktop, Lichee, PiKVM, RISCV, tool update: date: 2024/12/10 version: v0.1 author: BuGu content: Release docs ## OLED Interface On the NanoKVM PCIe, the OLED has two interfaces: the main interface and the WiFi configuration interface, which can be switched by long pressing the BOOT button for 2 seconds. **Main Interface:** ![](./../../../assets/NanoKVM/unbox/wifi9.jpg) + Displays the connection status for Ethernet, USB, and HDMI. The icons will change to an inverted color when connected. + IP: After connecting the Ethernet, the NanoKVM will automatically obtain an IP address and display it on the OLED. The WiFi version will automatically switch the IP. + Resolution: Displays the physical resolution of the HDMI, such as 1920x1080. + FPS: Shows the real time transmission frame rate. + The main interface provides an OLED sleep function to prevent screen burn in. You can short press the BOOT button to turn the OLED off or on. + After applying version `2.1.4`, the OLED automatic sleep feature has been added: After setting the sleep time in the settings, the OLED will automatically enter sleep mode after the set time. Pressing the BOOT button can temporarily wake up the OLED. **WiFi Configuration Interface** (not available for versions without WiFi): ![](./../../../assets/NanoKVM/unbox/wifi2.jpg) + Sequentially displays the WiFi configuration process: Creating WiFi AP > WiFi QR code > Web QR code. + After a successful WiFi connection, it will automatically exit this interface. + For detailed WiFi configuration steps, please refer to [Configuring WiFi](https://wiki.sipeed.com/hardware/zh/kvm/NanoKVM_PCIe/quick_start.html#WiFi 配网). ## Management Page Functions ![](./../../../assets/NanoKVM/introduce/web_ui.gif) The floating toolbar from left to right includes: image settings, on screen keyboard, mouse style, image mounting, custom scripts, KVM web terminal, WOL, ATX control/indicator, settings, full screen, and hide floating toolbar. ### Resolution, Format, Frame Rate, and Image Quality Settings + NanoKVM supports image transmission at 1080P, 720P, 600P, and 480P resolutions. You can select different resolutions in the image settings under \"Resolution.\" Higher resolutions require more bandwidth and result in lower real time frame rates. In Auto mode, the transmission resolution will follow the physical resolution of the host's HDMI. + Note: This only modifies the size of the transmitted image and does not change the size of the HDMI input image. For adjustments, please go to the host system's settings menu. + Format Settings: Currently, NanoKVM supports two formats: MJPEG and H264. + MJPEG format transmits each frame of the image, offering relatively high image quality with predictable latency, but it consumes more bandwidth. + H264 format transmits video stream data, resulting in smaller data size and lower latency, especially noticeable at high quality. + The frame rate setting option allows you to modify the maximum frame rate of the transmission. This can help limit network bandwidth usage, but lower frame rates may result in choppy images. Please configure this based on your network conditions. Full version users can see the real time video frame rate on the OLED. + The image quality option modifies the compression ratio of the image. If you find the image choppy or experiencing high latency, you can lower the image quality. + In MJPEG format, low, medium, high, and lossless correspond to image compression ratios of 50%, 60%, 80%, and 100%, respectively. + In H264 format, low, medium, high, and lossless correspond to transmission bit rates of 1000Kbps, 2000Kbps, 3000Kbps, and 5000Kbps, respectively. ### Virtual Keyboard and Mouse Usage + The USB interface of NanoKVM simulates keyboard and mouse devices. Once you open the browser page, the system will automatically capture keyboard and mouse inputs and synchronize the actions in real time to the host connected to NanoKVM. Users can choose to hide the mouse or change its display style on the screen. + For users who find it inconvenient to use a keyboard, we provide an on screen keyboard that can be accessed by clicking the keyboard icon in the floating toolbar. + In rare cases, the HID keyboard and mouse may not control the host. Please click \"Reset HID\" and try again. + Some BIOS require the mouse to operate in relative movement mode. Please modify this in the web interface under \"Mouse Mode.\" + Some BIOS require the keyboard and mouse to operate in a mode with the BIOS mark. Please execute `/touch /boot/BIOS && reboot` in the web terminal. ### ISO Image Mounting and Remote Installation + The USB C port of Nano KVM not only simulates keyboard and mouse devices but also simulates a USB drive, mounting a portion of the TF card's storage space for installation purposes. This USB drive is formatted as exFAT by default, and the Full version of NanoKVM has a built in TF card with a simulated USB drive size of approximately 21GB. + Unlike a regular USB drive, the virtual USB drive of NanoKVM can store multiple images simultaneously. Before booting, you can select the system image to mount via the web page options. Users need to download the desired installation image (usually ending with .iso) in advance, insert the NanoKVM USB C into the computer, and copy the downloaded image directly to the USB drive (multiple systems can be copied). You can then safely remove it. Follow the steps above to connect the remote host with Nano KVM. After logging into the system via the browser, click the disk icon and select the system to be installed to achieve ISO mounting. ![](./../../../assets/NanoKVM/guide/imgsl.png) Next, start the installation process by clicking Power On, then quickly press the F11 key on the keyboard (the key may vary depending on the host, please refer to the host's documentation). Select the corresponding image to boot and complete the installation process. ![](./../../../assets/NanoKVM/guide/install.png) Note: + The virtual USB drive function is enabled by default. If not needed, it can be disabled by clicking `Settings` > `Virtual USB Drive`. + Please safely eject the existing 21GB virtual USB drive on the host before mounting the image to avoid data loss. + The virtual USB drive can also be used as a regular USB drive. When no image is selected on the web interface, the entire 21GB virtual USB drive is mounted by default. + Users can also use the conventional method to burn the image onto a card, but this is not recommended. + The speed of copying images into NanoKVM is limited by the USB 2.0 transfer speed and SG2002 card writing speed, which may be relatively slow. Users can remove the TF card, insert it into a computer, and [unhide](https://jingyan.baidu.com/article/e4511cf34faece2b845eaf34.html) the third partition of the TF card to directly copy the image into it. + The virtual USB drive is also mounted to the NanoKVM’s `/data` directory, allowing users to read and write directly to that partition within the NanoKVM terminal. + Canceling the virtual USB drive operation in the settings will forcibly eject the USB drive. Please safely eject the USB drive first before making changes to avoid data loss. ### Web Terminal + Users can open the web terminal by clicking the `Terminal` > `NanoKVM Terminal` icon in the floating toolbar, allowing direct access to the NanoKVM system without needing SSH. + When the NanoKVM disconnects and reconnects to the network or after a system restart, the web terminal interface will prompt for re login, with the username `root` and password `root`. ![](./../../../assets/NanoKVM/guide/ssh.png) ### Serial Terminal NanoKVM is built on the LicheeRV Nano platform, which has a total of three serial ports. UART0 is used by default for outputting system logs. In the NanoKVM Full version, UART1 and UART2 are also available for users to expand functionality (the first batch of beta versions only has openings on the casing). ![](./../../../assets/NanoKVM/guide/uart_to_3H.jpg) Click on `Terminal` in the management page, select `Serial Terminal`, choose the serial port you want to use, enter the baud rate, and click Start to begin using it. ![](./../../../assets/NanoKVM/guide/uart1.png) ![](./../../../assets/NanoKVM/guide/uart2.png) Note: The serial terminal function is built using WebSSH and picocom, and its usage is the same as that of picocom. ### RNDIS The USB of NanoKVM will default to virtualizing an RNDIS USB network card (as a device). This can be used for system maintenance when the NanoKVM service is abnormal. Please refer to [here](https://wiki.sipeed.com/hardware/zh/kvm/NanoKVM/system/updating.html#%E9%80%9A%E8%BF%87 usb rndis %E7%BD%91%E5%8F%A3%E8%8E%B7%E5%8F%96) for connecting to a computer, and feel free to explore more uses. If you do not wish to use the RNDIS function, you can click `Settings` > `RNDIS` to disable it. Note: The NCM connection method was added after version 2.1.5, but the default remains RNDIS. To enable it, use: touch /boot/usb.ncm or create an empty file named usb.ncm in the /boot partition. ### ATX Power Control + On the right side of the floating toolbar, there are power and hard drive icons. Under normal circumstances, they are gray; after powering on, the power icon turns green. + Clicking the power icon shows the restart button and power button (long/short press). + The ATX control board for the Full version is limited by the number of pins in the extension cable, only allowing for the power, restart button, and power indicator to be connected. It is normal for the hard drive light not to be illuminated. ### Settings + Switch between Chinese and English. + About NanoKVM: Click to open the Wiki. + Check for updates: When updates are available, users can click to update. After about 15 seconds, the webpage will automatically refresh and re login to complete the update. + Version 2.2.5 introduces a preview update feature. Enable this option to pull the latest preview version. Note: Preview applications generally include feature updates, bug fixes, and performance improvements, but there is still a chance of introducing new bugs. Please update with caution. ### About SSH + In version 2.1.6 and later, SSH can be enabled or permanently disabled through the web interface. You can do this in **Settings > Devices > SSH**. + In version 1.4.0 and later, SSH is disabled by default. 1. **Permanently Disable:** Execute `touch /etc/kvm/ssh_stop` to disable SSH login on the next boot of NanoKVM. To enable it again, delete the file using `rm /etc/kvm/ssh_stop`. 2. **Temporarily Enable:** Execute `touch /boot/start_ssh_once` or create an empty file named `start_ssh_once` in the /boot partition. This will enable SSH on the next boot of NanoKVM, and the file will be automatically deleted. ### Setting DNS + If you need to set a DNS list, create `/boot/resolv.conf`. This will enforce your own DNS configuration after booting. ### About mDNS + mDNS (Multicast DNS) is a protocol used for name resolution within a local network, allowing devices to discover and communicate with each other using hostnames instead of IP addresses, without needing a central DNS server. + NanoKVM generates mDNS hostnames based on the device code to minimize conflicts when multiple devices are present. + The device name for NanoKVM can be modified in the settings and will take effect after a restart. + mDNS services can lead to higher CPU usage in complex network environments, affecting image smoothness. It is recommended to disable it when not in use: **Settings > Devices > mDNS**. ### About the Watchdog + The watchdog system was added in version 2.2.2 to continuously monitor the server service. If the service encounters an exception, the system will restart. By default, it is disabled. You can enable it by executing `touch /etc/kvm/watchdog` in the web terminal and disable it with `rm /etc/kvm/watchdog`. ### More Features Coming Soon! ## Hardware and Structure The NanoKVM PCIe consists of two parts: the mainboard and the USB interface board, connected via a 2P+4P ribbon cable. The USB interface board only exposes the USB HID and USB PWR interfaces. When the USB HID needs to connect to the internal pins of the mainboard, the 4P ribbon cable can be disconnected. The PCIe full height bracket is secured to the mainboard with two screws. To replace it with a half height bracket, please unscrew the screws and replace it. Due to the positioning of interfaces in PCIe specifications, the HDMI and lower USB ports are relatively close together. Some HDMI connectors may be thick and could interfere with the USB interface. Please use the HDMI cable provided in the packaging to connect."},"/hardware/en/modules_spmod/spmod_eink.html":{"title":"SPMOD - Eink","content":"# SPMOD Eink ## 概述 <img src \"../../assets/spmod/spmod_eink/sp_eink.png\" alt \"XXX\" style \"zoom:40%;\" /> SPMOD_Eink(墨水屏模块)采用 GDEW0154M09 电子墨水屏。 ## SPMOD Eink 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 通过SP MOD SPI接口与屏幕底板相连 电子墨水屏：GDEW0154M09是一款1.54”，SPI接口控制，拥有24P FPC(0.5mm间距)接口的电子墨水屏。拥有超广可视角。 支持 1 bit 黑/白显示 分辨率：200x200 模块尺寸：35*30*3.8mm ### GDEW0154M09 电子墨水屏介绍 功能特点： 参数 工作电压 2.3V~3.6V 工作电流 1~3mA 工作温度范围 40℃~85℃ 休眠电流 <5uA 屏幕大小 1.54英寸 有效显示区域 27.6mm 分辨率 200*200 色彩 1 bit 黑/白显示 对外接口 24P FPC (0.5mm间距) > 内部集成电路包含门缓冲器、源缓冲器，接口，时序控制逻辑，振荡器，DC DC，SRAM，LUT，VCOM ### SPMOD_Eink 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 CS I SPI片选引脚 3 D/C I 数据/命令输入切换引脚 4 RES I 模块复位引脚，低有效 5 3V3 V 模块电源输入正 6 SCK I SPI串行时钟引脚 7 SI I/O MOSI数据引脚，主机输出从机输入 8 BSY O BUSY状态输出引脚 <img src \"../../assets/spmod/spmod_eink/sp_eink_back.png\" height \"300\" /> 接线方式： MCU:FUN(IO) SP_Eink : : : : GPIOHS(IO_7) RES SPIOHS(IO_15) D/C SPIOHS(IO_20) CS SPI:SCK(IO_21) SCK SPI:MOSI(IO_8) SI GPIOHS(IO_6) BSY 2.3 3.6V 3.3V GND GND <img src \"../../assets/spmod/spmod_eink/connection.png\" height \"250\"> ### 基本指令列表 指令 功能 : : : : 0x10 开始发送黑白图像 0x13 开始发送红白图像 0x12 刷新图像到屏幕 *更多指令信息参考[GDEW0154M09.pdf](https://dl.sipeed.com/shareURL/MAIX/HDK/Spmod_CN/sp_eink)* ## 使用例程 * 流程 1. 初始化配置 2. 创建 Image 并填充 3. 发送图像并刷新 ### C 示例： ```c spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0); fpioa_set_function(SPI_Eink_CS_PIN_NUM, FUNC_SPI1_SS0); // SPI_Eink_CS_PIN_NUM: 20; fpioa_set_function(SPI_Eink_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_Eink_SCK_PIN_NUM: 21; fpioa_set_function(SPI_Eink_MOSI_PIN_NUM, FUNC_SPI1_D0); // SPI_Eink_MOSI_PIN_NUM: 8; fpioa_set_function(SPI_Eink_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_DC_GPIO_NUM); // SPI_Eink_DC_PIN_NUM: 21; fpioa_set_function(SPI_Eink_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_RST_GPIO_NUM); // SPI_Eink_RST_PIN_NUM: 7; fpioa_set_function(SPI_Eink_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_BL_GPIO_NUM); // SPI_Eink_BL_PIN_NUM: 6; gpiohs_set_drive_mode(SPI_Eink_DC_GPIO_NUM, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(SPI_Eink_RST_GPIO_NUM, GPIO_DM_OUTPUT); gpiohs_set_pin(SPI_Eink_DC_GPIO_NUM, GPIO_PV_HIGH); gpiohs_set_pin(SPI_Eink_RST_GPIO_NUM, GPIO_PV_HIGH); gpiohs_set_drive_mode(SPI_Eink_BL_PIN_NUM, GPIO_DM_INPUT_PULL_UP); gpiohs_set_pin_edge(SPI_Eink_BL_PIN_NUM, GPIO_PE_BOTH); EPD_DisplayInit(); //EPD init //Paint initialization Paint_NewImage(BlackImage, EPD_WIDTH, EPD_HEIGHT, 270, WHITE); //Set screen size and display orientation Paint_SelectImage(BlackImage); //Set the virtual canvas data storage location Paint_Clear(WHITE); //clear paint Paint_DrawString_EN(0, 0, \"sipeed\", &Font8, WHITE, BLACK); //5*8 Paint_DrawString_EN(0, 10, \"sipeed\", &Font12, WHITE, BLACK); //7*12 Paint_DrawString_EN(0, 25, \"sipeed\", &Font16, WHITE, BLACK); //11*16 Paint_DrawString_EN(0, 45, \"sipeed\", &Font20, WHITE, BLACK); //14*20 Paint_DrawString_EN(0, 80, \"sipeed\", &Font24, WHITE, BLACK); //17*24 EPD_FullDisplay(BlackImage, BlackImage, 0); //display image ``` ### MaixPy 例程： ```python spi1 SPI(SPI.SPI1, mode SPI.MODE_MASTER, baudrate 600 * 1000, polarity 0, phase 0, bits 8, firstbit SPI.MSB, sck 21, mosi 8) fm.register(20, fm.fpioa.GPIOHS20, force True) # SPI_Eink_SS_PIN_NUM: 20; fm.register(15, fm.fpioa.GPIOHS15, force True) # SPI_Eink_DC_PIN_NUM: 15; fm.register(6, fm.fpioa.GPIOHS6, force True) # SPI_Eink_BUSY_PIN_NUM: 6; fm.register(7, fm.fpioa.GPIOHS7, force True) # SPI_Eink_RST_PIN_NUM: 7; cs GPIO(GPIO.GPIOHS20, GPIO.OUT) dc GPIO(GPIO.GPIOHS15, GPIO.OUT) busy GPIO(GPIO.GPIOHS6, GPIO.IN, GPIO.PULL_DOWN) rst GPIO(GPIO.GPIOHS7, GPIO.OUT) epd SPEink(spi1, cs, dc, rst, busy, SPEink_WIDTH, SPEink_HEIGHT, SPEink_ROTATION) epd.init() img image.Image() img img.resize(200, 200) img.draw_line(0, 0, 100, 100) epd.display(img) ``` ### 运行环境 语言 开发板 SDK/固件版本 : : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 *MaixPy固件建议自行从最新源码编译* ### 运行结果 * C <img src \"../../assets/spmod/spmod_eink/sp_eink_c.png\" height \"250\" /> * MaixPy <img src \"../../assets/spmod/spmod_eink/sp_eink_py.png\" height \"250\" /> ### 移植 修改以下参数即可 * C ```c // board_config.h #define SPI_INDEX 1 #define SPI_SCLK_RATE 600 * 1000 #define SPI_CHIP_SELECT_NSS 0 //SPI_CHIP_SELECT_0 #define SPI_Eink_CS_PIN_NUM 20 #define SPI_Eink_SCK_PIN_NUM 21 #define SPI_Eink_MOSI_PIN_NUM 8 #define SPI_Eink_DC_PIN_NUM 15 #define SPI_Eink_BL_PIN_NUM 6 #define SPI_Eink_RST_PIN_NUM 7 #define SPI_Eink_DC_GPIO_NUM 15 #define SPI_Eink_BL_GPIO_NUM 6 #define SPI_Eink_RST_GPIO_NUM 7 ``` * MaixPy ```python ################### config ################### SPI_Eink_NUM SPI.SPI1 SPI_Eink_DC_PIN_NUM const(15) SPI_Eink_BUSY_PIN_NUM const(6) SPI_Eink_RST_PIN_NUM const(7) SPI_Eink_CS_PIN_NUM const(20) SPI_Eink_SCK_PIN_NUM const(21) SPI_Eink_MOSI_PIN_NUM const(8) SPI_Eink_FREQ_KHZ const(600) ############################################## ``` ## 参考设计 SPMOD_Eink 尺寸图： <img src \"../../assets/spmod/spmod_eink/sipeed_spmod_eink.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maixhub.com](https://maixhub.com) SDK 相关信息 [https://dl.sipeed.com/shareURL/MAIX/SDK](https://dl.sipeed.com/shareURL/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/shareURL/MAIX/HDK](https://dl.sipeed.com/shareURL/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群 862340358 "},"/hardware/en/modules_spmod/spmod_extender.html":{"title":"SPMOD - Extender","content":"# SPMOD Extender ## 概述 ![](../../assets/spmod/spmod_extender/sp_extender.png) SPMOD_Extender(8PIN扩展模块) ## SPMOD Extender 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 利用SP Extender将SP MOD一分为四，包含三个相连的2线接口（连接至SP MOD的D0和D1）和一个单独的四线接口（连接至SP MOD的D2 D5） 模块尺寸：35.0\\*20.0\\*1.6mm ## 概括 功能特点： 参数 两线SP MOD接口*3 连接至SP MOD的D0和D1，可用作UART (最多连接一个设备)或I2C（最多连接三个设备）或者两个独立的GPIO 四线SP MOD接口 连接至SP MOD的D2 D5，通常用作SPI接口，也可用作四个杜立的GPIO接口 外部供电电压 视连接的模块而定 外部供电电流 视模块工作情况而定，通常小于1000mA 工作温度 40℃ ~ 85℃ ## 参考设计 SPMOD_Extender 尺寸图： <img src \"../../assets/spmod/spmod_extender/sipeed_spmod_extender.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（四群） 862340358"},"/hardware/en/modules_spmod/spmod_tof.html":{"title":"SPMOD - TOF","content":"# SPMOD TOF ## 概述 <img src \"../../assets/spmod/spmod_tof/sp_tof.png\" style \"padding right:100px;\" width \"\" height \"300\" /> SPMOD_TOF(TOF 模块) 采用 VL53L0X 模块。 ## SPMOD TOF 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 利用SP MOD I2C 和 TOF 模块通讯 ToF模块：VL53L0X模块是一个I2C接口，长距离单点飞行时间测定（ToF）模块，它具有高性能和可靠性 最远测量距离4000mm，最高50Hz的测量刷新率。典型前方测量角度27° 可选配红色激光器瞄准头，通过XSHUT引脚控制激光器开关 模块尺寸：25.0\\*10\\*3.15mm ### VL53L0X 介绍 VL53L0X 功能特性： 测量距离 最大 4000mm(4m) 工作刷新率 50Hz 测量角度（正面） 27° 通信接口 I2C 工作电压 2.6V~3.5V (选用红色激光时： 2.8V~3.3V) 工作状态电流 18mA (选用红色激光时： 20mA) 工作温度 40℃ 80℃ 睡眠状态电流 5uA ### SPMOD_TOF 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 IRQ I 模块中断输入引脚，连接至 VL53L0X 的GPIO1 3 NC NC 悬空引脚，无功能 4 SDA I/O 模块 I2C 串行数据引脚 5 3V3 V 模块电源输入正 6 NC NC 悬空引脚，无功能 7 SHT I 模块休眠&激光头控制引脚 #注释 8 SCL I 模块 I2C 串行时钟引脚 > SHT 低电平时，模块休眠 &激光头关闭 <img src \"../../assets/spmod/spmod_tof/back.png\" height \"300\" /> 接线方式: MCU:FUN(IO) SP_RFID : : : : I2C:SDA(IO_7) SDA NC(IO_15) NC NC(IO_20) IRQ NC(IO_21) NC GPIOHS(IO_8) SHT I2C:SCL(IO_6) SCL 2.8~3.5V 3.3V GND GND <img src \"../../assets/spmod/spmod_tof/connection.png\" height \"250\"> ## 使用例程 * 流程 1. 初始化 2. 校准(可选) 3. 读取距离(多种模式可选) ### C 示例： ```c //set io mux fpioa_set_function(VL53L0X_SCL, FUNC_I2C0_SCLK + VL53L0X_I2C_DEVICE * 2); fpioa_set_function(VL53L0X_SDA, FUNC_I2C0_SDA + VL53L0X_I2C_DEVICE * 2); fpioa_set_function(VL53L0X_SHT, FUNC_GPIOHS0 + VL53L0X_SHT); gpiohs_set_drive_mode(VL53L0X_SHT, GPIO_DM_OUTPUT); //i2c init maix_i2c_init(VL53L0X_I2C_DEVICE, 7, VL53L0X_I2C_FREQ_KHZ * 1000); while (vl53l0x_init(&vl53l0x_dev)) { printf(\"VL53L0X init error!!!\\r\\n\"); msleep(500); } printf(\"VL53L0X init success!\\r\\n\"); // adjusting printf(\"VL53L0X adjusting\\r\\n\"); vl53l0x_calibration_test(&vl53l0x_dev); // get distance printf(\"VL53L0X start work\\r\\n\"); vl53l0x_general_test(&vl53l0x_dev); ``` ### MaixPy 例程： ```python fm.register(VL53L0X_SHT, fm.fpioa.GPIOHS0, force True) XSHUT GPIO(GPIO.GPIOHS0, GPIO.OUT) i2c I2C(VL53L0X_I2C_NUM, freq VL53L0X_FREQ, scl VL53L0X_SCL, sda VL53L0X_SDA) # create obj and read distance \t tof VL53L0X(i2c) \t while True: mm tof.read() utime.sleep_ms(100) print(mm) ``` ### 运行环境 语言 开发板 SDK/固件版本 : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 ### 运行结果 * C <img src \"../../assets/spmod/spmod_tof/log_c.png\" height \"200\" /> * MaixPy [None] ## 移植 修改以下参数即可适配其他 K210 开发板. * C ```c // board_config.h #define VL53L0X_I2C_DEVICE 0 // i2c device number #define VL53L0X_I2C_FREQ_KHZ 100 // i2c frequence #define VL53L0X_SCL 6 // scl #define VL53L0X_SDA 7 // sda #define VL53L0X_SHT 8 // sht ``` * MaixPy ```python ################### config ################### VL53L0X_I2C_NUM const(I2C.I2C0) VL53L0X_FREQ const(100000) VL53L0X_SCL const(6) VL53L0X_SDA const(7) VL53L0X_SHT const(8) ############################################## ``` ## 参考设计 SPMOD_TOF 尺寸图： <img src \"../../assets/spmod/spmod_tof/sipeed_spmod_tof.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（四群） 862340358"},"/hardware/en/modules_spmod/spmod_joystick.html":{"title":"SPMOD - JoyStick","content":"# SPMOD JoyStick ## 概述 <img src \"../../assets/spmod/spmod_joystick/sp_joystick.png\" width \"\" height \"300\" /> SPMOD_JoyStick (JoyStick模块)。 ## SPMOD JoyStick 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 通过SP MOD SPI接口连接 可通过外部适配器单独连接7.2V~9V DC，为手柄的振动马达供电 内置升压电路，轻松驱动手柄 PSX/PS2兼容 模块尺寸：35.0\\*20.0\\*13.3mm ### SPMOD_JoyStick 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 CS I SPI片选引脚 3 SO I/O MISO数据引脚，手柄信号输出 4 NC NC 悬空引脚，无功能 5 3V3 V 模块电源输入正 6 SCK I SPI串行时钟引脚 7 SI I/O MOSI数据引脚，手柄信号输入 8 ACK O 确认信号输出引脚 <img src \"\" width \"500\" /> ## 使用例程 待更新 ## 参考设计 SPMOD_JoyStick 尺寸图： <img src \"../../assets/spmod/spmod_joystick/sipeed_spmod_joystick.png\" height \"250\" /> ## 资源链接 资源 链接 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（四群） 862340358"},"/hardware/en/modules_spmod/spmod_lora.html":{"title":"SPMOD - LoRa","content":"# SPMOD LoRa ## 概述 <img src \"../../assets/spmod/spmod_lora/sp_lora.png\" width \"\" height \"300\" /> SPMOD_LoRa(LoRa 模块)采用 M XL8 模块。 ## SPMOD LoRa 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 利用 SP MOD SPI 和 LoRa 模块通讯 LoRa 模块：M XL8 SX1276 模块是一个 SPI 接口，内置 LoRaTM 调制解调器和可调功率放大器的 LoRa 模块，它具有高性能和可靠性 370MHz 1200MHz, 最大20dBm (100mW)持续发射功率 模块尺寸：25.0\\*10.0\\*4.3mm ### M XL8 SX1276 LoRa 模块 介绍 功能特点： 参数 工作频段 370MHz 1200Mhz 发射功率 20dBm（最大） 通信接口 SPI 工作电压 1.8V~6.3V 工作温度 40℃ 80℃ 天线 外置天线，IPEX或焊接 接收灵敏度 148dbm RSSI动态范围 127dB 最大链路预算 168dB 收发状态电流 9.9mA 睡眠状态电流 50nA 调制方式 FSK, GFSK, MSK, GMSK, LoRaTM及OOK > 内置LoRaTM调制解调器，内置CRC，继承+12dBm可调PA+LNA ### SPMOD_lora 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 CS I/O SPI片选引脚 3 SO I/O MISO数据引脚，主机输入从机输出 4 RST I 模块复位引脚，低有效 5 3V3 V 模块电源输入正 6 SCK I SPI串行时钟引脚 7 SI I/O MOSI数据引脚，主机输出从机输入 8 IRQ I 连接至模块DIO0，可编程决定功能 <img src \"../../assets/spmod/spmod_lora/back.png\" width \"300\" /> 接线方式: MCU:FUN(IO) SP_LCD : : : : GPIOHS7(IO_7) RST SPI:MISO(IO_15) SO SPI:SS0(IO_20) CS SPI:SCK(IO_21) SCK SPI:MOSI(IO_8) SI GPIOH(IO_6) IRQ 1.8 6.3V 3.3V GND GND <img src \"../../assets/spmod/spmod_lora//connection.png\" height \"250\"> ## 使用例程 * 流程 1. 创建 LoRa 对象并初始化 2. 发送或者接收数据 ### C 示例： ```c fpioa_set_function(SPI_LoRa_SX127X_CS_PIN_NUM, FUNC_SPI1_SS0); // CS: 20 fpioa_set_function(SPI_LoRa_SX127X_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SCLK: 21 fpioa_set_function(SPI_LoRa_SX127X_MOSI_PIN_NUM, FUNC_SPI1_D0); // MOSI: 8 fpioa_set_function(SPI_LoRa_SX127X_MISO_PIN_NUM, FUNC_SPI1_D1); // MISO: 15 fpioa_set_function(SPI_LoRa_SX127X_IRQ_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_IQR_GPIO_NUM); // IQR: 6 fpioa_set_function(SPI_LoRa_SX127X_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_RST_GPIO_NUM); // RST: 7 spi_init(SPI_DEVICE_1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0); sx1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LoRa_SF_8, SX1278_LoRa_BW_20_8KHZ, 10); if (master 1) { printf(\" MASTER \\r\\n\"); ret sx1278_LoRaEntryTx(&SX1278, 16, 2000); } else { printf(\" SALAVE \\r\\n\"); ret sx1278_LoRaEntryRx(&SX1278, 16, 2000); } ``` ### MaixPy 例程： ```python fm.register(20, fm.fpioa.GPIOHS20, force True) # RST fm.register(7, fm.fpioa.GPIOHS7, force True) # CS # set gpiohs work mode to output mode cs GPIO(GPIO.GPIOHS20, GPIO.OUT) rst GPIO(GPIO.GPIOHS7, GPIO.IN) # The other pins are configured at SPI initialization time spi1 SPI(SPI.SPI1, mode SPI.MODE_MASTER, baudrate 100 * 1000, polarity 0, phase 0, bits 8, firstbit SPI.MSB, sck 21, mosi 8, miso 15) lora SX127x(spi spi1, pin_ss cs) lora.init() #######receiver########### receive(lora) ########sender########### # send(lora) ``` ### 运行环境 语言 开发板 SDK/固件版本 : : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 *MaixPy固件建议自行从最新源码编译* ### 运行结果 * C <center class \"third\"> \t <img src \"../../assets/spmod/spmod_lora/lora_send_log_c.png\" height \"250\"/><img src \"../../assets/spmod/spmod_lora/lora_recv_log_c.png\" height \"250\"/> </center> * MaixPy <center class \"third\"> \t <img src \"../../assets/spmod/spmod_lora/lora_send_log.png\" height \"250\"/><img src \"../../assets/spmod/spmod_lora/lora_recv_log.png\" height \"250\"/> </center> ### 移植 修改以下参数即可适配其他 K210 开发板. * C ```c // board_config.h #define SPI_INDEX 1 #define SPI_SCLK_RATE 600*1000 #define SPI_CHIP_SELECT_NSS 0//SPI_CHIP_SELECT_0 #define SPI_LoRa_SX127X_CS_PIN_NUM 20 #define SPI_LoRa_SX127X_SCK_PIN_NUM 21 #define SPI_LoRa_SX127X_MOSI_PIN_NUM 8 #define SPI_LoRa_SX127X_MISO_PIN_NUM 15 #define SPI_LoRa_SX127X_IRQ_PIN_NUM 6 #define SPI_LoRa_SX127X_RST_PIN_NUM 7 #define SPI_LoRa_SX127X_IQR_GPIO_NUM 6 #define SPI_LoRa_SX127X_RST_GPIO_NUM 7 ``` * MaixPy ```python ################### config ################### LoRa_RST const(20) LoRa_CS const(7) LoRa_SPI_SCK const(21) LoRa_SPI_MOSI const(8) LoRa_SPI_MISO const(15) LoRa_SPI_NUM SPI.SPI1 LoRa_SPI_FREQ_KHZ const(100) ############################################## ``` ## 参考设计 SPMOD_LoRa 尺寸图： <img src \"../../assets/spmod/spmod_lora/sipeed_spmod_lora.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（四群） 862340358"},"/hardware/en/modules_spmod/spmod_weather.html":{"title":"SPMOD - Weather","content":"# SPMOD Weather ## 概述 <img src \"../../assets/spmod/spmod_weather/demo.gif\" width \"500\" /> SPMOD Weather (气象站模块), 集成三轴传感器 QMC7983,与温湿度气压传感器 BME280。 ## SPMOD Weather 介绍 特性： 采用 **Sipeed SPMOD** 接口(2*4PIN 2.54mm 排针)，统一 MaixPy 开发板接口 通过SP MOD I2C接口连接 磁性传感器：QMC7983是一个内置灵敏度补偿与NTC的三轴磁性传感器，I2C接口输出（最高频率400KHz），具有出色的动态范围和精度以及超低的功耗 磁感应量程：±30 高斯 温湿度气压传感器：BME280是同时集成了温湿度与气压传感器的数字传感器 模块尺寸：25.0\\*10\\*2.9mm ## 传感器特性： 磁性传感器 QMC7983 工作电压 2.6V~3.6V 工作电流 70uA 休眠电流 <1uA 磁感应量程 ±30 高斯 精度 每 LSB 1mG RMS 噪声 2 mG 对外接口 I2C，默认地址 0x2C,可通过选择电阻调节 温湿度气压传感器 BME280 工作电压 1.71V~3.6V 工作电流 <633uA 休眠电流 <5uA 湿度传感器的关键参数： 响应时间（𝜏63％） 1s 精度公差 ±3％ 相对湿度 磁滞 < 2％ 相对湿度 气压力传感器的关键参数： RMS 噪声 0.2 Pa（等效 到海拔 1.7 厘米） 偏移温度系数 ±1.5 Pa/K（等效温度变化 1°C 时，达到海拔 ±12.6 cm1s） 对外接口 I2C，默认地址 0x76, 可通过选择电阻调节 ### SPMOD_Weather 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 NC NC 悬空引脚，无功能 3 NC NC 悬空引脚，无功能 4 SDA I/O 模块I2C串行数据引脚 5 3V3 V 模块电源输入正 6 NC NC 悬空引脚，无功能 7 NC NC 悬空引脚，无功能 8 SCL I 模块I2C串行时钟引脚 <img src \"../../assets/spmod/spmod_weather/back.png\" width \"300\" /> ## 接线方式 <img src \"../../assets/spmod/spmod_weather/connection.png\" height \"250\"> MCU:FUN(IO) SP_RFID : : : : I2C:SDA(IO_7) SDA NC(IO_15) NC NC(IO_20) IRQ NC(IO_21) NC GPIOHS(IO_8) SHT I2C:SCL(IO_6) SCL 2.8~3.5V 3.3V GND GND ## 使用例程 * 流程 1. 初始化 weather SPWeather(i2c i2c_bus) # create sp_weather while 1: time.sleep_ms(500) print(weather.qmc_read_xyz) # QMC7983 read data print(weather.bme_values) # BME280 read data 2. 校准(可选) 3. 读取距离(多种模式可选) ### C 示例： ```c fpioa_set_function(Weather_SCL, FUNC_I2C0_SCLK + Weather_I2C_DEVICE * 2); // Weather_SCL: 6; fpioa_set_function(Weather_SDA, FUNC_I2C0_SDA + Weather_I2C_DEVICE * 2); // Weather_SDA: 7; maix_i2c_init(Weather_I2C_DEVICE, 7, 400000); // Weather_I2C_DEVICE: 0; rslt qmc_init(); // Magnetic sensor QMC7983 init rslt bme280_init(&dev); // Temperature, humidity and pressure sensors BME280 init stream_sensor_data_normal_mode(&dev); // read and print sensor data ``` ### MaixPy 例程： ```python i2c_bus I2C(I2C.I2C0, freq 100*1000, scl 6, sda 7) # scl: io_6, sda: io_7 weather SPWeather(i2c i2c_bus) # create sp_weather while 1: time.sleep_ms(500) print(weather.qmc_read_xyz) # QMC7983 read data print(weather.bme_values) # BME280 read data ``` ## 运行环境 语言 开发板 SDK/固件版本 : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 ## 运行结果 * C <img src \"../../assets/spmod/spmod_weather/log_c.png\" height \"200\"> * MaixPy <img src \"../../assets/spmod/spmod_weather/log_py.png\" height \"200\"> ## 参考设计 SPMOD_Weather 尺寸图： <img src \"../../assets/spmod/spmod_weather/sipeed_spmod_weather.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（四群） 862340358"},"/hardware/en/modules_spmod/spmod_grove.html":{"title":"SPMOD - Grove","content":"# SPMOD Grove ## 概述 <img src \"../../assets/spmod/spmod_grove/sp_grove.png\" width \"\" height \"400\" /> SPMOD_Grove(GROVE 模块) ## SPMOD Grove 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 作为拓展版，提供三个标准的Grove接口。方便您将Grove模块与SP MOD一起使用。 每条数据线均提供外部上拉。 提供高达1000mA的供电能力。 模块尺寸：35.0\\*10.0\\*2.1mm ## 概括 功能特点： 参数 Grove 连接器 (HY 2.0mm 4P连接器)*3 用于连接Grove线缆 排针4*2，间距2.54mm *1 用于和SP MOD接口连接 外部供电电压 视连接的模块而定 外部供电电流 视模块工作情况而定，通常小于1000mA 工作温度 30℃ ~ 85℃ ## 参考设计 SPMOD_Grove 尺寸图： <img src \"../../assets/spmod/spmod_grove/sipeed_spmod_grove.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（四群） 862340358"},"/hardware/en/modules_spmod/spmod_lcd1.14.html":{"title":"SPMOD - LCD 1.14","content":"# SPMOD LCD 1.14 ## 概述 ![](../../assets/spmod/spmod_lcd1.14//sp_lcd.png) SPMOD_LCD1.14(1.14寸 LCD 屏幕模块)采用 ST7735S TFT LCD屏。 ## SPMOD LCD1.14 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 采用常见 LCD 驱动 IC ST7735S(4 线 SPI 通讯) 分辨率：240\\*135 模块尺寸：35.0\\*20.0mm ### ST7735S TFT LCD屏 介绍 功能特点： 参数 工作电压 2.5V~4.8V 工作电流 <20mA 工作温度 30℃ ~ 85℃ 休眠电流 <0.1mA 屏幕大小 1.14英寸 有效显示区域 1.7mm * 10.8mm 分辨率 160*80 色彩 132个RGB通道 对外接口 8P FPC (0.5mm间距) > 内部集成电路包含DC / DC转换器、可调VCOM生成器、非易失性（NV）存储器（用于存储初始寄存器设置）、显示时钟的振荡器以及时序控制器 ### SPMOD_LCD1.14 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 CS I SPI片选引脚 3 D/C I 数据/命令输入切换引脚 4 RST I 模块复位引脚，低有效 5 3V3 V 模块电源输入正 6 SCK I SPI串行时钟引脚 7 SI I/O MOSI数据引脚，主机输出从机输入 8 BL I 背光控制引脚，低电平关闭背光 <img src \"../../assets/spmod/spmod_lcd1.14/back.png\" width \"300\" /> 接线方式: MCU:FUN(IO) SP_LCD : : : : GPIOHS7(IO_7) RST GPIOHS15(IO_15) D/C SPI:SS0(IO_20) CS SPI:SCK(IO_21) SCK SPI:MOSI(IO_8) SI GPIOHS6(IO_6) BL 2.5~4.8V 3.3V GND GND <img src \"../../assets/spmod/spmod_lcd1.14//connection.png\" height \"250\"> ## 使用例程 * 流程 1. 初始化配置 2. 创建 Image 并填充 3. 发送图像并刷新 ### C 示例： ```c fpioa_set_function(SPI_IPS_LCD_CS_PIN_NUM, FUNC_SPI1_SS0); // SPI_IPS_LCD_CS_PIN_NUM: 20; fpioa_set_function(SPI_IPS_LCD_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_IPS_LCD_SCK_PIN_NUM: 21; fpioa_set_function(SPI_IPS_LCD_MOSI_PIN_NUM, FUNC_SPI1_D0); // SPI_IPS_LCD_MOSI_PIN_NUM: 8; fpioa_set_function(SPI_IPS_LCD_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_DC_GPIO_NUM); // SPI_IPS_LCD_DC_PIN_NUM: 15; SPI_IPS_LCD_DC_GPIO_NUM: 15; fpioa_set_function(SPI_IPS_LCD_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_RST_GPIO_NUM); // SPI_IPS_LCD_RST_PIN_NUM: 7; SPI_IPS_LCD_RST_GPIO_NUM: 7; fpioa_set_function(SPI_IPS_LCD_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_BL_GPIO_NUM); // SPI_IPS_LCD_BL_PIN_NUM: 6; SPI_IPS_LCD_BL_GPIO_NUM: 6; // set gpiohs work mode to output mode gpiohs_set_drive_mode(SPI_IPS_LCD_DC_GPIO_NUM, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(SPI_IPS_LCD_RST_GPIO_NUM, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(SPI_IPS_LCD_BL_GPIO_NUM, GPIO_DM_OUTPUT); spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0); ips_lcd_init(); // init LCD_ShowPicture(0, 0, LCD_W, LCD_H, gImage_nanke); // display ``` ### MaixPy 例程： ```python # 20: SPI_LCD_CS_PIN_NUM; fm.register(SPI_LCD_CS_PIN_NUM, fm.fpioa.GPIOHS20, force True) # 15: SPI_LCD_DC_PIN_NUM; fm.register(SPI_LCD_DC_PIN_NUM, fm.fpioa.GPIOHS15, force True) # 6: SPI_LCD_BUSY_PIN_NUM; fm.register(SPI_LCD_BUSY_PIN_NUM, fm.fpioa.GPIOHS6, force True) # 7: SPI_LCD_RST_PIN_NUM; fm.register(SPI_LCD_RST_PIN_NUM, fm.fpioa.GPIOHS7, force True) # set gpiohs work mode to output mode cs GPIO(GPIO.GPIOHS20, GPIO.OUT) dc GPIO(GPIO.GPIOHS15, GPIO.OUT) busy GPIO(GPIO.GPIOHS6, GPIO.OUT) rst GPIO(GPIO.GPIOHS7, GPIO.OUT) # 21: SPI_LCD_SCK_PIN_NUM; 8: SPI_LCD_MOSI_PIN_NUM; spi1 SPI(SPI_LCD_NUM, mode SPI.MODE_MASTER, baudrate SPI_LCD_FREQ_KHZ * 1000, polarity 0, phase 0, bits 8, firstbit SPI.MSB, sck SPI_LCD_SCK_PIN_NUM, mosi SPI_LCD_MOSI_PIN_NUM) ips SPLCD114(spi1, cs, dc, rst, busy, IPS_WIDTH, IPS_HEIGHT, IPS_MODE) # create an 'image' and fill it img image.Image() img.draw_rectangle(80, 80, 30, 30) # display ips.display(img) ``` ### 运行环境 语言 开发板 SDK/固件版本 : : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 *MaixPy固件建议自行从最新源码编译* ### 运行结果 * C <img src \"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_c.png\" height \"250\" /> * MaixPy <img src \"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_py.png\" alt \"sp_lcd1.14_py\" height \"250\" /> ### 移植 修改以下参数即可适配其他 K210 开发板. * C ```c // board_config.h #define SPI_INDEX 1 #define SPI_SCLK_RATE 600*1000 #define SPI_CHIP_SELECT_NSS 0 // SPI_CHIP_SELECT_0 #define SPI_IPS_LCD_CS_PIN_NUM 20 #define SPI_IPS_LCD_SCK_PIN_NUM 21 #define SPI_IPS_LCD_MOSI_PIN_NUM 8 #define SPI_IPS_LCD_DC_PIN_NUM 15 #define SPI_IPS_LCD_BL_PIN_NUM 6 #define SPI_IPS_LCD_RST_PIN_NUM 7 #define SPI_IPS_LCD_DC_GPIO_NUM 15 #define SPI_IPS_LCD_BL_GPIO_NUM 6 #define SPI_IPS_LCD_RST_GPIO_NUM 7 #define USE_HORIZONTAL 3 // 0/1 is horizontal, and 2/3 is vertical. ``` * Maixpy ```python ################### config ################### SPI_LCD_NUM SPI.SPI1 SPI_LCD_DC_PIN_NUM const(15) SPI_LCD_BUSY_PIN_NUM const(6) SPI_LCD_RST_PIN_NUM const(7) SPI_LCD_CS_PIN_NUM const(20) SPI_LCD_SCK_PIN_NUM const(21) SPI_LCD_MOSI_PIN_NUM const(8) SPI_LCD_FREQ_KHZ const(600) ############################################## ``` ## 参考设计 SPMOD_LCD1.14 尺寸图： <img src \"../../assets/spmod/spmod_lcd1.14/sipeed_spmod_lcd1.14.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maixhub.com](https://maixhub.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群 862340358 "},"/hardware/en/modules_spmod/spmod_micarray.html":{"title":"SPMOD - MicArray","content":"# SPMOD MicArray ## 概述 <img src \"../../assets/spmod/spmod_micarray/sp_micarray.png\" width \"\" height \"300\" /> SPMOD_MicArray(麦克风阵列模块)采用 RY3708(DC DC)升压模块 ## SPMOD MicArray 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 将SP MOD转至FPC，利用FPC与麦克风阵列板相连。 板载3.3V至5V升压DC DC (RY3708)，轻松驱动麦克风阵列。 利用Grove接口控制麦克风阵列板上的LED。 需要配合SIPEED MICARRAY一起使用。 模块尺寸：35.0\\*10.0\\*11.2mm ### BOOST DC DC RY3708 模块 介绍 功能特点： 参数 输出电压 5.1V ±0.2V 外部供电电压 \t3.3V ±0.2V 外部供电电流 视麦克风阵列板的工作情况而定，通常小于500mA 工作温度范围 40℃ ~ 85℃ > 1.2MHz固定开关频率,内部4A开关电流限制,高温自动切断,集成80mΩ内部功率MOSFET ### SPMOD_MicArray 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 D2 I Mic_D0 3 D3 I Mic_D2 4 D0 I Mic_WS 5 3V3 V 模块电源输入正 6 D4 I Mic_D1 7 D5 I Mic_D3 8 D1 I Mic_BCK 9 CK I LED控制串行时钟引脚 (相当于I2C SCL) 10 DA I LED控制串行数据引脚 (相当于I2C SDA) <img src \"\" width \"300\" /> ## 使用例程 ```python from Maix import MIC_ARRAY as mic import lcd lcd.init() mic.init() #mic.init(i2s_d0 23, i2s_d1 22, i2s_d2 21, i2s_d3 20, i2s_ws 19, i2s_sclk 18, sk9822_dat 24, sk9822_clk 25) while True: imga mic.get_map() b mic.get_dir(imga) a mic.set_led(b,(0,0,255)) imgb imga.resize(160,160) imgc imgb.to_rainbow(1) a lcd.display(imgc) mic.deinit() ``` > 需要根据自己接板子上的管脚号来进行修改mic.init()中参数 ## 参考设计 SPMOD_MicArray 尺寸图： <img src \"../../assets/spmod/spmod_micarray/sipeed_spmod_micarray.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（四群） 862340358"},"/hardware/en/modules_spmod/spmod_ethernet.html":{"title":"SPMOD - Ethernet","content":"# SPMOD Ethernet ## 概述 ![](../../assets/spmod/spmod_ethernet/sp_ethernet.png) SPMOD_Ethernet(网络扩展模块)采用 W5500 以太网主控芯片。 ## SPMOD Ethernet 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 通过SP MOD SPI接口连接 主控芯片：W5500 是一款集成全硬件 TCP/IP 协议栈的嵌入式以太网控制器。 SPI 速率理论上可达80MHz \t集成以太网数据链路层（MAC）和10BaseT/100BaseTX 以太网物理层（PHY），支持自动协商（10/100 Based全双工/半双工） 模块尺寸：35.76\\*19.74\\*8.7mm ### W5500 以太网主控芯片介绍 功能特点： 参数 工作电压 2.97V~3.63V 工作电流 <132mA 工作温度 40℃~85℃ 休眠电流 <15mA SPI 时钟 最高80MHz 全硬件TCP/IP协议栈 支持TCP、UDP、ICMP、IPv4、ARP、IGMP、PPPoE协议 > 支持8路独立硬件 Socket 同时通信 ,通信效率互不影响 ,内部32K字节收发缓存供TCP/IP包处理 ,支持掉电模式、网络唤醒 ,集成 10BaseT / 100Base T 以太网 PHY ,支持自动协商（全/半双工，10M/100M) ,不支持自动极性变换MDIX ### SPMOD_Ethernet 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 CS I SPI片选引脚 3 SO I/0 MISO数据引脚，主机输入从机输出 4 NC NC 悬空引脚，无功能 5 3V3 V 模块电源输入正 6 SCK I SPI串行时钟引脚 7 SI I/0 MOSI数据引脚，主机输出从机输入 8 NC NC 悬空引脚，无功能 <img src \"\" width \"300\" /> ## 使用例程 待更新 ## 参考设计 SPMOD_Ethernet 尺寸图： <img src \"../../assets/spmod/spmod_ethernet/sipeed_spmod_ethernet.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（四群） 862340358"},"/hardware/en/modules_spmod/spmod_template.html":{"title":"SPMOD - XXX","content":"# SPMOD XXX ## 概述 <img src \"../../assets/spmod/sipeed_spmod_xxx.jpg\" alt \"XXX\" style \"zoom:60%;\" /> SPMOD_XX(XX 模块)采用XXX。 ## SPMOD XXX 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 XXX 模块尺寸：X.XX\\*XX.X\\*XX.Xmm ### XXXX 介绍 XXXXX XXXX XXXX 功能特点： ### SPMOD_XXX 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G XX 2 XXX I XX 3 MISO O XX 4 XXX I XX 5 XXX O XX 6 SCK I XX 7 MOSI I XX 8 VCC G XX ## 使用例程 MaixPy 例程： > NOTE: 待更新 STM32 例程： ## 参考设计 SPMOD_XXX 原理图： ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（四群） 862340358"},"/hardware/en/modules_spmod/spmod_fpc.html":{"title":"SPMOD - FPC","content":"# SPMOD FPC ## 概述 ![](../../assets/spmod/spmod_fpc/sp_fpc.png) SPMOD_FPC(FPC 转接线模块) ## SPMOD FPC 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 作为延长套件，轻松的将SP MOD接口用FPC延长至另一端。您将有更大的自由连接模块构建系统。 提供一对SP MOD至FPC转换板（一公一母），一条FPC排线, 10P规格。 模块尺寸：15.0\\*10.0\\*3.3mm ## 概括 功能特点： 参数 SP MOD至FPC10转换器器(公母一对)\t 用于将SP MOD接口和FPC的双向转换 FPC排线\t 用于连接两个转换器 外部供电电压 视连接的模块而定 外部供电电流 视模块工作情况而定，通常小于1000mA 工作温度 30℃ ~ 85℃ ## 参考设计 SPMOD_FPC 尺寸图： <img src \"../../assets/spmod/spmod_fpc/sipeed_spmod_fpc.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（四群） 862340358"},"/hardware/en/modules_spmod/spmod_servo.html":{"title":"SPMOD - SERVO","content":"# SPMOD SERVO ## 概述 <img src \"../../assets/spmod/spmod_servo/sp_servo.png\" width \"\" height \"300\" /> SPMOD_SERVO (SERVO模块)。 ## SPMOD SERVO 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 利用SP MOD控制多达6个独立的PWM 9g舵机 舵机接口采用3P 2.54间距排针 独立的外部5V供电，通过USB Type C或者KF螺钉接线柱，不会从SP MOD取电 板载电源指示灯，通电状态一目了然 模块尺寸：35.0\\*20\\*1.6mm 功能特点： 参数 PWM 9g舵机接口*6 外接4.8 6V电源的情况下，可连接6个PWM 9g舵机并分别控制 外部供电电压 4.8V 6.0V 外部供电电流 视模块工作情况而定，通常小于1500mA 工作温度 40℃ ~ 85℃ ### SPMOD_SERVO 模块引脚定义： <img src \"../../assets/spmod/spmod_servo/sp_servo_pin.png\" width \"500\" /> ## 使用例程 待更新 ## 参考设计 SPMOD_SERVO 尺寸图： <img src \"../../assets/spmod/spmod_servo/sipeed_spmod_servo.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（四群） 862340358"},"/hardware/en/modules_spmod/spmod_psram.html":{"title":"SPMOD - PSRAM","content":"# SPMOD PSRAM ## 概述 <img src \"../../assets/spmod/spmod_psram/sp_psram.png\" width \"\" height \"300\" /> SPMOD_PSRAM(PSRAM模块)采用 IPS6404L SQ 芯片。 ## SPMOD PSRAM 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 通过SP MOD SPI/QPI接口连接 Pseudo−SRAM芯片：IPS6404L SQ是一个容量为64Mbit，SPI/QPI接口，具有出色的可靠性的和响应时间的伪随机动态存储器芯片。 工作频率：104MHz SPI读取响应时间：30.3ns 模块尺寸：15.0\\*10.0\\*13.3mm ### IPS6404L SQ 迫真静态随机存储器介绍 功能特点： 参数 工作电压 2.7V~3.6V 工作电流 10mA 工作温度 30℃~85℃ 休眠电流 <250μA 工作频率 104Mhz SPI读取响应时间 30.3ns 其他操作响应时间 9.3ns 对外接口 PI/QPI可选，默认SPI ### SPMOD_PSRAM 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 CS I SPI片选引脚 3 D1 I/0 MISO数据引脚，模块数据输出 4 D3 I/O 无功能 (QSPI模式下为IO3) 5 3V3 V 模块电源输入正 6 SCK I SPI串行时钟引脚 7 D0 I/0 MOSI数据引脚，模块数据输入 (QSPI模式下为IO0) 8 D2 I/O 无功能 (QSPI模式下为IO2) <img src \"\" width \"300\" /> ## 使用例程 待更新 ## 参考设计 SPMOD_PSRAM 尺寸图： <img src \"../../assets/spmod/spmod_psram/sipeed_spmod_psram.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（四群） 862340358"},"/hardware/en/modules_spmod/spmod_rfid.html":{"title":"SPMOD - RFID","content":"# SPMOD RFID ## 概述 <img src \"../../assets/spmod/spmod_rfid/sp_rfid.png\" style \"padding right:100px;\" width \"\" height \"300\" /> SPMOD_RFID (NFC 模块)采用复旦微电子 FM17510 高度集成的非接触式（13Mhz）的读写芯片。 ## SPMOD RFID 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 利用SP MOD SPI和RFID模块通讯 64Byte收发缓冲FIFO RIFC IC 为 FM17510。 模块尺寸：25.0\\*20.1\\*6.2mm ### FM17510 介绍 FM17510 是一款高度集成的工作在 13.56MHz 下的非接触读写器芯片，支持符合 ISO/IEC 14443 TypeA 协议的非接触读写器模式。 同时提供了低功耗的外部卡片侦测功能，方便电池供电、需要低功耗工作、并且需要实时处理任意 时刻会进入射频场的外部卡片的读写器设备。 FM17510 具有低电压、低功耗、 单端驱动等特点。适用于低功耗、低电压、低成本要求的非接触读。 FM1750XX 在软硬件层面上兼容 MFRC552，支持工作模式： FM17510 功能特点： 支持 ISO/IEC 14443 TypeA 读写器模式 读写器模式支持 M1 加密算法 ISO14443 TYPEA 支持通讯速率 106kbps， 212kbps， 424kbps 支持 SPI 串行接口，最高 10Mbps Host 接口独立电源供电，电压范围 2.2~3.6V 工作温度范围 40℃ ~ 85℃ 64Byte 收发缓冲 FIFO 中断输出模式灵活可配 多种低功耗模式 : Soft powerdown模式 , Hard powerdown 模式, Deep powerdown 模式（典型值 1uA） 支持低功耗外部卡片侦测功能 可编程定时器 内置振荡电路外接 27.12MHz 晶振 宽电压工作范围 2.2V~3.6V 内置 CRC 协处理器 可编程 I/O 引脚 ### SPMOD_RFID 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 Note 1 GND G 模块电源地 2 CS I SPI片选引脚 3 SO I/O MISO数据引脚，主机输入从机输出 4 NPD I 复位/休眠控制引脚 5 3V3 V 模块电源输入正 6 SCK I SPI串行时钟引脚 7 SI I/O MOSI数据引脚，主机输出从机输入 8 IRQ O 模块中断输出引脚 > 当 NPD 引脚为低电平时，模块进入休眠状态；当 NPD 引脚输入一个上升沿时，模块复位。 <img src \"../../assets/spmod/spmod_rfid/back.png\" height \"300\" /> 接线方式: MCU:FUN(IO) SP_RFID : : : : NC(IO_7) NPD SPI:MISO(IO_15) SO SPI:SS0(IO_20) CS SPI:SCK(IO_21) SCK SPI:MOSI(IO_8) SI NC(IO_6) IRQ 2.2~3.6V 3.3V GND GND <img src \"../../assets/spmod/spmod_rfid/connection.png\" height \"250\"> ## 使用例程 * 流程 1. 初始化 2. 扫描并绑定卡片 3. 读写数据 ### C 示例： ```c fpioa_set_function(RFID_CS_PIN, FUNC_GPIOHS0 + RFID_CS_HSNUM); // RFID_CS_PIN: 20; fpioa_set_function(RFID_CK_PIN, FUNC_GPIOHS0 + RFID_CK_HSNUM); // RFID_CK_PIN: 21; fpioa_set_function(RFID_MO_PIN, FUNC_GPIOHS0 + RFID_MO_HSNUM); // RFID_MO_PIN: 8; fpioa_set_function(RFID_MI_PIN, FUNC_GPIOHS0 + RFID_MI_HSNUM); // RFID_MI_PIN: 15; gpiohs_set_drive_mode(spi_io_cfg.hs_cs, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(spi_io_cfg.hs_clk, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(spi_io_cfg.hs_mosi, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(spi_io_cfg.hs_miso, GPIO_DM_INPUT); // detected card PcdRequest(0x52, type) // auth and bind... // read or write 16 bytes data from sector 0x11 PcdWrite(0x11, w_buf) PcdRead(0x11, &r_buf) ``` ### MaixPy 例程： ```python # 20: CS_NUM; fm.register(20, fm.fpioa.GPIOHS20, force True) # set gpiohs work mode to output mode cs GPIO(GPIO.GPIOHS20, GPIO.OUT) # RFID_SCK: 21; RFID_SI:8; RFID_SO: 15; spi1 SPI(SPI.SPI1, mode SPI.MODE_MASTER, baudrate 600 * 1000, polarity 0, phase 0, bits 8, firstbit SPI.MSB, sck 21, mosi 8, miso 15) # Create an object of the class MFRC522 MIFAREReader MFRC522(spi1, cs) # detected and auth, bind... # read or write 16 bytes data from sector 0x11 MIFAREReader.MFRC522_Write(0x11, data) MIFAREReader.MFRC522_Read(0x11) ``` ### 运行环境 语言 开发板 SDK/固件版本 : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 ### 运行结果 * C <img src \"../../assets/spmod/spmod_rfid/c_log.png\" height \"200\" /> * MaixPy <img src \"../../assets/spmod/spmod_rfid/maixpy_log.png\" height \"200\" /> ### 移植 修改以下参数即可适配其他 K210 开发板. * C ```c // board_config.h #define RFID_CS_PIN (20) #define RFID_CK_PIN (21) #define RFID_MO_PIN (8) #define RFID_MI_PIN (15) #define RFID_CS_HSNUM (20) #define RFID_CK_HSNUM (21) #define RFID_MO_HSNUM (8) #define RFID_MI_HSNUM (15) ``` * MaixPy ```python ################### config ################### CS_NUM const(20) SPI_FREQ_KHZ const(600) SPI_SCK const(21) SPI_MOSI const(8) SPI_MISO const(15) ############################################# ``` ## 参考设计 SPMOD_RFID 尺寸图： <img src \"../../assets/spmod/spmod_rfid/sipeed_spmod_rfid.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（四群） 862340358"},"/hardware/en/modules_spmod/spmod_bt.html":{"title":"SPMOD - BT","content":"# SPMOD BT ## 概述 ![](./../../assets/spmod/spmod_bt/sipeed_spmod_BT.jpg) SPMOD BT(蓝牙 模块)采用 YDJ 23。 ## SPMOD BT 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 利用 SP MOD UART 和蓝牙模块通讯 JDY 23蓝牙模块：支持BLE 5.0（兼容 BLE4.0、BLE4.2）。具有UART接口。模块支持AT指令控制。具备超低功耗特性和高可靠性 板载两个状态指示LED，模块状态一目了然 模块尺寸：25.6\\*20.2\\*3.2mm ### JDY 23 蓝牙介绍： 功能特点： 参数 工作频段： 2.4G 发射功率： 4db（最大） 通信接口： UART 工作电压： 1.8V~3.6V 工作温度： 40℃ 80℃ 天线： 板载PCB天线 接收灵敏度： 97dbm 主从支持： 从机 蓝牙版本： BLE 5.0（兼容 BLE4.0、BLE4.2） 唤醒状态电流： 800uA（广播模式） 浅睡状态电流： <50uA (广播模式) 深度睡眠电流： 9uA （无广播） 默认串口波特率： 9600 ### SPMOD_BT 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 AWK I/O 模块休眠唤醒引脚，低有效 3 STA I/O 蓝牙连接状态连接，连接成功时输出高电平 4 RX I 模块UART数据接受引脚，连接上位机TX 5 3V3 V 模块电源输入正 6 NC 悬空引脚，无功能 7 RST I/O 模块复位引脚，低电平有效 8 TX O 模块UART数据发送引脚，连接上位机的RX <img src \"../../assets/spmod/spmod_bt/back.jpg\" height \"250\" /> 接线方式： MCU:FUN(IO) SP_BT : : : : UART:TX(IO_7) RX USRT:RX(IO_6) TX 1.8 3.3V 3.3V GND GND <img src \"../../assets/spmod/spmod_bt/connection.png\" height \"250\"> ### 主要 AT 指令列表： 指令 描述 AT+POWR 显示模块发送功率 AT+RST\t 软复位 AT+MAC\t 显示MAC 地址 AT+NAME 显示广播名 AT+HOSTEN 从模式或 IBEACON 工作模式 AT+IBUUID IBEACON 的 UUID AT+DISC 指令断开连接 AT+SLEEP 睡眠 AT+MTU 设置模块发送的发包数长 *更多AT指令请参考[JDY 23 V2.1.pdf](https://cn.dl.sipeed.com/shareURL/MAIX/HDK/sp_mod/sp_bt)* ## 使用例程 * 流程 1. 发送 AT 指令 2. 接收数据 3. 判断是否设置成功 ### C 示例： ```c // set uart rx/tx func to io_6/7 fpioa_set_function(6, FUNC_UART1_RX + UART_NUM * 2); fpioa_set_function(7, FUNC_UART1_TX + UART_NUM * 2); uart_init(UART_DEVICE_1); uart_configure(UART_DEVICE_1, 9600, 8, UART_STOP_1, UART_PARITY_NONE); //change the name of sp_bt module to MAIXCUBE uart_send_data(UART_NUM, \"AT+NAMEMAIXCUBE\\r\\n\", strlen(\"AT+NAMEMAIXCUBE\\r\\n\")); //send AT order msleep(100); ret uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response if(ret ! 0 && strstr(rcv_buf, \"OK\")) { printk(LOG_COLOR_W \"set name success!\\r\\n\"); } // get the name of sp_bt module uart_send_data(UART_NUM, \"AT+NAME\\r\\n\", strlen(\"AT+NAME\\r\\n\")); //send AT order msleep(100); ret uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response if(ret ! 0 && strstr(rcv_buf, \"NAME\")) { printk(LOG_COLOR_W \"get name success!\\r\\n\"); } ``` ### MaixPy 例程： ```python # set uart rx/tx func to io_6/7 fm.register(6,fm.fpioa.UART1_RX) fm.register(7,fm.fpioa.UART1_TX) uart UART(UART.UART1,9600,8,1,0,timeout 1000, read_buf_len 4096) #change the name of sp_bt module to MAIXCUBE uart.write(\"AT+NAMEMAIXCUBE\\r\\n\") #send AT order time.sleep_ms(100) read_data uart.read() #receive response if read_data: read_str read_data.decode('utf 8') count read_str.count(\"OK\") if count ! 0: uart.write(\"set name success\\r\\n\") # get the name of sp_bt module uart.write(\"AT+NAME\\r\\n\") #send AT order time.sleep_ms(100) read_data uart.read() #receive response if read_data: read_str read_data.decode('utf 8') count read_str.count(\"NAME\") if count ! 0: uart.write(\"get name success\\r\\n\") ``` *注意发送AT指令后一定要加上\\r\\n* ### 运行结果: 使用[BLE Utility](../../tools/bledebugger.apk)连接设备后进行收发测试结果如下: <center class \"third\"> <img src \"../../assets/spmod/spmod_bt/res.png\" height \"250\"/><img src \"../../assets/spmod/spmod_bt/res1.png\" height \"250\"/> </center> ### 运行环境: 语言 开发板 SDK/固件版本 : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 ## 参考设计 SPMOD_BLE 尺寸图： <img src \"../../assets/spmod/spmod_bt/sipeed_spmod_bt.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maixhub.com](https://maixhub.com) SDK 相关信息 [https://dl.sipeed.com/shareURL/MAIX/SDK](https://dl.sipeed.com/shareURL/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/shareURL/MAIX/HDK](https://dl.sipeed.com/shareURL/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（四群） 862340358"},"/hardware/en/maixIV/m4cdock/FAQ.html":{"title":"Maix-IV Series Frequently Asked Questions (FAQ)","content":" title: Maix IV Series Frequently Asked Questions (FAQ) ## Q: How to check the SDK version of the current system? A: Run the command `cat /proc/ax_proc/version`. Example output: ```bash root@ax650:~# cat /proc/ax_proc/version Ax_Version V1.45.0_P39_20240830020829 ``` ## Q: After updating to v1.45.0_P39, the root filesystem is smaller than 5GB. How to expand it? A: Before expansion: ```bash root@ax650:~# df h Filesystem Size Used Avail Use% Mounted on /dev/root 4.9G 4.3G 336M 93% / ``` After expansion: ```bash root@ax650:~# df h Filesystem Size Used Avail Use% Mounted on /dev/root 15G 4.3G 9.6G 31% / ``` Steps: 1. Identify whether the system boots from TFCard or eMMC: ```bash root@ax650:~# grep oP 'root \\K\\S+' /proc/cmdline /dev/mmcblk1p2 # TFCard 启动 # /dev/mmcblk0p2 # 或 eMMC 启动 ``` 2. Replace `/dev/mmcblkX` in the following commands with the detected device (e.g., `/dev/mmcblk0` or `/dev/mmcblk1`), then execute: ```bash parted /dev/mmcblkX resizepart 2 100% resize2fs /dev/mmcblkXp2 sync ``` Q: After updating to v1.45, the root filesystem only shows 8GB. How to fix this? A: This occurs when booting after the first flash. The eMMC partition is pre configured for maximum capacity. Run the following to update filesystem metadata (post expansion size should be 28GB): ```bash resize2fs /dev/mmcblk0p10 sync # Critical! Prevents boot failure after power cycle. ``` Expected result: ```bash root@maixbox:~# df h Filesystem Size Used Avail Use% Mounted on /dev/root 28G 6.0G 21G 23% / ``` Warning: Always run `sync` before rebooting/power off to avoid system corruption. ## Q: How to resolve network conflicts caused by duplicate MAC addresses? A: Permanently modify MAC addresses via U Boot environment variables: ```bash # 例如 setenv ethaddr d0:00:00:00:00:01 setenv eth1addr d0:00:00:00:00:02 saveenv ``` ## Key Notes: For eMMC operations, ensure sync is executed to prevent data loss. MAC address changes require saveenv to persist across reboots. Refer to official docs for advanced partitioning scenarios."},"/hardware/en/maixIV/m4cdock/quick-start.html":{"title":"","content":"## System Boot and Login **Note:** The system must be powered via 12V DC input. USB power alone may cause insufficient power supply leading to system instability. ### Pre Boot Preparation Required: 1. 12V DC power supply 2. HDMI cable and display 3. Type C cable (optional: for serial debugging/login) 4. RJ45 Ethernet cable (optional: for network connection and SSH login) For first time use, verify the following status matches your hardware version: Power switch on enclosure is ON (for enclosed versions) Jumper cap remains shorted at Button marking (for bare board versions) ![top](../../../zh/maixIV/assets/top.png) ### Normal Boot Connect display via HDMI1 and provide 12V DC power. After approximately 20 seconds, the LightDM login interface will appear, indicating successful system boot. ![desktop](../../../zh/maixIV/assets/desktop.jpg) Connect mouse/keyboard to the onboard USB A port for operation. Use default credentials (username: `root`, password: `root`) to access the Debian desktop system. ### Advanced: Serial & SSH Login The onboard Type C USB port serves as the default debug UART (**115200 8n1**). Use a serial tool to view kernel logs or log in directly via terminal. For SSH access, expand network connectivity via USB Ethernet/WiFi dongles. Note: The system only has the root superuser, and SSH password login is disabled by default for security. For temporary access, refer to [here](../m4c/FAQ.html)。 ## Interactive Image Segmentation & Inpainting A QT based GUI for real time segmentation (point/box selection) and inpainting. ![samqt](../../../zh/maixIV/assets/samqt.jpg) Open Source Official GitHub Repo: [SAM ONNX AX650 CPP](https://github.com/AXERA TECH/SAM ONNX AX650 CPP) Download prebuilt binaries or compile from source. Example: Removing a player from a photo: <div><table><tr> <td><img src \"../../../zh/maixIV/assets/sam_example_before.png\" alt sam_example_before border 0></td> <td><img src \"../../../zh/maixIV/assets/sam_example_after.png\" alt sam_example_after border 0></td> </tr></table></div> Live Demo (Screenshots): <div><table><tr> <td><img src \"../../../zh/maixIV/assets/sam_raw.jpg\" alt sam_raw border 0></td> <td><img src \"../../../zh/maixIV/assets/sam_sam.jpg\" alt sam_sam border 0></td> <td><img src \"../../../zh/maixIV/assets/sam_inpaint.jpg\" alt sam_inpaint border 0></td> </tr><tr> <td>RAW</td> <td>SAM</td> <td>Inpaint</td> </tr></table></div> ## Interactive Text to Image Search (CLIP) A QT based GUI using OpenAI’s CLIP (Contrastive Language–Image Pre training) for zero shot image retrieval via text input (supports Chinese/English). Open Source Official GitHub Repo: [CLIP ONNX AX650 CPP](https://github.com/AXERA TECH/CLIP ONNX AX650 CPP) [DEMO VIDEO](https://github.com/sipeed/sipeed_wiki/assets/13964381/df4cec7f 29af 465f bfad e54312274437) 1. Install QT: ```bash apt update apt install cmake qt6 base dev ``` 2. Download prebuilt files (executable, models, test images/text): [Baidu Pan](https://pan.baidu.com/s/17M5ugUyuf9mbi1cHLGJHXg) 3. Extract *CLIP.zip* to `/root/Desktop/`: ```bash root@m4nhat 7190c7:~/Desktop/CLIP# tree L 1 . ├── CLIPQT ├── cn_vocab.txt ├── coco_1000 ├── libonnxruntime.so ├── libonnxruntime.so.1.16.0 ├── onnx_models ├── run_en.sh ├── run_zh.sh └── vocab.txt ``` 4. Run in Desktop's terminal: ```bash ./run_zh.sh # For Chinese ./run_en.sh # For English ``` Screenshots: ![b38722991915fa54f17df18ca1f1447](https://github.com/AXERA TECH/CLIP ONNX AX650 CPP/assets/13964381/8fa2c4b8 b061 413e b72d 298bb4a445aa) ![34c8b68b1a8721d4ebff3b4b7184733](https://github.com/AXERA TECH/CLIP ONNX AX650 CPP/assets/13964381/7d0b9740 3598 492c ad42 2de23e7764e2) ## **Important Demo Pre requisites** HDMI0 (demo output) and HDMI1 (desktop) cannot operate simultaneously due to display driver limitations. **To run demos:** 1. Terminate fb_vo process: ```bash kill 9 $(pgrep fb_vo) ``` 2. Connect display to HDMI0 3. Execute demo scripts via SSH/serial terminal 4. After demo, you can restore desktop: ```bash /root/runVoHook.sh ``` ## 32 Channel AI BOX (Person/Vehicle Detection) BoxDemo showcases the complete pipeline from **H.264/H.265** decoding → AI analysis → HDMI display. **Features:** Default: 32 channel display (6×6 layout) Dual HDMI support (mirror/extended) System power consumption <7W 3.6T NPU utilization (1/3 capacity) 15 20 FPS (CPU bound) **Configuration:** Edit /opt/bin/BoxDemo/box.conf: streamxx: RTSP source URLs DISP1 1: Enable HDMI1 output **Run:** ```bash bash /opt/bin/BoxDemo/run.sh ``` ![aibox_pipeline](../../../zh/maixIV/assets/aibox_pipeline.png) ![aibox_example32ch](../../../zh/maixIV/assets/aibox_example32ch.png) ## DINO v2 Monocular Depth Estimation Leveraging Facebook's DINO v2 model for relative depth estimation using single RGB camera. ![pipeline_bin](../../../zh/maixIV/assets/pipeline_bin.png) **Execution:** ```bash cd ~/ax pipeline/bin ./sample_multi_demux_ivps_npu_multi_rtsp_hdmi_vo \\ p ./config/dinov2_depth.json \\ f ~/boxvideos/13.mp4 ``` *Supports H.264 video files or RTSP streams* **Results:** <div><table><tr> <td><img src \"../../../zh/maixIV/assets/dinov2 1.png\" alt dinov2 1></td> <td><img src \"../../../zh/maixIV/assets/dinov2 2.png\" alt dinov2 2></td> </tr></table></div> ![dinov2 3](../../../zh/maixIV/assets/dinov2 3.png) ## YOLOv5 Pedestrian Detection & Tracking ```bash cd ~/ax pipeline/bin ./sample_multi_demux_ivps_npu_multi_rtsp_hdmi_vo \\ p ./config/yolov5_seg.json \\ f ~/boxvideos/25.mp4 ``` ![yolov5_seg](../../../zh/maixIV/assets/yolov5_seg.png)"},"/hardware/en/maixIV/m4cdock/intro.html":{"title":"","content":"## Introduction **Taobao link: [Click to Buy](https://item.taobao.com/item.htm?spm 1619a.1.0.0.3f0865abb4Wq5c&id 744014549573&ns 1&abbucket 18#detail)** The M4C Dock is an edge computing box featuring hybrid precision computing capabilities, developed by Sipeed and powered by AXERA's third generation high efficiency AI vision chip, the AX650N. It delivers an impressive 72 TOPS@INT4 or 18 TOPS@INT8 of built in AI computing power, capable of running popular large scale AI models. Equipped with an advanced ISP supporting 8K@30fps video processing and AXERA's proprietary AI ISP technology for superior low light night vision performance, it also integrates H.264/H.265 codecs capable of stable 8K@60fps decoding and 8K@30fps encoding. Real world testing demonstrates reliable 32 channel 1080P@30fps decoding and 16 channel 1080P@30fps encoding. The AX650N chip features comprehensive interfaces including 64 bit LPDDR4x memory, multi channel MIPI input, Gigabit Ethernet, USB 3.0, and HDMI 2.0b output. Combining powerful computing with exceptional codec capabilities, it meets industry demands for high performance edge AI computing. The single core NPU delivers outstanding performance (single core performance), achieving: 130 FPS (7.66ms latency) for yolov5s at 640×640 resolution 1798 FPS (0.556ms latency) for MobileNetV2 at 224×224 resolution Supporting diverse deep learning algorithms, it enables applications including visual structuring, behavior analysis, and status detection, with optimized support for Transformer architectures and large vision models. Comprehensive development documentation facilitates secondary development for customized solutions. ## Key Specifications Component Description CPU 8x A55@1.7Ghz, integrated FPU, supports NEON acceleration NPU 72 TOPS@INT4 / 18 TOPS@INT8, supporting INT4/INT8/INT16/FP16/FP32 inputs, TopN (N< 32) ISP Supports up to 8192x4320@30fps, maximum resolution: 16384x16384, featuring AI ISP (low light night vision) CODEC H.264/H.265 encoding/decoding, up to 8K@60fps decoding & 8K@30fps encoding capability DSP Dual core 800MHz Memory 8GB 64 bit LPDDR4x (adjustable allocation: default 2GB system + 6GB AI CMM) Storage 32GB eMMC 5.1 onboard (system storage) plus 3x SATA 3.0 6Gb/s (1× M.2 + 2× standard SATA ports) Video Output Dual HDMI 2.0a (4K@60fps max) Video Input Dual 4 lane MIPI CSI camera interfaces (3.5Gbps) Network Dual Gigabit Ethernet ports (tested throughput: 944Mbps) PCIE 1 lane PCIe 2.0 (5Gbps) via Mini PCIe interface USB 1× USB3.2 Gen1 (5Gbps) + 3× USB2.0 (480Mbps) (blue port farthest from Ethernet is OTG programming port) Others 1x RS485 + 1x RS232 + 3x user controlled led ## Resources ### Hardware Documentation Datasheet: https://dl.sipeed.com/shareURL/MaixIV/M4N Dock ### Software Documentation Docs: https://dl.sipeed.com/shareURL/MaixIV/M4N Dock SDK: https://github.com/AXERA TECH/ax650n_bsp_sdk ### AI Development AI Toolchain (ONNX Conversion/Deployment) Pulsar2 (AXERA's ALL IN ONE Neural Network Compiler): Docs: https://pulsar2 docs.readthedocs.io/en/latest/pulsar2/introduction.html Download: https://huggingface.co/AXERA TECH/Pulsar2/tree/main op_support_list: https://pulsar2 docs.readthedocs.io/en/latest/appendix/op_support_list_ax650.html Samples source: https://github.com/AXERA TECH/ax samples ## Technical Support For custom development (kernel/OS customization, application layer SDKs), contact: support@sipeed."},"/hardware/en/maixIV/m4c/system-update.html":{"title":"","content":"This guide provides detailed instructions for two system flashing methods for the M4N development board series: 1. booting and flashing eMMC via TFCard 2. flashing using the AXDL tool Please choose the appropriate method based on your needs. ## Image File *Due to the large size of the image packages used in the flashing methods described on this page and limited bandwidth on the download site, they are stored exclusively on Mega Drive in the same directory. The entry link can be found in the [top side of the download site](https://dl.sipeed.com/)。* Image Type How to Boot Filename How to Obtain TFCard&eMMC Image `power up Boot from eMMC` or `Manual boot from TFCard` `sdcard.img` path: MaixIV/M4N Dock/09_Image/TFCard&eMMC Images AXSDK AXP `power up Boot from eMMC` `xxx.axp` path: MaixIV/M4N Dock/09_Image/ubuntu f the downloaded image file has an .xz extension, decompress it first. Linux users can use the xz tool, while Windows users can use tools like 7 zip. ![](../../../zh/maixIV/assets/baidupan dl.png) ## Booting and Flashing eMMC via TFCard ### Booting into the Live System (Manual Intervention Required) #### Step 1: Prepare TFCard and Flash the Image Prepare a TFCard with at least 8GB capacity and use any card reader tool or the computer's built in card slot for reading/writing. Note: The following operations will erase all data on the TFCard. Back up important data beforehand. HOST OS Flashing Method Linux `sudo dd if sdcard.img of /dev/sdX bs 4M conv fsync status progress` Windows Use `Win32DiskImager`, `Rufus` or `balenaEtcher` to flash the image Example for Linux: ```bash # Assuming the TFCard is mounted as /dev/sdb % sudo dd if sdcard.img of /dev/sdb bs 4G conv sparse,fsync status progress 0+3 records in 0+3 records out 5754429440 bytes (5.8 GB, 5.4 GiB) copied, 89.2665 s, 64.5 MB/s ``` #### Step 2: Booting into the Live System Using the Flashed TFCard **TFCard Boot Method** Board Device Tree Blob TF Card Slot Location `BOOT` Button Location Dock `dtbs/m4nbox.dtb` Top left corner, diagonal to Type C port Next to Type C port (labeled BOOT) Hat `dtbs/m4nhat.dtb` Behind USB3 port, near the notch Next to HDMI port (labeled BOOT0) Cluster `dtbs/m4ncluster.dtb` Below M.2 slot Next to Type C port (labeled BOOT) 1. Mount the TFCard and modify the `dtb_img_name dtbs/m4nbox.dtb` line in the FAT32 partition's `config.txt` file to match your board. 2. Insert the TFCard into the TF card slot. 3. Hold the `BOOT` button and reset the board: Option 1: Power cycle (unplug and replug power). Option 2: Press and release the `RST` button while powered on. Note for M4C Dock: If the front panel is obstructed, remove it by unscrewing the 3 screws and rotating it open. After completing these steps, the Live system should boot. You can observe the boot logs via UART0. **This Live system is fully functional and ready for immediate use. If you want the system to boot automatically without manual button operations, proceed to flash the image to eMMC as described below.** ### Flashing eMMC from the Live System (Automatic Boot on Power Up) The onboard eMMC is always recognized as `/dev/mmcblk0`, while the TFCard is `/dev/mmcblk1`. Be careful to distinguish between them. There are two methods are provided below for flashing the image to eMMC: #### Method 1: Directly Recovery from the Live System 1. Boot into the Live system as described earlier and open a terminal for the following steps. 2. Use `dd` to **recovery** the Live system from the TFCard to eMMC: ```sh dd if /dev/mmcblk1 of /dev/mmcblk0 bs 3M count 1 conv fsync sync # 确保分区表生效 dd if /dev/mmcblk1p1 of /dev/mmcblk0p1 bs 64M conv fsync dd if /dev/mmcblk1p2 of /dev/mmcblk0p2 bs 1G conv sparse,fsync status progress fsck y /dev/mmcblk0p2 sync ``` 3. After completion, remove the TFCard. Just press the `RST` button and the system will now directly boot from eMMC. #### Method 2: Flash the Image within the Live System Prerequisite: The second partition (ext4) of the TFCard must be accessible and writable. If unsure, use Method 1. 1. Copy the sdcard.img file to any location in the second partition (Live system root directory). 2. Flash the image to eMMC: ```sh dd if /path/to/sdcard.img of /dev/mmcblk0 bs 1G conv sparse,fsync status progress ``` 3. After completion, remove the TFCard. Just press the `RST` button and the system will now directly boot from eMMC. ## Flashing via AXDL Software The flashing file format has changed to be like `xxx.axp`. For detailed steps, refer to the `AXDL 工具使用指南.pdf` in the official SDK documentation package. **Tip: The Download button on the official EVB corresponds to the BOOT button on other boards.** The AXDL software (Windows only) is located in the `PC_Software` directory on the download site. **Important Notes for M4C Dock:** **The USB flashing port is the bottom `USB A port` near the `HDMI` connector (Ethernet side). Use an `A to A` cable or `A to C` cable if your PC has a `Type C port`.** **Do `not` connect the `12V power supply` during flashing. Use only the USB cable to avoid damaging the `PC's USB port`.**"},"/hardware/en/maixIV/m4c/FAQ.html":{"title":"","content":"## How to enable root user password login for SSH when the correct password is entered but login fails? Default password: root *For security reasons, the default policy only allows the root user to log in remotely via SSH key authentication, which is not only convenient and fast but also secure. The required steps are as follows: After logging into the system via serial port or desktop, manually paste your public key into the `/root/.ssh/authorized_keys` file (create the file if it does not exist). For a more detailed process, you can search for \"SSH login with key\" or refer directly to this [tutorial](https://www.runoob.com/w3cnote/set ssh login key.html)。* If you insist on enabling password login, follow these steps: ```bash # Log in via the serial terminal and execute the following commands: # Enable remote password login for the root user echo \"PermitRootLogin yes\" > /etc/ssh/sshd_config.d/allow root.conf systemctl restart sshd ``` After development, to avoid risks caused by accidental root password leakage, it is recommended to disable remote password login for the root user by executing the following commands: ```bash # Log in to any terminal and execute the following commands: # Disable remote password login for the root user rm /etc/ssh/sshd_config.d/allow root.conf systemctl restart sshd ``` ## Q: The root filesystem partition is too small by default when using TFCard & eMMC images. How to expand eMMC or TFCard? ```bash # Log in to any terminal and execute the following commands: # Replace mmcblkX below with mmcblk0 (eMMC) or mmcblk1 (TFCard). # /dev/mmcblkXp2 is the second partition, which is the root filesystem partition. parted /dev/mmcblkX resizepart 2 100% resize2fs /dev/mmcblkXp2 sync ``` ## Q: Some large language models require executing tokenizer related Python scripts, but an error \"ModuleNotFoundError\" occurs. How to resolve this? ```bash # To avoid polluting the system Python libraries, create a virtual environment: apt install python3 venv python3 m venv venv llm # Activate the virtual environment: source venv llm/bin/activate # Install the missing Python modules (use Tsinghua Mirror for faster installation in China): pip install transformers jinja2 i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple # After installation, you can proceed to execute the script. ``` Remember to activate the virtual environment before running related Python scripts each time: ```bash # Activate the virtual environment: source venv llm/bin/activate ``` ## Q: If GPIO2_A27 is configured as I2C3_SCL in the device tree, how can I control GPIO2_A27 when I2C3 is not in use? (pinctrl) ```bash cd /sys/kernel/debug/pinctrl/4250200.pinctrl grep \"GPIO2_A27\" pinmux functions # output # function 447: GPIO2_A27, groups [ I2C3_SCL ] grep \"I2C3_SCL\" pinmux pins # output # pin 87 (I2C3_SCL): device 2024000.i2c function i2c3_scl group I2C3_SCL echo 2024000.i2c > /sys/bus/platform/drivers/i2c_designware/unbind grep \"I2C3_SCL\" pinmux pins # output # pin 87 (I2C3_SCL): UNCLAIMED # echo \"<group name function name>\" > pinmux select echo \"I2C3_SCL GPIO2_A27\" > pinmux select gpioset gpiochip2 27 0 gpioset gpiochip2 27 1 ``` ## Q: The MAC physical address is randomly generated upon each reboot, causing unstable IP addresses. How can this be resolved? A: Starting from sdcard 20250627.img.xz, the `config.txt` file in the root directory of the first partition (FAT32) contains the U Boot environment variable configuration. To permanently modify the MAC addresses of the corresponding network interfaces, add the environment variables `ethaddr` and `eth1addr` like this below: ``` ethaddr d0:00:00:00:00:03 eth1addr d0:00:00:00:00:04 ``` ![](../../../zh/maixIV/assets/m4c/set macaddress.png)"},"/hardware/en/maixIV/m4c/axmodel-deploy.html":{"title":"Deploying AI Models on M4C","content":"# Deploying AI Models on M4C ## Deploying Large Language and Multimodal Models Obtain models and runtime environments from the following sources. Deployment instructions can be found in each repository's README.md. Official AXERA Models: https://huggingface.co/AXERA TECH China Mirror Site: https://hf mirror.com/AXERA TECH Model Link China Mirror Link Qwen3:0.6b [Qwen3 0.6B Int8](https://huggingface.co/AXERA TECH/Qwen3 0.6B) [Qwen3 0.6B Int8](https://hf mirror.com/AXERA TECH/Qwen3 0.6B) DeepSeek R1:1.5b [DeepSeek R1 Distill Qwen 1.5B](https://huggingface.co/AXERA TECH/DeepSeek R1 Distill Qwen 1.5B) [DeepSeek R1 Distill Qwen 1.5B](https://hf mirror.com/AXERA TECH/DeepSeek R1 Distill Qwen 1.5B) Qwen2.5:1.5b [Qwen2.5 1.5B Instruct GPTQ Int8](https://huggingface.co/AXERA TECH/Qwen2.5 1.5B Instruct GPTQ Int8) [Qwen2.5 1.5B Instruct GPTQ Int8](https://hf mirror.com/AXERA TECH/Qwen2.5 1.5B Instruct GPTQ Int8) SD1.5 [lcm lora sdv1 5](https://huggingface.co/AXERA TECH/lcm lora sdv1 5) [lcm lora sdv1 5](https://hf mirror.com/AXERA TECH/lcm lora sdv1 5) InternVL2.5:1b [InternVL2_5 1B Int8](https://huggingface.co/AXERA TECH/InternVL2_5 1B) [InternVL2_5 1B Int8](https://hf mirror.com/AXERA TECH/InternVL2_5 1B) **Important Note:** All above models require system images compiled with `SDK 1.45.0` or `later` to run large models. Please update your system accordingly. Our provided TFCard&eMMC images meet this requirement and reserve 6GB memory for model loading, capable of running 7B parameter int4 models. *Quick test with Qwen3 0.6b:* ```bash # Can replace with links to other model repositories git clone https://hf mirror.com/AXERA TECH/Qwen3 0.6B cd Qwen3 0.6B # If ModuleNotFoundError occurs, refer to FAQ for details python3 qwen3_tokenizer_uid.py # Switch to corresponding execution script and restore necessary permissions chmod +x main_ax650 sh run_qwen3_0.6b_int8_ctx_ax650.sh ```"},"/hardware/en/maixIV/m4chat/quick-start.html":{"title":"","content":"## System Update For details, refer to the [Flashing OS Image](../m4c/system update.html)，The TFCard&eMMC image (Debian 12) is recommended. The following instructions are based on this image. If using a custom built image, pay attention to operational details. ## System Boot ### Pre Boot Preparation 1. 5V USB power supply 2. mini HDMI cable and display 3. USB serial tool (e.g., [SLogic Combo8](../../logic_analyzer/combo8/index.html) (optional, for debugging/login)) ### Normal Boot <div style \"display: flex; flex wrap: wrap; gap: 10px; width: 100%;\"> <img src \"../../../zh/maixIV/assets/m4chat/DSC07545.JPG\" style \"width: calc(50% 5px);\"> <img src \"../../../zh/maixIV/assets/m4chat/DSC07546.JPG\" style \"width: calc(50% 5px);\"> </div> 1. Login Interface Connect a display via mini HDMI and power on. The core board’s blue LED and Hat baseboard’s white LED should light up, indicating normal power supply. If the eMMC contains the default Raspberry Pi slave image, flash a new standalone image to the TF card and insert it into the M4C Hat. Press and hold the `BOOT0` button, then press `RST`. After ~20 seconds, the LightDM login screen will appear, indicating a successful boot. 2. Xfce4 Desktop Connect a mouse/keyboard to the onboard USB A port for input. Default credentials: Username: `root`, Password: `root`. ### Advanced: Serial & SSH Login The onboard Type C USB port serves as the default debug UART (**115200 8n1**). Use a serial tool to view kernel logs or log in directly via terminal. For SSH access, expand network connectivity via USB Ethernet/WiFi dongles. Note: The system only has the root superuser, and SSH password login is disabled by default for security. For temporary access, refer to [here](../m4c/FAQ.html)。 ## LLM ### DeepSeek R1 & QWen3 Left: [DeepSeek R1 1.5B](https://huggingface.co/AXERA TECH/DeepSeek R1 Distill Qwen 1.5B) Right: [QWen3 0.6B](https://huggingface.co/AXERA TECH/Qwen3 0.6B) Deployment guide: [here](../m4c/axmodel deploy.html#部署大语言、多模态模型) ![DSr1 1.5B and QWen 0.6B](../../../zh/maixIV/assets/m4chat/DSr1 1.5B and QWen 0.6B.jpg) ## VLM ### internVL3 ![internVL3 demo](../../../zh/maixIV/assets/m4chat/internVL3 demo.jpg) Demo video: <video controls autoplay src \"../../../zh/maixIV/assets/m4chat/m4chat run llm internVL 2025 07 07.mp4\" type \"video/mp4\"> Your browser does not support video playback. </video> ## DepthAnything v2 1. Download the [axcl npu python library](https://github.com/AXERA TECH/pyaxengine/releases) 2. Install: `pip install axengine x.y.z py3 none any.whl`. 3. Run: ```bash source ../venv llm/bin/activate python python/infer.py img examples/demo02.jpg model depth_anything_v2_vits_ax650.axmodel ``` ![DepthAnything v2 before](../../../zh/maixIV/assets/m4chat/DSC07539.JPG) ![DepthAnything v2 after](../../../zh/maixIV/assets/m4chat/DSC07540.JPG) ![depthanything output](../../../zh/maixIV/assets/m4chat/depthanything output.png) ## Interactive Image Segmentation & Inpainting A QT based GUI for real time segmentation (point/box selection) and inpainting. ![samqt](../../../zh/maixIV/assets/samqt.jpg) Open Source Official GitHub Repo: [SAM ONNX AX650 CPP](https://github.com/AXERA TECH/SAM ONNX AX650 CPP) Download prebuilt binaries or compile from source. Example: Removing a player from a photo: <div><table><tr> <td><img src \"../../../zh/maixIV/assets/sam_example_before.png\" alt sam_example_before border 0></td> <td><img src \"../../../zh/maixIV/assets/sam_example_after.png\" alt sam_example_after border 0></td> </tr></table></div> Live Demo (Screenshots): <div><table><tr> <td><img src \"../../../zh/maixIV/assets/sam_raw.jpg\" alt sam_raw border 0></td> <td><img src \"../../../zh/maixIV/assets/sam_sam.jpg\" alt sam_sam border 0></td> <td><img src \"../../../zh/maixIV/assets/sam_inpaint.jpg\" alt sam_inpaint border 0></td> </tr><tr> <td>RAW</td> <td>SAM</td> <td>Inpaint</td> </tr></table></div> ## Interactive Text to Image Search (CLIP) A QT based GUI using OpenAI’s CLIP (Contrastive Language–Image Pre training) for zero shot image retrieval via text input (supports Chinese/English). Open Source Official GitHub Repo: [CLIP ONNX AX650 CPP](https://github.com/AXERA TECH/CLIP ONNX AX650 CPP) [DEMO VIDEO](https://github.com/sipeed/sipeed_wiki/assets/13964381/df4cec7f 29af 465f bfad e54312274437) 1. Install QT: ```bash apt update apt install cmake qt6 base dev ``` 2. Download prebuilt files (executable, models, test images/text): [Baidu Pan](https://pan.baidu.com/s/17M5ugUyuf9mbi1cHLGJHXg) 3. Extract *CLIP.zip* to `/root/Desktop/`: ```bash root@m4nhat 7190c7:~/Desktop/CLIP# tree L 1 . ├── CLIPQT ├── cn_vocab.txt ├── coco_1000 ├── libonnxruntime.so ├── libonnxruntime.so.1.16.0 ├── onnx_models ├── run_en.sh ├── run_zh.sh └── vocab.txt ``` 4. Run in Desktop's terminal: ```bash ./run_zh.sh # For Chinese ./run_en.sh # For English ``` Screenshots: ![b38722991915fa54f17df18ca1f1447](https://github.com/AXERA TECH/CLIP ONNX AX650 CPP/assets/13964381/8fa2c4b8 b061 413e b72d 298bb4a445aa) ![34c8b68b1a8721d4ebff3b4b7184733](https://github.com/AXERA TECH/CLIP ONNX AX650 CPP/assets/13964381/7d0b9740 3598 492c ad42 2de23e7764e2)"},"/hardware/en/maixIV/m4chat/intro.html":{"title":"","content":"## Introduction The M4C Hat is a highly integrated AI computing module developed by Sipeed, featuring a compact design powered by AXERA's AX650N/C chip. As an embedded expansion module, it delivers 72 TOPS@INT4 (18 TOPS@INT8) computing power while retaining 8K video encoding/decoding capabilities, making it ideal for space constrained edge computing applications. This module supports plug and play compatibility with mainstream Raspberry Pi development boards and accelerates Transformer based architectures. With its onboard 0.8mm 4 pin USB and Type A USB SS 5Gbps interfaces, it enables quick expansion for peripherals like cameras and storage, making it perfect for smart cameras, industrial inspection, and other lightweight AI applications. The PCIE 2.0 expansion interface is fully compatible with Raspberry Pi 5, supporting multi modal edge computing nodes and the deployment of quantized large models such as QWen 2.5, QWen 3, DeepSeek, and InternVL2.5. ## Showcase <div style \"display: flex; flex wrap: wrap; gap: 10px; width: 100%;\"> <img src \"../../../zh/maixIV/assets/m4chat/DSC07555.JPG\" style \"width: calc(50% 5px);\"> <img src \"../../../zh/maixIV/assets/m4chat/DSC07569.JPG\" style \"width: calc(50% 5px);\"> <img src \"../../../zh/maixIV/assets/m4chat/DSC07556.JPG\" style \"width: calc(50% 5px);\"> <img src \"../../../zh/maixIV/assets/m4chat/neofetch.jpg\" style \"width: calc(50% 5px);\"> </div> ## Interface Annotation Diagram ![Interface Annotation Diagram](../assets/m4chat/IAD.png) ## Key Specifications Component Description CPU 8x A55@1.7Ghz, integrated FPU, supports NEON acceleration NPU 72 TOPS@INT4 / 18 TOPS@INT8, supports INT4/INT8/INT16/FP16/FP32 inputs, TopN (N< 32) CODEC H.264/H.265 encoding/decoding, up to 8K@60fps decoding & 8K@30fps encoding DSP Dual core 800MHz RAM 8GB 64 bit LPDDR4x (adjustable allocation: default 2GB system + 6GB AI CMM) ROM 32GB eMMC 5.1 (system storage) Video Output 1x HDMI 2.0a (max 4K@60fps) Video Input 11x 0.8mm 4 pin USB camera interface PCIE 1x 16 pin FPC (1 lane PCIE2.0 @5Gbps), Raspberry Pi 5 compatible USB 1x Type A USB SS 5Gbps + 1x Type C USB HS 480Mbps Others 1x 1.25mm 2 pin speaker, 1x 1.25mm 2 pin fan, 1x 10 pin FPC SPI display, 1x 6 pin FPC I2C touch ## Performance Benchmarks ![](../../../zh/maixIV/assets/m4c/benchmark.png) ![](../../../zh/maixIV/assets/m4c/normalized_benchmark.png) Models RK3588@6T Maix4@18T Hailo8 26T Hailo8 13T Inceptionv1 43 2494 928 519 MobileNetv2 960 5073 2433 1738 SqueezeNet11 694 5961 ResNet18 543 2254 ResNet50 294 1045 1368 503 SwinT 21 401 ViT B/16 18 207 107 40 YOLOv5s 48 384 364 168 YOLOv5n 78 743 YOLOv6s 80 321 YOLOv6n 212 743 YOLOv8s 39 279 YOLOv8n 73 710 YOLOxs 34 304 YOLO11s 30 313 Models Item Maix4@18T RK3588@6T SmolVLM 256M Image Encoder 512*512 105ms 842ms TTFT 57ms 87ms Decode 80 tokens/s 77 tokens/s StableDiffusion 1.5(512*512) U Net 0.43 s/it 5.65 s/it VAE Decoder 0.91 s 11.13 s Qwen2.5 VL 3B Image Encoder 448*448 780 ms TTFT 320 tokens 2857 ms Decode 6.2 tokens/s Image Encoder 392*392 2930 ms TTFT 196 tokens 1262 ms Decode 8.6 tokens/s ## Resources ### Hardware Documentation Datasheet: https://dl.sipeed.com/shareURL/MaixIV/M4N Dock ### Software Documentation Docs: https://dl.sipeed.com/shareURL/MaixIV/M4N Dock SDK: https://www.ebaina.com/down/240000038900 ### AI Development LMM & AXCL: https://axcl docs.readthedocs.io Raspberry Pi 5 AXCL Guide: https://axcl pi5 examples cn.readthedocs.io Model Hub: https://huggingface.co/AXERA TECH AI Toolchain (ONNX Conversion/Deployment) Pulsar2 (AXERA's ALL IN ONE Neural Network Compiler): Docs: https://pulsar2 docs.readthedocs.io/en/latest/pulsar2/introduction.html Download: https://huggingface.co/AXERA TECH/Pulsar2/tree/main op_support_list: https://pulsar2 docs.readthedocs.io/en/latest/appendix/op_support_list_ax650.html Samples source: https://github.com/AXERA TECH/ax samples LLM source: https://github.com/AXERA TECH/ax llm ## Technical Support For custom development (kernel/OS customization, application layer SDKs), contact: support@sipeed."},"/hardware/en/maixIV/m4chat/pcie-slaveboard.html":{"title":"","content":"<script src \"https://cdn.jsdelivr.net/npm/chart.js\"></script> # Raspberry Pi 5 PCIe Acceleration Guide ## Final Demo After completing the following prerequisites for Raspberry Pi 5, running [the large language model DeepSeek R1:1.5B](https://huggingface.co/AXERA TECH/DeepSeek R1 Distill Qwen 1.5B GPTQ Int4)(Int4 Quantization for Model Parameters) achieves 13.69 tokens/s (performance for smaller models is limited by PCIe link bandwidth, showing a gap compared to the standalone board's 19 tokens/s),but RPI5 can only achieve 6.12 tokens/s. Watch the demo video: <video controls autoplay src \"../../../zh/maixIV/assets/m4chat/PCIe/axcl run llm on raspi5 2025 08 19 3xspeedup.mp4\" type \"video/mp4\"> Your browser does not support video playback. </video> ## Preparation Maix4 HAT sdcard 20250818.img.zst or newer ### Installation <div style \"display: flex; justify content: space between;\"> <img src \"../../../zh/maixIV/assets/m4chat/DSC07559.JPG\" style \"width: 48%;\"> <img src \"../../../zh/maixIV/assets/m4chat/DSC07561.JPG\" style \"width: 48%;\"> </div> ![](../../../zh/maixIV/assets/m4chat/DSC07569.JPG) ### Flashing the Maix4 HAT Slave System 1.Connect the Maix4 HAT to the Raspberry Pi 5's PCIe slot using an FPC cable and secure it. 2.Powering the Raspberry Pi 5 and Maix4 HAT. 3.Refer to the [System Flashing Guide](../m4c/system update.html#Booting into the Live System (Manual Intervention Required)) and boot into the TFCard Live System。 4.Execute `dd if /boot/spl_AX650_card_signed.bin of /dev/mmcblk0 conv fsync` to flash the slave system for supporting PCIe boot: ```bash root@m4chat 08080a:~# dd if /boot/spl_AX650_card_signed.bin of /dev/mmcblk0 conv fsync 512+0 records in 512+0 records out 262144 bytes (262 kB, 256 KiB) copied, 0.0165514 s, 15.8 MB/s ``` 5.Enable Raspberry Pi 5's PCIe x1 Interface. Run `sudo raspi config → 6 Advanced Options → A8 PCIe Speed → Select Yes` for PCIe x1 Gen3. 5.1.or Manually add contents below to `/boot/firmware/config.txt`: ```bash [all] dtparam pciex1_gen 3 ``` Actually the `config.txt` file is located in the FAT32 type partition, so you can modify it after mount it on your PC directly. > Note: Newly flashed Raspberry Pi SD cards lack the /boot/firmware directory. Boot once to generate it. 6. Reboot Raspberry Pi. Verify the accelerator card is detected with `lspci`: ```bash sipeed@rpi sipeed:~$ lspci 0001:00:00.0 PCI bridge: Broadcom Inc. and subsidiaries BCM2712 PCIe Bridge (rev 21) 0001:01:00.0 Multimedia video controller: Axera Semiconductor Co., Ltd Device 0650 (rev01) 0002:00:00.0 PCI bridge: Broadcom Inc. and subsidiaries BCM2712 PCIe Bridge (rev 21) 0002:01:00.0 Ethernet controller: Raspberry Pi Ltd RP1 PCIe 2.0 South Bridge ``` The first two lines confirm PCIe initialization and detection of the Axera AX650 controller. ANd the `Multimedia video controller: Axera Semiconductor Co., Ltd Device 0650 (rev01)` has been mounted correctly. ### Installing AXCL Software on Raspberry Pi 5 You can download it separately to the Raspberry Pi development board from the download site, or directly use the provided AIDemos.tar.zst below. After PCIe detection, install the AXCL package for model acceleration: ```bash $ sudo apt install axcl_host_aarch64_V3.6.2_20250603154858_NO4873.deb # If your PCIe device is detected (visible in lspci), but axcl smi fails to display it, follow these steps to reinstall the driver: sudo apt install reinstall axcl_host_aarch64_V3.6.2_20250603154858_NO4873.deb ``` Reboot the Pi. Verify installation with `axcl smi`: ```bash sipeed@rpi sipeed:~$ axcl smi + + AXCL SMI V3.6.2_20250603154858 Driver V3.6.2_20250603154858 + + + + Card Name Firmware Bus Id Memory Usage Fan Temp Pwr:Usage/Cap CPU NPU CMM Usage + + 0 AX650N V3.6.2 0001:01:00.0 148 MiB / 945 MiB 55C / 0% 0% 18 MiB / 7040 MiB + + + + + + Processes: Card PID Process Name NPU Memory Usage ``` ## Model Demonstration Guide Download [AIDemos.tar.zst](https://mega.nz/folder/NxxEzRAB#e sA_IK0K5JqQM6FnCH6_Q) from the cloud storage and extract it to reproduce and experience the following deployed models. ### Preparation: Prepare the Python environment and install the `axengine` package. ```bash cd /path/to/AIDemos/extra python m venv venv llm source venv llm/bin/activate pip install r requirements.txt pip install axengine 0.1.3 py3 none any.whl ``` Result: ```bash sipeed@rpi sipeed:~/Downloads/AIDemos/extra $ ls lh total 44M rw r r 1 sipeed sipeed 44M Aug 14 09:04 axcl_host_aarch64_V3.6.2_20250603154858_NO4873.deb rw r r 1 sipeed sipeed 19K Aug 14 09:46 axengine 0.1.3 py3 none any.whl rw r r 1 sipeed sipeed 1.3K Aug 18 08:50 requirements.txt drwxr xr x 6 sipeed sipeed 4.0K Aug 18 03:24 venv llm ``` ### YOLO11 Link: https://huggingface.co/AXERA TECH/YOLO11 Preparation: ```bash source ../extra/venv llm/bin/activate ``` Example: ```bash sipeed@rpi sipeed:~/Downloads/AIDemos/YOLO11 $ ls axcl_yolo11 ax_yolo11\tfootball.jpg ssd_horse.jpg yolo11s.axmodel yolo11x.axmodel sipeed@rpi sipeed:~/Downloads/AIDemos/YOLO11 $ ./axcl_yolo11 m yolo11s.axmodel i football.jpg model file : yolo11s.axmodel image file : football.jpg img_h, img_w : 640 640 axclrtEngineCreateContextt is done. axclrtEngineGetIOInfo is done. grpid: 0 input size: 1 name: images 1 x 640 x 640 x 3 output size: 3 name: /model.23/Concat_output_0 1 x 80 x 80 x 144 name: /model.23/Concat_1_output_0 1 x 40 x 40 x 144 name: /model.23/Concat_2_output_0 1 x 20 x 20 x 144 Engine push input is done. post process cost time:0.90 ms Repeat 1 times, avg time 3.34 ms, max_time 3.34 ms, min_time 3.34 ms detection num: 7 0: 95%, [ 759, 213, 1126, 1152], person 0: 94%, [ 0, 359, 315, 1107], person 0: 94%, [1350, 344, 1629, 1036], person 0: 89%, [ 490, 480, 658, 996], person 32: 73%, [ 771, 888, 830, 939], sports ball 32: 67%, [1231, 876, 1280, 924], sports ball 0: 62%, [ 0, 565, 86, 995], person ``` <div style \"display: flex; justify content: space between;\"> <img src \"../../../zh/maixIV/assets/m4chat/PCIe/football.jpg\" style \"width: 48%;\"> <img src \"../../../zh/maixIV/assets/m4chat/PCIe/yolo11_out.jpg\" style \"width: 48%;\"> </div> <div style \"width: 80%; margin: 0 auto;\"> <canvas id \"YOLOv11BarChart\"></canvas> <script> var ctx document.getElementById('YOLOv11BarChart').getContext('2d'); var YOLOv11BarChart new Chart(ctx, { type: 'bar', data: { labels: ['YOLOv11s', 'YOLOv11x'], // Now the models are the labels datasets: [ { label: 'Maix4 HAT 24T(PCIe mode)', data: [298, 40.48], backgroundColor: 'rgba(255, 99, 132, 0.2)', borderColor: 'rgba(255, 99, 132, 1)', borderWidth: 1 }, { label: 'Jetson Orin Nano Super 67T', data: [196.85, 50.25], backgroundColor: 'rgba(54, 162, 235, 0.2)', borderColor: 'rgba(54, 162, 235, 1)', borderWidth: 1 }, { label: 'Hailo8 26T', data: [147, 0], backgroundColor: 'rgba(255, 206, 86, 0.2)', // Gold borderColor: 'rgba(255, 206, 86, 1)', borderWidth: 1 } ] }, options: { responsive: true, plugins: { title: { display: true, text: 'YOLOv11 Performance Benchmark(fps)', // Chart title added here font: { size: 20 } }, legend: { position: 'top', }, tooltip: { callbacks: { label: function(tooltipItem) { return tooltipItem.dataset.label + ': ' + tooltipItem.raw + ' fps'; } } } }, scales: { y: { beginAtZero: true } } } }); </script> </div> Data Source Attribution: [Ultralytics](https://docs.ultralytics.com/zh/guides/nvidia jetson/#nvidia jetson orin nano super developer kit_1), [RK3588](https://github.com/yuunnn w/rknn cpp yolo?tab readme ov file#report inference results and speed) ### DeepSeek R1 Distill Qwen 1.5B GPTQ Int4 Link: https://huggingface.co/AXERA TECH/DeepSeek R1 Distill Qwen 1.5B GPTQ Int4 Usage: ```bash ./run_from_pi.sh ``` Example: ```bash sipeed@rpi sipeed:~/Downloads/AIDemos/DeepSeek R1 Distill Qwen 1.5B GPTQ Int4 $ ./run_from_pi.sh Main script running (PID: 9852), subprocess PID: 9856 build time: Feb 13 2025 15:44:57 [I][ Init][ 111]: LLM init start bos_id: 151646, eos_id: 151643 100% ████████████████████████████████ 31 / 31 [17.22s<17.22s, 1.80 count/s] init post axmodel okremain_cmm( 1 MB) [I][ Init][ 226]: max_token_len : 1023 [I][ Init][ 231]: kv_cache_size : 256, kv_cache_num: 1023 [I][ load_config][ 282]: load config: { \"enable_repetition_penalty\": false, \"enable_temperature\": true, \"enable_top_k_sampling\": true, \"enable_top_p_sampling\": false, \"penalty_window\": 20, \"repetition_penalty\": 1.2, \"temperature\": 0.9, \"top_k\": 10, \"top_p\": 0.8 } [I][ Init][ 288]: LLM init ok Type \"q\" to exit, Ctrl+c to stop current running >> what can you do? <think> </think> I'm DeepSeek R1, an AI assistant created exclusively by DeepSeek. My purpose is to help you generate helpful responses. I don't have personal experiences or emotions, so I don't have feelings, but I'm focused on providing accurate and useful information. For more information, please visit DeepSeek's official website. [N][ Run][ 610]: hit eos,avg 13.69 token/s >> ``` <div style \"width: 80%; margin: 0 auto;\"> <canvas id \"DeepSeekR1BarChart\"></canvas> <script> var ctx document.getElementById('DeepSeekR1BarChart').getContext('2d'); var DeepSeekR1BarChart new Chart(ctx, { type: 'bar', data: { labels: ['DSR1:1.5B', 'DSR1:7B'], // Models as labels datasets: [ { label: 'Maix4 HAT 24T(PCIe mode)', data: [13.69, 4.64], backgroundColor: 'rgba(255, 99, 132, 0.2)', borderColor: 'rgba(255, 99, 132, 1)', borderWidth: 1 }, { label: 'RPI5', data: [6.12, 1.43], backgroundColor: 'rgba(54, 162, 235, 0.2)', borderColor: 'rgba(54, 162, 235, 1)', borderWidth: 1 } ] }, options: { responsive: true, plugins: { title: { display: true, text: 'DeepSeek R1 Performance Benchmark(higher is better)', // Chart title added here font: { size: 20 } }, legend: { position: 'top', }, tooltip: { callbacks: { label: function(tooltipItem) { return tooltipItem.dataset.label + ': ' + tooltipItem.raw + ' token/s'; } } } }, scales: { y: { beginAtZero: true } } } }); </script> </div> Data Source Attribution: [deepseek r1 on RPI5](https://dev.to/jeremycmorgan/running deepseek r1 locally on a raspberry pi 1gh8) ### InternVL2_5 1B Link: https://huggingface.co/AXERA TECH/InternVL2_5 1B Usage: ```bash ./run_from_pi.sh ``` Example: ```bash sipeed@rpi sipeed:~/Downloads/AIDemos/InternVL2_5 1B $ ./run_from_pi.sh Main script running (PID: 10379), subprocess PID: 10383 [I][ Init][ 128]: LLM init start [I][ Init][ 321]: connect http://127.0.0.1:49152 ok bos_id: 1, eos_id: 151645 7% ███ 2 / 27 [0.70s<9.41s, 2.87 count/s] embed_selector init ok [I][ run][ 30]: AXCLWorker start with devid 0 100% ████████████████████████████████ 27 / 27 [18.42s<18.42s, 1.47 count/s] init post axmodel ok,remain_cmm(6433 MB)6574 MB) [I][ Init][ 225]: image_encoder_height : 448, image_encoder_width: 448 [I][ Init][ 227]: max_token_len : 1023 [I][ Init][ 230]: kv_cache_size : 128, kv_cache_num: 1023 [I][ Init][ 238]: prefill_token_num : 320 [I][ Init][ 240]: prefill_max_token_num : 320 ________________________ ID remain cmm(MB) 0 6066 ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ [I][ load_config][ 282]: load config: { \"enable_repetition_penalty\": false, \"enable_temperature\": true, \"enable_top_k_sampling\": true, \"enable_top_p_sampling\": false, \"penalty_window\": 20, \"repetition_penalty\": 1.2, \"temperature\": 0.9, \"top_k\": 10, \"top_p\": 0.8 } [I][ Init][ 337]: LLM init ok Type \"q\" to exit, Ctrl+c to stop current running prompt >> describe the picture in English image >> ssd_car.jpg [I][ Encode][ 393]: image encode time : 362.10 ms, size : 229376 [I][ Encode][ 453]: offset : 42 out_embed.size() : 276864 [I][ Run][ 481]: input token num : 309, prefill_split_num : 1 [I][ Run][ 604]: ttft: 510.61 ms The image shows a classic red double decker bus parked on the side of a city street. The bus is adorned with advertisements, one of which reads, \"THINGS GET MORE EXCITING WHEN YOU SAY YES,\" along with a website, \"VMGIVING.COM.\" The bus number on it is 16. In the foreground, a woman is standing with a cheerful expression. She is wearing a black coat, a scarf, and jeans and appears to be smiling at the camera. In front of her, there is a streetcar, also red, passing by. The street is marked with a bicycle lane, indicated by a dashed white line on the road. In the background, several multi story buildings, likely commercial establishments, are visible. The setting appears to be a bustling urban area, with a mix of historical and modern architecture, suggesting a city center. [N][ Run][ 756]: hit eos,avg 18.73 token/s prompt >> ``` ![ssd_car.jpg](../../../zh/maixIV/assets/m4chat/PCIe/ssd_car.jpg) ### lcm lora sdv1 5 Link: https://huggingface.co/AXERA TECH/lcm lora sdv1 5 Preparation: ```bash source ../extra/venv llm/bin/activate ``` Usage: ```bash python run_txt2img_axe_infer_once.py prompt 'two beautiful girl' # or python run_txt2img_axe_infer_loop.py # wait it be ready and then type prompt and press Enter # or python run_img2img_axe_infer.py prompt \"8k, cute\" init_image txt2img_output_axe.png ``` Example: ```bash (venv llm) sipeed@rpi sipeed:~/Downloads/AIDemos/lcm lora sdv1 5 $ python run_txt2img_axe_infer_once.py prompt 'two beautiful girl' [INFO] Available providers: ['AXCLRTExecutionProvider'] prompt: two beautiful girl text_tokenizer: ./models/tokenizer text_encoder: ./models/text_encoder unet_model: ./models/unet.axmodel vae_decoder_model: ./models/vae_decoder.axmodel time_input: ./models/time_input_txt2img.npy save_dir: ./txt2img_output_axe.png [INFO] Using provider: AXCLRTExecutionProvider [INFO] SOC Name: AX650N [INFO] VNPU type: VNPUType.DISABLED [INFO] Compiler version: 3.4 9215b7e5 text encoder take 4936.9ms [INFO] Using provider: AXCLRTExecutionProvider [INFO] SOC Name: AX650N [INFO] VNPU type: VNPUType.DISABLED [INFO] Compiler version: 3.3 972f38ca [INFO] Using provider: AXCLRTExecutionProvider [INFO] SOC Name: AX650N [INFO] VNPU type: VNPUType.DISABLED [INFO] Compiler version: 3.3 972f38ca load models take 25627.9ms unet once take 433.6ms unet once take 433.4ms unet once take 433.5ms unet once take 433.5ms unet loop take 1736.7ms vae inference take 914.8ms save image take 206.9ms (venv llm) sipeed@rpi sipeed:~/Downloads/AIDemos/lcm lora sdv1 5 $ python run_img2img_axe_infer.py prompt \"8k, cute\" init_image txt2img_output_axe.png [INFO] Available providers: ['AXCLRTExecutionProvider'] prompt: 8k, cute text_tokenizer: ./models/tokenizer text_encoder: ./models/text_encoder unet_model: ./models/unet.axmodel vae_encoder_model: ./models/vae_encoder.axmodel vae_decoder_model: ./models/vae_decoder.axmodel init image: txt2img_output_axe.png time_input: ./models/time_input_img2img.npy save_dir: ./img2img_output_axe.png [INFO] Using provider: AXCLRTExecutionProvider [INFO] SOC Name: AX650N [INFO] VNPU type: VNPUType.DISABLED [INFO] Compiler version: 3.4 9215b7e5 text encoder take 2954.0ms [INFO] Using provider: AXCLRTExecutionProvider [INFO] SOC Name: AX650N [INFO] VNPU type: VNPUType.DISABLED [INFO] Compiler version: 3.3 dirty 2ecead35 dirty [INFO] Using provider: AXCLRTExecutionProvider [INFO] SOC Name: AX650N [INFO] VNPU type: VNPUType.DISABLED [INFO] Compiler version: 3.3 972f38ca [INFO] Using provider: AXCLRTExecutionProvider [INFO] SOC Name: AX650N [INFO] VNPU type: VNPUType.DISABLED [INFO] Compiler version: 3.3 972f38ca load models take 15804.3ms vae encoder inference take 459.1ms unet once take 433.6ms unet once take 433.3ms unet loop take 868.3ms vae decoder inference take 913.7ms grid image saved in ./lcm_lora_sdv1 5_imgGrid_output.png save image take 445.9ms ``` ![img2img_output_axe](../../../zh/maixIV/assets/m4chat/PCIe/img2img_output_axe.png) <div style \"width: 80%; margin: 0 auto;\"> <canvas id \"SDV1_5BarChart\"></canvas> <script> var ctx document.getElementById('SDV1_5BarChart').getContext('2d'); var SDV1_5BarChart new Chart(ctx, { type: 'bar', data: { labels: ['U Net (it/min)', 'VAE Decoder (frame/min)'], // Models as labels datasets: [ { label: 'Maix4 HAT 24T(PCIe mode)', data: [139.53, 65.93], backgroundColor: 'rgba(255, 99, 132, 0.2)', borderColor: 'rgba(255, 99, 132, 1)', borderWidth: 1 }, { label: 'RK3588', data: [10.62, 5.39], backgroundColor: 'rgba(54, 162, 235, 0.2)', borderColor: 'rgba(54, 162, 235, 1)', borderWidth: 1 } ] }, options: { responsive: true, plugins: { title: { display: true, text: 'Stable Diffusion 1.5 (512x512) Performance Benchmark (lower is better)', // Chart title added here font: { size: 20 } }, legend: { position: 'top', }, tooltip: { callbacks: { label: function(tooltipItem) { return tooltipItem.dataset.label + ': ' + tooltipItem.raw; } } } }, scales: { y: { beginAtZero: true } } } }); </script> </div> Data Source Attribution: [RK3588](https://huggingface.co/happyme531/Stable Diffusion 1.5 LCM ONNX RKNN2) ### Depth Anything V2 Link: https://huggingface.co/AXERA TECH/Depth Anything V2 Preparation: ```bash source ../extra/venv llm/bin/activate ``` Usage: ```bash python infer.py model depth_anything_v2_vits.axmodel img examples/demo01.jpg # or python infer_onnx.py model depth_anything_v2_vits.onnx img examples/demo02.jpg ``` ![depth_ouput_ax1](../../../zh/maixIV/assets/m4chat/PCIe/depth_ouput_ax1.png) ![depth_ouput_ax2](../../../zh/maixIV/assets/m4chat/PCIe/depth_ouput_ax2.png) <div style \"width: 80%; margin: 0 auto;\"> <canvas id \"Depth_Anything_V2BarChart\"></canvas> <script> var ctx document.getElementById('Depth_Anything_V2BarChart').getContext('2d'); var Depth_Anything_V2BarChart new Chart(ctx, { type: 'bar', data: { labels: ['Depth Anything V2 (fps)'], // Models as labels datasets: [ { label: 'Maix4 HAT 24T(PCIe mode)', data: [24.39], backgroundColor: 'rgba(255, 99, 132, 0.2)', borderColor: 'rgba(255, 99, 132, 1)', borderWidth: 1 }, { label: 'Jetson Orin', data: [10.2], backgroundColor: 'rgba(54, 162, 235, 0.2)', borderColor: 'rgba(54, 162, 235, 1)', borderWidth: 1 } ] }, options: { responsive: true, plugins: { title: { display: true, text: 'Depth Anything V2 (518x518) Performance Benchmark (fps)', // Chart title added here font: { size: 20 } }, legend: { position: 'top', }, tooltip: { callbacks: { label: function(tooltipItem) { return tooltipItem.dataset.label + ': ' + tooltipItem.raw + ' fps'; } } } }, scales: { y: { beginAtZero: true } } } }); </script> </div> Data Source Attribution: [Jetson Orin](https://github.com/IRCVLab/Depth Anything for Jetson Orin) ### clip Link: https://huggingface.co/AXERA TECH/clip https://github.com/AXERA TECH/clip.axera Preparation: ```bash source ../extra/venv llm/bin/activate ``` Example: ```bash (venv llm) sipeed@rpi sipeed:~/Downloads/AIDemos/clip $ ls clip_vit_l14_336px_image_encoder_all_u16_fc_u8.axmodel\tclip_vit_l14_336px_text_encoder_u16.axmodel images infer.py Tokenizer.py vocab.txt (venv llm) sipeed@rpi sipeed:~/Downloads/AIDemos/clip $ python infer.py [INFO] Available providers: ['AXCLRTExecutionProvider'] [INFO] Using provider: AXCLRTExecutionProvider [INFO] SOC Name: AX650N [INFO] VNPU type: VNPUType.DISABLED [INFO] Compiler version: 4.0 685bfee4 input.1 [1, 3, 336, 336] float32 4002 [1, 768] float32 [INFO] Using provider: AXCLRTExecutionProvider [INFO] SOC Name: AX650N [INFO] VNPU type: VNPUType.DISABLED [INFO] Compiler version: 4.0 685bfee4 texts [1, 77] int32 text_features [1, 768] float32 (14, 768) (11, 768) logits_per_image cat dog husky airplane car cityscape fire person eagle bike pineapple bike2.jpg 0.00 0.02 0.01 0.00 0.46 0.00 0.01 0.29 0.0 0.21 0.00 eagle.jpg 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 1.0 0.00 0.00 mv2seg.png 0.00 0.00 0.00 0.00 0.98 0.00 0.00 0.01 0.0 0.00 0.00 husky.jpeg 0.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.0 0.00 0.00 fire.png 0.00 0.00 0.00 0.00 0.00 0.00 1.00 0.00 0.0 0.00 0.00 dog.jpg 0.00 0.12 0.04 0.00 0.04 0.00 0.00 0.00 0.0 0.80 0.00 cat.jpg 0.91 0.03 0.01 0.00 0.01 0.00 0.01 0.00 0.0 0.01 0.03 big dog.jpg 0.00 0.15 0.07 0.00 0.56 0.00 0.03 0.09 0.0 0.01 0.08 pineapple.jpg 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.0 0.00 1.00 bike.jpg 0.00 0.00 0.01 0.00 0.01 0.00 0.00 0.05 0.0 0.92 0.00 cityscape.png 0.00 0.00 0.00 0.00 0.19 0.24 0.50 0.00 0.0 0.00 0.05 air.jpg 0.00 0.00 0.00 0.94 0.04 0.00 0.01 0.00 0.0 0.01 0.00 dog chai.jpeg 0.00 0.23 0.04 0.00 0.57 0.00 0.06 0.07 0.0 0.01 0.02 grace_hopper.jpg 0.02 0.07 0.00 0.00 0.55 0.00 0.28 0.07 0.0 0.00 0.00 logits_per_text bike2.jpg eagle.jpg mv2seg.png husky.jpeg fire.png dog.jpg cat.jpg big dog.jpg pineapple.jpg bike.jpg cityscape.png air.jpg dog chai.jpeg grace_hopper.jpg cat 0.00 0.01 0.00 0.00 0.00 0.00 0.92 0.01 0.0 0.00 0.00 0.00 0.04 0.02 dog 0.00 0.02 0.00 0.01 0.00 0.40 0.01 0.14 0.0 0.00 0.00 0.00 0.41 0.01 husky 0.00 0.00 0.00 1.00 0.00 0.00 0.00 0.00 0.0 0.00 0.00 0.00 0.00 0.00 airplane 0.00 0.07 0.00 0.00 0.00 0.00 0.00 0.01 0.0 0.00 0.00 0.91 0.01 0.00 car 0.03 0.01 0.29 0.00 0.00 0.05 0.00 0.19 0.0 0.00 0.01 0.01 0.38 0.03 cityscape 0.00 0.01 0.05 0.00 0.00 0.00 0.00 0.05 0.0 0.09 0.64 0.00 0.16 0.00 fire 0.00 0.01 0.00 0.00 0.94 0.00 0.00 0.01 0.0 0.00 0.01 0.00 0.02 0.01 person 0.15 0.04 0.01 0.00 0.00 0.03 0.00 0.22 0.0 0.17 0.00 0.00 0.33 0.03 eagle 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 0.0 0.00 0.00 0.00 0.00 0.00 bike 0.01 0.00 0.00 0.00 0.00 0.69 0.00 0.00 0.0 0.29 0.00 0.00 0.00 0.00 pineapple 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 1.0 0.00 0.00 0.00 0.00 0.00 ``` ### Whisper Link: https://huggingface.co/AXERA TECH/Whisper Preparation: ```bash source ../extra/venv llm/bin/activate ``` Usage: ```bash python whisper_onnx.py model_path ./models onnx/base/ t base wav ./demo.wav python whisper.py model_path ./models/small/ t small wav ./demo.wav # or ./whisper_axcl_aarch64 e ./models/small/small encoder.axmodel m ./models/small/small decoder main.axmodel l ./models/small/small decoder loop.axmodel p ./models/small/small positional_embedding.bin t ./models/small/small tokens.txt w ./demo.wav ``` Example: ```bash (venv llm) sipeed@rpi sipeed:~/Downloads/AIDemos/Whisper $ ./whisper_axcl_aarch64 e ./models/small/small encoder.axmodel m ./models/small/small decoder main.axmodel l ./models/small/small decoder loop.axmodel p ./models/small/small positional_embedding.bin t ./models/small/small tokens.txt w ./RP1intro.wav language en encoder: ./models/small/small encoder.axmodel decoder_main: ./models/small/small decoder main.axmodel decoder_loop: ./models/small/small decoder loop.axmodel wav_file: ./RP1intro.wav language: en Load encoder take 2442.17 ms Load decoder_main take 4068.22 ms Load decoder_loop take 3837.32 ms Read positional_embedding Encoder run take 190.63 ms First token: 41154 \t take 51.20ms Next Token: 17741 \t take 30.39 ms Next Token: 1025 \t take 30.33 ms Next Token: 307 \t take 30.36 ms Next Token: 3094 \t take 30.25 ms Next Token: 1228 \t take 30.30 ms Next Token: 264 \t take 30.26 ms Next Token: 497 \t take 30.30 ms Next Token: 48 \t take 30.30 ms Next Token: 16 \t take 30.36 ms Next Token: 39839 \t take 30.21 ms Next Token: 1969 \t take 30.29 ms Next Token: 11 \t take 30.34 ms Next Token: 257 \t take 30.30 ms Next Token: 7372 \t take 30.22 ms Next Token: 19273 \t take 30.29 ms Next Token: 22848 \t take 30.20 ms Next Token: 4761 \t take 30.13 ms Next Token: 294 \t take 30.31 ms Next Token: 1782 \t take 30.33 ms Next Token: 295 \t take 30.32 ms Next Token: 41154 \t take 30.29 ms Next Token: 17741 \t take 30.33 ms Next Token: 13 \t take 30.28 ms Next Token: 50257 \t take 30.31 ms All Token: take 778.48ms, 32.11 token/s All take 1010.35ms Result: Raspberry Pi 5 is built using the RQ1 IO control, a package containing silicon designed in house of Raspberry Pi. ``` ### MeloTTS Link: https://huggingface.co/AXERA TECH/MeloTTS Preaparation: ```bash source ../extra/venv llm/bin/activate cp R nltk_data ~/ ``` Usage: ```bash (venv llm) sipeed@rpi sipeed:~/Downloads/AIDemos/MeloTTS/python $ cd python (venv llm) sipeed@rpi sipeed:~/Downloads/AIDemos/MeloTTS/python $ python melotts.py h [INFO] Available providers: ['AXCLRTExecutionProvider'] usage: melotts [ h] [ sentence SENTENCE] [ wav WAV] [ encoder ENCODER] [ decoder DECODER] [ dec_len DEC_LEN] [ sample_rate SAMPLE_RATE] [ speed SPEED] [ language {ZH,ZH_MIX_EN,JP,EN,KR,ES,SP,FR}] Run TTS on input sentence options: h, help show this help message and exit sentence SENTENCE, s SENTENCE wav WAV, w WAV encoder ENCODER, e ENCODER decoder DECODER, d DECODER dec_len DEC_LEN sample_rate SAMPLE_RATE, sr SAMPLE_RATE speed SPEED language {ZH,ZH_MIX_EN,JP,EN,KR,ES,SP,FR}, l {ZH,ZH_MIX_EN,JP,EN,KR,ES,SP,FR} ``` Example: ```bash (venv llm) sipeed@rpi sipeed:~/Downloads/AIDemos/MeloTTS/python $ python melotts.py s \"Dig the well before you are thirsty.\" l EN [INFO] Available providers: ['AXCLRTExecutionProvider'] sentence: Dig the well before you are thirsty. sample_rate: 44100 encoder: ../encoder onnx/encoder en.onnx decoder: ../decoder ax650/decoder en.axmodel language: EN > Text split to sentences. Dig the well before you are thirsty. > split_sentences_into_pieces take 0.7653236389160156ms [INFO] Using provider: AXCLRTExecutionProvider [INFO] SOC Name: AX650N [INFO] VNPU type: VNPUType.DISABLED [INFO] Compiler version: 3.3 3251425d load models take 1990.5009269714355ms Sentence[0]: Dig the well before you are thirsty. Load language module take 11539.379358291626ms encoder run take 30.54ms Decode slice[0]: decoder run take 99.54ms Decode slice[1]: decoder run take 92.79ms Decode slice[2]: decoder run take 92.74ms Save to output.wav ``` ## AXCL Inference Performance Run `axcl_run_model` (usage mirrors native ax_run_model). Example with YOLOv5s (single core model; full core performance scales ~3x): ```bash sipeed@rpi sipeed:~/Downloads/AIDemos/models $ axcl_run_model m yolov5s.axmodel Run AxModel: model: yolov5s.axmodel type: 1 Core vnpu: Disable warmup: 1 repeat: 1 batch: { auto: 1 } axclrt ver: 1.0.0 pulsar2 ver: 1.2 patch2 7e6b2b5f tool ver: 0.0.1 cmm size: 12730188 Bytes min 7.837 ms max 7.837 ms avg 7.837 ms ``` Performance Benchmarks Table： Model Input Size Batch 1 (IPS) Batch 8 (IPS) Inceptionv1 224 1073 2494 Inceptionv3 224 478 702 MobileNetv1 224 1508 4854 MobileNetv2 224 1366 5073 ResNet18 224 1066 2254 ResNet50 224 576 1045 SqueezeNet11 224 1560 5961 Swin T 224 342 507 ViT B/16 224 162 207 YOLOv5s 640 326 394 YOLOv6s 640 282 322 YOLOv8s 640 248 279 YOLOv9s 640 237 YOLOv10s 640 298 YOLOv11n 640 860 YOLOv11s 640 305 YOLOv11m 640 114 YOLOv11l 640 87 YOLOv11x 640 41 ## Known Issues ### Maix4 HAT Fails to Mount After Soft Reboot RPI5 Due to PCIe reset timing limitations, cold boot (power cycle) is required for successful mounting. A soft reboot leaves PCIe link down (line 18): ```bash 7.11 fs_open: 'armstub8 2712.bin' 7.15 Loading 'kernel_2712.img' to 0x00000000 offset 0x200000 7.33 Read kernel_2712.img bytes 9727677 hnd 0x3c43 9.93 PCI1 reset 9.03 PCI2 reset 9.13 set_reboot_order 0 9.13 set_reboot_arg1 0 9.14 USB OTG disconnect 9.56 MESS:00:00:09.256590:0: Starting OS 9256 ms 9.62 MESS:00:00:09.262115:0: 00000040: > 00000480 9.63 MESS:00:00:09.263966:0: 00000030: > 00100080 9.68 MESS:00:00:09.268679:0: 00000034: > 00100080 9.73 MESS:00:00:09.273392:0: 00000038: > 00100080 9.78 MESS:00:00:09.278105:0: 0000003c: > 00100080 NOTICE: BL31: v2.6(release):v2.6 240 gfc45bc492 NOTICE: BL31: Built : 12:55:13, Dec 4 2024 [ 0.695249] brcm pcie 1000110000.pcie: link down Debian GNU/Linux 12 rpi sipeed ttyAMA10 My IP address is 192.168.10.176 fdae:b0ae:ebf1:0:b270:135e:b646:70c3 rpi sipeed login: ``` **Workaround:** Before rebooting, reset the Maix4 HAT via GPIO: ```bash gpioset gpiochip0 28 0 # Force Maix4 HAT reset reboot ``` ## Additional Resources for AXCL [AXCL Documentation](https://axcl docs.readthedocs.io) [RPi 5 AXCL Guide](https://axcl pi5 examples cn.readthedocs.io) Refer to [here](../m4c/axmodel deploy.html) for detailed model development."},"/hardware/en/logic_analyzer/slogic16u3/User_Guide.html":{"title":"Slogic16U3 User Guide","content":"# Slogic16U3 User Guide 👷‍♂️ This guide is under active development — thank you for your patience! ## Revision History Date Version Author Description 2024 09 23 v0.1 Sipeed Team Initial draft ## Table of Contents 1. [Overview](#overview) 2. [Specifications](#specifications) 3. [Hardware Connection](#hardware connection) 4. [Software Installation](#software installation) 5. [Software Usage](#software usage) 6. [Build Software from Source](#build software from source) 7. [Firmware Update](#firmware update) 8. [FAQ](#faq) ## Overview Slogic16U3 is a high performance logic analyzer for digital signal debugging and analysis. <div style \"display: flex; flex wrap: wrap; gap: 10px; width: 100%;\"> <img src \"../../../en/logic_analyzer/slogic16u3/assets/DCIM/DSC07963.JPG\" style \"width: 100%;\"> <img src \"../../../en/logic_analyzer/slogic16u3/assets/DCIM/DSC07962.JPG\" style \"width: calc(50% 5px);\"> <img src \"../../../en/logic_analyzer/slogic16u3/assets/DCIM/DSC07961.JPG\" style \"width: calc(50% 5px);\"> </div> ## Specifications **Channels:** 16 **Max Sampling Rate:** 800 MHz **Memory Depth:** Unlimited **Interface:** USB 3.0 (5 Gbps) **Power Supply:** USB powered (5V 900mA) **Dimensions:** 150 × 100 × 30 mm ## Hardware Connection **USB C to C** or **USB A to C** cable: 1. PC USB A → USB A/C to USB C → SLogic 2. PC USB C → USB C to USB C → SLogic **Indicators:** Multi color (see FAQ) **Accessories:** Standard Dupont wires, high speed shielded wires ## Software ### Supported OS and Tested Platforms OS / Platform Supported Example Platform Windows (x86_64) Yes Ultra 5 125H Linux (x86_64) Yes 8th Gen Core i5+ Linux (aarch64) Yes RPI5 macOS (aarch64) Yes Apple Silicon M4 ### Supported Protocols A wide range of protocols are supported, including: AC '97, I²C, SPI, UART, CAN, JTAG, 1 Wire, PWM, USB, and many more. *For the latest list, refer to the software's decoder selection panel.* ### Installation #### Windows Extract the portable archive and double click `pulseview.exe` to launch. ![](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 08_11 11 10.png) To enable debug mode, run in terminal: ```cmd pulseview debug.exe l5 ``` ![](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 23_11 09 53.png) #### Linux ```bash chmod +x Pulseview.appimage ./Pulseview.appimage # ./Pulseview.appimage l5 # enable debug mode ``` ![](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 08_11 24 12.png) ![](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 08_11 33 45.png) #### macOS Download and open `Pulseview.dmg` to install. ![](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 18_11 11 57.png) ![](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 18_11 15 40.png) **Related Links:** Taobao, AliExpress, MaixHub Email: support@sipeed.com ## Software Usage The interface and workflow are similar to DSView. Configure channels, sample rate, sample points/time, and other parameters as needed. Use the software to trigger, acquire, browse, measure, decode protocols, and manage files. ### Changing the Sample Depth The sample depth determines how many data points are captured per acquisition. You can set the sample depth in the main control panel, typically as either a number of points. Higher sample depth allows capturing longer or more detailed signal traces, but requires more memory and may take longer to transfer. If you only need to capture short events, reduce the sample depth for faster operation. Adjust the sample depth before starting acquisition to fit your analysis needs. **Sample depth is unlimited if you have a large enough disk; data can be streamed directly to storage.** ![unlimited sample depth](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 25_16 53 25.png) ### Changing the Sample Rate **Max sample rate:** 800 MHz (depends on active channels) **16 channels:** up to 200 MHz **8 channels:** up to 400 MHz **4 channels:** up to 800 MHz Set the sample rate in the main control panel. If higher rates are unavailable, disable unused channels. ![200MHz max on 16ch](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 25_14 30 46.png) ![400MHz max on 8ch](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 25_14 31 04.png) ![800MHz max on 4ch](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 25_14 31 20.png) ### Selecting Active Channels Choose between **16**, **8**, or **4** channel configurations. Enable/disable channels in the configuration area. Fewer active channels allow higher sample rates. ![entry of channel selection](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 25_14 34 42.png) ![Channel count(pulseview modified)](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 25_14 35 03.png) ![Buffer size(default)](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 25_14 42 35.png) ### Adjusting Voltage Threshold Set threshold from **0.1V to 6.0V** in **0.1V steps**. Adjust in the channel/device configuration panel. Match threshold to your logic level (e.g., 1.0V for 3.3V CMOS). Apply changes before acquisition. ![entry of volt threshold selection](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 25_14 34 42.png) ![6V max](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 25_14 45 40.png) Tip: For 3.3V CMOS/TTL, set threshold to ~1.0V (30% of 3.3V). ### Edge Trigger Configure edge trigger to start capture on a specific signal transition. In the trigger panel, select channel and trigger type (rising, falling, or both). ![](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 25_15 05 54.png) ![](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 25_15 06 48.png) ## Build Software from Source The software is open source. [Sipeed's libsigrok GitHub Repository](https://github.com/sipeed/libsigrok/tree/slogic dev) **Recommended:** Use [sigrok util](https://github.com/sigrokproject/sigrok util) build scripts for a simple, cross platform experience. **Steps:** 1. Clone sigrok util and follow its README for dependencies. 2. Edit the build script to use Sipeed's libsigrok fork: ```bash $GIT_CLONE https://github.com/sipeed/libsigrok b slogic dev ``` 3. (Optional) Add options to speed up build and reduce size: ``` disable all drivers enable sipeed slogic analyzer disable bindings enable cxx ``` 4. Run the build script for your target (e.g., `./sigrok cross linux`, `./sigrok cross mingw`, `./sigrok cross macosx`). For advanced/manual builds, refer to upstream sigrok and PulseView documentation. ## Firmware Update Firmware updates are provided via a Python/PyQt GUI tool. [Firmware update tool repository](https://github.com/sipeed/slogic16u3 tools) **Update steps:** 1. Clone/download the repository: ```bash git clone https://github.com/sipeed/slogic16u3 tools.git ``` 2. Install dependencies and set up the environment: ```bash source .venv/bin/activate ``` 3. Navigate to the `pt` directory: ```bash cd pt ``` 4. Run the GUI tool: ```bash python src/gui.py ``` 5. Press the **mode** button on the device. The GUI should display \"SLogic16U3 OTA\". 6. Select the firmware file in the GUI. 7. Click **OTA** to start the update. 8. Wait for completion and follow on screen instructions. > **Note:** A binary version of the update tool will be released soon. ![](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 25_15 34 06.png) ## FAQ ### Why can't I find the SLogic16U3 device in Linux? Normal users can't access USB devices by default. Run Pulseview with `sudo`: ```bash sudo ./Pulseview.appimage ``` Or set up udev rules (see below). ### How do I set up udev rules for Linux? Create a new udev rules file: ```bash sudo tee /etc/udev/rules.d/60 sipeed.rules <<EOF SUBSYSTEM! \"usbusb_device\", GOTO \"sipeed_rules_end\" ACTION! \"add\", GOTO \"sipeed_rules_end\" ATTRS{idVendor} \"359f\", MODE \"0666\", GROUP \"plug_dev\", TAG+ \"uaccess\" ENV{ID_MM_DEVICE_IGNORE} \"1\" LABEL \"sipeed_rules_end\" EOF ``` Reload udev rules and trigger: ```bash sudo udevadm control reload sudo udevadm trigger ``` Unplug and reconnect the device. You can now run Pulseview as a normal user. ### Why can't I use higher sample rates? Only 200M shows. The maximum sample rate depends on the number of active channels and USB bandwidth. Slogic16U3's USB 3.0 provides up to ~400MB/s. To use higher rates (400M/800M), disable unused channels."},"/hardware/en/logic_analyzer/slogic16u3/FAQ.html":{"title":"FAQ","content":"# FAQ ## Why can't I find the SLogic16U3 device? ![No SLogic Device](./assets/Screenshots/Screenshot_2025 09 26_11 40 49.png) The most common reason is that PulseView was started before the SLogic16U3 was connected. If the software can't see a device at startup it may not probe for it again automatically. Solutions: 1. For automatic detection, connect the SLogic16U3 first, then launch PulseView. The software should auto detect the device on startup. 2. If you started the software before connecting the SLogic, manually open the \"Connect to Device\" (or \"Device Settings\") dialog after plugging the SLogic in: Open \"Connect to Device\". Choose the correct driver/back end for the SLogic16U3. Click \"Scan\" to discover attached devices. Select the SLogic device from the list and click \"OK\". The UI will return to the normal capture/home page and the device will be available. ![SLogic Found](./assets/Screenshots/Screenshot_2025 09 26_11 41 22.png) Additionally, on Linux a normal user cannot access USB devices by default due to permission restrictions. ![Nothing Found](./assets/Screenshots/Screenshot_2025 09 26_11 41 03.png) Choose one of the two methods below: Run PulseView with root privileges (quick test): ```bash sudo ./Pulseview.appimage ``` Set up a udev rule so normal users can access the device (recommended). See [How do I set up udev rules for Linux?](#How do I set up udev rules for Linux%3F) below for the udev rule and installation steps. ## How do I set up udev rules for Linux? Create a new udev rules file: ```bash sudo tee /etc/udev/rules.d/60 sipeed.rules <<EOF SUBSYSTEM! \"usbusb_device\", GOTO \"sipeed_rules_end\" ACTION! \"add\", GOTO \"sipeed_rules_end\" ATTRS{idVendor} \"359f\", MODE \"0666\", GROUP \"plug_dev\", TAG+ \"uaccess\" ENV{ID_MM_DEVICE_IGNORE} \"1\" LABEL \"sipeed_rules_end\" EOF ``` Reload udev rules and trigger: ```bash sudo udevadm control reload sudo udevadm trigger ``` Unplug and reconnect the device. You can now run Pulseview as a normal user. ## Why can't I use higher sample rates? Only 200M shows. The maximum sample rate depends on the number of active channels and USB bandwidth. Slogic16U3's USB 3.0 provides up to ~400MB/s. To use higher rates (400M/800M), disable unused channels. ## The device is locked in DFU mode and cannot switch back to SLogic mode. This usually means the SLogic firmware is corrupted, often due to a failed OTA update. **Solution:** Re flash the correct firmware via OTA. ## Cannot switch to DFU mode, error shows \"unknown USB device\". This indicates USB enumeration failure, often caused by poor quality or overly long USB cables. **Solution:** Try again with a shorter, higher quality USB cable."},"/hardware/en/logic_analyzer/slogic16u3/Introduction.html":{"title":"Introduction","content":"# Introduction ## Introduction The SLogic16U3 is a next‑generation USB3 logic analyzer. In a compact 40×40×10 mm housing it delivers high sample rates over a 5 Gbps USB3 interface: 800M@4CH, 400M@8CH, 200M@16CH. It supports 0–10V signal input, configurable voltage trigger thresholds from 0–6V, and software triggering — starting at only $69. ![SLogic16U3 product](../../../en/logic_analyzer/slogic16u3/assets/DCIM/SLogic16U3.png) ## Features & Specifications Attribute SLogic Combo8 SLogic16U3 SLogic32U3 Model SLogic Combo8 SLogic16U3 SLogic32U3 USB Type USB2.0 USB3.0 USB3.2 Gen2 Max Sample Rate 80M 800M 1500M Max Channels 8 16 32 Max Bandwidth 0.3Gbps 3.2Gbps 6.4Gbps Typical Comb. (stream, unlimited) 80M@4CH, 40M@8CH 800M@4CH, 400M@8CH, 200M@16CH 1500M@4CH, 800M@8CH, 400M@16CH, 200M@32CH Sigrok Compatible Y Y Y Adjustable Threshold N Y Y Case Plastic Aluminum Aluminum Extra Feature DAP Link, CK Link, 4 UART Extend ADC > Oscilloscope Size 20x40x10mm 40x40x10mm 50x50x10mm Price $15 $69 $149 ## Product Images size: 40x40x10mm view: top/front/rear <div style \"display: flex; flex wrap: wrap; gap: 10px; width: 100%;\"> <img src \"../../../en/logic_analyzer/slogic16u3/assets/DCIM/DSC07962.png\" style \"width: 32%;\"> <img src \"../../../en/logic_analyzer/slogic16u3/assets/DCIM/DSC07963.png\" style \"width: 32%;\"> <img src \"../../../en/logic_analyzer/slogic16u3/assets/DCIM/DSC07961.png\" style \"width: 32%;\"> <img src \"../../../en/logic_analyzer/slogic16u3/assets/DCIM/20250927 155815.png\" style \"width: 32%;\"> <img src \"../../../en/logic_analyzer/slogic16u3/assets/DCIM/20250927 155818.png\" style \"width: 32%;\"> <img src \"../../../en/logic_analyzer/slogic16u3/assets/DCIM/20250927 155808.png\" style \"width: 32%;\"> </div> ## Software installation ### Supported OS ![](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/supported platforms.png) Windows 10/11 (x86_64) The native .exe program is limited by Windows USB driver issues and currently only reaches just over 390 MB/s, so it cannot achieve the target 400 MB/s bandwidth and must be throttled to 400M@4CH, 200M@8CH, 100M@16CH. If you’re using a Windows PC and want to achieve the full 400 MB/s bandwidth, you can install a Linux virtual machine to perform full‑speed captures. <details class \"indent\"> <summary><b>另 Linux 虚拟机可满速运行</b></summary> <img src \"../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 27_11 05 12.png\"> </details> Linux (x86_64) macOS (Apple Silicon M4) ### Downloads Binary downloads: https://dl.sipeed.com/shareURL/SLogic Source code (slogic dev branch): https://github.com/sipeed/libsigrok/tree/slogic dev #### Windows Extract the portable archive and double click `pulseview.exe` to launch. To enable debug mode, run in terminal: ```cmd pulseview debug.exe l5 ``` ![](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 23_11 09 53.png) #### Linux ```bash chmod +x Pulseview.appimage ./Pulseview.appimage # ./Pulseview.appimage l5 # enable debug mode ``` ![](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 26_19 12 07.png) #### macOS Download and open `Pulseview.dmg` to run directly. ![](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 18_11 11 57.png) ## Related links Buy (Taobao): http://addme Buy (AliExpress): http://addme MaixHub: [maixhub.com](https://maixhub.com/discussion/slogic) Support email: support@sipeed.com GitHub (libsigrok slogic dev): https://github.com/sipeed/libsigrok/tree/slogic dev Sipeed GitHub: https://github.com/sipeed GitHub (SLogic16U3 Tools): https://github.com/sipeed/slogic16u3 tools Community (Discord): https://discord.com/channels/1359800784375644291/1359802057569206323"},"/hardware/en/logic_analyzer/slogic16u3/Hardware_Specification.html":{"title":"Hardware Operation","content":" title: Hardware Operation keywords: LogicAnalyzer, SLogic, basic usage, hardware update: date: 2025 09 25 version: v0.1 author: Serika content: Release docs This section introduces the usage and operation related to **SLogic16 U3** hardware. ## Hardware Overview ### Accessories List ![unboxing_0](./assets/DCIM/unboxing_0.png) A complete hardware set includes the **SLoigc16 U3 main unit** and **accessories inside the package**, as shown below: <!DOCTYPE html> <html lang \"en\"> <head> <meta charset \"UTF 8\"> <title>CSS Indentation</title> <style> .indent { margin left: 0ch; /* wideof 0 characters */ } </style> </head> <body> <details class \"indent\"> <summary><font color \"#4F84FF\"><b>SLoigc16 U3 Main Unit</b> x1 </font></summary> <img src \"./assets/DCIM/15k_la_photo.png\"> </details> </body> </html> **Accessories inside the package:** (Note: Ribbon cable and coaxial cable module are mutually exclusive) <!DOCTYPE html> <html lang \"en\"> <head> <meta charset \"UTF 8\"> <title>CSS Indentation</title> <style> .indent { margin left: 0ch; /* wideof 0 characters */ } </style> </head> <body> <details class \"indent\"> <summary><font color \"#4F84FF\"><b>2x6P Male to Female Ribbon Cable</b> x2 </font></summary> <img src \"./assets/DCIM/normal_cable.jpg\"> </details> </body> </html> <!DOCTYPE html> <html lang \"en\"> <head> <meta charset \"UTF 8\"> <title>CSS Indentation</title> <style> .indent { margin left: 0ch; /* wideof 0 characters */ } </style> </head> <body> <details class \"indent\"> <summary><font color \"#4F84FF\"><b>2x4P Coaxial Cable Module</b> x2 </font></summary> <img src \"./assets/DCIM/coaxial_cable.jpg\"> </details> </body> </html> <!DOCTYPE html> <html lang \"en\"> <head> <meta charset \"UTF 8\"> <title>CSS Indentation</title> <style> .indent { margin left: 0ch; /* wideof 0 characters */ } </style> </head> <body> <details class \"indent\"> <summary><font color \"#4F84FF\"><b>Logic Analyzer Test Clips</b> x16 </font></summary> <img src \"./assets/DCIM/testing_hook.jpg\"> </details> </body> </html> <!DOCTYPE html> <html lang \"en\"> <head> <meta charset \"UTF 8\"> <title>CSS Indentation</title> <style> .indent { margin left: 0ch; /* wideof 0 characters */ } </style> </head> <body> <details class \"indent\"> <summary><font color \"#4F84FF\"><b>0.5m A+C to C USB3 Data Cable</b> x1 </font></summary> <img src \"./assets/DCIM/usb3_cable.jpg\"> </details> </body> </html> <!DOCTYPE html> <html lang \"en\"> <head> <meta charset \"UTF 8\"> <title>CSS Indentation</title> <style> .indent { margin left: 0ch; /* wideof 0 characters */ } </style> </head> <body> <details class \"indent\"> <summary><font color \"#4F84FF\"><b>Stainless Steel SIM Pin</b> x1 </font></summary> <img src \"./assets/DCIM/small_pin.jpg\"> </details> </body> </html> <!DOCTYPE html> <html lang \"en\"> <head> <meta charset \"UTF 8\"> <title>CSS Indentation</title> <style> .indent { margin left: 0ch; /* wideof 0 characters */ } </style> </head> <body> <details class \"indent\"> <summary><font color \"#4F84FF\"><b>Instruction Card</b> x1 </font></summary> <img src \"./assets/DCIM/readme_card.jpg\"> </details> </body> </html> <!DOCTYPE html> <html lang \"en\"> <head> <meta charset \"UTF 8\"> <title>CSS Indentation</title> <style> .indent { margin left: 0ch; /* wideof 0 characters */ } </style> </head> <body> <details class \"indent\"> <summary><font color \"#4F84FF\"><b>Zipper Storage Bag</b> x1 </font></summary> <img src \"./assets/DCIM/storage_bag.jpg\"> </details> </body> </html> > The appearance of accessories may vary slightly between batches. Please refer to the actual product. ### Connection Method <!DOCTYPE html> <html lang \"en\"> <head> <meta charset \"UTF 8\"> <title>CSS Indentation</title> <style> .indent { margin left: 0ch; /* wideof 0 characters */ } </style> </head> <body> <details class \"indent\"> <summary><font color \"#4F84FF\">Click here to view the hardware connection diagram of SLoigc16 U3 </font></summary> <img src \"./assets/MISC/la_topview.jpg\"> </details> <br> </body> </html> **Coaxial Cable Module**/**Ribbon cable set** are directional. The insertion direction is shown above: the triangle mark **▴** on the cable should align with the triangle mark **▾** on the case. The far end of the **coaxial cable** has **2** terminals. The white terminal connects to the signal source, and the black terminal connects to GND. Each group of **Ribbon cables** has only **2** separate GNDs. When the triangle mark **▴** on the cable aligns with the case, the black wire bundle is GND, and the red is VCC. #### Rear of Logic Analyzer ![slogic16_u3_rear](./assets/MISC/la_rearview.jpg) The rear of the logic analyzer is a **2x12P** female header with a 2.54mm pitch. The pin definition is shown above (rear view of the logic analyzer). The digital numbers **0 15** are the sampling channel numbers, corresponding to the channel numbers in the host software, totaling 16 channels. **G** stands for **GND**. Please connect the GND of the device under test and the logic analyzer, totaling 4 channels. **VCC** stands for power output, with an output capacity of **3.3V @500mA**, totaling 2 channels (2 channels share the current output capacity). **CK** stands for reserved sampling clock input/trigger output channels. This function is not yet implemented, totaling 2 channels. #### Front of Logic Analyzer ![slogic16_u3_rear](./assets/MISC/la_frontview.jpg) The above is the front view of the logic analyzer, from left to right: **USB C** interface standard is 3.2 Gen1 (5Gbps). To use the logic analyzer function, a cable with corresponding capability (USB3.0) must be used. **MODE** small hole contains a hidden button. It can be pressed by inserting a SIM pin. Its function is described in the [MODE Button](#MODE Button) section. **ACT** is the **status indicator light**. Specific states are described in the [ACT Indicator](#ACT Indicator) section. ### Getting Started First, connect **PC USB3** → **USB A/C to USB C** → **SLogic** → **Ribbon cable**/**Coaxial Cable Module** <!DOCTYPE html> <html lang \"en\"> <head> <meta charset \"UTF 8\"> <title>CSS Indentation</title> <style> .indent { margin left: 0ch; /* wideof 0 characters */ } </style> </head> <body> <details class \"indent\"> <summary><font color \"#4F84FF\">Click here to view the hardware connection of SLoigc16 U3 </font></summary> <img src \"./assets/DCIM/SLogic16U3.jpg\"> </details> <br> </body> </html> > Currently, SLogic16 only supports **USB3** mode. The included **USB A/C to USB C** cable is compatible. Connect the signal points of the target device under test to any free CH digital port of **SLogic** via **Ribbon cable**/**Coaxial cable**, and ensure the GND of the device under test is connected to the GND of SLogic. > Note: When the Nyquist frequency of the signal source is greater than or equal to 50 MHz, it is recommended to use coaxial cables for sampling to achieve better stability. You may optionally use **logic analyzer test clips** to connect to the signal points. > To improve sampling stability, the GND wire of SLogic should be as close as possible to the test point. Even shortening by **1 mm** may help. When using coaxial cables, it is recommended to connect the corresponding **GND** along with each sampled signal **CH**. Finally, launch [**plusview**](./Software_User_Guide) to start acquisition. For software installation and related operations, refer to [here](./Introduction#Software installation). ## ACT Indicator The **ACT indicator** is located on the front of the logic analyzer, near the outer side. ![slogic16_u3_rear](./assets/MISC/la_frontview_act.jpg) ### Colors & Functions The indicator is a 3 color RGB LED. Each color represents a function, and combinations indicate device status. **Color** <span style \"color:blue\">Blue</span> <span style \"color:green\">Green</span> <span style \"color:red\">Red</span> **Function** Power USB LINK indicator Running status indicator Normal operating states: **Status** **Color** **Notes** **Normal Link** <span style \"color:cyan\">Cyan</span> <span style \"color:blue\">Blue</span> + <span style \"color:green\">Green</span> **Data Transfer** <span style \"color:cyan\">Cyan</span> + <span style \"color:red\">Red fast blink</span> Blue + Green + Red fast blink **DFU Mode** <span style \"color:cyan\">Cyan</span> + <span style \"color:red\">Red slow blink</span> Blue + Green + Red slow blink Abnormal states: **Status** **Color** **Notes** **USB Link Fail** <span style \"color:blue\">Blue</span> Only blue light on **Flash Load Error** <span style \"color:red\">Red</span> Only red light on Other states (e.g., only green on / all three on) are undefined. If undefined states occur, try re plugging USB. If unresolved, suspect hardware damage. > ⚠ Note: If the <span style \"color:green\">green light</span> goes off at any time, it means USB connection failed. Reconnect to resolve. The <span style \"color:red\">red light</span> status is irrelevant in this case. ### Troubleshooting **Checklist: <span style \"color:blue\"><b>Only blue light</b></span>** USB cable does not support **USB3** (common with phone charging cables) PC USB port does not support **USB3** Connected to front panel USB of desktop PC Connected to incompatible **USB hub** (always connect SLogic directly to PC USB) Connected to insufficient power USB port Cable too long (use ≤1 m cable) **Checklist: <span style \"color:red\"><b>Only red light</b></span>** Poor quality USB cable, excessive voltage drop PC USB port fault: fuse aging, insufficient power SLogic hardware damage → keep device powered off and contact support ## MODE Button The **MODE button** is on the front of the logic analyzer, between the **USB C connector** and **ACT indicator**. It is hidden and requires a SIM pin to press. ![slogic16_u3_rear](./assets/MISC/la_frontview_mode.jpg) When powered on, the default function is **Logic Analyzer**. Normally, the [ACT indicator](#ACT Indicator) shows cyan. A new **USB3** device appears: **SLogic16 U3** (logic analyzer). **Pressing the MODE button** switches function. After switching, the indicator changes: red slow blink. A new **USB2** device appears: **SLogic DFU** (upgrade mode). > **SLogic** mode uses **USB3**, while **DFU** mode uses **USB2**. Pressing **MODE** again switches back to **SLogic16 U3**. Repeatedly pressing **MODE** cycles between **SLogic DFU** and **SLogic16 U3**. > In Windows, open Device Manager or use *USB treeview*. > In Linux/macOS, use the *lsusb* command. > You will find the device listed as \"*SLogic16 U3*\" or \"*SLogic DFU*\". ## Firmware Update First, [enter DFU MODE](#MODE Button): after powering on, press the **MODE button** and wait until the <span style \"color:red\">red light blinks slowly</span>. Confirm that the \"*SLogic DFU*\" device appears, then use the **DFU Tool** to perform the update. > In Windows, open Device Manager or use *USB treeview*. > In Linux/macOS, use *lsusb*. > You should see \"*SLogic DFU*\" listed. Detailed instructions for the DFU tool are provided below. > In principle, OTA operations only update the SLogic firmware and do not affect the **DFU** function. > Even if OTA fails, the device will remain locked in **DFU** mode until the SLogic firmware is successfully updated. Firmware updates are provided via a Python/PyQt GUI tool. [Firmware update tool repository](https://github.com/sipeed/slogic16u3 tools) ### **Update steps:** 1. Run the GUI tool: 2. Press the **mode** button on the device. The GUI should display \"SLogic16U3 OTA\". 3. Select the firmware file in the GUI. 4. Click **OTA** to start the update. 5. Wait for completion and follow on screen instructions. > **Note:** A binary version of the update tool will be released soon. ![](../../../en/logic_analyzer/slogic16u3/assets/Screenshots/Screenshot_2025 09 25_15 34 06.png) ## Safety & Precautions **SLogic** ***VCC*** is a **power output**. The two ***VCC*** ports share the same power rail. Output capability: ***3.3V @ 500 mA MAX*** **Never** short ***VCC*** directly to ***GND***, to avoid overcurrent or short circuit. **SLogic** has built in overcurrent protection. However, for safety, avoid short circuits, as the host PC’s USB port overcurrent protection may vary. When **SLogic** is used with a computer powered by mains electricity, its ground is connected to the computer’s ground. To protect both the device and the host, connect probe grounds only to equipotential ground points. **Never** connect to hot ground or mismatched potential points."},"/hardware/en/logic_analyzer/slogic16u3/Software_User_Guide.html":{"title":"SLogic16U3 — Software User Guide","content":"# SLogic16U3 — Software User Guide This guide explains how to use the SLogic16U3 with a capture application. It covers connecting and detecting the device, the user interface across platforms, basic and advanced sampling setup, the capture workflow, browsing and measurement tools, protocol decoding, and file operations. ## Connect the SLogic Best practice: connect the SLogic16U3 to a USB 3.0 port on the host before launching the capture application so the software can auto detect the device. If the application is already running: Plug the SLogic into a USB 3.0 host port (avoid unpowered hubs). Open the application menu and select \"Connect to Device\" dialog. Select the SLogic driver/back end. Click \"Scan\". Choose the SLogic device from the discovered list and click \"OK\". Troubleshooting checklist: Try a different USB cable or a different host port. Confirm device power/LED indicators are on. Unplug and replug the device, then reopen the Connect dialog or relaunch the app. On Linux, check permissions (use sudo for quick testing or install udev rules; see FAQ). See: [Why can't I find the SLogic16U3 device?](./FAQ.html#why cant i find the slogic16u3 device) ![](./assets/Screenshots/SLogic_Connect_1.png) ## User Interface ### Windows Menus, dialogs, and file dialogs follow Windows conventions. ![](./assets/Screenshots/Screenshot_2025 09 23_11 09 53.png) ### Linux Layout is similar to other platforms. Note: regular Linux users may lack permissions to access USB devices. For quick tests run the app with sudo; for day to day use install udev rules (see FAQ). Running an `AppImage l5` from a terminal can show helpful logs when troubleshooting. ![](./assets/Screenshots/Screenshot_2025 09 26_16 25 08.png) ### macOS Menus are on the system menu bar; dialogs integrate with macOS UI conventions. If macOS blocks access, open System Preferences → Security & Privacy and grant permission for the app. Prefer direct ports or a powered USB3 hub. ![](./assets/Screenshots/Flameshot_2025 09 26_16 13 57.png) ## Basic sampling modes and configuration Before capturing, configure these core settings: Channel enables: enable only the channels you need to reduce bandwidth and increase sample rate headroom. Voltage threshold: set according to the device under test (DUT) logic levels. Sample rate: pick a preset; allowed rates depend on active channels and USB bandwidth. Sample depth / capture length: choose number of samples. ### Configuration (mixed settings) Recommended quick workflow: 1. Enable required channels (16/8/4 as needed). 2. Set voltage thresholds where supported. 3. Select a sample rate preset compatible with enabled channels. 4. Choose sample depth. 5. Configure your trigger or just start acquisition. Tips: Enabling less channels increases achievable sample rates. For long captures, validate disk space before saving/exporting. ![](./assets/Screenshots/Flameshot_2025 09 26_14 49 26.png) ### Voltage threshold Choose thresholds matching the DUT: ~1.6 V for many low voltage systems (e.g., 3.3 V or 5 V logic). Up to 6.0 V for higher voltage signals—verify hardware limits first. When unsure, measure the signal with a multimeter or oscilloscope before connecting. ![](./assets/Screenshots/Flameshot_2025 09 26_15 43 37.png) ![](./assets/Screenshots/Flameshot_2025 09 26_15 41 50.png) ### Channel / sample rate presets Available sample rates shrink as more channels are enabled due to USB throughput limits. Use the preset list to switch between standard modes (16ch / 8ch / 4ch). If you need finer time resolution, reduce active channels and increase the sample rate. ![](./assets/Screenshots/Flameshot_2025 09 26_15 25 09.png) ![](./assets/Screenshots/Flameshot_2025 09 26_15 26 59.png) ![](./assets/Screenshots/Flameshot_2025 09 26_15 27 57.png) ### Sample depth / capture length Choose a sample depth (points) or capture time. The product of sample rate × depth determines memory and storage usage. ![](./assets/Screenshots/Flameshot_2025 09 26_15 34 23.png) ## Advanced: Trigger configuration Supported trigger types typically include: Edge trigger (rising/falling) on a single channel. Level trigger (signal above/below threshold for duration). Combine triggers across multiple channels. How to set a basic edge trigger: 1. Open Trigger settings. 2. Choose the channel and select Rising or Falling or anything else. 3. Add additional channel conditions for compound triggers if needed. ![](./assets/Screenshots/Screenshot_2025 09 26_15 56 13.png) ![](./assets/Screenshots/Screenshot_2025 09 26_15 59 12.png) ![](./assets/Screenshots/Screenshot_2025 09 26_16 01 52.png) ## Capture workflow ### Typical steps 1. Connect the device and confirm detection. 2. Configure channels, voltage thresholds, and sample rate. 3. Set sample depth and trigger mode. 4. Start capture and wait it to be finished. 5. Inspect waveforms and use decoders or measurements. Capture modes: Continuous/stream: capture continuously until stopped; manage data size and memory. If you encounter dropped samples: Lower the sample rate or reduce enabled channels. Use a dedicated USB 3.0 port and a high quality USB cable. ![](./assets/Screenshots/Screenshot_2025 09 26_15 52 49.png) ![](./assets/Screenshots/Screenshot_2025 09 26_15 52 58.png) ### With trigger Configure trigger conditions before starting capture to ensure the event is captured in the buffer. ![](./assets/Screenshots/Screenshot_2025 09 26_15 59 12.png) ![](./assets/Screenshots/Screenshot_2025 09 26_15 57 08.png) ## Browse and ruler measurements Navigation and controls: Zoom in/out: mouse wheel or Up/Down buttons. Pan forward/back: drag or hold Shift + scroll or hold Shift + Up/Down buttons. Move vertically across channels: hold Ctrl + scroll or hold Ctrl + Up/Down buttons. ![Browse origin](./assets/Screenshots/Screenshot_2025 09 26_16 48 45.png) ![Browse Zoom](./assets/Screenshots/Screenshot_2025 09 26_16 48 50.png) ![Browse forward](./assets/Screenshots/Screenshot_2025 09 26_16 49 42.png) ![Browse down](./assets/Screenshots/Screenshot_2025 09 26_16 49 18.png) Rulers: Add time rulers to measure intervals. Place two rulers to compute the delta time. Use ruler measurements to calculate baud rate, pulse width, or event spacing. Hold Shift + drag to create the ruler for measurements. ![Ruler measurements](./assets/Screenshots/Screenshot_2025 09 26_16 42 44.png) ## Protocol decoders To decode a bus: 1. Open the Decoder pane. 2. Select the protocol (I2C, SPI, UART, CAN, SDIO, etc.). 3. Configure pins, byte order (LSB/MSB), clock polarity/phase and baudrate/clock speed. 4. Enable the decoder; decoded frames are annotated on the waveform and are clickable for details. ![Protocol decoders](./assets/Screenshots/Screenshot_2025 09 26_16 47 45.png) Tips: Map probe pins correctly to logical signals (MOSI/MISO/SCLK/CS, TX/RX). Increase sample rate for high speed buses to ensure correct decoding. Disable unused decoders to reduce CPU and UI load. ### UART examples (4M) ![](./assets/Screenshots/Screenshot_2025 09 26_16 15 28.png) ![](./assets/Screenshots/Screenshot_2025 09 26_16 16 09.png) ![](./assets/Screenshots/Screenshot_2025 09 26_14 12 44.png) ![](./assets/Screenshots/Screenshot_2025 09 26_14 13 24.png) ![](./assets/Screenshots/Screenshot_2025 09 26_14 14 04.png) ### SDIO / SDCard examples ![](./assets/Screenshots/Screenshot_2025 09 26_16 17 19.png) ![](./assets/Screenshots/Screenshot_2025 09 26_16 17 57.png) ![](./assets/Screenshots/Screenshot_2025 09 26_11 08 53.png) ![](./assets/Screenshots/Screenshot_2025 09 26_11 10 26.png) ## File operations (save / load) Save session: stores captured samples, channel configuration, trigger settings, and decoder state. Use sessions to preserve work for later analysis. Load session: restores the saved capture and UI state. ![](./assets/Screenshots/Flameshot_2025 09 26_16 22 26.png) ![](./assets/Screenshots/Flameshot_2025 09 26_16 23 19.png) <! End of Software User Guide >"},"/hardware/en/logic_analyzer/combo8/use_cklink_function.html":{"title":"Using as CKLink","content":" title: Using as CKLink keywords: LogicAnalyzer, debugger, link, RISCV, tool update: date: 2023 07 26 version: v0.1 author: ctx content: Release docs SLogic Combo 8 features high speed CK Link functionality, with a speed that surpasses CK Link Lite and comes close to CK Link Pro, making it a great tool for debugging RISC V chips. In this mode, it also has a high speed serial port (20Mbps). Let's get started with using CK LINK! ## Enable CKLink Functionality Press the toggle button to switch the indicator light to yellow. ![slogic_led_yellow](./../../../zh/logic_analyzer/combo8/assets/use_cklink_function/slogic_led_yellow.png) > To verify if CKLink functionality is enabled: > Open the device manager in Windows environment, and use the lsusb command in Linux environment to find the \"CKLink HS\" device ## Getting Started ### Pin sequence > CKLink and DAPLink have similar pin connections, so they are shown together in one diagram. Please ignore the 'DAP' label. ![daplink_cklink_line_order](./../../../zh/logic_analyzer/combo8/assets/use_daplink_function/daplink_cklink_line_order.png) In CKLink mode, it can simultaneously support one CKLink interface and one UART interface. The pins on the left side of the diagram (TXD, RXD, DTR, RTS) can be used as a UART interface. The pins on the right side of the diagram (TCK, TDI, TDO, TMS) are used for CKLink debugging. ### Instructions On both Windows and Linux systems, you can directly refer to [Using CDK + Sipeed RV Debugger Plus for Compilation and Debugging](https://bouffalolab.gitee.io/bl_mcu_sdk/get_started/cdk_rv_debugger_plus.html#cdk sipeed rv debugger plus) and [T HEAD Debug Server User Manual](https://occ.t head.cn/document?temp introduction 2&slug t head debug server user manual), the usage is exactly the same. #### Debugging with CDK Click the `Start/Stop Debugger` button on the toolbar to enter the debug interface, as shown in the image below: ![Debug CDK](./../../../zh/logic_analyzer/combo8/assets/use_cklink_function/cklink_cdk_debug.png) _Debug HelloWorld!_ Under the `debug` interface, you can view the internal register data of the CPU in the `Register` window on the left side. At the same time, in the `Peripherals` peripheral panel on the right side, you can browse the corresponding peripheral register data. You can select the desired peripherals by using the `Peripherals >System Viewer` option in the top menu bar. Additionally, in the toolbar above the interface, you will find relevant debugging buttons that can be used for setting breakpoints, single stepping, executing instructions one by one, and running at full speed. Of course, all these operations have corresponding shortcuts and quick setup methods. For detailed information, please refer to the CDK documentation, which will provide a comprehensive guide. Click the single step run button to execute the code. You will see the cursor move to the next line of code, and at the same time, the serial panel will display the output \"Hello World!\" #### Debugging with T HEAD Debug Server > Please refer to the **Section Ten: Debugging with JTAG** in the [Getting Started with M1s DOCK](../../maix/m1s/other/start.html) guide for details."},"/hardware/en/logic_analyzer/combo8/use_logic_function.html":{"title":"Using as a Logic Analyzer","content":" title: Using as a Logic Analyzer keywords: LogicAnalyzer, debugger, link, RISCV, tool update: date: 2023 07 26 version: v0.1 author: ctx content: Release docs ## Enabling the Logic Analyzer Function Press the button to switch the indicator light to blue. As shown below: ![slogic_led_blue](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/slogic_led_blue.png) > To verify if Slogic functionality is enabled: > Open the device manager in Windows environment, and use the lsusb command in Linux environment to find the \"USB TO LA\" device ## Getting Started > Notice: > 1. The maximum transmission bandwidth of SLogic Combo 8 in Linux environment is 320Mb/s, and the typical configuration is 80M@4CH 40M@8CH. > 2. The maximum transmission bandwidth of SLogic Combo 8 in Windows environment is 160Mb/s, and the typical configuration is 80M@2CH 40M@4CH. > 3. If there is a disconnection during the startup process of the host software, please rescan and reconnect the device before performing other operations, otherwise it may lead to software crashes. ### Quick Start #### Pin Connections ![slogic_line_order](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/slogic_line_order.png) The above diagram shows the pinout for the 8 channels of SLogic. Connect the target device's test signal points to any available CH port on SLogic, and ensure that the ground of the target device is connected to the ground of SLogic. > Note: The GND line of the SLogic needs to be as close as possible to the location of the point to be measured, even 1cm closer may increase the quality of the sample. #### Downloading and Running the Host Computer [Download PulseView](https://dl.sipeed.com/shareURL/SLogic/SLogic_combo_8/4_application/PulseView) [Download PulseView New(support both SLogic Combo8 & SLogic16U3, Win/Mac/Linux)](https://dl.sipeed.com/shareURL/SLogic) > Note: If you want compile it yourself, refer to: https://github.com/sipeed/libsigrok/tree/slogic dev PulseView is used for observing digital signals and decoding. Windows users should download files with the .exe extension, while Linux users should download files with the .AppImage extension. It is recommended to download the latest version with the most recent date. > Note:When the software is named `PulseView xxxx 230811 xxx.AppImage`, the date is 11/08/2023. The date naming rules are similar for other software. Linux Environment: 1. After downloading, navigate to the directory where the software is located. Open the terminal using the shortcut CTRL+ALT+T. Then, use the following command to give the software execution permissions and run it with administrator privileges: ```bash chmod +x PulseView x86_64 032323 1101.AppImage sudo ./PulseView x86_64 032323 1101.AppImage ``` Windows Environment: 1. After downloading, click on the .exe file to begin the installation. Follow the installation prompts and click \"Next\" consistently to complete the installation. 2. After the installation is complete, you can find the host computer software icon in the shortcut menu. Double click to run it. > Note: In the Linux environment, the maximum supported sampling rate is 80M for 4 channels and 40M for 8 channels. Due to limitations in USB transmission stability on Windows, the maximum supported sampling rate is 80M for 2 channels and 20M for 8 channels. MacOS Environment: PulseView SLogic 250910 aarch64.dmg #### Scan SLogic and Connect The connection will be made automatically on first startup, or you can choose to connect SLogic manually. **Steps for manual connection** 1. Click on \"Scan for devices xxx\" to scan for devices. 2. 选择\"SIPEED USB TO LA xxx\" and click OK to connect the device. ![image 20230912140845449](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/set_connect_cfg_of_pulseview.png) #### Ready to Sample 1. Set the sampling parameters The following figure sets the number of channels to **8**, the number of samples to **1M samples**, and the sampling rate to **10Mhz**. At this time the **sampling time** is 1M / 10Mhz 0.1s ![equ_selec_complete_of_pulseview](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/equ_selec_complete_of_pulseview.png) #### Start Sampling 1. Click on the \"run\" button to start sampling. ![waveform_fast_of_pulseview](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/waveform_fast_of_pulseview.png) > Note:If the D7 channel is not used during the sampling process, a level inversion of the channel may be observed, but this is normal and does not affect normal use. #### Analyze the Sampling Result 1. Open the protocol analysis function ![image 20230912150905946](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/open_ptl_field.png) 2. Select the target protocol ![image 20230912153947189](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/select_the_target_protocol.png) 3. Configure the protocol parameters ![image 20230912152007703](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/config_param_of_protocol.png) 4. Observe the analysis results ![image 20230912152105530](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/observe_the_analysis_res.png) Based on the results of the analysis, let's start debugging. ### Detailed Configuration #### Sampling Parameters Sampling parameters include the sample count, sampling frequency, and sampling time. 1. Sample Count: Choose an appropriate value for the sample count based on your requirements. 2. Sampling Frequency: Select a value greater than 10 times the frequency of the signal under test (**recommended** to adhere to Nyquist theorem). 3. Sampling Time: Calculate the sampling time based on the **sample count** and **sampling frequency** using the formula:</br>**Time (seconds) Sample Count / Sampling Rate**</br>For example, with 1M samples and 1MHz sampling rate, the sampling time would be 1 second. ![set_total_sampling_time_of_pulseview](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/set_total_sampling_time_of_pulseview.png) > After setting the sample count and sampling frequency, placing the mouse cursor over the sample count selection box will display the calculated sampling time for the current parameters. #### Channel Parameters Click on a channel's label to set its parameters. Channel parameters include label name, label color, channel waveform display window width, and signal triggering mode. 1. Label Name: Set based on the meaning of the sampled signal to facilitate distinguishing between multiple signals. 2. Label Color: Set according to personal preference to differentiate between different signals during multi signal sampling. 3. Channel Waveform Display Window Width: Adjust based on the signal amplitude. This value is in pixels. When the signal amplitude changes significantly, increasing this parameter can help observe amplitude changes more clearly. 4. **Signal Triggering Mode**: Choose from **Direct Sample**, **High Level Trigger**, **Low Level Trigger**, **Falling Edge Trigger**, **Rising Edge Trigger**, and **Edge Trigger**. (Prior to signal collection, there might be many irrelevant signals. Setting the triggering mode based on the signal pattern can effectively filter out irrelevant signals, thereby improving sampling efficiency and accuracy.) ![set_channel_cfg_of_pulseview](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/set_channel_cfg_of_pulseview.png) ### Debugging Waveforms #### View Operations Through view operations, you can observe waveforms in more detail. ![tag_of_pulseview](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/tag_of_pulseview.png) **Waveform Zoom**: Use the mouse scroll wheel (middle button) to zoom in and out of the waveform. **Drag Waveform**: Hold down the left mouse button to drag the waveform display area horizontally and vertically. **Region Zoom**: Double click on a specific region to zoom in on that area of the waveform. **Channel Scroll**: In the waveform display area, use Ctrl + mouse scroll wheel (middle button) to quickly scroll the channels up and down. **Time Measurement**: You can create marker points by right clicking the desired position and selecting \"Create Marker Here.\" The software will automatically calculate and display the time length between two marker points on the time axis. **Adjust Channel Order**: Drag and drop a channel's label to rearrange the order of channels as needed. #### Protocol Decoding After capturing the required data, protocol decoding can be used to analyze the data more effectively. Below are the decoding processes for some common protocols. ##### UART Protocol Data Decoding 1. Connect the TX pin of the UART to the D0 channel. 2. Click on the **Yellow and Blue waveform icon** in the top toolbar, search for \"UART,\" and double click to select the UART option. ![uart_select](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/logic_uart_select.png) 3. Click on the **protocol label** of the newly added UART channel in the waveform display window. Set the TX corresponding channel, data format, signal baud rate, and byte order. ![uart_set](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/logic_uart_set.png) 4. Capture the data and the decoded result will be displayed: Example: UART's TX pin sends data \"Hello SLogic!\" (ASCII data format, baud rate 115200, little endian byte order) ![uart_tx](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/logic_uart_tx.jpg) ##### I2C Protocol Data Decoding 1. Connect the SCL pin of the I2C to the D0 channel and the SDA pin to the D1 channel. 2. Click on the **Yellow and Blue waveform icon** in the top toolbar, search for \"I2C,\" and double click to select the first option. ![i2c_select](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/logic_i2c_select.png) 3. Click on the **protocol label** of the newly added I2C channel in the waveform display window. Click on the added I2C **protocol label** and set the SCL and SDA channels. ![i2c_set](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/logic_i2c_set.png) 4. Capture the data and the decoded result will be displayed: Example: I2C sends 0x68 ![i2c_value](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/logic_i2c_0x68_write.jpg) ##### SPI Protocol Data Decoding 1. Connect the MISO, MOSI, CLK, and CS pins of the SPI to the D0, D1, D2, and D3 channels respectively. 2. Click on the **Yellow and Blue waveform icon** in the top toolbar, search for \"SPI,\" and double click to select the SPI option. ![spi_select](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/logic_spi_select.png) 3. Click on the **protocol label** of the newly added SPI channel in the waveform display window. Set the CLK, MISO, MOSI, and CS corresponding channels, and specify the active level of the chip select signal. ![spi_set](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/logic_spi_set.png) 4. Capture the data and the decoded result will be displayed: Example: SPI sends 0x00~0x09 (clock 10MHz, low active chip select) ![spi_10mhz](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/logic_spi_10mhz.jpg) Example: SPI sends 0x00~0x09 (clock 26MHz, low active chip select) ![spi_26mhz](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/logic_spi_26mhz.jpg) ### Precautions When connecting the logic analyzer to the system under test, please note the following precautions: 1. The logic analyzer shares a common ground with the computer. If the system under test is a high voltage system, be sure to use a \"USB isolator\" for isolation. Otherwise, there is a risk of damaging the logic analyzer or computer. 2. The GND channel must be reliably connected to the ground of the system under test and kept as short as possible. 3. The signal channels must be securely connected to the test points of the system under test. Avoid haphazard \"tapping\" that could introduce interference. 4. Improper wiring may introduce glitches that could prevent proper data analysis in the software."},"/hardware/en/logic_analyzer/combo8/use_fouruart_function.html":{"title":"Using as Serial Module","content":" title: Using as Serial Module keywords: LogicAnalyzer, debugger, link, RISCV, tool update: date: 2023 07 26 version: v0.1 author: ctx content: Release docs SLogic Combo 8 has 4 independent high speed serial port functionalities. The first two ports based on UART can achieve a super high speed baud rate of up to 20Mbps simultaneously, while the latter two ports can reach up to 1Mbps through IO simulation. It is highly suitable for scenarios such as batch programming and production testing. ## Enable Serial Module Functionality Press the toggle button to switch the indicator light to red. ![slogic_led_red](./../../../zh/logic_analyzer/combo8/assets/use_fouruart_function/slogic_led_red.png) > To verify if Serial Module functionality is enabled: > Open the device manager in Windows environment, and use the lsusb command in Linux environment to find the \"UARTx4 HS\" device ## Getting Started ### Pin sequence ![fouruart_line_order](./../../../zh/logic_analyzer/combo8/assets/use_fouruart_function/fouruart_line_order.png) SLogic Combo 8 has a total of 4 serial ports. UART0 and UART1 support a maximum baud rate of 20M, while UART3 and UART4 support a maximum baud rate of 1M. Note： 1. Ensure that the module and the target device share a common ground to prevent issues such as garbled data. 2. The device numbers on Windows may be in random order, so manual trial and error may be required to find the corresponding serial port. ### Linux Please note: Due to system reasons, Linux may consider the device as a modem when it has more than one ttyACM. This may temporarily occupy the device for sending AT commands. In this situation, you may not be able to open the serial port, and it may report \"Resource busy\" due to device being occupied. This is normal, and it will return to normal after a while. To solve this problem, you can add a udev rule to avoid this issue. Please refer to the following commands: ```shell sudo touch /etc/udev/rules.d/49 sipeed.rules sudo echo \"ATTRS{idVendor} \\\"359f\\\", ATTRS{idProduct} \\\"3101\\\", ENV{ID_MM_DEVICE_IGNORE} \\\"1\\\"\" > /etc/udev/rules.d/49 sipeed.rules sudo udevadm control reload ``` ### Data Transmission and Reception For Linux, you can use **picocom** or **minicom** as the serial communication tool. Install it using the following commands: ```Bash sudo apt install picocom sudo apt install minicom ``` For example, to use **minicom** with UART0 to communicate with the test device, open the Linux terminal using **CTRL+ALT+T**, enter the installation commands, and enter the administrator user password when prompted. Wait for the package installation to complete. ![minicom_install_uart](./../../../zh/logic_analyzer/combo8/assets/use_fouruart_function/minicom_install_uart.png) After installation, communicate with the test device using UART0. In the terminal, enter the command: ```Bash sudo minicom b 2000000 D /dev/ttyACM0 ``` The ** b** parameter specifies the desired baud rate, which should be the same as the UART baud rate setting of the test device. The ** D** parameter specifies the port to listen to. ![minicom_uart](./../../../zh/logic_analyzer/combo8/assets/use_fouruart_function/minicom_uart.png) After entering the command, you can communicate with the test device, receive and print messages in the terminal, and send data to the test device. #### Serial Loopback Test： ![uart_line_uart](./../../../zh/logic_analyzer/combo8/assets/use_fouruart_function/uart_line_uart.jpg) (Above: Serial module wiring diagram) Loopback test result: ![minicom_test_uart](./../../../zh/logic_analyzer/combo8/assets/use_fouruart_function/minicom_test_uart.png) ### Windows In the Windows operating system, you can use tools like SSCOM, MobaXterm, and others as serial port communication tools. Here, we'll use **SSCOM** as an example to demonstrate how to perform serial communication tests. 1. First, download SSCOM. This software is open source, so please search and download it via an online search. 2. After the download is complete, extract and launch the serial port tool. You will see the following interface: ![SSCOM Interface](./../../../zh/logic_analyzer/combo8/assets/use_fouruart_function/sscom_gui.png) 3. Connect the module to your PC. Then, in the Windows Device Manager (shortcut `Win + X + M`), check if the connection was successful and obtain the port number information. ![Device Manager](./../../../zh/logic_analyzer/combo8/assets/use_fouruart_function/sscom_device_manage.png) Due to the nature of Windows systems, the port numbers might be in a disordered sequence. Therefore, you can follow these steps to test the corresponding port numbers: Connect the TX* and RX* pins of the module (* can be 0 3). Set the baud rate, typically using 115200. Open the serial port. Sequentially try different port device numbers, click the \"Send\" button, and check if data is received to confirm the corresponding serial port for each. ![Confirm Port](./../../../zh/logic_analyzer/combo8/assets/use_fouruart_function/sscom_determine_port.png) 4. After confirming the port numbers for each serial port, you can input the data you want to send in the data input window. Simultaneously, received data will also be displayed in the window. #### Transmission and Reception Testing Using the SLogic 4xUART module for serial communication testing, the first two virtual serial ports can achieve a maximum speed of 20Mbps. Here's an example of testing performance using SSCOM. ##### 1Mbps Test (256kbps, 512kbps) 1. Connect TX2 and RX3. 2. Start two instances of SSCOM, connecting them to the respective serial ports. 3. Set the baud rate to 1000000 and open the serial port. 4. Create a 256KB text file with repetitive common characters. 5. Use SSCOM's file sending feature, select the newly created text file and send it. 6. The other instance of SSCOM will receive the data and verify the received file content. Below is the result of the 1Mbps test (256KB). Confirm the success of the test by checking the file size and data content. ![1Mbps Test (256KB)](./../../../zh/logic_analyzer/combo8/assets/use_fouruart_function/uart_sscom_1mbps_256kb.png) Increase the data size of the text file to 512KB and repeat the test to confirm the success of sending and receiving 512KB of data at 1Mbps. ![1Mbps Test (512KB)](./../../../zh/logic_analyzer/combo8/assets/use_fouruart_function/uart_sscom_1mbps_512kb.png) ##### 20Mbps Test (256kbps) 1. Connect TX0 and RX1. 2. Start two instances of SSCOM, connecting them to the respective serial ports. 3. Set the baud rate to 20000000 and open the serial port. 4. Create a 256KB text file with repetitive common characters. 5. Use SSCOM's file sending feature, select the newly created text file and send it. 6. The other instance of SSCOM will receive the data and verify the received file content. Below is a screenshot of the test results. Confirm the success of the test by checking the file size and data content. ![20Mbps Test](./../../../zh/logic_analyzer/combo8/assets/use_fouruart_function/uart_sscom_20mbps_256kb.png)"},"/hardware/en/logic_analyzer/combo8/use_daplink_function.html":{"title":"Using as DAPLink","content":" title: Using as DAPLink keywords: LogicAnalyzer, debugger, link, RISCV, tool update: date: 2023 07 26 version: v0.1 author: ctx content: Release docs SLogic Combo 8 features high speed DAP Link functionality, suitable for various common chips, especially for debugging STM32 chips using IDE on Windows. ## Enable DAPLink Functionality Press the toggle button to switch the indicator light to green. ![slogic_led_green](./../../../zh/logic_analyzer/combo8/assets/use_daplink_function/slogic_led_green.png) > To verify if DAPLink functionality is enabled: > Open the device manager in Windows environment, and use the lsusb command in Linux environment to find the \"RV CMSIS DAP\" device ## Getting Started Here's a step by step guide on using the STM32F103C8T6 chip with Windows MDK IDE as an example: ### Pin sequence > CKLink and DAPLink have similar pin connections, so they are shown together in one diagram. Please ignore the 'CK' label. ![daplink_cklink_line_order](./../../../zh/logic_analyzer/combo8/assets/use_daplink_function/daplink_cklink_line_order.png) In DAPLink mode, it can simultaneously support one DAPLink interface and one UART interface. The pins on the left side of the diagram (TXD, RXD, DTR, RTS) can be used as a UART interface. The pins on the right side of the diagram (TCK, TDI, TDO, TMS) are used for DAPLink debugging. ### Connecting DAPLink using MDK Set the Reset Options to SYSRESETREQ. In CMSIS DAP, locate and select the RV CMSIS DAP device. ![cfg_dap_debugger_of_mdk](./../../../zh/logic_analyzer/combo8/assets/use_daplink_function/cfg_dap_debugger_of_mdk.png) ### Download the firmware using MDK: ![download_fw_in_mdk](./../../../zh/logic_analyzer/combo8/assets/use_daplink_function/download_fw_in_mdk.png) ### Debug the firmware using MDK: ![start_debugger_in_mdk](./../../../zh/logic_analyzer/combo8/assets/use_daplink_function/start_debugger_in_mdk.png) Thank you for the document contribution from 'dragonforward'."},"/hardware/en/logic_analyzer/combo8/basic_operation.html":{"title":"Basic Operations","content":" title: Basic Operations keywords: LogicAnalyzer, debugger, link, RISCV, tool update: date: 2023 07 26 version: v0.1 author: ctx content: Release docs The SLogic Combo 8 has four functions (SLogic, CKLink Debugger, DAP Link Debugger, USB2UART). This document is intended to guide you on how to select the functions. ## Button Functions After power on, **press the button** to switch functions, and you can see the **indicator light change** when the switching is successful. ![slogic_btn](./../../../zh/logic_analyzer/combo8/assets/basic_operation/slogic_btn.png) （Up：The red box indicates the position of the function switch button） > Note: When switching functions, do not press the button more frequently than every 100ms; otherwise, it may cause the module to enter boot mode, and you will see that the indicator light will no longer change. If you encounter this situation, try to restart the power supply. ## Indicator Light Color and Functions Each function corresponds to a specific color, and you can determine the currently enabled function based on the indicator light color. Function Slogic DAPLink USB2UART CKLink Indicator Light Color Blue Green Red Yellow （Up：Table of Indicator Light Color and Functions） ## Panel Information You can check the current function and corresponding wire sequence through the panel information: The left side shows the wire sequence for **CKLink (Yellow)** and **DAPLink (Green)** together, as their wire sequences are similar. The middle section shows the wire sequence for **UART (Red)**. The right side shows the wire sequence for **SLogic (Blue)**. ![slogic_panel](./../../../zh/logic_analyzer/combo8/assets/basic_operation/slogic_panel.png) （Above：Color/Function/Wire Sequence Correspondence Diagram） Here's an example: 1. If you want to use the SLogic function, press the button to switch the indicator light to blue. This will enable the SLogic function, and you can find the pin wire sequence for SLogic under the blue font on the panel. 2. If you want to use the UART function, press the button to switch the indicator light to red. This will enable the UART function, and you can find the pin wire sequence for UART under the red font on the panel. Alright, now you can switch to the function you need and proceed to the next step!"},"/hardware/en/logic_analyzer/combo8/faq.html":{"title":"FAQ","content":" title: FAQ keywords: LogicAnalyzer, debugger, link, RISCV, tool update: date: 2023 09 12 version: v0.1 author: lxo content: Release docs The following lists some common problems according to the form of Q&A, please try to find a solution in the following if you find any problem when using it, if the above record doesn't solve your problem, you can try to ask the question in [Community](https://maixhub.com/discussion), reasonable questions will be answered by the technical staff for you. ## General Question **Q:**There are some functional defects when using the logic analyzer/DAPLink/JLink/serial port module. **A:**Please try to find and resolve your issue first in the Q&A section. If the problem persists, click [here](./update_firmware.html) to update the firmware and try again. **Q:**The LED doesn't change after pressing the button? **A:**Check that the interval between key presses is not less than 100ms, otherwise it may cause the module to enter boot mode and you will see that LED no longer change. If this occurs, re power up the module to restore it ## Logic Analyzer **Q:** After clicking \"run\", the prompt \"device closed but should be open.\" ![image 20230816113213933](./../../../zh/logic_analyzer/combo8/assets/use_logic_function/tips_capture_failed.png) **A:**This may be the result of unstable contact that causes the device to disconnect, try to re plug the device and then reconnect it to solve the problem. **Q:**When using 8 channel sampling, it was found that waveforms also appeared when the D7 channel was not connected. **A:**This is a problem to be solved, but this problem will not affect the sampled waveforms, and the waveform can still be acquired normally after connecting an external signal to the D7 channel. **Q:**When sampling waveforms, the waveforms in the display window do not match the actual waveforms. **A:**Make sure that you connect the GND wire of the logic analyser to the GND of the target device, and make sure that the GND wire is as close as possible to the location of the point to be measured. Be aware that even at a distance of 1cm, there may be many components in between that can interfere with the signal, so even 1cm closer is likely to give better signal quality. **Q:**Logic analyser can't sample for long periods of time **A:**There are multiple situations: **Situation 1:** Sampling time is very small due to incorrect setting of sampling points and sampling rate, sampling time (unit:s) sampling points/sampling rate, please make sure that the sampling points and sampling rate are set correctly. **Situation 2:** Effect from PC performance. As PulseView needs to use a lot of USB bandwidth, but if the PC performance is poor at this time, it will also result in shorter sampling times. **Situation 3:** If everything is fine, check if the number of sampling points is set too large, resulting in a memory overflow that prevents sampling ## DAPLink **Q:**MDK can't find DAPLink device **A:**It is possible that the MDK version is too low, and a low version of MDK may not be able to recognise DAPLink (the MDK version used for testing in this article is V5.38). If the MDK version is too low to recognise DAPLink, if you don't want to upgrade the version, you can refer to the method [here](https://developer.arm.com/documentation/ka003663/latest/) to update the debug driver of CMSIS DAP. **Q:**The serial port function in DAPLink mode does not work properly and messages are echoed back **A:**Please refer [here](./update_firmware.html) to update the firmware to the latest version before trying again **Q:**DAPLink error while burning firmware:`Connection refused due to device mismatch!` ![image 20230816113213933](./assets/err_device_mismatch.jpg) **A:**It may be caused by the mismatch between the chip package and the actual chip. For example, MDK uses `STM32F103` configuration, but the actual chip is `CS32F103`, the IDCODE of `STM32F103` is **0x1B10417**, and the IDCODE of `CS32F103` is **0x2BA01477**, which causes a device mismatch and refuses to connect. The solution is to find and install the software package for the actual chip, and since there are so many packages, please find the download method by yourself. ## CKLink None ## Serial Module **Q:**The serial terminal cannot open the serial port. **A:**Try using a different serial terminal. For Windows, you can try using XCOM, and for Linux, you can try using Minicom."},"/hardware/en/logic_analyzer/combo8/update_firmware.html":{"title":"Update Firmware","content":" title: Update Firmware keywords: LogicAnalyzer, debugger, link, tool update: date: 2023 09 01 version: v0.1 author: lxo content: Release docs The following are the steps to update the firmware of SLogic Combo 8 ## Download Tool and Firmware Tool: [Click to download](https://dl.sipeed.com/shareURL/SLogic/SLogic_combo_8/4_application/Tools) Firmware: [Click to download](https://dl.sipeed.com/shareURL/SLogic/SLogic_combo_8/4_application/Firmware) Just select the latest version of the burning tool and firmware, and unzip it after downloading. > Note:When the firmware is named `slogic_combo8_pack_202308171404.bin`, the date is 17/08/2023. The date naming rules are similar for other firmware. ## Configure Tool 1. Start the tool After decompression, the execution files of different system environments are provided in the root directory of the tool. For Windows users：Double click`BLDevCube.exe`to start For Linux users：Double click`BLDevCube ubuntu`to start。Note that the Linux environment needs to add executable permissions `sudo chmod +x BLDevCube ubuntu` 2. Select chip After startup, select BL616/618 and click Finish ![chip_selection](./../../../zh/logic_analyzer/combo8/assets/download_firmware/chip_selection.png) 3. Enable `Single Download Options` and add the downloaded firmware ![config_download_firmware](./../../../zh/logic_analyzer/combo8/assets/download_firmware/config_download_firmware.png) ## Configure device Put SLogic Combo 8 into burning mode ![enter_the_burn_mode](./../../../zh/logic_analyzer/combo8/assets/download_firmware/enter_the_burn_mode.png) Steps: 1. Long press the button 2. Power on again 3. Observe that the LED light is off, the operation is successful ## Burn firmware Configure the serial port and baud rate, and click `Create & Download` to download ![download_firmware](./../../../zh/logic_analyzer/combo8/assets/download_firmware/download_firmware.png) After the download is completed, the progress bar displays a green box, indicating that the download is successful and the firmware update is completed."},"/hardware/en/logic_analyzer/combo8/index.html":{"title":"SLogic Combo 8","content":" title: SLogic Combo 8 keywords: LogicAnalyzer, debugger, link, RISCV, tool update: date: 2023 07 26 version: v0.1 author: ctx content: Release docs ## Introduction SLogic Combo 8 is a development tool with functions of logic analyzer, CKLink debugger, DAP Link debugger and USB2UART, which can be switched arbitrarily by buttons. ![slogic_combo8_main](./../../../zh/logic_analyzer/combo8/assets/readme/slogic_combo8_main.png) ## Function Parameters ### SLogic Function Parameters Logic Analyzer **SLogic Combo 8** Maximum Channel Number 8CH Maximum Sampling Rate 80M Transmission Bandwidth 320Mb/s Sampling Mode Stream Typical Configuration 80M@4CH 40M@8CH Signal Input Range 0～3.6V High and Low Level Thresholds VIH>2V VIL<0.8V In Windows environment, the SLogic Combo 8 has maximum transmission bandwidth of 160 Mb/s. The typical configuration includes 80M@2CH and 40M@4CH. ### CKLink Function Parameters CKLink SLogic Combo 8 JTAG Clock Rate 16M Typical Dump Speed 1200KB/s Debug Serial Port Up to 20Mbps ### DAPLink Function Parameters DAPLink SLogic Combo 8 Debug Serial Port Up to 20Mbps Typical Burning Speed 110KB/s ### UART Function Parameters High Speed Four Serial Ports **SLogic Combo 8** Maximum Baud Rate 2x20Mbps+2x1Mbps Total Bandwidth 42Mbps ## Get Started Now Click the link below to enter the corresponding chapter: [Basic Operation](./basic_operation.html) [Using as Logic Analyzer](./use_logic_function.html) [Using as CKLink](./use_cklink_function.html) [Using as DAPLink](./use_daplink_function.html) [Using as Serial Module](./use_fouruart_function.html) [Update firmware](./update_firmware.html) ## Others Links [Sipeed Download station](https://dl.sipeed.com/shareURL/SLogic/SLogic_combo_8/4_application/Firmware) [Forum](maixhub.com/discussion) Support Email：support@sipeed.com"},"/hardware/en/logic_analyzer/index.html":{"title":"SLogic series","content":" title: SLogic series keywords: LogicAnalyzer, debugger, link, RISCV, tool update: date: 2023 03 09 version: v0.1 author: wonder content: 新建文件 SLogic 的意思是 Sipeed Logic Analyzer，中文意思为逻辑分析仪。"},"/hardware/en/maixII/index.html":{"title":"Maix-II series hardware products","content":"Maix II series hardware products ## Maix II brief Following the classic K210 Maix I series AIOT boards, Sipeed continues to launch a number of edge computing boards that can run a complete Linux system, which will be named MAIX II and MAIX III in order of performance. The MAIX II series includes a variety of hardware products currently: * **Maix II Dock**: **Recommended products in this series**, the chip is Allwinner V831, a cost effective SOC that can run Linux, and supports hardware AI acceleration (0.2Tops computing power), currently have the best software support in Maix II series, provide C SDK and Python SDK, and online model training service ([MaixHub](https://maixhub.com)) * **MaixSense**: The chip is Allwinner R329, which also provides hardware AI acceleration, 0.25Tops computing power. * **Maix II S**: The chip is Allwinner V833, an upgraded version of V831, which is mainly used for commercial customization, and individual users should choose carefully. ## MaixII Dock The chip is Allwinner V831, single core Cortex A7 800MHz, 64MiB on chip DDR2 memory, cost effective SOC that can run Linux, and supports hardware AI acceleration (0.2Tops computing power), which can be used as a common Linux SOC or used for Edge AI applications. **This series of recommended products**, the most cost effective, the current software support is the easiest to get started, supports C language development, provides C SDK ([libmaix](http://github.com/sipeed/libmaix)); also provides [ MaixPy3](/maixpy3) support, you can use Python language to develop, you can directly use a large number of Python libraries, and supporting jupyter IDE, and [MaixHub](https://maixhub.com) fully supports this device * Quick overview of product features <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 298543445&bvid BV1sF411u7xb&cid 586467021&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \" true\"> </iframe> </p> * Real pictures: ![m2dock](../../assets/maixII/m2dock.jpg) * Purchase link: [sipeed.aliexpress.com](https://www.aliexpress.com/item/1005002538932487.html) * Details: [MaixII Dock](./M2/resources.html) ## MaixSense The chip is Allwinner R329, dual core A53@1.5GHz, on chip 256MiB DDR3 memory, dual core HiFi4@400MHz also provides hardware AI acceleration, 0.25Tops computing power, more good at audio field, support armbian system. There are many official open materials, and it is more suitable for developers with strong hands on ability at present. ![](./M2A/assets/M2A 1.gif) * Purchase link: [sipeed.aliexpress.com](https://www.aliexpress.com/item/1005003152376519.html) * Details: [MaixSense](./M2A/maixsense.html) ## MaixII S It can be understood as a performance upgrade version of V831. Programs on V831 can be directly run on V833. This development board only supports commercial users. Personal users are recommended to choose Maix II Dock development board. <img style \"max height: 300px\" src \"./M2S/assets/M2s_Dock.jpg\" alt \"M2s_Dock\"/> * Details: [MaixII S](./M2S/V833.html)"},"/hardware/en/maixII/M2A/config_system.html":{"title":"Config system","content":"# Config system Here is the pinmap of Lichee MaixSense <img src \"./../../assets/../maixII/M2A/assets/R329 pin.jpg\" alt \"pinmap\" width 60%> ## Connect the serial port Connect the serial port to communicate to the board. Steps: Use type C cable connect computer with the board marked TTYS0, then do following steps depending on your computer OS. ### Linux & macOS For linux OS, use command `ls /dev/ttyUSB*` to see your device COM number, then use serial application to connect the board. ### Windows Lichee MaixSense equips with CH340 as serial chip, but we need install its driver to use it. Click this to download the driver for this serial chip, after installing [ch340 ch341 driver](https://api.dl.sipeed.com/shareURL/MAIX/tools/ch340_ch341_driver), you can find your `device serial port` from `Device manager`. ## Config Tina OS We suggest beginners use Armbian OS because there is a lot of information about it on the internet, and for Tina OS suits those who are good at Linux. The Tina OS configuration steps of Lichee MaixSense are similar to [M2dock](./../M2/usage.html), so here will not retell its usages. <! You can use type c cable connecting computer with Lichee MaixSense type c port marked with DEBUG, then use serial software application like [Mobaxterm](./../M2/tools/mobaxterm.html) to operate it. Besides, Lichee MaixSense with Tina OS can be operated by [adb shell](https://developer.android.google.cn/studio/releases/platform tools), if it's connected with computer by its type c port, which connects a USB camera by default, marked with OTG. > ## Config armbian OS After connecting computer with this board, we can use serial application to control this board, and the baudrate is 115200. We provide 2 armbian image, their login steps are different, so here we tell how to login ths OS. ### Image containing MaixPy3 The username and password are all `root`. Be sure not input any wrong word when logging. The log is as following if you succeed logging.\\ ```bash Armbian 21.08.0 trunk Bullseye ttyS0 maixsense login: root Password: __ __ _ ____ \\/ __ _(_)_ __/ ___ ___ _ __ ___ ___ \\/ / _` \\ \\/ /\\___ \\ / _ \\ '_ \\/ __/ _ \\ (_ > < ___) __/ \\__ \\ __/ _ _\\__,__/_/\\_\\____/ \\____ ____/\\___ Welcome to Armbian 21.08.0 trunk Bullseye with bleeding edge Linux 5.14.0 rc7 sun50iw11 No end user support: built from trunk & unsupported (bullseye) userspace! System load: 133% Up time: 0 min Memory usage: 53% of 231M Zram usage: 23% of 115M IP: 192.168.0.251 CPU temp: 50°C Usage of /: 77% of 2.9G [ 0 security updates available, 66 updates total: apt upgrade ] Last check: 2022 08 31 01:45 [ General system configuration (beta): armbian config ] Last login: Tue Aug 30 10:34:06 UTC 2022 on ttyS0 root@maixsense: ``` ### Image without MaixPy3 The first time to start this system we need to set password. If you didn't set the password at the first time, there is no way to login anymore, only reburn system you can get the chance to set the password again. If the password you set at the first time is complex enough, the system wil not accept the password and you need reset your password. ```bash New to Armbian? Documentation: https://docs.armbian.com Support: https://forum.armbian.com New root password: ********** Repeat password: ********** ``` After setting the password, we need to choose our shell, normally we use bash. ```bash Choose default system command shell: 1) bash 2) zsh Shell: BASH ``` Then it asked to add a new user to avoid us only using root username, which is a good way to help us not destroying the system. Set the username and password by yourself. ```bash Creating a new user account. Press <Ctrl C> to abort Please provide a username (eg. your forename): ll Create password: ********* Repeat password: ********* ``` The new created user is granted root permission by default, and we can use this identity to login this board and control this system. We can use command `passwd` to change the password or delete the password. For example, we can use `passwd d root` to delete the root password which we create at the beginning. We also can use `passwd root` to reset password of root. The following log are examples about `passwd` ```bash root@maixsense:~# passwd d root passwd: password expiry information changed. root@maixsense:~# passwd root New password: Retype new password: passwd: password updated successfully ``` Here are part of example: ![](./../assets/../M2A/assets/2021080511 46 52.gif)"},"/hardware/en/maixII/M2A/maixsense.html":{"title":"MaixSense","content":"# MaixSense This board is different from Maix I series, it's main chip not only incorporates AI acceleration hardcore, but also supports running armbian operating systems. ## M2A core board M2A core board use R329 as main chip, and also contains components like power management chip, fel burn key, wifi module, storage pad reserved and RMGII interface. ![M2A](./../../maixII/M2A/assets/M2A.jpg) ### R329 chip R329 is a 64 bits processor designed by Allwinner containing dual Cortex A53 inside, with 2 HIFI4 DSP used for audio pre processing and post processing, containing an extremely low energy consumption AIPU (Artificial intelligence processing unit) whose hash rate over 0.256 TOPS designed by ARM China, can be used to accelerate neural network, dealing with the 720P image captured by camera. ![R329_function_block](./../assets/../M2A/assets/R329_1.png) Item Specs CPU Dual core ARM Cortex™ A53@1.5GHz<br>32KB L1 I cache + 32KB L1 D cache per core<br>256KB L2 cache DSP Dual core HiFi4@400MHz<br> 32KB L1 I cache + 32KB L1 D cache per core<br> 2MB SRAM NPU zhouyi™Z1 AIPU，0.25TOPS@600MHz RAM 256MB DDR3 inside Storge Support SPI Nand/Nor/eMMC Audio Supports 5 audio ADC and 2 audio DAC<br>Supports 5 analog audio inputs and 2 analog audio output<br>Up to 3 I2S/PCM controllers for Bluetooth and external audio codec<br>Integrated digital microphone, supports up to 8 digital microphones Enthernet 10/100/1000 Mbps USB OTG \\* 1<br>Host \\* 1 SDIO SDIO 3.0 * 2 I2S I2S*3(I2S0, I2S1, S I2S0) SPI SPI*2(SPI0, SPI1) TWI TWI*3(TWI0, TWI1, S TWI0) GPADC 4 ch SCR SCR*1 PWM PWM*15(PWM[8:0], S PWM[5:0]) ### MaixSense MaixSense is a really small Linux card computer. Its package contains a SOM based on R329, and a multifunction IO expansion bottom board. Running Linux OS, it can be used for personal server, Intelligent voice assistant or robotics. Because of the AIPU npu core, this board can also be used for intelligent voice and video image processing, and AI model like CV , NLP can also run on it. **Tina Linux**：Tina Linux is an embedded system built for intelligent hardware products by Allwinner based on openwrt 14.07. Kernel source code, drivers, toolchain, system middleware and application packages can be found @ [https://github.com/sipeed/r329 linux 4.9](https://github.com/sipeed/r329 linux 4.9) MaixSense not only can run Tina os, but also can run **armbian**, which is built based on debian/ubuntu, is a really full linux os. Name armbian Tina : : : Description A `Debian OS` for `arm` devices An OS modified from OpenWRT1404 Feature Linux mainline, with many advantages Deeply modified, well fits hardware Target user New Linux user Linux developer, custome design ## Maixsense appearance <div align \"center\"> <img src \"./../../maixII/M2A/assets/M2A 1.gif\" alt \"Maixsense outlook\" > </div> ## MaixSense Specs <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">MaixSense Specs</th> </tr> </thead> <tbody float:left> <tr> <td>CPU</td> <td>Dual ARM CortexTM A53™ </td> </tr> <tr> <td>AIPU(NPU)</td> <td>TZ1AIPU，Supports up to 0.25TOPS@600MHz max</td> </tr> <tr> <td>DRAM</td> <td>SIP 256MB DDR3</td> </tr> <tr> <td>Memory</td> <td>SPI NAND pad(Default blank)<br>SD card slot on bottom board</td> </tr> <tr> <td>Video Encoder</td> <td>H264/5 &JPEG,supports up to 720p@30fps</td> </tr> <tr> <td>Camera</td> <td>Default equipped with OV9732，720P@30fps HD.<br>Connected by USB C connector, supports front or back insertion (can be used as front or rear cameras)</td> </tr> <tr> <td>Microphone</td> <td>2 Analog MEMS microphones，average sensitivity 91dB SPL@1kHz</td> </tr> <tr> <td>Screen</td> <td>1.5 inch SPI screen, with 0.5mm 12P FPC interface，240*240 resolution</td> </tr> <tr> <td>Key</td> <td>1 reset key and 4 user keys(ADC keys)，1 download key(FEL)</td> </tr> <tr> <td>Ethernet</td> <td>24P 0.5mm FPC connector，for connecting PHY</td> </tr> <tr> <td>IO Routed</td> <td>3*10P 2.54mm IO pads<br>4P* 1.25 male connectors(Used for usart1)<br>See following pinout for more help</td> </tr> </tbody> </table> ## Pinout ![R329 pin](./../../maixII/M2A/assets/R329 pin.jpg) Camera Port pin： ![camera_pin_order](./../../../zh/maixII/M2A/assets/camera_pin_order.png) ## Others [MaixSense other related information](https://dl.sipeed.com/shareURL/MaixII/MaixII A) ## Support Email to support@sipeed.com for business cooperation or leave message on this page for help."},"/hardware/en/maixII/M2A/usages.html":{"title":"Basic usage","content":"# Basic usage After finishing [config system](./config_system.html), we have logged in the board and we can use command to control the board. ## Expand system capacity The system not containing MaixPy3 will auto expand the capacity to the maximum at your first start up. System containing MaixPy3 will not auto expand the capacity, so we need to run this command `/usr/lib/armbian/armbian resize filesystem start` to expand the capacity to the maximum, this will take a while, and don't cancel this when running this command. After finishing this work it will be back to the console for us to control it. ## Connect network Here we use `nmtui` to connect network. ![](./../../zh/../maixII/M2A/assets/202108051626.gif) <details> <summary><font color \"#4F84FF\">Click to see graphic steps</font></summary> <p>Enter nmtui to open NetworkManager TUI</p> <img src \"./../../../zh/maixII/M2A/assets/wifi/nmtui.png\" alt \"nmtui\"> <img src \"./../../../zh/maixII/M2A/assets/wifi/active_wifi.png\" alt \"active_wifi\"> <p>We choose Activate a connection</p> <p>Choose your target wifi </p> <img src \"./../../../zh/maixII/M2A/assets/wifi/choose_wifi.png\" alt \"choose_wifi\"> <img src \"./../../../zh/maixII/M2A/assets/wifi/input_password_1.png\" alt \"input_password_1\"> <p>Input the correct password</p> <img src \"./../../../zh/maixII/M2A/assets/wifi/input_password_2.png\" alt \"input_password_2\"> <p>It will display connecting</p> <img src \"./../../../zh/maixII/M2A/assets/wifi/connect_wifi.png\" alt \"connect_wifi\"> <p>The active on the right change into Deactive if succeed connecting wifi</p> <p>If failed connecting wifi, please retry and input the correct password</p> <img src \"./../../../zh/maixII/M2A/assets/wifi/succeed_connecting.png\" alt \"succeed_connecting\"> <p>Then we back to the command console</p> <img src \"./../../../zh/maixII/M2A/assets/wifi/quit_connecting.png\" alt \"quit_connecting\"> <img src \"./../../../zh/maixII/M2A/assets/wifi/quit_nmtui.png\" alt \"quit_nmtui\"> <img src \"./../../../zh/maixII/M2A/assets/wifi/back_terminal.png\" alt \"back_terminal\"> <p>Use command ifconfig to get the IP of this board</p> <img src \"./../../../zh/maixII/M2A/assets/wifi/ifconfig.png\" alt \"ifconfig\"> <img src \"./../../../zh/maixII/M2A/assets/wifi/see_ip.png\" alt \"see_ip\"> <p>If we see the IP(marked with red box), we have succeed connecting the network</p> </details> ## Add user Normally we use another user to use linux system instead of root user, because root user can break the system the easily. Here we tell how to create a new user by `adduser` command. Add a user named `xxx` ```bash adduser xxx ``` After some log shows up, we need to set the password. ```bash New password: Retype new password: ``` The following log shows up if we succeed setting password. ```bash passwd: password updated successfully ``` Then we press `Enter` for all following settings by default. ```bash Enter the new value, or press ENTER for the default Full Name []: Room Number []: Work Phone []: Home Phone []: Other []: Is the information correct? [Y/n] ``` Then we succeed creating the user named `xxx`. We can use command `login` to use our new created user: ```bash login xxx ``` Use command `logout` to sign out. ```bash logout ``` ### Grant administrator privilege The new created user may need administrator privilege to do finish some work, so here we tell how to grant administrator privilege. To grant administrator privilege, we just need to edit a file named `sudoers` in `/etc`. ```bash sudo nano /etc/sudoers ``` Find following content in this file. ```vim # User privilege specification root ALL (ALL:ALL) ALL ``` Add `xxx ALL (ALL:ALL) ALL` in that file (`xxx` is the username to be grant administrator privilege) ```vim # User privilege specification root ALL (ALL:ALL) ALL xxx ALL (ALL:ALL) ALL ``` Then save this file and quit editing. ## Install application Here we take install `armbian config` as example, just run following command: ```bash sudo apt install armbian config y ``` The above command means to install armbian config by running the apt application with root privileges and that everything which needs to be selected is the yes option ## Config Timezone Just use `armbian config` to change timezone. Here we take change to Shanghai time as example. `armbian config` > `Presonal` > `Timezone` > `Asia` > `Shanghai` to set Shanghai time as timezone, then use keyboard `Tab` switch to OK to finish our settings. ![202108062005](./../../../zh/maixII/M2A/assets/202108062005.gif) ## Config language We also use `armbian config` to change language. Just `armbian config` > `Personal` > `Locales`, and select your target language, then choose the default system language. Dont't forget to download your language font to avoid wrong display. ## Use Bluetooth Use `armbian config`. `armbian config` > `Network` > `BTinstall` to install bluetooth support package. ![](./../../../zh/maixII/M2A/assets/202108071034.gif) Then we can use `bluetoothctl` to use the bluetooth. ```bash root@maixsense:~# bluetoothctl Agent registered [CHG] Controller XX:XX:XX:XX:XX:XX Pairable: yes [bluetooth]# help Menu main: Available commands: advertise Advertise Options Submenu scan Scan Options Submenu gatt Generic Attribute Submenu list List available controllers show [ctrl] Controller information select <ctrl> Select default controller devices List available devices paired devices List paired devices system alias <name> Set controller alias reset alias Reset controller alias power <on/off> Set controller power pairable <on/off> Set controller pairable mode discoverable <on/off> Set controller discoverable mode discoverable timeout [value] Set discoverable timeout agent <on/off/capability> Enable/disable agent with given capability default agent Set agent as the default one advertise <on/off/type> Enable/disable advertising with given type set alias <alias> Set device alias scan <on/off> Scan for devices info [dev] Device information pair [dev] Pair with device cancel pairing [dev] Cancel pairing with device trust [dev] Trust device untrust [dev] Untrust device block [dev] Block device unblock [dev] Unblock device remove <dev> Remove device connect <dev> Connect device disconnect [dev] Disconnect device menu <name> Select submenu version Display version quit Quit program exit Quit program help Display help about this program export Print environment variables ``` ### Connect to Bluetooth device Use `bluetoothctl` to connect to bluetooth device. ```bash scan on scan off trust XX:XX:XX:XX pair XX:XX:XX:XX connect XX:XX:XX:XX ``` ![202108071610](./../../../zh/maixII/M2A/assets/202108071610.gif) ### Set bluetooth audio in/out To start this, we need install `pulseaudio` and bluetooth modules ```bash sudo apt install pulseaudio sudo apt install pulseaudio module bluetooth ``` Then use pactl command to see whether there is device for bluetooth audio output. ```bash pactl list short sinks ``` Switch audio output to bluetooth, the `<dev>` in the following command should be `2`. ```bash pactl set default sink <dev> ``` The log is as following： ```bash maixsense:~:# apt install pulseaudio maixsense:~:# apt install pulseaudio module bluetooth maixsense:~:# pactl list short sinks 0\talsa_output.platform 7032000.codec.stereo fallback\tmodule alsa card.c\ts16le 2ch 44100Hz\tSUSPENDED 2\tbluez_sink.00_26_04_00_73_B1.a2dp_sink\tmodule bluez5 device.c\ts16le 2ch 44100Hz\tSUSPENDED maixsense:~:# pactl set default sink 2 ``` ![202108071726](./../../../zh/maixII/M2A/assets/202108071726.gif) Then we can play audio to a Bluetooth device or connect the phone via Bluetooth to use as a Bluetooth speaker. ## Change volume Here we use `alsamixer` to change volume ![202108071440](./../../../zh/maixII/M2A/assets/202108071440.gif) Use keyboard `H` to see help. ![alsamixer](./assets/alsamixer.png) To change Bluetooth volume, we use `pactl`. Besides, we can also use `pactl` to change the volume of onboard speaker. ```bash ## See the input/output device index pactl list short sources/sinks ## Sets the input/output volume pactl set source/sink volume index volume pactl set default source/sink ## Set the default input/output ``` For example, set the Bluetooth headset as the output device, the volume is 10%, then increased by 20%, and finally reduced by 30% ```bash maixsense:~:# pactl list short sinks 0\talsa_output.platform 7032000.codec.stereo fallback\tmodule alsa card.c\ts16le 2ch 44100Hz\tSUSPENDED 2\tbluez_sink.00_26_04_00_73_B1.a2dp_sink\tmodule bluez5 device.c\ts16le 2ch 44100Hz\tRUNNING ## The bluetooth normally is bluez_sink maixsense:~:# pactl set default sink 2 maixsense:~:# pactl set sink volume 2 10% maixsense:~:# pactl set sink volume 2 +8192 maixsense:~:# pactl set sink volume 2 0x3000 ##Optional number, Percentage, Decimal, Hexadecimal control, same resule, and can exceed 100% ``` ## Media player Normally we use `mplayer` for media play. Install mplayer ```bash sudo apt install mplayer y ``` Then transfer the media file to the board. The media file can be downloaded from our [Download station](https://dl.sipeed.com/shareURL/MaixII/MaixII Dock/example) We can use [mobaxterm](https://mobaxterm.mobatek.net/) connect the board by SSH protocol, then use [mobaxterm](https://mobaxterm.mobatek.net/) to transfer the media file to the board. Drag your media file to the red box in the left of the following picture. ![mobaxterm_ssh_transfer](./assets/mobaxterm_ssh_transfer.png) Use command `sudo mplayer badapple_240_60fps.mp4 vo fbdev2` to play video or `sudo mplayer Short.mp3` to play audio. ```bash mplayer badapple_240_60fps.mp4 vo fbdev2 ``` Use onboard `Ctrl+C` to exit the media playing. We can also add `< /dev/null > /dev/null 2>1 &` in the end of the command to play the media background. ```bash mplayer badapple_240_60fps.mp4 vo fbdev2 < /dev/null > /dev/null 2>1 & ``` The command above plays media background, if you wang to stop it, you need to use `fg` command to switch the background application to the front, then use `Ctrl+C` to stop it. ![202108091128](./../../../zh/maixII/M2A/assets/202108091128.gif) If it didn't play media correctly, try to increase the media volume by `alsamixer` application or check the media file path whether matchs the command. ## Program C code Here we use `vim` as the editor. You can learn many skills about from Internet. Use command `sudo apt install vim y` to install `vim`. Then create a file named `helloworld.c` by vim. ```bash vim helloworld.c ``` There are 3 modes in vim: `Command mode`, `Insert mode` and `Last line mode`. The default mode after creating a new file is `Command mode`, we press the 'i' on the keyboard to enter `Insert mode`. Then we input the following codes as the content in the new created file. ```c #include <stdio.h> int main() { printf(\"Hello, world\\n\"); return 0; } ``` We use keyboard `esc` to quit `Insert mode` to `Command mode`. Then use `:` to `Last line mode`, use command `wq` wo save and quit editing. Then we use gcc to compile our code. If there ie no gcc, install it by apt. The detailed usage about gcc can be searched from Internet. ```bash gcc hello.c o hello.o ``` After finishing compiling our code, run it. ```bash ./hello.o ``` ![202108091201](./../../../zh/maixII/M2A/assets/202108091201.gif) ## Prepare python code See [Program C code](#program c code) to get explanation. ```bash vim helloworld.py i print(\"hello world!\\n\") esc :wq python3 helloworld.py ``` ![202108091339](./../../../zh/maixII/M2A/assets/202108091339.gif) ## Light an led by python Install the python GPIO library first. ```bash pip install gpiod ``` Then insert the led positive electrode into PH5, and negative electrode into GND. Cerate `led.py` file. ``` bash vim led.py ``` Then we input the following codes as the content in the new created file. ```python import time import gpiod as gpio PH_BASE (8 1)*32 # \"PH\" gpiochip1 gpio.chip(\"gpiochip1\") led gpiochip1.get_line((PH_BASE + 5)) # \"PH5\" config gpio.line_request() config.request_type gpio.line_request.DIRECTION_OUTPUT led.request(config) while led: led.set_value(0) time.sleep(1) print(\"led on\") led.set_value(1) time.sleep(1) print(\"led off\") ``` Save it and quit editing, run the code in terminal. ```bash python3 led.py ``` Result: ![202108091956](./../../../zh/maixII/M2A/assets/202108091956.gif) ## Running at startup Scripting language skill is required. First enable the boot auto start script, here we can modify the relevant settings by editing the relevant files to. ```bash vim /lib/systemd/system/rc local.service ``` Then we add following content in the end of the file. ```bash [Install] WantedBy multi user.target Alias rc.local.service ``` Up to now we have succeed enable auto start script. Then we just need to add what we want to run at startup to the rc.local file to achieve startup start. Edit the auto start script. ```bash vim /etc/rc.local ``` Add the operations you want to do at startup before ``exit 0`. ```bash echo \"hello world!\" ``` Then restart the board. For example, after editing the auto start script, it executes before user logs in, and the execution example log is as follows. ```bash [ OK ] Finished Permit User Sessions. [ 38.569457] rc.local[1322]: hello world! ``` It's suggested not to use serial port ar startup, this will make us unable to use the board by serial port. ## More usage Visit [MaixPy3](/soft/maixpy3/zh/readme.md)(English docs will be updated soon)"},"/hardware/en/maixII/M2A/flash_system.html":{"title":"Burn image","content":"# Burn image ## System introduction There are 2 system images for Lichee MaixSense(which will be called R329 below) Image name armbian Tina : : : Description A lightweight Debian for arm development board Linux system created by Allwinner Based on OpenWRT1404 Feature Linux mainline, mutiple contents Tiny os Target users Geeker, or newer Customization requirements developer For armbian system image it's required to use sdcard over than 4GBi For Tina os it needs sdcard over than 512MBi Low speed sdcard will lead a bad experience ## Get image ### armbian system image Download armbian system image from MEGA ：https://mega.nz/folder/1B4RFKpK#X0tMwHLHFQJvJ9POt_lXtg The image named with maixpy3 means this image has installed MaixPy3 and its related drivers This image file is created by [dd](https://en.wikipedia.org/wiki/Dd_(Unix)). So we use [Etcher](https://www.balena.io/etcher/ \"Etcher\") to burn our image card. ### Tina system image Tina os need to be compiled by yourself, visit [https://github.com/sipeed/R329 Tina jishu](https://github.com/sipeed/R329 Tina jishu) for information. ## Burn system ### Burn armbian image #### Get software [Etcher](https://www.balena.io/etcher/ \"Etcher\") #### Burn steps Extract your downloaded image file to get the `.img` file, run Etcher, click `Flash from file`, choose the extracted .img file, click `Select target` and choose your sdcard, click `Flash` to burn your sdcard, wait it for finishing. ![burn](./../../maixII/M2A/assets/95133.gif) If failed burning, try to format your sdcard. For Windows and macos users we suggest use [SD Card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip \"SDCardFormatter\") to format sdcard, while for linux users can try [Gparted](https://gparted.org/). ### Burn Tina image Its burning steps are the same as MaixII Dock, visit [Buring MaixII Dock OS](./../M2/flash.html#Buring system) for detailed steps."},"/hardware/en/maixII/M2S/V833.html":{"title":"M2S核心介绍","content":"# M2S核心介绍 ## V833 Chip V833智能视觉AI专用处理器是基于存算紧耦AI引擎的视频识别处理器，采用业界优秀的半导体工艺，创新突破了存算紧耦架构、神经网络权重量化技术、人脸检测技术和人脸图像质量评估技术、图像畸变矫正技术、图像防抖技术和可变帧率的编码技术等关键技术，有效地解决了神经网络计算复杂度高、网络性能差、人脸检测效率低和准确度不高、广角和鱼眼镜头的图像畸变、智能识别/安防产品功耗高等问题，综合技术水平达国内优秀水平，是一款能耗低、运算效率高、检测效率高、图像效果佳的人工智能视频识别处理器。 > 取至<http://www.elecfans.com/d/1557234.html> ![](./assets/V833.png) ## 参数 项目 参数 CPU 单核Cortex A7@1.2GHz Video encoder H.264, up to 5M@20fps<br>H.265, up to 5M@30fps <br>JPEG, up to 1080p@60fps NPU 0.4T EISE Up to 1080p@60fps SDRAM DDR2/DDR3/DDR3L SMHC SMHC x3 (SDcO, SDC1, SDC2) SPI SPI x3 (SPIO with 2 CS, SPIO supportsquad output/quad input SPl mode) LCD Parallel RGB, Serial RGB, i8080 DSPO BT1120,BT656 l2S l2S x2 (12S0,I2S1) Parallel CSI Support Ethernet 10/100/1000 Mbit/s Ethernet port with RGMll and RMll interfaces TWI TWI x5 (TWIO,TWI1,TWI2,TWI3,s_TwWIO) RSB support GPADC 2 ch Audio codec Output : LINEOUTP/N<br>Input: MICIN1P/N, LINEINL MIPI CSI 4 lane, up to 8M@30fps MIPI DSI Support Package LFBGA273 "},"/hardware/en/maixII/M2S/reources.html":{"title":"M2S介绍","content":"# M2S介绍 MaixII S是基于 V833 芯片设计的一款【板卡】+【底板】的开发板产品。 ## 板卡 ![](./assets/M2s_Dock.jpg) > 资料[下载](https://dl.sipeed.com/shareURL/MaixII/MaixII A) ### 参数 项目 参数 CPU 全志 V833 Arm Cortex A7 1.2Ghz 主频 NPU 0.4TOPS 算力 内存 标配单片 16bit 128MB DDR3（可选最大 16bit 512MB DDR3） 存储核心板板载 128MB SD NAND（可选 512MB 和 4GB）底板板载 TF 卡座子，可扩展存储 摄像头接口MIPI：标配 200W 像素可见光摄像头(可选配宽动态摄像头)，76 度视场角<br>DVP：标配 30W 像素红外摄像头 补光灯接口 板载 2 个 DC DC 恒流降压驱动电路+2 个 2P 1.25mm 卧贴母座 <br>（每路最大驱动能力达到 5V 0.5A） 显示屏幕接口 MIPI：默认引出 4 lane MIPI 接口，已适配 5 寸和 7 寸屏 触摸屏接口 6P 0.5mm FPC 座子：可以连接电容触摸屏或者电阻触摸屏，目前已适配 GT911 音频接口 板载 3W 单声道音频功放，有 2P 1.25mm 卧贴母座可以连接喇叭 <br>板载驻极体麦克风电路，有 2P 1.25mm 卧贴母座可以连接麦克风 以太网 板载百兆 PHY 和百兆网口变压器，有 6P 1.25mm 卧贴母座可以连接以太网口 继电器 板载继电器，触电切换能力 2A 30VDC RTC 实时时钟 板载专用 RTC 芯片+1220 纽扣电池座子 按键 • 复位按键<br>• FEL 按键（进入下载模式）<br>• 2 个用户可编程按键（可以用作防拆报警键等自定义功能） 扩展接口 <br>• 4P 座子：1 组 UART、1 组 485、1 组 USB、1 组 IIC<br>• 9P 座子：2 个供电引脚+2 个继电器引脚+1 个按键的 2 引脚+2 个信号引脚<br>• 9P 座子：7 个信号引脚（可以复用为 1 组 SPI 总线+多个 CS 脚）+2 个电源引脚<br>• 9P 座子：6 个信号引脚+3 个电源引脚 ## 产品技术支持 M2S开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maixII/M2/introduce.html":{"title":"Chip introduction","content":" title: Chip introduction keywords: MaixII, MaixPy3, Python, Python3, M2dock desc: maixpy About V831 In the last year or so, we’ve started to see several camera SoCs with a built in NPU or SIMD instructions to accelerate face detection, objects detection and so on, starting with the low resolution Kendryte K210 processor to the 2.5K Ingenic T31 MIPS video processor, or even the 4K capable iCatch V37 camera SoC. Allwinner introduces several camera processors (V3, V316, S3…) in the past, but none of them included an NPU aka AI accelerator. This has now changed with Allwinner V831 Cortex A7 Full HD camera SoC also including a small 200 GOPS NPU. > Copied from [allwinner v831 ai full hd camera soc powers sochip v831 development board](https://www.cnx software.com/2020/04/28/allwinner v831 ai full hd camera soc powers sochip v831 development board/) ## v831 Chip ![V831_struct.png](./../../../zh/maixII/M2/asserts/V831_struct.png) ## Parameters Item Specs Addition CPU Up to 800Mhz Video encoder H.264, up to 1080p@30fps</br>H265, up to 1080p@30fps</br>JPEG, up to 1080p@30fps NPU 0.2T EISE Up to 1080p@30fps SDRAM SIP 64MB DDR2 SIP(System In a Package) SMHC SMHC x2 (SDC0, SDC1) SD MMC Host controller SPI SPI x2 (SPI0, SPI1) LCD Serial RGB, i8080 DSPO BT656 I2S I2S x1 (I2S0) Parallel CSI No support Ethernet 10/100 Mbit/s Ethernet port with RMII TWI TWI x4 (TWI0, TWI1, TWI2, TWI3) RSB No support GPADC 1 ch Audio codec Output: LINEOUTP</br>Input: MICIN1P/N MIPI CSI 2 lane, up to 1080p@60fps MIPI DSI No support Package QFN88 Click to download [V833／V831 Datasheet V1.0.pdf](https://linux sunxi.org/images/b/b9/V833%EF%BC%8FV831_Datasheet_V1.0.pdf) ## Support M2dock meets customer's needs in varieties of scenarios, and has been widely used in AIoT. It also has gained a very good reputation in the industry with its quality and performance. Contact support@sipeed.com for more business help."},"/hardware/en/maixII/M2/flash.html":{"title":"Buring MaixII-Dock OS","content":" title: Buring MaixII Dock OS keywords: MaixII, MaixPy3, Python, Python3, M2dock desc: maixpy Buring MaixII Dock OS > Edit on 2022.06.27 ## Get system image file Download the newest V831 system image from Download website [SDK_MaixII/release](https://dl.sipeed.com/shareURL/MaixII/MaixII Dock/SDK/release), unpack the downloaded file to get the .img file, which is the system image file. > If it slows to download, you can use MEGA: https://mega.nz/folder/5dJSWJDD#nQmiOeJsX6pEl2Q0cBrj2A ## Image name rule For V831 there is name rule for all files. Here I take `v831 m2dock maixhub 0.5.1 20220701.zip` and ` v831 m2dock maixpy3 0.5.1 20220701.zip` these two image files for example. Name Meaning maixpy3 0.5.1 For [MaixPy3](https://wiki.sipeed.com/maixpy3) and its version is `0.5.1` , no maixhub app inside maixhub 0.5.1 For [MaixPy3](https://wiki.sipeed.com/maixpy3) and its version is `0.5.1` , incorporates maixhub app m2dock Image for MaixII Dock 20220701 Update date > These images is not the business edition, only can be burned into TF card. ## Buring System on Windows We use `PhoenixCard` and `PhoenixSuit` to burn image on Windows. The first one is used for burning image file into TF card, and PhoenixSuit is used for burning image file into onboard flash via USB. Only bussiness edition M2 model contains the Flash, so we need to start the system via TF card on OpenSource edition M2. ### Preparation Get burning tool [PhoenixCard](https://dl.sipeed.com/shareURL/MaixII/MaixII Dock/SDK/tools) Get [image file](https://dl.sipeed.com/shareURL/MaixII/MaixII Dock/SDK/release) Get SD card Formatter Tool [SD Card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip) ### Burning system 1. Connect you sd card reader inserted with sd card with your computer, if following information comes out, click `Cancel` ![windows_format_tf](./assets/windows_format_tf.png) 2. Run `SD Card Formatter` to format your TF card: Click `Refresh` then choose your target `card`, click `Format` ![Format SD card](./../../../assets/maixII/V831/image 20210802102810041.png) 3. Run Follow the steps below to complete burning ![burn image](./../../lichee/assets/RV/flash.png) Run PhoenixCard Click `Image` marked with ① to choose your target firmware We choose `Start up` marked with ② Click `Burn` marked with ③ to burn your target firmware into tf card From `Status bar` marked with ④ to see your progress；If it's red when finishing this means it fails burning, then we should rerun `SD Card Formatter` to format the TF card to increase its success possibility. Click `Close` to close PhoenixCard ## Buring System on Windows(Ubuntu) ### Preparation Install Livesuit 1. Install dkms ```bash sudo apt install dkms ``` 2. Install libpng1.2(It must be this version) ```shell wget http://archive.ubuntu.com/ubuntu/pool/main/libp/libpng/libpng_1.2.54.orig.tar.xz tar xvf libpng_1.2.54.orig.tar.xz ``` ```shell cd libpng 1.2.54 ./autogen.sh ./configure make j8 sudo make install ``` update link binary: ```shell sudo ldconfig ``` 3. Install **livesuit** ```shell git clone https://github.com/linux sunxi/sunxi livesuite.git cd sunxi livesuite chmod +x LiveSuit.sh sudo ./LiveSuit.sh ``` ### Burning system Run command `sudo livesuit` to run livesuit software, then click the red box marked in the picture below to choose your image file. ![choose firmware](./../../../zh/maixII/M2/asserts/flash_15.png) Connect your computer with **OTG** interface on MaixII Dock without SD card in it, this software will show a dialog, then insert SD card into MaixII Dock and click yes to format SD card and burning system. ![format SD card](./../../../zh/maixII/M2/asserts/flash_17.png) Wait burning finished, then we can begin to use it. ![progress](./../../../zh/maixII/M2/asserts/flash_19.png) ![Finish](./../../../zh/maixII/M2/asserts/flash_21.png)"},"/hardware/en/maixII/M2/usage.html":{"title":"Usage","content":" title: Usage keywords: MaixII, MaixPy3, Python, Python3, M2dock, Tina, Openwrt desc: maixpy MaixII M2dock start to use ## Introduction openwrt > Allwinnner V831 use Tina Linux, which is created from [OpenWrt](https://openwrt.org). The OpenWrt is a Linux operating system targeting embedded devices. Visit [official website](https://openwrt.org) and [official open repository](https://github.com/openwrt/openwrt) for more details. For V831 we use adb shell to control it. Connect otg interface marked on board with computer. Fow Windows users, download the latest adb, add its path into system path and save it then use command `adb shell` to connect V831. For linux we need to install adb first, then run command `adb shell` to connect V831. ## Wireless connection There is a 2.4G wireless module on M2Dock, with which we can connect to wireless network. Because of the change of different system image, the ways to connect to wireless network on V0.5.4 system version and system version before V0.5.4 are different. ### V0.5.4 In this system version, we remove the way to connect wireless network by editing `wpa_supplicant.conf` file of the u disk, and we use commands to connect wireless network. We can see there are many linux commands about wifi in this system. ![wifi_test_command_list](./../../../zh/maixII/M2/asserts/usage/wifi_test_command_list.jpg) Here we use `wifi_connect_ap_test` to connect wireless network, and we can use `wifi_scan_results_test` to scan the wireless network to see whether M2Dock detects your target network. We use following command connect wireless network named `Sipeed_Guest` and its password is `qwert123`. ```bash wifi_connect_ap_test Sipeed_Guest qwert123 ``` Change `Sipeed_Guest` into your target wireless network name and change `qwert123` into your target wireless network password. ![wifi_test_connect_wireless](./../../../zh/maixII/M2/asserts/usage/wifi_test_connect_wireless.jpg) From the connection message, we can see `192.168.3.158`, this is the IP address of M2Dock in this network environment. We can run `ifconfig` on M2Dock to see the ip address, from which we see that the ip address is the same as the wireless network connection message. ![wifi_test_ifconfig](./../../../zh/maixII/M2/asserts/usage/wifi_test_ifconfig.jpg) ### V0.5.4 and previous image Connect M2Dock USB OTG port to computer, there is a u disk in your computer. Edit the `wpa_supplicant.conf` file which is in the u disk, ![wap_conf_png](./../../../zh/maixII/M2/asserts/usage/wap_conf.png) Change `yourWIFIname` and `yourWIFIpassword` into your target wireless network name and password. Then remove the u disk from your system, use your operating system command to remove the u disk, otherwise this file will be damaged. After removing the u disk, reboot M2Dock by press RST KEY. ![wap_conf_gif](./../../../zh/maixII/M2/asserts/usage/wap_conf.gif) ### Update MaixPy3 Download MaixPy3 manually: https://pypi.org/project/maixpy3/#history ![maixpy3_download](./../../../zh/maixII/M2/asserts/usage/maixpy3_download.png) Download the file whose name incorporates `cp38`, then rename it into `maixpy3 9.9.9 cp38 cp38 linux_armv7l.whl`, save it into the u disk of M2Dock, reboot your board and maixpy3 will update automatically at boot up. ![maixpy3_install](./../../../zh/maixII/M2/asserts/usage/maixpy3_install.png) Do Not Do Any Operation When Updating. ### Okpg package management The opkg utility is the lightweight package manager used for upgrading the functionality of the system rather significantly by downloading and installing pre made packages from package repositories. #### Related common commands opkg update # Update the updatable utility opkg upgrade # Upgrade the upgradable utility opkg list # list all utility opkg install # install target utility opkg remove # remove target utility For example： ```bash root@sipeed:/# opkg list MaixPy3 0.2.5 1 alsa lib 1.1.4.1 1 busybox 1.27.2 3 busybox init base files 167 1612350358 ca certificates 20160104 curl 7.54.1 1 dropbear 2015.71 2 e2fsprogs 1.42.12 1 eyesee mpp external 1.0 1 eyesee mpp middleware 1.0 1 eyesee mpp system 1.0 1 ``` ## Test screen There is a flushing on screen after power on. this means the board is well working, and the flushing is caused by the system reset. We can use command `cat /dev/urandom > /dev/fb0` to test the screen. <center><img src \"./../../../zh/maixII/M2/asserts/lcd_test.jpg\" width \"400\"></center> ## Run python3 We can type `python3` in adb shell to run python3 in interative mode on V831. ```python import platform print(platform.uname()) ``` Actual operation on 2022.07.06 ```bash __ _ / / (_)__ __ ____ __ / /__/ / _ \\/ // /\\ \\ / sipeed.com (Neptune) /____/_/_//_/\\_,_//_\\_\\ root@sipeed:/# python3 Python 3.8.5 (default, Jun 14 2022, 09:51:56) [GCC 6.4.1] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import platform >>> print(platform.uname()) uname_result(system 'Linux', node 'sipeed', release '4.9.118', version '#3242 PREEMPT Tue Jun 28 04:03:38 UTC 2022', machine 'armv7l', processor '') ``` ## Test camera We use MaixPy3 to test camera, let's run python3 first. ```python from maix import camera, display, image display.show(camera.capture()) ``` <center><img src \"./asserts/hello_world.jpg\" width \"500\"></center> > If your screen doesn't display anything, make sure your mirror is the latest one and your drivers are correct. ## How to use USB camera There are 2 USB Type C ports on M2Dock. One masked UART is for the serial communication between this board and computer, another port masked with OTG is used for user defined functions. We set it `usb_device` default, so we can use `adb` to control this board by default. And by `adb forware`, we can run jupyter code on M2Dock without network but only one usb cable. To connect USB camera, we need to set the OTG port to be the usb_host. Run the following command on M2Dock to change its function, but remember this command will stop the communication between computer and M2Dock via ADB USB OTG port. ```bash echo \"usb_host\" > /sys/devices/platform/soc/usbc0/otg_role ``` Then we can control the USB camera device which is in the /dev directory. ## How to set USB OTG port usb_device mode The OTG port is usb device mode by default, by which we can control this board via `adb`. And maybe we changed its function to be a USB host for some reason and now we want to change it back to being a USB device. Just run the following command on M2Dock(You can run the following command on M2Dock via UART with 115200 baudrate). ```bash echo \"usb_device\" > /sys/devices/platform/soc/usbc0/otg_role ``` ## ToolChain [Here](https://dl.sipeed.com/shareURL/MaixII/MaixII Dock/SDK/Toolchain) is a toolchain for V831, it can be run in linux system. ## MaixPy3 We suggest you use [Maixpy3](/maixpy3) to develop , and its English documents will come out soon. ## SDK development Now we have open V831 source code here, use this https://github.com/Tina Linux/tina V83x if you need."},"/hardware/en/maixII/M2/tools/mobaxterm.html":{"title":"如何使用 mobaxterm","content":" title: 如何使用 mobaxterm keywords: Jupyter, MaixPy3, Python, Python3 desc: maixpy 如何使用 mobaxterm ## mobaxterm 是什么？ 这是在 Windows 下使用的全能终端管理软件，对开发与运维人员必备，可以在 [mobaxterm.mobatek.net/download](https://mobaxterm.mobatek.net/download.html) 获取免费版本使用，在国内网站上有中文版。 ![](https://mobaxterm.mobatek.net/img/moba/features/feature terminal.png) 主要通过它提供的下列功能： serial 通过串口连接 Linux 系统的终端 ssh 远程登录 Linux 系统的终端 ftp 远程访问文件服务上的资源 ## 连接 Serial 开源硬件产品大多都会预留串口（Serial）用作 Linux 系统的终端交互接口，下面介绍串口【session】的创建。 ![](./asserts/mobaxterm serial 4.png) 在「session setting」 对话框里选择【serial】，再选好串口号及波特率，点击【OK】就完成连接了。 ![](./asserts/mobaxterm serial 5.png) 同样【session】会保存在左侧的【session】标签页里，方便下次连接。 ## 连接 SSH 除了有线串口的方式，还可以通过无线访问 SSH 登录 Linux 系统，如一般的家用路由器。 在 Linux 系统输入 ifconfig 查看自己 ip 地址（192.168.1.185），然后输入自己名称和密码，常见有 root / root 。 > 如果没有设置密码，root 的连接密码是 root 。输入密码的时候是看不到的，在输入结束之后，按回车即可 ![](./asserts/mobaxterm_ssh.jpg) 就可以看到 Linux 的登录会话终端了。 ![](./asserts/mobaxterm_ssh_view.jpg) > 以下连接方式只是合适在 MaixII Dock 上使用的，需要使用 MaixPy3 IDE 版本 0.4.2以上的版本 MaixII Dock 可以通过 OTG 接口转发到 127.0.0.1 的 22 端口，但是每次使用之前，都需要通过运行 IDE 来进行配置，进行 ssh 端口转发服务的开启。 具体的连接方式和上面的 ssh 方式一样，只需要将 ip 地址修改成 127.0.0.1 即可，默认用户名和密码都是 root。 ## 连接 FTP 与 SSH 同理。 ![](./asserts/mobaxterm_ftp.png) 进入后就可以看到文件夹了。 ![](./asserts/mobaxterm_ftp.jpg) 可以拖拽文件上传和下载。 ![](./asserts/mobaxterm_ftp_ud.png) ## 如何进行编程 除了使用串口进行 Python 代码的复制粘贴运行，还可以通过在 FTP 文件管理获取下图的代码编辑器，编辑后保存就会自动同步上传（下图为 C 代码参考，其他代码同理）。 ![](https://mobaxterm.mobatek.net/img/moba/features/feature mobatexteditor.png) 这时候再拿到终端里运行 Python 脚本即可。 ```bash python xxxx.py ```"},"/hardware/en/maixII/M2/tools/vscode.html":{"title":"如何使用 vscode","content":" title: 如何使用 vscode keywords: vscode, MaixPy3, Python, Python3 desc: maixpy 如何使用 vscode ## 前言 它是微软出品的一款可扩展的轻量级开源编辑器，并且支持全平台系统。这些特性使得 VSCode 颇受欢迎，这也使其成为了一个很棒的 Python 开发平台。 关于如何安装和使用它的教程已经数不胜数，这里只推荐[【用 VSCode 愉快地写 Python 代码】](https://zhuanlan.zhihu.com/p/66157046)。 ## 为什么要使用它？ 除了专业 Python 代码开发环境，它还支持打开 jupyter notebook 文档运行代码。 与浏览器运行的 jupyter notebook 一样，执行 Python 代码的时候要选择对应的执行核心，如 [ipython/ipykernel](https://github.com/ipython/ipykernel) 或者 [rpyc_ikernel](https://github.com/sipeed/rpyc_ikernel) 的核心。 下面就来说说如何使用它。 ### 创建 notebook 文档 ![](https://tukuimg.bdstatic.com/scrop/abb1e4146fb8679109fa99aa0b03f59f.gif) ### 运行 Python 代码 ![](https://tukuimg.bdstatic.com/scrop/a1e2381bfac1a332a323774ee1b49c9f.gif) ### 运行后预览图表 ![](https://tukuimg.bdstatic.com/scrop/9c5bf21507c776f98d55bcfc0e51c5ff.gif) ## 你可以学到什么？ 在 VS Code 中使用 Jupyter 笔记本时需要进行的基本操作。如果您使用 VS Code 来满足其他开发需求，那么在 VS Code 中尝试使用 Jupyter Notebook 是非常方便的，这样您就可以只使用一个 IDE。特别是其代码自动补齐的功能可以让你的开发更快捷。 > 需要注意的是，截止 2021年3月3日 在 VSCODE 里的 jupyter notebook 文档进行中断存在一些问题，并不是很流畅，如果出现了运行无响应的问题可以重新打开文档解决问题。"},"/hardware/en/maixII/M2/tools/adb.html":{"title":"adb 操作介绍","content":"# adb 操作介绍 ADB.exe 在 MaixPy3 IDE 中的 maixpy3_examples 和 PhoenixSuit 文件夹下 ## 链接开发板 将开发板上的 OTG 接口接上电脑， 然后再命令行中输入 adb shell，会自动进入到开发板的 linux 系统中 ```shell BusyBox v1.27.2 () built in shell (ash) run profile file __ ___ _ __ _ / / /__ _(_)_ __ / / (_)__ __ ____ __ / /_/ / _ `/ /\\ \\ / / /__/ / _ \\/ // /\\ \\ / /_/ /_/\\_,_/_//_\\_\\ /____/_/_//_/\\_,_//_\\_\\ root@sipeed:/# ``` 这时可以开始使用 MaixPy3 进行开发了"},"/hardware/en/maixII/M2/PhoenixSuit.html":{"title":"","content":""},"/hardware/en/maixII/M2/other.html":{"title":"Others","content":" title: Others keywords: MaixII, MaixPy3, Python, Python3, M2dock desc: maixpy Others > Edit on 2022.08.23 This essay tells additional usages about V831 development board. After replacing device, the app application in Maixhub image can't be used anymore. ## Replace screen Up to now this development board supports 1.3 inch, 2.4 inch and 2.8 inch IPS screen, they can be bought from aliexpress in our [shop](https://sipeed.aliexpress.com/store/1101739727?spm a2g0o.detail.100005.2.54df59cebhGZrI), consult the sale support for more information. And if you need to use other size of screen, you can email to support@sipeed.com for Commercial customization. ### Prepare The replace screen and its convert board (Consult sale support for more information) M2 Dock Latest system image ### Connect board This board can connect 1.3 inch screen directly, but it can't connect with 2.4 inch or 2.8 inch screen directly because of different line sequence, so it's required to use convert board. There is a mark 1 on convert board, which notes the direction to connect lcd screen and development board. The mark 1 on screen is as below: <div> <img src \"./../../../zh/maixII/M2/asserts/other/1.3.png\" width 350> <img src \"./../../../zh/maixII/M2/asserts/other/2.4.jpg\" width 350> </div> The mark 1 on convert board is shown as below: <img src \"./../../../zh/maixII/M2/asserts/other/change.jpg\" width 600> The mark 1 on development board is shown as below: <img src \"./../../../zh/maixII/M2/asserts/other/V831.jpg\" width 600> Connect them as what is shown below <html> <img src \"./../../../zh/maixII/M2/asserts/other/not connected.jpg\" width 350> <img src \"./../../../zh/maixII/M2/asserts/other/connected.jpg\" width 350> </html> ### Change device tree update_dtb application is for Allwinner tina linux The compiled dtb file can be download from [Download station](https://dl.sipeed.com/shareURL/MaixII/MaixII Dock/SDK/Toolchain) This dtb file is compiled from kernel, and it's not suggested to be compiled by users because it's a bit difficult. The rule of dtb file name is shown as following: File name Fit screen Fit camera : : : : : : sipeed_2.8_240x320_vs3205.dtb 2.8 inch vs3205 sipeed_2.8_240x320_sp2305.dtb 2.8 inch sp2305 sipeed_2.4_240x320_vs3205.dtb 2.4 inch vs3205 sipeed_2.4_240x320_sp2305.dtb 2.4 inch sp2305 sipeed_1.3_240x240_vs3205.dtb 1.3 inch vs3205 sipeed_1.3_240x240_sp2305.dtb 1.3 inch sp2305 Copy the compiled dtb file into the virtual U disk, then run following command in adb shell. ```bash sync #Refresh contents update_dtb /dev/mmcblk0 /root/sipeed_240x240_vs3205.dtb reboot #Restart to apply ``` Then we succeed changing device tree. If your screen displays incorrectly, this means you choose wrong dtb file, just reupdate it to fix this. Here is a correct display picture. ![correct display](./../../../zh/maixII/M2/asserts/show.jpg) ## Replace camera Up to now MaixII Dock development board support sp2305 and vs3205 these two cameras, and they are being sold in our online [store](https://sipeed.aliexpress.com/store/1101739727?spm a2g0o.detail.100005.2.54df59cebhGZrI), consult our salers for help. If you want to use other camera, we can do commercial customization for you, or you can adapt the drivers by yourself. Same as replacing screen, we need to update device tree to change driver. ### Prepare The replace camera MaixII Dock Latest system mirror ### Connect camera > Be careful of your camera direction, if you connect if in a wrong direction, your camera may burn out. Just make sure the white point in the same place <html> <div class \"imbox\"> <img src \"./../../../zh/maixII/M2/asserts/other/camera_outlook_1.jpg\" width 350 alt \"camera top\"> <img src \"./../../../zh/maixII/M2/asserts/other/camera_outlook_2.jpg\" width 350 alt \"camera bottom\"> </div> </html> ### Update device tree > update_dtb is a tiny tool for Allwinner tina linux Put your downloaded dtb file into the virtual disk created bu development board. Then run following commands in adb shell ```bash sync #Refresh content update_dtb /dev/mmcblk0 /root/sipeed_240x240_vs3205.dtb reboot #Reboot to apply ``` Then we succeed changing camera. This dtb file is compiled from kernel, and it's not suggested to be compiled by users because it's a bit difficult. File name Fit screen Fit camera : : : : : : sipeed_2.8_240x320_vs3205.dtb 2.8 inch vs3205 sipeed_2.8_240x320_sp2305.dtb 2.8 inch sp2305 sipeed_2.4_240x320_vs3205.dtb 2.4 inch vs3205 sipeed_2.4_240x320_sp2305.dtb 2.4 inch sp2305 sipeed_1.3_240x240_vs3205.dtb 1.3 inch vs3205 sipeed_1.3_240x240_sp2305.dtb 1.3 inch sp2305 sipeed_1.3_240x240_ov2685.dtb 1.3 inch ov2685 ## Toolchain There is a file name `toolchain sunxi musl pack 2021 01 09.tar.xz` in the [Download station](https://dl.sipeed.com/shareURL/MaixII/MaixII Dock/SDK/Toolchain), it's the toolchain for V831 in linux OS. You can try to use this if you need, but for V831 we suggest use MaixPy3 and Maixhub."},"/hardware/en/maixII/M2/resources.html":{"title":"Maix-II-Dock(M2dock) introduction","content":" title: Maix II Dock(M2dock) introduction keywords: MaixII, MaixPy3, Python, Python3, M2dock desc: maixpy Onboard resources Maix II Dock is positioned as a cost effective AIoT development board. While supporting conventional Linux development, it also has a unique AI hardware acceleration feature. With the complete software ecosystem provided by Sipeed, you can quickly realize your edge AI application. * **Hardware**, based on the Allwinner V831 chip, the development board is formed in the form of [core board] + [ext board]. You can use the development board directly, or you can use only the core board to design your own ext board according to your needs, which is convenient and fast to complete the development. * **Software**, in addition to directly using the datasheet provided by Allwinner for development (some datasheet may need to be obtained from Allwinner), Sipeed provides a very convenient Python SDK ([MaixPy3](/maixpy3)) and C SDK ([libmaix](https://github.com/sipeed/libmaix)). It also provides an online model training service ([MaixHub](https://maixhub.com), which is more convenient for beginners to quickly train their usable AI models. * **Purchase**: [sipeed.aliexpress.com](https://www.aliexpress.com/item/1005002538932487.html) <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 298543445&bvid BV1sF411u7xb&cid 586467021&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\"> </iframe> </p> ## M2 core board <img style \"max height: 260px\" src \"./../../../zh/maixII/M2/asserts/maix_v831.jpg\" alt \"core_board\"/> > Download hardware reference data from [Sipeed_Maix_II_3101](https://api.dl.sipeed.com/shareURL/MaixII/MaixII Dock/HDK/Sipeed_MaixII_V831/Sipeed_Maix_II_3101) ### V831 chip brief Allwinner V831, single core Cortex A7 800MHz, 64MiB on chip DDR2 memory, cost effective SOC that can run Linux, and supports hardware AI acceleration (0.2Tops computing power), can be used as a normal Linux SOC, and can also be used for edge AI application. See the manual below for more detailed parameters. Dataset: [V833／V831 Datasheet V1.0.pdf](https://linux sunxi.org/images/b/b9/V833%EF%BC%8FV831_Datasheet_V1.0.pdf) Chip structure: <img style \"max height: 400px\" src \"./../../../zh/maixII/M2/asserts/V831_struct.png\" alt \"V831 structure\"/> ### M2 core board details Compared with Maix I generation Item Maix I (K210) Maix II (V831) Main frequency 400~600Mhz 800~1000Mhz Video encoder None H.264, up to 1080p@30fps<br>H265, up to 1080p@30fps<br>JPEG, up to 1080p@30fps NPU 0.23TOPS<br>support Conv+BN+ACT+POOL 0.2TOPS<br>support Conv,Inner_Product,Pool,Eltwise,ACT,BN,Split,Concat Memory 8MB SRAM SIP 64MB DDR2 Storage 16MB SPI Nor Flash Choosable 16M flash(Blank default) Camera DVP, support 30W pixels max 2lane MIPI, Up to 1080P@60fps Display 8bit MCU LCD 8bit MCU LCD, can use other screen by convert board SDIO None SMHC x2 (SDC0, SDC1) SPI SPIx3 SPI x2 (SPI0, SPI1) I2C I2C x3 I2C x4 (TWI0, TWI1, TWI2, TWI3) I2S 8bit I2S I2S x1 (I2S0) Ethernet None 10/100 Mbit/s Ethernet port with RMII interface ADC None 1 ch 6bit LRADC for key Audio None LINEOUTP + MICIN1P/N Development environment Maixpy/C MaixPy3/linux ## Bottom board Normally we think the screen panel is the front and camera is back. ![m2dock](./../../../assets/maixII/m2dock.jpg)no > Download dock board hardware data [Click me](https://api.dl.sipeed.com/shareURL/MaixII/MaixII Dock/HDK/Sipeed_MaixII_Dock_V831) > Thanks for net users sharing the [NGFF M.2 B key footprint for Maix II module](https://bbs.elecfans.com/jishu_2036119_1_1.html) ### Dock board Specs ![Dock board](./../../../zh/maixII/M2/asserts/M2Dock_pin.jpg) Number Maix II Part Function Note 1 M.2 B KEY female slot*1 Used for connect V831 core board Have connected with core board when sold 2 Core board M2 copper column nuts*1 Fix core board with bottom board Have been fixed when sold 3 Power LED*1 Show power state 4 State LED*1 User programmable led 5 CPU Reset button*1 Reset V831 chip 6 User button*2 Change IO voltage value，custom usage 7 Wi Fi module*1 RTL8189FTV，adds Wi Fi function for this board SDIO Interface 8 BTB camera interface*1 Connect BTB camera module Have connected with bottom board when sold 9 Camera M2 copper column nuts*2 Fix BTB camera with bottom board Have been fixed when sold 10 FHD camera*1 Default SP2305 Sensor BTB style, 1080P Default 6mm focal length M12 lens，can use other Suitable camera 11 USB to UART chip*1 Provide serial port communication 12 Type C interface(USB OTG) *1 Used for V831 otg function Can be used for power supply 13 Type C interface(UART) *1 Used for V831 uart debugging Can be used for power supply 14 Three axis accelerometer*1 I2C interface，can read 3 axes acceleration data 15 MicroSD card slot*1 Connect microSD card Default boot from SD card 16 LCD interface*1 FPC0.5mm 24Pin，MCU interface 17 IPS HD screen\\*1 1.3 inch IPS screen，resolution 240\\*240 Have connected with core board when sold 18 IPEX Wi Fi antenna connector IPEX(first generation) Wi Fi antenna 19 Extension female header Route V831 general IO，used for connecting peripheral 20 Speaker connector*1 MX1.25 2P interface（1.25mm pitch） 21 Loudspeaker*1 8Ω1W 1609 composite aluminum membrane speakers Have connected with core board when sold 22 Microphone*1 Analog electret microphone ## Resource summary Hardware: [MaixII Hardware Library](https://api.dl.sipeed.com/shareURL/MaixII/MaixII Dock/HDK) software: * Python SDK: [MaixPy3 software documentation](/maixpy3) * C SDK: [libmiax](https://github.com/sipeed/libmaix) * MaixHub model platform (AI model download, online training, project sharing): [MaixHub](https://maixhub.com) * Allwinner tina V83x SDK: [Tina Linux/tina V83x](https://github.com/Tina Linux/tina V83x) * Toolchain: [dl.sipeed.com](https://dl.sipeed.com/shareURL/MaixII/MaixII Dock/SDK/Toolchain) or [github](https://github.com/sipeed/libmaix /releases/download/v0.1.0/toolchain sunxi musl pack 2021 01 09.tar.xz) ## Maix II Dock Getting Started Development Route Guide * Because Maix II Dock runs linux system (tina linx), so we need to learn to burn the system image first, just like learning how to reinstall the computer system, which helps us start over if you encounter problems, find the \"Burn image\" article in the left directory to view <! There is no link to the burning system, let users learn to view the left directory > * Learn basic Linux operations, such as how to open a terminal, basic terminal commands, and how to transfer files to the development board, such as serial port usage, adb usage, and other basic operations * Select your development language: * If you are familiar with C and have some development experience, you can choose to use [libmaix](https://github.com/sipeed/libmaix) * If you want to get started quickly and develop in Python, please use [MaixPy3](/maixpy3) and read its documentation carefully * If you need to use AI functions, you can use it with the [MaixHub](https://maixhub.com) online training platform, this platform provides AI model and project sharing function, save users's time."},"/hardware/en/maixII/M2/faq.html":{"title":"","content":""},"/hardware/en/maixII/M2/no_sd_flash.html":{"title":"","content":""},"/hardware/en/maixIII/ax-pi/faq_axpi.html":{"title":"Maix-III AXera-Pi Q&A","content":" title: Maix III AXera Pi Q&A ## Q：Device does not work A: Try to plug both 2 USB on m3axpi, by this m3axpi can get enough power to boot. m3axpi comsume 5V*1A maximum. ## Q：How to switch to os04a10 camera？ A：**Change the parameter, or edit code** For examples like [`sample_vin_vo`](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/flash_system.html#VIDEO), we can change the parameter ` c 2` into ` c 0` to switch camera. For command line example like [IPCDemo](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/flash_system.html#IPCDemo) we can change the json file in the end. ![ipc_demo_json](./assets/flash_system/ipc_demo_json.jpg) For example script like [rstp](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/flash_system.html#rtsp) we can edit the script file to change the camera configuration. ![rtsp_stream_shell](./assets/flash_system/rtsp_stream_shell.jpg) Edit the C code `COMMON_SYS_CASE_E eSysCase SYS_CASE_SINGLE_GC4653;` to switch the camera, visit [github libmaix](https://github.com/sipeed/libmaix/blob/release/components/libmaix/lib/arch/axpi/libmaix_cam/libmaix_cam.cpp) to know more. <div> <img src \"./assets/qa/qa_switcg_os04a10_1.jpg\" alt \"qa_switcg_os04a10_1\" width \"45%\"> <img src \"./assets/qa/qa_switcg_os04a10_2.jpg\" alt \"qa_switcg_os04a10_2\" width \"45%\"> </div> ## Q：Error `i2c_read: Failed to read reg: Remote I/O error.!` when using camera A: Make sure you have connected the camera and board correctly, and run the command correctly, like using the mismatched camera parameters or wrong parameters in command. If these are all right but this error still occurs, there are some errors on the device. ## Q：How to use the other screen？ A：Up to now we only provide screen with 5 inches, and for other screens you need to build the driver, edit the device tree and the application codes to display. ## Q：Error `locale.Error: unsupported locale setting !` when running `xxxx menuconfig` A: Run `sudo localedef i en_US f UTF 8 en_US.UTF 8` to restore the configuration to solve this. ## Q：Error `VCEncInit:ERROR codecFormat NOT support by HW !` when running `IPC ODM` A: Try to reboot device by pressing the RST key onboard or replug device. ## Q：Screen display wrong ![faq_display](./../../../zh/maixIII/assets/faq_display.jpg) A: Check if you have set the correct camera parameters. ## Q：Screen shows opposite camera content A: This occurs because of the different batches of products, connecting them with 180° rotation. ![faq_video_a](./../../../zh/maixIII/assets/faq_video_a.jpg) Those who have shell for AXera Pi can connect them like in the following pictures: <html> <img src \"./../../../zh/maixIII/assets/faq_video_b.jpg\" width 48%> <img src \"./../../../zh/maixIII/assets/faq_video_c.jpg\" width 48%> </html> ## Q：Error `Bus Error！` ![faq_bus](./../../../zh/maixIII/assets/faq_bus.jpg) A：This happens when data in the tf card system is broken because of the bad quality of tf card. Try to use a good tf card, like what we sell, and you can choose your tf card based on our test: [Choose tf card](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/flash_system.html#Choose TF card) ## Q：No eth0 ip address after running `ifconfig a` A：There is no ip address if the ethernet is not connected to the Internet, check your ethernet connection. Or use command `dhclient eth0` to get the ip address manually or visit [config eth0](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/flash_system.html#Connect by Ethernet) to know more. ## Q：Device not found after running uvc A：This might happen on Windows. Check if there is an error in Windows device manager, remove the incorrect device then this error will be solved. ## Q：The device is stuck after running uvc A：Reboot the board ## Q：No wlan0 shown in result after running command `ifconfig` A： Maybe the bad connection between Core Model and ext board because of the express, reconnect them to fix this bad connection. We have two version of the wireless module, and they need different configuration file, run following command to apply your wireless module configuration. ```bash ls /boot/ cp /boot/kernel.img.rtl8189fs kernel.img ``` ## Q：Error `packet_write_wait: Connection to 10.xxx.xxx.xxx port 22: Broken pipe！` after login by ssh A: Reboot device after run Run command `python3 c \"import os, binascii; os.system('sed i \\'/iface eth0 inet dhcp/ahwaddress ether {}\\' /etc/network/interfaces'.format(binascii.hexlify(bytes.fromhex(open('/proc/ax_proc/uid').read().split('0x')[1][: 5]),':').decode('iso8859 1'))) if os.system('grep \\'hwaddress ether\\' /etc/network/interfaces q') ! 0 else exit();\"` in serial port. ## Q：The screen is blurred after booting. ## Q：Sticking Image on screen <html> <img src \"./../../../zh/maixIII/assets/faq_dth.jpg\" width 48%> <img src \"./../../../zh/maixIII/assets/faq_sawtooth.jpg\" width 48%> </html> A：Because of the because of the different batches of screen, the configuration for screen is different, replace the `dtb` file in `/boot/` folder to apply the screen. Make sure not use the wrong configuration file for a long time, which will burn the screen. ```bash ls /boot/ cp /boot/dtb.img.lcd20220830 dtb.img #dtb.img.lcd20221025 dtb.img ``` ## Q：Error `can't open camera by index` when running opencv. A：Check if the camera in the code matches the camera you use. [switch camera](#qhow to switch to os04a10 camera) ## Q：`XERA UBOOT >` is shown from serial port. A：This happens when autoboot is canceled when booting device, use command `boot` to start system. ![faq_boot](./../../../zh/maixIII/assets/faq_boot.jpg) ## The change of hardware {#version} Because of some reasons, we change some hardwares, here are what we changed. ### Change of the ext board 1. On the latest ext board we marked `v3768`, and the pervious ext board is not marked. 2. We use `RTL8189FTV` Wifi module on the latest ext board, and the pervious ext board use Wifi module `RTL8723BS`, replace the kernel file to change the configuration. Read [No wlan0](#qno wlan0 shown in result after running command ifconfig) to know more. ```bash ls /boot/ cp kernel.img.rtl8723bs kernel.img # For the previous ext board #cp /boot/kernel.img.rtl8189fs kernel.img ``` ![qa_board_change](./assets/qa/qa_board_change.jpg) ### Change of camera The connector direction of camera changed, make sure the `1` on the connector of ext board matches the `1` the connector of the camera. ![qa_camera_change](./assets/qa/qa_camera_change.jpg) ### Change of screen We change the screen into new version, and the default image use the latest version screen, see following photo to know your screen version, and for pervious version screen if need to run command `cp /boot/dtb.img.lcd20220830 dtb.img` to apply the hardware. Read [wrong display](#qscreen display wrong) to know more. ![qa_screen_change](./assets/qa/qa_screen_change.jpg) ## Q：Why I can only use less than 2G ram Why we can only see there is about 1.3G ram for us. ![htop_memory_usage](./assets/qa/htop_memory_usage.png) From the following diagram we can see the original memory map of Axera 620A evb board, it's equipped with 1GB ram and is divided into 256MB kernel memory block and 768MB CMM (Contiguous Memory Model) memory block ![faq_ddr](./../../../zh/maixIII/assets/faq_ddr.png) And on Axera Pi we equip 2GB ram, and set 512M CMM memory block and 256M kernel memory block, so there is less than 2GB ram for use. We can see the `insmod /soc/ko/ax_cmm.ko cmmpool anonymous,0,0x60000000,512M` to initialize 512M MMC memory from the `auto_load_all_drv.sh`. ![cmm_memory_size_script](./assets/qa/cmm_memory_size_script.png) CCM memory block is used for NPU and ISP processing, processor will use this CMM memory for imaging processing and model processing task. And the boot args in system. ![bootargs_command](./assets/qa/bootargs_command.png)"},"/hardware/en/maixIII/ax-pi/rndis.html":{"title":"RNDIS","content":" title: RNDIS tags: rndis update: date: 2022 12 23 version: v0.1 author: wonder content: Create file This essay just tells how to fix the RNDIS error in windows device manager. ![rndis_error_device](./assets/flash_system/rndis_error_device.jpg) ## RNDIS interduction Visit [Introduction to Remote NDIS (RNDIS)](https://learn.microsoft.com/en us/windows hardware/drivers/network/remote ndis rndis 2?source recommendations) to know more. ## Steps Right click the error RNDIS device and choose Update driver ![rndis_update_driver](./assets/rndis/rndis_update_driver.png) Choose the `Browse my computer for drivers` ![rndis_broswer_driver](./assets/rndis/rndis_broswer_driver.jpg) Choose where the arrow points at ![rndis_pick_driver](./assets/rndis/rndis_pick_driver.jpg) Network adapter ![rndis_net_adapter](./assets/rndis/rndis_net_adapter.jpg) Compatible Device ![rndis_compatible_device](./assets/rndis/rndis_compatible_device.jpg) Then there is no error on the RNDIS device ![rndis_no_error](./assets/rndis/rndis_no_error.jpg)"},"/hardware/en/maixIII/ax-pi/dev_prepare.html":{"title":"Maix-III AXera-Pi SDK development","content":" title: Maix III AXera Pi SDK development keywords: MAIX III, AXera Pi, Maix3, Sipeed, ax620a, axera update: date: 2023 02 12 version: v0.1 author: wonder content: Initialize Doc > Before reading, it's necessary to know basic usage about `gcc` and `make`. ## Preparation We have told basic operation like burning system and using AXera Pi in previous article, which help you know how to use AXera Pi. For embedded linux, we usually use cross compile technology to compile out the application for target linux device. A cross compiler is a compiler capable of creating executable code for a platform other than the one on which the compiler is running. For example, a cross compiler executes on machine X and produces machine code for machine Y. Normally our computer have better performance than target embedded linux device, compiling the executable on our computer, then run the application on target embedded linux device. This saves more time than compiling and running on target embedded linux device. For example, `ax sample` takes more than 10 minutes to be compiled on AXera Pi, but it takes less than one minute on your computer. Above all, for embedded development, coree compile technology is common and it's necessary to know about this if you want to save your time. ## Transfer files Compiling out the application on our computer, we need send the application to AXera Pi. `SSH` (Secure Shell) enables secure system administration and file transfers over insecure networks. `Serial` application tool is OK to transfer files but it's too slow. ### Transfer file with SSH There are many good SSH application on Windows, here we use [Mobaxterm](https://mobaxterm.mobatek.net/) to login AXera Pi and Transfer file. [Mobaxterm Usage Demo](https://mobaxterm.mobatek.net/demo.html) ![mobaxterm_transfer_file](./assets/dev_prepare/mobaxterm_transfer_file.jpg) Besides, [Vscode](https://code.visualstudio.com/) is also a good idea for transferring file. Install the [Remote SSH](https://marketplace.visualstudio.com/items?itemName ms vscode remote.remote ssh) and [Remote Explorer](https://marketplace.visualstudio.com/items?itemName ms vscode.remote explorer) extensions, then login to AXera Pi via vscode SSH. ![transfer_file_vscode](./assets/flash_system/transfer_file_vscode.jpg) ### Transfer file with scp scp means `ssh + cp`. Here is the command to transfer file. ```bash scp [option] /path/to/source/file user@server ip:/path/to/destination/directory ``` `/path/to/source/file` Target file/folder sent from host to device `user@server ip` : Remote target device IP address. `/path/to/destination/directory` Target device directory to receive the file/folder ### Use card reader Because of different file system, it's only suggested to use this way if operating system of your computer is Linux. ### Transfer file with UART For linux users, install `lrzsz` first (`sudo apt git install lrzsz`) and use it to finish this Windows user can use Mobaxterm to transfer file between computer and AXera Pi via USB UART connection. ## Compile on AXera Pi Here we tell how to compile application on AXera Pi. Because serial port connector is slow and can be only opened by only one application at one time, we usually login to AXera Pi by SSH, which we can open many terminals and enter different commands in different ssh terminal at the same time. ![ssh_mutiple_terminals](./assets/dev_prepare/ssh_mutiple_terminals.jpg) ### Vscode remote We have told how to login to AXera Pi via SSH with vscode, login to AXera Pi by Vscode first, make sure not install [C/C++](https://marketplace.visualstudio.com/items?itemName ms vscode.cpptools) extension of vscode on AXera Pi, this extension may close SSH connection. Click ① and ② to open a SSH connection. ![vscode_ssh_connect](./assets/dev_prepare/vscode_ssh_connect.jpg) Here we take `192.168.233.1` IP address as example, make sure not forget add username `root` at first. `root@IP_address` ![vscode_ssh_connect_example_ip](./assets/dev_prepare/vscode_ssh_connect_example_ip.jpg) Choose platform `Linux` and `Continue`. <img alt \"vscode_ssh_connect_linux_platform\" src \"./assets/dev_prepare/vscode_ssh_connect_linux_platform.jpg\" width \"45%\"> <img alt \"vscode_ssh_connect_continue\" src \"./assets/dev_prepare/vscode_ssh_connect_continue.jpg\" width \"45%\"> Eenter password `root` to login ![vscode_ssh_connect_enter_password](./assets/dev_prepare/vscode_ssh_connect_enter_password.jpg) Succeed logining to AXera Pi. ![vscode_ssh_connect_succeed_login](./assets/dev_prepare/vscode_ssh_connect_succeed_login.jpg) Click `Open Folder` to see your AXera Pi directory structure. ![transfer_file_vscode](./assets/flash_system/transfer_file_vscode.jpg) Use command <code>Ctrl + Shift + `</code> to new a terminal, run following command to compile <code>libmiax</code> application. Example compiling command: ```bash cd /home/libmaix/examples/axpi/ # Open source code directory python3 project.py build # Compile the project fbon # Enable screen control ./dist/start_app.sh # Run compiled out application ``` ![compiling_example_code](./assets/dev_prepare/compiling_example_code.jpg) Running the commands above, screen displays camera content, use `Ctrl + c` to stop this application if you want to do other task. ![compiling_stop_example](./assets/dev_prepare/compiling_stop_example.jpg) ### Mobaxterm Using Mobaxtern to login AXera Pi is a good idea for windows user. Compile libmaix example on AXera Pi: ![mobaxterm_compile_application](./assets/dev_prepare/mobaxterm_compile_application.jpg) ## Cross compiling on computer We compile out the application for AXera Pi on our computer first. AXera Pi is based on Cortex A7 arm architecture, while normally our computer is based on x86 64 architecture, these two different architectures are based on different instruction set. The binary executable program normally can not be executed on the same OS if the cpu architecture is not the same because different architecture means different instruction set. We can install the compiler for arm architecture on our computer, compiled by this compiler, we get the program which can execute on arm architecture device like AXera Pi. Here we compile the program based on ubuntu, then send the compiled program to AXera Pi and run on it. Install the compiler for AXera Pi first. ```bash sudo apt install gcc arm linux gnueabihf ``` Run following command to check your installation. ```bash arm linux gnueabihf gcc ``` The result should be as following. ![arm_linux_gxx_file_not_found](./assets/dev_prepare/arm_linux_gxx_file_not_found.jpg) New a C file named `cross_test.c`, and compile it by `arm linux gnueabihf gcc`. The content of the C file like this: ```c #include <stdio.h> int main(){ printf(\"Hello, AxPi!\\n\"); return 0; } ``` Then use following command to compile the C file. ```bash arm linux gnueabihf gcc o test cross_test.c static ``` Then we get the executable file named `test` on our computer, and if we run `./test`, it says `Exec format error`. Check file format of `test`, we can see it's `ELF 32 bit LSB executable, ARM, EABI5` ![test_program_example](./assets/dev_prepare/test_program_example.jpg) So it can only be executed on Axera Pi, sending the `test` executable file to AxPi, and on Axera Pi this program works well. ```bash csp test root@192.168.233.1:/home ``` By this command, we succeed upload the `test` executable file to Axera Pi via rndis protocol by `scp` command. And note that the password requirement of running command above is `root`. Then we can run `test` executable file on Axera Pi. ![hello_axpi](./assets/dev_prepare/hello_axpi.jpg) We finish cross compile. ## SDK Repositories Here are repositories for AXera Pi, check them if you need. ### libmaix [libmaix](https://github.com/sipeed/libmaix) is unified embedded development environment come by SIPEED, includes camera, screen, vision, image processing and pipelines related deployment examples, is suitable for those who want to learn embedded Linux. ### ax sample [ax sample](https://github.com/AXERA TECH/ax samples) includes typical AI models provided by Axera for development, evaluation and verification, those who are good at AI development or want to test these models can have a try, and these are not involved with peripherals. ### axpi_bsp_sdk [axpi_bsp_sdk](https://github.com/sipeed/axpi_bsp_sdk) is the bsp development package for business usage. It's the original development package for this chip, containing components like uboot, linux, msp, sample, rtsp, ipcdemo, and this is progressively open source, you can get these codes for commercial evaluation, such as ipcdemo, but normally these codes are complex and highly coupled, those who are experienced enough and want to use this board for business cooperation can try this. ### ax pipeline [ax pipeline](https://github.com/AXERA TECH/ax pipeline) is provided by Axera. With m3axpi, this project is used for people to know the usages of ISP, image processing, NPU, codec and display, which is convenient for developers to quickly evaluate and develop their own multimedia applications. ## SDK usage There are guides in each SDK Repositories. Here we tells how to build the program for AXera Pi with SDK Repositories. To begin this, we need install `git`, `cmake` first. ### libmaix #### Get SDK ```bash git clone https://github.com/sipeed/libmaix.git recursive ``` #### Compile SDK We have said that we can compile on AXera Pi or cross compile on our computer and send to AXera Pi. <! ### [libmaix](https://github.com/sipeed/libmaix) > /home/ 目录已预置，可以 git pull 联网拉取更新。 对于 `libmaix`， 按照其`README.md` 文件描述的方法编译即可， 不过需要在`menuconfig`命令中选择 `AXera Pi` 作为编译目标。 这里简要介绍一下编译过程（libmaix 目前还未稳定，未来可能会有大的更新），实际以[libmaix 仓库](https://github.com/sipeed/libmaix)代码和说明为准。 * 先安装依赖 ``` apt install build essential cmake python3 sshpass git ``` > sshpass 也可以不安装， build essential, cmake, git, python3 必须安装 * 克隆仓库到本地或者开发板 ``` git clone https://github.com/sipeed/libmaix recursive ``` >! 注意 ` recursive` 参数是必须的，用以克隆子模块，否则会缺代码。 这里以在开发板上编译为例： ```bash cd /home/libmaix # git clone https://github.com/sipeed/libmaix recursive cd examples/axpi python3 project.py distclean # python3 project.py menuconfig # 可以配置相关参数 python3 project.py build # 如果增加文件了，需要 python3 project.py rebuild 命令 ./dist/start_app.sh # 运行示例程序 ``` > ### ax samples Repository: [Click me](https://github.com/AXERA TECH/ax samples) This SDK has been set in `/home` path of AXera Pi, read [ax samples](https://github.com/AXERA TECH/ax samples) for more help. ```bash cd /home/ax samples # git clone https://github.com/AXERA TECH/ax samples.git mkdir build cd build cmake .. make install ``` THen we get the executable program, which is in `ax samples/build/install/bin/` directory ### [axpi_bsp_sdk](https://github.com/sipeed/axpi_bsp_sdk) Repository: [Click me](https://github.com/sipeed/axpi_bsp_sdk) Read [readme](https://github.com/sipeed/axpi_bsp_sdk/blob/main/readme.md) for more information, and read document here [Click me](https://github.com/sipeed/axpi_bsp_sdk/tree/main/docs). The `on pc` of `run your program` [readme](https://github.com/sipeed/axpi_bsp_sdk/blob/main/readme.md) is sending the executable program to AXera Pi first, then run it. ## SDK with AI To load AI vision model, we need to use camera, screen and AI model. Here are several Repositories which can help you this. ### Build with libmaix (Easy for developmrnt, for quick verification) [axpi libmaix](https://github.com/sipeed/libmaix/tree/release/examples/axpi) [axpi_classification_cam](https://github.com/sipeed/libmaix/tree/release/examples/axpi_classification_cam) [axpi_yolov5_cam](https://github.com/sipeed/libmaix/tree/release/examples/axpi_yolov5_cam) > 20221113 This SDK is only for test, no optimization include. ### Build with ax pipeline (Medium difficulty, for optimization) This SDK is based on `bsp sdk`(axpi_bsp_sdk), and with better performance. [Compile prepare](https://github.com/AXERA TECH/ax pipeline/blob/main/docs/compile.md) [Use yolov5 model](https://github.com/AXERA TECH/ax pipeline/blob/main/docs/how_to_deploy_custom_yolov5_model.md) [Use other models](https://github.com/AXERA TECH/ax pipeline/blob/main/docs/how_to_deploy_custom_model.md) ### Build with ipcdemo (Hard for developmrnt, business suggessted) Based on axpi_bsp_sdk, difficult code with good performance, it's suggested for business development. [axpi_bsp_sdk/app/IPCDemo](https://github.com/sipeed/axpi_bsp_sdk/tree/main/app/IPCDemo)"},"/hardware/en/maixIII/ax-pi/axpi.html":{"title":"MAIX-III AXera-Pi","content":" title: MAIX III AXera Pi keywords: MAIX III, AXera Pi, Maix3, Sipeed, ax620a, axera, sipeed, AI, model, maixhub update: date: 2022 12 08 version: v0.1 author: wonder content: Initialize Doc If you think this AI development board are excellent enough and your friends may be interested with this, just share with them this link [http://wiki.sipeed.com/en/m3axpi](http://wiki.sipeed.com/en/m3axpi) ![maixiii_axpi](./../../../../../static/home/maixiii_axpi_en.jpg) > [Official Online Store](https://www.aliexpress.com/item/1005005016931077.html) In the past few years, many Linux AI chips come out. Raspberry Pi and Jetson Nano these boards are really popular by their good performance, but now MAIX III AXera Pi comes out, equipped with the high performance 3.6TOPs@INT8 chip ax620a, which will be your good choice and provide you a really good experience. <p align \"center\"> <img src \"https://axera tech.com/upload/8f/091a2540e7cdc5c7f62df022f80220.jpg\" alt \"img\" style \"zoom: 50%;\" /> </p> We design a core module for this chip, which is convenient if you want to design the ext board for yourself. <table> <thead> <tr> <th colspan 2>MaixIII Core module</th> </tr> </thead> <tbody> <tr> <td>CPU</td> <td>4 * Cortex A7, with NEON and FPU</td> </tr> <tr> <td>NPU</td> <td>14.4Tops@int4，3.6Tops@int8</td> </tr> <tr> <td>ISP</td> <td>4K@30fps</td> </tr> <tr> <td>Codec format</td> <td>H.264, H.265</td> </tr> <tr> <td>Video encode</td> <td>4K@30fps</td> </tr> <tr> <td>Video decode</td> <td>1080P@60fps</td> </tr> <tr> <td>Ethernet</td> <td>Support RGMII / RMII Ethernet</td> </tr> <tr> <td>Display</td> <td>MIPI DSI 4 Lane，up to 4K@30FPS</td> </tr> <tr> <td>DRAM</td> <td>2GB LPDDR4X 3733Mhz</td> </tr> <tr> <td>Storge</td> <td>Optional 16GB EMMC (Boot from TF card by default)</td> </tr> <tr> <td>IO pins</td> <td>DDR4 SODIMM 260P route all IO</td> </tr> </tbody> </table> ## Introduction In WORLD ARTIFICIAL INTELLIGENCE CONFERENCE 2022, this AI board is shown the first time, like what's in the following picture. <p align \"center\"> <img src \"./../../../zh/maixIII/assets/waic axpi.jpg\" style \"zoom: 70%;\" /> </p> And finally we launched this AI development board equipped with AX620A in 20221001. Its official name is **MAIX III AXera Pi**, while we like to call it **M3AXPI** in the following content. <p align \"center\"> <video src \"../../../zh/maixIII/assets/axpi_boom.mp4\" width \"100%\" controls \"controls\" autoplay \"autoplay\" x5 playsinline \"\" \t\tplaysinline \t\twebkit playsinline \"true\" \t\tposter \"../../../zh/maixIII/assets/maix iii small.jpg\" \t\tpreload \"auto\" > </video> </p> So, why is this AI development board good? Need documents? Follow our guides, to start journey from embedded Linux development to AI model deployment. High power consumption? Just use one usb cable connecting with USB3.0 port to boot this device, no need of other power supply. Difficult to develop? Compile your own application on this board, or train your own AI model online and deploy it on board. Awful camera image? This chip is aimed for AI ISP night vision enhancement, we have adjust the camera to best state. Too expensive? This board sold about 100$, cheaper than any other similar board. ## Special column Documents These documents are from Chinese club, read these via browser translator is a good idea. Official Documents: [MAIX III AXera Pi：New generation of 3.6T visual AI board comes out](https://aijishu.com/a/1060000000374898) [MAIX III AXera Pi: Many kinds of AI usage](https://aijishu.com/a/1060000000374900) [MAIX III AXera Pi: Plenty of demos on this board](https://aijishu.com/a/1060000000374902) [MAIX III AXera Pi: Unbox this board](https://aijishu.com/a/1060000000378968) [MAIX III AXera Pi: Start this board ①](https://aijishu.com/a/1060000000380513) [MAIX III AXera Pi: Start this board ②](https://aijishu.com/a/1060000000383970) [YOLOv8 object detection：Train and deploy model on Axera Pi ①](https://aijishu.com/a/1060000000395215) [YOLOv8 object detection：Train and deploy model on Axera Pi ②](https://aijishu.com/a/1060000000395812) [MMPose：Human Keypoints Detection on AXera Pi](https://aijishu.com/a/1060000000396746) [MOT：Mutiple Object Tracking on AXera Pi](https://aijishu.com/a/1060000000399566) [MMPose (Extra section) ：Fall Detection and alert on AXera Pi](https://aijishu.com/a/1060000000401084) [OCR：Optical Character Recognition on AXera Pi](https://aijishu.com/a/1060000000403913) Community Documents: [Axera Pi unbox experience](https://zhuanlan.zhihu.com/p/571233089) [HonestQiao —— unbox Axera Pi](https://bbs.elecfans.com/m/jishu_2314161_1_1.html) [Axera Pi NPU experience](https://neucrack.com/p/440) [MMYOLO object detection algorithm on AX620A](https://zhuanlan.zhihu.com/p/614698969) [Deploy yolov8 on Axera Pi](https://www.yuque.com/prophetmu/chenmumu/pd3sdkb8z4vvvgai) [[m3axpi] YOLOv5 Train and deploy model](https://github.com/Abandon ht/m3axpi_model/blob/main/yolov5/README_zh CN.md) [[m3axpi] YOLOv8 Train and deploy model](https://github.com/Abandon ht/m3axpi_model/blob/main/yolov8/README_zh CN.md) [Prepare AX620A development enviroment on ubuntu22.04](https://blog.csdn.net/flamebox/article/details/127103964) [Train and deploy yolo5s on Axera Pi](https://blog.csdn.net/flamebox/article/details/127249243) [[AXPI] Use RNDIS on m1/m2 MAC](https://zhuanlan.zhihu.com/p/593627641) [Kaldi Real time speech recognition on embedded device](https://mp.weixin.qq.com/s/r4nGu04o1sjdFZt_vYbUAA) Video reference: [MAIX III AXera Pi unbox and start](https://www.bilibili.com/video/BV1LP4y1274d) [MAIX III AXera Pi development deployment](https://www.bilibili.com/video/BV1Ne4y117U9) [MAIX III AXera Pi model transformer and deploy](https://www.bilibili.com/video/BV1jg411z7C8) [MAIX III AXera Pi video inference and push](https://www.bilibili.com/video/BV14D4y147Ed) ## Camera effect ### Night vision enhancement <table> <tr> <th colspan \"2\">Left picture is original, right picture is enhanced</th> </tr> <tr> <td><img src \"./assets/axpi/night_vision_enhancement_1.jpg\"></td> <td><img src \"./assets/axpi/night_vision_enhancement_2.jpg\"></td> </tr> <tr> <td><img src \"./assets/axpi/night_vision_enhancement_3.jpg\"></td> <td><img src \"./assets/axpi/night_vision_enhancement_4.jpg\"></td> </tr> </table> <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 561523949&bvid BV1Ee4y1v7iF&cid 860676576&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\" style \"max width:640px; max height:480px;\"> </iframe> </p> ### Exhibition darkroom The left screen shows the enhanced picture and the righr screen is the original one. <div align \"center\"><img src \"./assets/axpi/exhibition_darkroom.jpg\" alt \"exhibition_darkroom\" ></div> <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 430541632&bvid BV1iG41137tx&cid 831645988&page 1&t 83.6\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\" style \"max width:640px; max height:480px;\"> </iframe> </p> ### Actual AI effect <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 773227207&bvid BV1B14y1Y7A4&cid 837154353&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\" style \"max width:640px; max height:480px;\"> </iframe> </p> ## AI Ecology ### Support many Operators ![many_operator](./assets/axpi/many_operator.jpg) Screenshots of part operators. [Click me to see whole operator support list](https://pulsar docs.readthedocs.io/en/latest/appendix/op_support_list.html) ### Many archived models Before receiving this board, visit [MaixHub](https://maixhub.com/model/zoo) to see your interested model, choose Platform `axera pi` at the Lower left corner to find model can be deployed on `AX PI` ![maixhub_zoo.jpg](./assets/axpi/maixhub_zoo.jpg) Apart from these, many models are uploaded to [github AXERA TECH/ax samples](https://github.com/AXERA TECH/ax samples), and we also put sme models in sustem image, just burn the system image into SD card and boot it on board to experience these models. Up to now the supported models are as follows: Objects Classification MobileNetv1 [MobileNetv2](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#MobileNetv2) MobileOne s0 ResNet18 ResNet50 Others...... Objects Detection [PP YOLOv3](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#yolov3paddle) YOLOv3 YOLOv3 Tiny YOLOv4 YOLOv4 Tiny YOLOv4 Tiny 3l [YOLOv5s](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#YOLOv5s) [YOLOv5 Lite](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#YOLOv5 Lite)([original model](https://github.com/ppogg/YOLOv5 Lite)) [YOLOv7 Tiny](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#YOLOv7 Tiny) [YOLOv8s](https://github.com/AXERA TECH/ax samples/tree/main/examples#YOLOv8s) [YOLOX S](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#YOLOX S) YOLO Fastest XL NanoDet Human Body Detection YOLO Fastest Body Human Face Detection [scrfd](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#Scrfd) [YOLOv5 Face](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#YOLOv5 Face)([original model](https://github.com/deepcam cn/yolov5 face)) Human Face Segmentation Face_Parsing Obstacles Detection Robot Obstacle Detect Object detection of Uav view [YOLOv5s_visdrone](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#YOLOv5s_visdrone) Monocular 3D Vehicle Detection [Monodlex](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#Monodlex) Human body Key points [HRNet](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#HRNet) [AX POSE PPL](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#AX POSE PPL) [HandPose](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#HandPose) Human body Segmentation [PP HumanSeg](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#PP HumanSeg) Semantics Segmentation [PP Seg](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#MobileSeg) Classic CV CropResize Pipeline example NV12 > CropResize > NN(Classification) Visit [Deploy models to AX Pi (Maix III(M3) series) board](/ai/en/deploy/ax pi.html) to deploy models to AX Pi. <! <p align \"center\"> <img src \"./../../../en/maixIII/assets/ai_guide.jpg\" style \"zoom: 75%;\" /> </p> > ### Tranning your models [[m3axpi] YOLOv5 train and convert model guide](https://github.com/Abandon ht/m3axpi_model/blob/main/yolov5/README.md) [[m3axpi] YOLOv8 train and convert model guide](https://github.com/Abandon ht/m3axpi_model/blob/main/yolov8/README.md) ### Tranning model online Now [MaixHub](https://maixhub.com/welcome) has been upgraded, with more friendly interface and more functions, here are steps to training model online. <p align \"center\"> <img src \"./assets/axpi/test_maixhub.jpg\" style \"zoom: 100%;\" /> </p> ### Share your model There is a model and codes or programs to load your model after you finish training, you can share these on [Maixhub](https://maixhub.com/model/zoo) to others. Let's have fun and build the model Community together. <p align \"center\"> <img src \"./assets/axpi/share_model.jpg\" style \"zoom: 75%;\" > </p> ## Cases > Updated in 20221205 <p align \"center\"> <img src \"./assets/axpi/demo_one.jpg\" style \"zoom: 100%;\"> <img src \"./assets/axpi/demo_two.jpg\" style \"zoom: 100%;\"> </p> ## Linux development ### Run debian We provide a linux image based on debian11, and you can boot this board from SD card after you burn the system image into SD card. We aim to make it easiler for user to use. Besides, it's really conveient to program AI development with Python API. 1. Burning image: [WIKI AXera Pi Burn image](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/flash_system.html#Burn system image) 2. Basic usage：[WIKI AXera Pi guide](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/flash_system.html) 3. Program with Python：[ax_pipeline_api](https://github.com/junhuanchen/ax_pipeline_api) 4. Development Note：[[maixpy3 axpi] How to port debian11 to ax620a](https://www.cnblogs.com/juwan/p/16751348.html) (中文) 5. Development Note：[[maixpy3 axpi] Edit and pack the compiled debian image](https://www.cnblogs.com/juwan/p/16769237.html) (中文) ### BSP SDK We provide source code, api documents, sdk usages, visit [sdk usage](https://wiki.sipeed.com/hardware/zh/maixIII/ax pi/sdk_usage.html) to get more. #### [ax sample](https://github.com/AXERA TECH/ax samples) Here are typical AI models provided by Axera for development, evaluation and verification, those who are good at AI development or want to test these models can have a try, and these are not involved with peripherals. 1. [examples](https://github.com/AXERA TECH/ax samples/tree/main/examples) 2. [PP YOLOv3](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#yolov3paddle) 3. [PP HumanSeg](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#MobileSeg) 4. [PP Seg](https://github.com/AXERA TECH/ax samples/blob/main/examples/ax620/README.md#PP HumanSeg) #### [libmaix](https://github.com/sipeed/libmaix) A unified embedded development environment come by SIPEED, includes camera, screen, vision, image processing and pipelines related deployment examples, is suitable for those who want to learn embedded Linux. 1. [Test screen display](https://github.com/sipeed/libmaix/tree/release/examples/display) 2. [Screen displays camera content](https://github.com/sipeed/libmaix/tree/release/examples/axpi) 3. [camera + screen + yolov5 model](https://github.com/sipeed/libmaix/tree/release/examples/axpi_yolov5_cam) #### [axpi_bsp_sdk](https://github.com/sipeed/axpi_bsp_sdk) BSP development package for business, provided by Axera. It's the original development package for this chip, containing components like uboot、linux、msp 、sample、rtsp、ipcdemo, and this is progressively open source, you can get these codes for commercial evaluation, such as ipcdemo, but normally these codes are complex and highly coupled, those who are experienced enough and want to use this board for business cooperation can try this. 1. Development documents [docs](https://github.com/sipeed/axpi_bsp_sdk/tree/main/msp/sample/vo_fb) 2. Platform application [ipcdmeo](https://github.com/sipeed/axpi_bsp_sdk/tree/main/app/IPCDemo) 3. Peripheral Verification[sample](https://github.com/sipeed/axpi_bsp_sdk/tree/main/msp/sample) #### [ax pipeline](https://github.com/AXERA TECH/ax pipeline) AX Pipeline is provided by Axera. With M3AXPI, this project is used for people to know the usages of ISP, image processing, NPU, codec and display, which is convenient for developers to quickly evaluate and develop their own multimedia applications. 1. [Quick compilation](https://github.com/AXERA TECH/ax pipeline/blob/main/docs/compile.md) Simple cross platform compilation via cmake. 2. [How to replace into my own trained yolov5 model](https://github.com/AXERA TECH/ax pipeline/blob/main/docs/how_to_deploy_custom_yolov5_model.md) 3. [How to deploy my other models](https://github.com/AXERA TECH/ax pipeline/blob/main/docs/how_to_deploy_custom_model.md) 4. [How to adjust the image orientation](https://github.com/AXERA TECH/ax pipeline/blob/main/docs/how_to_adjust_image_orientation.md) 5. [ModelZoo](https://github.com/AXERA TECH/ax pipeline/blob/main/docs/modelzoo.md) descriptions for models which are supported or to be supported ## Hardware <p align \"center\"> <img src \"./../../../zh/maixIII/assets/waiguan1.jpg\" style \"zoom: 51%;\" /> <img src \"./../../../zh/maixIII/assets/maix iii small.jpg\" style \"zoom: 80%;\" /> <img src \"./../../../zh/maixIII/assets/waiguan2.jpg\" style \"zoom: 45%;\" /> </p> ### Hardware function diagram <p align \"center\"> <img src \"./../../../zh/maixIII/assets/layout_axpi_2.png\" alt \"layout_axpi_2\" width \"45%\"> <img src \"./../../../zh/maixIII/assets/layout_axpi_1.png\" alt \"layout_axpi_1\" width \"45%\"> </p> ### Core module parameters <table> <thead> <tr> <th colspan 2>MaixIII Core module</th> </tr> </thead> <tbody> <tr> <td>CPU</td> <td>4 * Cortex A7, with NEON and FPU</td> </tr> <tr> <td>NPU</td> <td>14.4Tops@int4，3.6Tops@int8</td> </tr> <tr> <td>ISP</td> <td>4K@30fps</td> </tr> <tr> <td>Codec format</td> <td>H.264, H.265</td> </tr> <tr> <td>Video encode</td> <td>4K@30fps</td> </tr> <tr> <td>Video decode</td> <td>1080P@60fps</td> </tr> <tr> <td>Ethernet</td> <td>Support RGMII / RMII Ethernet</td> </tr> <tr> <td>Display</td> <td>MIPI DSI 4 Lane</td> </tr> <tr> <td>RAM</td> <td>2GB LPDDR4X 3733Mhz</td> </tr> <tr> <td>Storge</td> <td>Optional 16GB EMMC (Boot from TF card by default)</td> </tr> <tr> <td>IO pins</td> <td>DDR4 SODIMM 260P route all IO</td> </tr> </tbody> </table> ### Ext board parameters <table> <thead> <tr> <th colspan 2> Ext board </th> </tr> </thead> <tbody> <tr> <td>Camera</td> <td> Maixmum supported 3 cameras (Default connecting one camera):<br> 1 MIPI 4 LANE + 2 MIPI 2 LANE</td> </tr> <tr> <td>Display</td> <td>Maixmum supported 4 LANE MIPI DSI</td> </tr> <tr> <td>SD card slot</td> <td>Default boot from SD card</td> </tr> <tr> <td>Recording</td> <td>2 onboard MEMS MIC support dual MIC noise reduction</td> </tr> <tr> <td>Audio output</td> <td>Support 3.5MM interface, used for stereo output or MIC input</td> </tr> <tr> <td>Network</td> <td>Support Gigabit Ethernet (ETH) and 2.4GHZ WI FI</td> </tr> <tr> <td>USB </td> <td>1 x USB2.0HS used for OTG or HOST<br>1 x USB UART</td> </tr> <tr> <td>Others</td> <td>1 User key，<br>3 x System keys，<br>1 x RTC，<br>2 x LEDs</td> </tr> <tr> <td>Interface</td> <td>Reserved CJTAG，used for connecting corresponding debugger，<br> 2 x 12 pin headers，<br>4 x M2.5 screw positioning holes</td> </tr> </tbody> </table> [Hardware summary information](https://dl.sipeed.com/shareURL/MaixIII/AXera) [Datasheet](https://dl.sipeed.com/shareURL/MaixIII/AXera/01_Specification) [Schematic](https://dl.sipeed.com/shareURL/MaixIII/AXera/02_Schematic) [Bit map](https://dl.sipeed.com/shareURL/MaixIII/AXera/03_Bit_number_map) [3D file](https://dl.sipeed.com/shareURL/MaixIII/AXera/05_3D_file) [Dimension](https://dl.sipeed.com/shareURL/MaixIII/AXera/04_Dimensional_drawing) [GC4653 Camera DS](https://dl.sipeed.com/shareURL/MaixIII/AXera/07_Chip_manual) ### Camera comparison Low end camera gc4653 400w basic experience <p align \"center\"> <img src \"./../../../zh/maixIII/assets/ax620a_gc.jpg\" style \"zoom: 100%;\" /> </p> High end camera os04a10 400w enhanced night vision edition <p align \"center\"> <img src \"./../../../zh/maixIII/assets/ax620a_os.jpg\" style \"zoom: 100%;\" /> </p> > [How to change camera](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/faq_axpi.html) ## Others Online AI: https://maixhub.com Documents: https://wiki.sipeed.com Telegram: https://t.me/sipeed Github: https://github.com/sipeed > Visit [Maix III AXera Pi (FAQ)](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/faq_axpi.html) if you have any trouble."},"/hardware/en/maixIII/ax-pi/flash_system.html":{"title":"AXera-Pi Guide","content":" title: AXera Pi Guide tags: AXera Pi, Burn image keywords: AXera Pi，Burn, image desc: AXera Pi Burn image update: date: 2023 06 15 version: v0.3 author: wonder content: Updated ## Board Usage To make it easier to use this board, we make this guide. ## OS introduction **The default AXera Pi kit has no onboard memory storage, so it's necessary to prepare a TF card to boot this device.** For Axera Pi, we provide Debian11 Bullseye image file. > ![debian_logo](./../../../zh/maixIII/assets/debian_logo.jpg) > [Reasons to use Debian](https://www.debian.org/intro/why_debian.en.html). TF card which has been flashed system image can be bought from [Sipeed aliexpress](https://sipeed.aliexpress.com/store/1101739727), otherwise you need to prepare your own system image TF card by following steps. ## Choose TF card People who have bought the TF card which has been burned system image can skip this chapter and read [start Linux](#boot axera pi) to use this board We have tested the read and write speed of some TF cards on Axera pi, for users to make the choice of TF card. ![sd](./../../../zh/maixIII/assets/flash_system/sd.jpg) > Some TF cards are added to test after this photo, so they are not in this photo but they can be recognized by their number. Number Model <p style \"white space:nowrap\">Write speed（Write 160MB）</p> <p style \"white space:nowrap\">Read speed（Read 160MB） </p> 1. Netac A2 P500 HS 64GB 2.04697 s, 80.0 MB/s 1.8759 s, 87.3 MB/s 2. Samsung microSDXC UHS I 128G (Blue card) 2.53387 s, 64.7 MB/s 1.99882 s, 82.0 MB/s 3. EAGET T1 series 64G 6.56955 s, 24.9 MB/s 7.13792 s, 23.0 MB/s 4. Keychron microSDXC UHS I 128G 2.28133 s, 71.8 MB/s 1.92001 s, 85.3 MB/s 5. KIOXIA microSDXC UHS I 32G 6.71284 s, 24.4 MB/s 2.36794 s, 69.2 MB/s 6. Netac A1 32GB 4.31411 s, 38.0 MB/s 2.00759 s, 81.6 MB/s 7. BanQ JOY card platinum 64G 9.08105 s, 18.0 MB/s 9.02843 s, 18.1 MB/s 8. Hiksemi HS TF P2 64G 2.28079 s, 71.8 MB/s 1.87698 s, 87.3 MB/s The following TF cards are not in this photo but we also tested them. Number Model <p style \"white space:nowrap\">Write Speed (Write 160MB) </p> <p style \"white space:nowrap\">Read Speed (Read 160MB) </p> 1. Lexar 64GB TF（MicroSD）C10 U3 V30 A2 2.59644 s, 63.1 MB/s 1.9106 s, 85.8 MB/s 2. Lexar 128GB TF（MicroSD）C10 U3 V30 6.73793 s, 24.3 MB/s 6.94079 s, 23.6 MB/s ## Burn system image ![flash](./../../../zh/maixIII/assets/axpi flash.png) We only reserved EMMC pad on board, so we need a TF card which has been burned system image to boot linux on this board. ### Get image Because the system image is about 2G memory storage, we only provide mega link to download. Visit mega [Click me](https://mega.nz/folder/9EhyBbJZ#lcNhhm9aWXOyo2T0DDaSqA) to download the image file. ![debian](./assets/flash_system/debian.jpg) The file name ends with `img.xz` is the compressed system image file, and the other file name ends with `img.xz.md5sum` is the check file, which we use to check the compressed system image file. The name rule of compressed system image file is `Image provider` _ `Target chip` _ `Linux distribution` _ `Created time` + `img.xz` The check file should be used in Linux, and users using windows10 or windows 11 can use the wsl to prepare a Linux environment Run command `md5sum c *.md5sum*` in the path where compressed system image file and check file are to check the compressed system image file. Check succeeded Check failed ![md5sum_success](./../../../zh/maixIII/assets/flash_system/md5sum_success.jpg) ![md5sum_failed](./../../../zh/maixIII/assets/flash_system/md5sum_failed.jpg) If there is some thing with the compressed system image file, it will show FAILED. Normally we don't need to check the compressed system image file, this is only for those who need it. ### Burn image **Before burning the image, we need to do the following preparation:** A TF card with a storage capacity card over 8GB. It is recommended to buy an official image card, otherwise it may lead to a bad experience due to the bad performance of the TF card A card reader: It is recommended to use the card reader that supports USB3.0, this will save time on burning the system image card. [Etcher](https://www.balena.io/etcher/) application: Download the edition of this application suitable for your computer system. **Burning system image steps** Run [Etcher](https://www.balena.io/etcher/ \"Etcher\") application, click `Flash from file`, choose the compressed system image `img.xz` file， then click `Select target` to choose the TF card，click `FLASH` to burn your TF card. **Burn the TF card** ![burn_image_by_etcher](./../../../assets/maixIII/ax pi/burn_image_by_etcher.gif) Burning Finish burning ![axera_burning_image](./../../../assets/maixIII/ax pi/axera_burning_image.png) ![finish_flash](./../../../zh/maixII/M2A/assets/finish_flash.png) Note that after finishing burning the application shows `Flash Complete!` and `Successful`. Finishing the above steps, the computer will ask us to format the udisk, we just ignore this information and remove the TF card (Because we have made `Successful` in Etcher), prepare for the following operations. ### Burning Questions #### 1. After selecting system image, Etcher shows error. Rerun Etcher application to solve this error due to software cache or other issues #### 2. After finishing burning software the application shows FAILED not Successful Reburn the TF card. #### 3. The storage capacity of tf card is too small In this case, those who use Windows and MaxOS can use [SD Card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip) to format tf card, and those who use Linux can format the tf card by [Gparted](https://gparted.org/). ## Boot System Finishing burning system image into tf card, we can assemble this board and boot this device. ![axpi connect](./../../../zh/maixIII/assets/axpi connect.png) ### Assemble this board > Those who have bought the `Full board package` can skip these steps and visit [boot Axera pi] to start. **Preparation** An AXera Pi development board At least one USB3.0 connector to connect device(This board may fail to boot because of insufficient power supply from USB2.0) A tf card which has been burned system image GC4653 camera or OS04a10 camera The 5 inch MIPI screen suitable for Axera pi ![axpi config](./../../../zh/maixIII/assets/axpi config.jpg) **Follow these steps to make sure you assemble them correctly** 1. Set the screen and the board as shown in the image below, and connect them. 2. Insert tf card which has been burned system image into the card slot on Axera pi. 3. Connect the camera with Axera pi as shown in the image below, make sure you have removed the cover on the camera after finishing connecting. <html> <img src \"./../../../zh/maixIII/assets/mipi.jpg\" width 48%> <img src \"./../../../zh/maixIII/assets/sensor.jpg\" width 48%> </html> **Camera connection** There are 2 versions of camera, make sure the `1` on the camera matches the `1` on the board. Wrong connection will burn and destroy the camera. <img src \"./../../../zh/maixIII/assets/senror_v3751.jpg\" width 48%> <img src \"./../../../zh/maixIII/assets/sensor_v3753.jpg\" width 48%> Different onboard camera FPC connector needs different configuration, we use `CAM0` as the default one. ### Boot AXera Pi Connect both `USB UART` and `USB OTG` port with computer by USB type c cable to boot AXera Pi, make sure you have inserted the tf card which has been burned system image. ![start](./../../../zh/maixIII/assets/start.jpg) Because of the change of screen version, visit [bad display](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/faq_axpi.html#Q%EF%BC%9AThe screen is blurred after booting) if your screen does not display the picture well. > In **20221013** we update the power on phenomenon: The 3.5mm stereo connector plays the music if connected with device. 5 inches screen displays picture. The logs are printed to USB UART port, run serial port application to see it if you need. Here are the drivers for CH340 which is the USB UART chip on Axera Pi, install it if you can't see the serial device on your computer. [CH34x Windows driver](https://dl.sipeed.com/shareURL/MAIX/tools/ch340_ch341_driver) [CH34x Linux driver](http://www.wch ic.com/downloads/CH341SER_LINUX_ZIP.html) If logs are not printed on serial terminal, press `RST` key on AXera Pi to restart device. And those who use Ubuntu22.04 may not be able to open serial port (ttyUSB), read [this](https://www.chippiko.com/ch340 dev ttyusb not showing) to see the solution. ![m3axpi_debian_boot_log_screenshot](./assets/flash_system/m3axpi_debian_boot_log_screenshot.png) `DRAM 1 GiB` in the log is not accuracy, in system we can check there is `2 GiB` memory. ## Login AXera Pi ![start](./../../../zh/maixIII/assets/start.jpg) > When the logo above is displayed on the screen of AXera Pi, the system has finished booting, and we can login to AXera Pi. ![axpi login](./../../../zh/maixIII/assets/axpi login.png) The first time to login to device, we need to use serial port application to open the serial port to communicate with the device to login, and using SSH login is also OK if you know the ip address of your board. [MobaXterm](https://mobaxterm.mobatek.net/) is a ultimate toolbox for remote computing, we use this software to run our command on the board for example. ![ssh](https://wiki.sipeed.com/hardware/zh/maixIII/assets/ssh.jpg) ### Login via serial port We take MobaXterm as an example serial port software, you can use your favorite one. In MobaXterm, we create a serial session. Set baudrate 115200, then click OK to create it. ![mobaxterm serial 4](./../../../../soft/maixpy3/zh/tools/assets/mobaxterm serial 4.png) Then click the created serial session to open the serial port to build communication. ![mobaxterm serial 5](./../../../../soft/maixpy3/zh/tools/assets/mobaxterm serial 5.png) Run the serial port application, use username `root` and password `root` to login. The password is not displayed when you enter it, so just retry if you fail to login. ![axera_pi_serial_root_login](./assets/flash_system/axera_pi_serial_root_login.jpg) ### Login by SSH To login by SSH, we need to know the ip address of Axera Pi. #### Traditional ip address We make Axera Pi and the computer in a same network environment, then run command `ifconfig` on Axera Pi to get the ip address of Axera Pi in this network environment. But you need to make sure you have connected Axera Pi to network, visit [Connect to network](#connect to network) to know how to connect to network. #### RNDIS Connect the computer with USB OTG port on Axera Pi. ![otg](https://wiki.sipeed.com/hardware/zh/maixIII/assets/otg.jpg) Normally RNDIS is driver free in Linux, and in Windows we need to update the driver [Click me](./rndis.html), for macos it needs to build and install `horndis` to use RNDIS. Deflaut RNDIS driver error in Windows: ![rndis_error_device](./assets/flash_system/rndis_error_device.jpg) Run command `ifconfig`, we can see there is a usb device with IP `192.168.1.233`, we'll use this ip address many times in the following content. ![ifconfig_usb_ip_address](./assets/flash_system/ifconfig_usb_ip_address.jpg) #### Login to board Up to now you have get one of your ip address, run command `ssh {username}@{ip address}` to connect to your board. Here we take the RNDIS ip address for example to connect Axera Pi by SSH, and the username is root, you can use other ip address or username you like if you have created the new user. ```bash ssh root@192.168.233.1 ``` ![ssh_rndis_connect](./assets/flash_system/ssh_rndis_connect.jpg) ## Connect to network Axera Pi connects to network via network cable or wireless module. ### Connect by Ethernet Connect the board ethernet port with a network gateway by network cable. Run command `ifconfig eth0` to see whether there is the ip address. ![nmtui_eth0_ifconfig](./assets/flash_system/nmtui_eth0_ifconfig.jpg) If there is no ip address of eth0 after connecting with network gateway, run command `dhclient eth0 &` to get the ip address manually. ![nmtui_eth0_dhclient](./assets/flash_system/nmtui_eth0_dhclient.jpg) And we can also use command `ifdown eth0` to disable Ethernet, and then use `ifup eth0 force` to restart Ethernet to get the ip address. ### Wireless network 1. Run command `ifconfig wlan0` to see whether there is the wireless device first, if there is no wireless device, visit [AXera Pi Q&A](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/faq_axpi.html#Q%EF%BC%9ANo wlan0 shown in result after running command %3Ccode%3Eifconfig%3C/code%3E) to solve this problem. And only 2.4GHz wireless network is feasible. 2. Run command `nmtui connect` to open a wireless internet graphical interface. ![nmtui](./../../../../hardware/zh/maixIII/assets/nmtui.jpg) 3. Run command `ifconfig wlan0` to see whether there is the ip address. ![nmtui_wlan0_ifconfig](./assets/flash_system/nmtui_wlan0_ifconfig.png) Besides, Run command `nmcli device wifi connect Sipeed_Guest password qwert123` can also connect to wireless network, change the `Sipeed_Guest` into your wireless network name and change `qwert123` into your wireless network password. It will autoconnect to the wireless network when board boots. ## Config System ### System time Maix III AXera Pi uses the NTP protocol to update the system time. You can run the `date` command to get the current system time. > After connecting to Internet, system will automatically run `ntpdate debian` to update system time. #### Change timezone Maix III AXera Pi default timezone is GMT+8, you can change it with command `dpkg reconfigure tzdata` if necessary. ![system_time_timezone](./assets/flash_system/system_time_timezone.jpg) #### Update time Run `ntpdate debian` command after connecting Maix III AXera Pi to network to update time. ### Install application Based on debian, we can use `apt` to install the software on Maix III AXera Pi. Change the software resource if you think it's slow to download the software. Here we install `gcc`, `gparted`. ```bash sudo apt update sudo apt install gcc gparted ``` ![install_software_gcc_gparted](./assets/flash_system/install_software_gcc_gparted.jpg) ### Reboot/Shutdown device For Linux we suggest rebooting or shutting down the device by command line instead of disconnecting the USB cable or clicking the reset key, which may destory the file system. Run command `reboot` to restart device. ```bash reboot ``` Run command `shutdown` to power off device. ```bash poweroff ``` ### Resize system storage Run command `lsblk` to see the partition information, then resize the memory partition by command `cfdisk /dev/mmcblk2`. ![enlarge_memory_lsblk](./assets/flash_system/enlarge_memory_lsblk.jpg) Then the following similar interface shown, and we choose `/dev/mmcblk2p2` by arrow keyboard `↑` `↓`, select the `Resize` below by arrow keyboard `←` `→`. ![rizese mmcblk2](./../../../zh/maixIII/assets/rizese mmcblk2.png) The whole free space is resized by default, and you can enter your desired memory storage. ![new resize](./../../../zh/maixIII/assets/new resize.png) Enter your desired memory storage, and press Enter keyboard to save your temp change. Use arrow keyboard `←` `→` and choose `Write` to apply your change, and enter `yes` to confirm the change. ![write disk](./../../../zh/maixIII/assets/write disk.png) Use arrow keyboard `←` `→` and select `Quit` to quit the storage partition. ![quit](./../../../zh/maixIII/assets/quit.jpg) Finishing these, we run command `df h` to see the disk space usage, and we can see that the resized memory storage is not applied, we use command `resize2fs /dev/mmcblk2p2` to change the size of `mmcblk2`, and run command `df h` again to see the applied change. ![df mmcblk2](./../../../zh/maixIII/assets/df mmcblk2.jpg) > Run `reboot` if there is some trouble resizing the storage memory. ### Boot script The boot script is in `/boot` and named `rc.local`, you can edit it if you need. The boot script uses the root directory `/` by default, for example, if you want to run `/home/run.sh` at startup: 1. Use the absolute path to run the script background `/home/run.sh & `, if it's not running background we may not be able to control the board by command line anymore. 2. Use the relative path to run the script background `cd /home && ./run.sh &`, note that the path is different from the absolute path. Here is the default boot script. ```bash root@AXERA:~# cat /boot/rc.local ``` ```txt #!/bin/sh # this file is called by /etc/rc.local at boot. # systemctl stop usb gadget@g0 # mkdir p /mnt/udisk && mount /dev/sda1 /mnt/udisk # python3 /mnt/udisk/alltest.py # this control lcd backlight(50 ~ 1000) echo 0 > /sys/class/pwm/pwmchip0/export echo 1000 > /sys/class/pwm/pwmchip0/pwm0/period echo 500 > /sys/class/pwm/pwmchip0/pwm0/duty_cycle echo 1 > /sys/class/pwm/pwmchip0/pwm0/enable # wifi connect ssid Sipeed_Guest pasw qwert123 nmcli device wifi connect Sipeed_Guest password qwert123 if [ f \"/root/boot\" ]; then cd /root/ && chmod 777 * && ./boot & elif [ d \"/root/app\" ]; then cd /root/app && chmod 777 * if [ f \"./main\" ]; then ./main & elif [ f \"./main.bin\" ]; then ./main.bin & elif [ f \"./main.py\" ]; then python3 ./main.py & fi else aplay /home/res/boot.wav >/dev/null 2>&1 & /opt/bin/sample_vo_fb v dsi0@480x854@60 m 0 >/dev/null 2>&1 & sleep 0.8 && /home/fbv 1.0b/fbv /home/res/2_480x854.jpeg && killall sample_vo_fb & python3 c \"import os, binascii; os.system('sed i \\'/iface eth0 inet dhcp/ahwaddress ether {}\\' /etc/network/interfaces'.format(binascii.hexlify(bytes.fromhex(open('/proc/ax_proc/uid').read().split('0x')[1][: 5]),':').decode('iso8859 1'))) if os.system('grep \\'hwaddress ether\\' /etc/network/interfaces q') ! 0 else exit();\" & fi exit 0 ``` ![start](./../../../zh/maixIII/assets/start.jpg) From the boot script `rc.local`, we can see that `/home/res/2_480x854.jpeg` is what is displayed on the screen, and you can change it if you need. ### Update kernel and driver The first partition of system image card is mounted at `/boot` after booting, and replace with the file we can update the firmware to fit our hardware after rebooting the device. `boot.bin` spl initialize file `uboot.bin` uboot boot file `kernel.img` linux kernel `dtb.img` linux device tree For example: Update device tree: `cp /boot/dtb.img.lcd20221025 /boot/dtb.img` Update kernel `cp /boot/kernel.img.rtl8723bs /boot/kernel.img` Then reboot device to apply the new configuration. ## Transfer file > If you need to transfer file to AXera Pi, here are some ways to do this. ### SD card reader Because of the `ext4` format file system, those who use Windows/Mac can't open the file without other application, so it's only suggested to open the tf image card in Linux. And it's also a good idea to transfer by u disk connected to the USB OTG port on AXera Pi. ### Connect to computer #### Network SSH We have told the way to login AXera Pi by [SSH](#login by ssh), and with [mobaxterm](https://mobaxterm.mobatek.net/) it's really convenient to transfer files on Windows. Besides, login by ssh on [vscode](https://code.visualstudio.com/), we can transfer file by the Vscode Explorer. ![transfer_file_vscode](./assets/flash_system/transfer_file_vscode.jpg) Besides, we can not only use mobaxterm for file transfer, but also run X11 on this software if you login by ssh. This is an example of running gparted on Axera Pi with X11 on mobaxterm. ![transfer_file_mobaxterm](./assets/flash_system/transfer_file_mobaxterm.jpg) #### Serial communication If you connect the board with computer by [serial port](#serial communication), after installing the `lrzsz` application by command `apt get install lrzsz` after AXera Pi is connected to network, we can transfer it by `minicom` on Linux or [mobaxterm](https://mobaxterm.mobatek.net/) on Windows. ## Check the peripheral ### Built in application Maix III AXera Pi includes some Built in Linux applications, and they are in `ls /opt` directory. ```bash root@AXERA:~# ls /opt ``` ```bash bin include lib scripts share ``` And some resources are in the `/home` directory ```bash root@AXERA:~# tree L 1 /home ``` ```bash ├── ax samples # npu ai sdk bin # Ax example applications ├── examples # Ax example applications ├── fbv 1.0b # fbv picture viewer ├── images # Test pictures ├── libmaix # simple pipeline sdk ├── models # Built in AI models ├── res # Pictures and fonts ├── systemd usb gadget # Config usb service ├── usb uvc gadget # Config uvc service └── ustreamer # mjpeg application ``` We have put `gcc g++ gdb libopencv ffmpeg` into the Linux system image, with which we can compile the application on AXera Pi. Here is an example using libmaix： ```bash cd /home/libmaix/examples/axpi/ python3 project.py build fbon ./dist/start_app.sh ``` Screen displays the content of camera, if you failed running this application, visit [AXear Pi Q&A](./faq_axpi.html) to see how to switch camera. ![libmaix](./../../../zh/maixIII/assets/libmaix.jpg) The axsample has been compiled, and its joint models are in `/home/models/` directory for people to use. ```bash /home/ax samples/build/install/bin/ax_yolov5s m /home/models/yolov5s.joint i /home/images/cat.jpg r 10 fbon fbv yolov5s_out.jpg ``` Screen shows the yolovs_out.jpg picture file, `reboot` system if there is something occupying the system resources ![cat](./../../../zh/maixIII/assets/cat.jpg) Run `git pull` to get the latest libmaix code. ### Pin maps ![layout_axpi](./../../../zh/maixIII/assets/layout_axpi_1.png) ### RTC There is a RTC(Real Time Clock) on the ext board under the Core module, which provides the read time for Maix III AXera Pi when not accessed wireless. Use command `hwclock w f /dev/rtc0` to write current system time into RTC to adjust its time date. Run command `ls /sys/class/rtc`, we can see two rtc devices: `rtc0` and `rtc1`, `rtc0` is the Real Time Clock on the ext board and `rtc1` is the AXera Pi internal Real Time Clock. ![rtc0_data_time](./assets/flash_system/rtc0_data_time.jpg) ### CPU & RAM Default runs at 800MHz, and can be changed into 1GHZ. By command `ax_lookat`, we can get the values of memory. ![ax_look_at](./assets/flash_system/ax_look_at.jpg) Set cpu at 800MHz: ```bash root@AXERA:~# ax_lookat 0x01900000 s 33 ``` View cpu frequency: ``` root@AXERA:~# ax_clk AX620A: DDR: 3733 MHz CPU: 800 MHz BUS of VPU: 624 MHz BUS of NPU: 624 MHz BUS of ISP: 624 MHz BUS of CPU: 624 MHz NPU OTHER: 800 MHz NPU GLB: 24 MHz NPU FAB: 800 MHz NPU CORE1: 800 MHz NPU CORE0: 800 MHz ISP: 533 MHz MM: 594 MHz VPU: 624 MHz ``` Set cpu at 1GHz: ``` root@AXERA:~# ax_lookat 0x01900000 s 35 ``` View cpu frequency: ``` root@AXERA:~# ax_clk AX620A: DDR: 3733 MHz CPU: 1000 MHz BUS of VPU: 624 MHz BUS of NPU: 624 MHz BUS of ISP: 624 MHz BUS of CPU: 624 MHz NPU OTHER: 800 MHz NPU GLB: 24 MHz NPU FAB: 800 MHz NPU CORE1: 800 MHz NPU CORE0: 800 MHz ISP: 533 MHz MM: 594 MHz VPU: 624 MHz ``` ### VIDEO This is a demo for testing camera, visit [built in application](#built in applications) for more usages. gc4653 （Defaule camera） os04a10（Night enhanced camera） ```bash sample_vin_vo c 2 e 1 s 0 v dsi0@480x854@60 # For gc4653 camera # sample_vin_vo c 0 e 1 s 0 v dsi0@480x854@60 # For os04a10 camera ``` ![video](./../../../zh/maixIII/assets/video.jpg) > Those using os04a10 visit [AXera Pi](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/faq_axpi.html#Q%EF%BC%9AHow to switch to os04a10 camera%EF%BC%9F) to see how to switch camera. ### DISPLAY Because of the change of screen version, visit [bad display](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/faq_axpi.html#Q%EF%BC%9AThe screen is blurred after booting.) if your screen does not display well. Run command `sample_vo v dsi0@480x854@60 m 0` we can see there is colorbar on the screen to test the screen display, make sure you have disabled the framebuffer with command `fboff`, otherwise this `sample_vo v dsi0@480x854@60 m 0` will not work, and use command hotkey `Ctrl` + `c` to cancel the command is you want to stop running the application. #### Show a picture Now we use framebuffer (/dev/fb0) to control the camera content, run command `fbon` to enable the framebuffer, and `fboff` to disable the framebuffer. When `/dev/fb0` is enabled, we can display picture on the screen by command `fbv xxx.jpg`, and some pictures have been stored in `/home/res/` directory, display them by yourself. ![_home_res](./assets/flash_system/_home_res.jpg) ``` fbon # enable framebuffer fbv /home/res/logo.png # display picture fboff # disable framebuffer ``` ![fbv_logo](./../../../zh/maixIII/assets/fbv_logo.jpg) #### Play video We can play video via `ffmpeg`. The video should be `BGR format`, with `90° clockwise rotation` and `480*854 resolution`. If you think the video plays too fast, run `ffmpeg i /home/kun_1_output.mp4 vf \"setpts 2*PTS\" test3.mp4` to rebuild a slow video. ```bash fbon ffmpeg i /home/test3.mp4 pix_fmt rgba f fbdev /dev/fb0 fboff ``` In python we can run all commands above by `os.system()`. ```python import os os.system(\"fbon\") os.system(\"fbv /home/res/logo.png\") os.system(\"fboff\") os.system(\"fbon\") os.system(\"ffmpeg i /home/test3.mp4 pix_fmt rgba f fbdev /dev/fb0\") os.system(\"fboff\") ``` ### NPU The NPU examples are in the `/home/ax samples/build/install` directory, just run them to see their results. ```bash fbon /home/ax samples/build/install/bin/ax_yolov5s m /home/models/yolov5s.joint i /home/images/cat.jpg r 10 fbv yolov5s_out.jpg ``` ### AUDIO There is a 3.5mm audio connector on AXera Pi, we can use is to play or record audio, here are examples to test this peripheral, it's a bit loud, change the volume by `alsamixer`. ![alsamixer](./../../../zh/maixIII/assets/alsamixer.jpg) And these are examples: **Test command**：`speaker test t sine f 440 c1` **Record audio**: `arecord test.wav c 2 f cd d 2` **Play audio**：`aplay test.wav` And this is a python example to record and play the audio. ```python import pyaudio try: chunk 1024 # Each chunk will consist of 1024 samples sample_format pyaudio.paInt16 # 16 bits per sample channels 2 # Number of audio channels fs 44100 # Record at 44100 samples per second time_in_seconds 30 p pyaudio.PyAudio() stream p.open(format sample_format, channels channels, rate fs, frames_per_buffer chunk, input True, output True) # Store data in chunks for 3 seconds for i in range(0, int(fs / chunk * time_in_seconds)): data stream.read(chunk) stream.write(data) finally: # Stop and close the Stream and PyAudio stream.stop_stream() stream.close() p.terminate() ``` ### USB There is a USB OTG port on AXera Pi, we can change its function to be a OTG device or HOST device. #### USB OTG RNDIS We set this function as the default function of USB OTG port, with this we can see there is a usb RNDIS device in the device manager and we can login to AXera Pi by SSH with ip `192.168.233.1` if connecting the computer with AXera Pi via its USB OTG port. [Click me](#rndis) to know how to login with RNDIS by ssh. ![ssh usb](./../../../zh/maixIII/assets/ssh usb.jpg) The system enables amd starts this service by command `systemctl enable usb gadget@g0` and `systemctl start usb gadget@g0`, run command `systemctl disable usb gadget@g0` to disable this service or command `systemctl stop usb gadget@g0` to stop this service, by stopping this we can use this USB OTG port for other functions, we'll describe these in the following content. #### USB HOST Device Stop the RNDIS service with command `systemctl stop usb gadget@g0`, then run command `systemctl start usb gadget@g1` to set the USB OTG port as the HOST function, connect a USB device with the USB OTG port, run command `lsusb` to check the usb device. Here are the example logs(To read a usb storage device and mount it on AXera Pi). ```bash root@AXERA:~# systemctl stop usb gadget@g0 root@AXERA:~# lsusb Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 001 Device 002: ID 067b:2731 Prolific Technology, Inc. USB SD Card Reader Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub root@AXERA:~# fdisk l Disk /dev/mmcblk2: 58.94 GiB, 63281561600 bytes, 123596800 sectors Units: sectors of 1 * 512 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x32eb5429 Device Boot Start End Sectors Size Id Type /dev/mmcblk2p1 * 2048 264191 262144 128M c W95 FAT32 (LBA) /dev/mmcblk2p2 264192 123596799 123332608 58.8G 83 Linux Disk /dev/sda: 240 MiB, 251658240 bytes, 491520 sectors Disk model: SD Card Reader Units: sectors of 1 * 512 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x0607cfd2 Device Boot Start End Sectors Size Id Type /dev/sda1 * 240 490239 490000 239.3M e W95 FAT16 (LBA) root@AXERA:~# mkdir /mnt/sdcard && mount /dev/sda1 /mnt/sdcard ``` #### USB OTG CAM **usb uvc gadget**：[usb uvc gadget](https://github.com/junhuanchen/usb uvc gadget) Visit [uvc_vo](#uvc_vo) to find out more. #### USB HOST CAM With this example we can connect a USB camera to AXera Pi USB OTG port, and display the usb camera content in the browser, so we need to make sure AXera Pi has connected to the network first, and we need to get the ip address of AXera Pi, with which we can view the usb camera content in the browser. **Ustreamer**：[Github](https://github.com/pikvm/ustreamer) Run the following code, and open the ip address of AXera Pi in a web browser. ```bash /home/ustreamer/ustreamer device /dev/video0 host 0.0.0.0 port 80 ``` ![ustreamer_adb](./../../../zh/maixIII/assets/ustreamer_adb.png) We have these choices: ![ustreamer](./../../../zh/maixIII/assets/ustreamer.png) Streamer example: ![ustreamer_snapshot](./../../../zh/maixIII/assets/ustreamer_snapshot.jpg) **Read USB Camera by OPENCV** Run following python code to display the USB camera content on the screen of AXera Pi by OPENCV ```python import os import cv2 video cv2.VideoCapture(0) for i in range(30): ret, frame video.read() if ret: cv2.imwrite(\"/tmp/capture.jpg\", frame) os.system(\"fbon && fbv /tmp/capture.jpg\") ``` ![opencv](./../../../zh/maixIII/assets/opencv.jpg) ![opencv_cream](./../../../zh/maixIII/assets/opencv_cream.jpg) > Visit [AXera Pi FAQ](./faq_axpi.html) if you have some trouble. ### GPIO #### Read KEY input：GPIO2 21 This is the USER key on AXera Pi. Config the USER key first. ```bash echo 85 > /sys/class/gpio/export # export the USER key echo in > /sys/class/gpio/gpio85/direction # set the exported USER key direction ``` Get the USER key value ```bash cat /sys/class/gpio/gpio85/value # Get the value of USER key, 1 is unpressed and 0 is pressed ``` #### Blink a LED GPIO2 A4 68 A5 69 Export the LED IO and set its direction. ```bash echo 68 > /sys/class/gpio/export echo out > /sys/class/gpio/gpio68/direction ``` Set led IO voltage value to control the LED. ```bash echo 1 > /sys/class/gpio/gpio68/value sleep 1 echo 0 > /sys/class/gpio/gpio68/value sleep 1 echo 1 > /sys/class/gpio/gpio68/value ``` > Calculating Rule: GPIO2 A4 32 * 2 + 4 68 For Axera chip, GPIO0 means A IO port and GPIO2 means C IO port, and example like A4 is just a signal. GPIO2 A4 in AXera Pi is GPIO C(2) 4(A4) in standard definition , and standard definition GPIOA0 means IO GPIO0A4 in AXera Pi. In the future, we'll apply definition like PA0 and PC4, which is easier to understand. Here we use Python to control the GPIO, from the following figure, we can see that the BOT_GPIO_0 7 of the pin headers are GPIO2_A16_m GPIO2_A23_m in the system. ![io_pin_map](./../../../zh/maixIII/assets/io_pin_map.png) The relationship between PA0 3 and the figure above is as follows: ![](./../../../../hardware/zh/maixIII/assets/gpio_axpi.png) We use Python3 libgpiod to encapsulate gpio class. ```python try: from gpiod import chip, line, line_request config None # rpi is default value A 0 def gpio(gpio_line 0, gpio_bank \"a\", gpio_chip 0, line_mode line_request.DIRECTION_OUTPUT): global config if config ! None and gpio_line in config: gpio_bank, gpio_chip config[gpio_line] l, c [32 * (ord(gpio_bank.lower()[0]) ord('a')) + gpio_line, chip(\"gpiochip%d\" % gpio_chip)] tmp c.get_line(l) cfg line_request() # led.active_state line.ACTIVE_LOW cfg.request_type line_mode # line.DIRECTION_INPUT tmp.request(cfg) tmp.source \"GPIO chip %s bank %s line %d\" % (gpio_chip, gpio_bank, gpio_line) return tmp def load(cfg None): global config config cfg except ModuleNotFoundError as e: pass ``` GPIO input test: ```python led0 gpio(16, gpio_chip 2, line_mode line_request.DIRECTION_INPUT) led1 gpio(17, gpio_chip 2, line_mode line_request.DIRECTION_INPUT) led2 gpio(18, gpio_chip 2, line_mode line_request.DIRECTION_INPUT) led3 gpio(19, gpio_chip 2, line_mode line_request.DIRECTION_INPUT) def test(): import time print(led0.get_value()) print(led1.get_value()) print(led2.get_value()) print(led3.get_value()) time.sleep(1) print(time.asctime()) while True: test() ``` GPIO output test： ```python led0 gpio(16, gpio_chip 2, line_mode line_request.DIRECTION_OUTPUT) led1 gpio(17, gpio_chip 2, line_mode line_request.DIRECTION_OUTPUT) led2 gpio(18, gpio_chip 2, line_mode line_request.DIRECTION_OUTPUT) led3 gpio(19, gpio_chip 2, line_mode line_request.DIRECTION_OUTPUT) def test(): import time time.sleep(1) led0.set_value(1) led1.set_value(1) led2.set_value(1) led3.set_value(1) time.sleep(1) led0.set_value(0) led1.set_value(0) led2.set_value(0) led3.set_value(0) print(time.asctime()) while True: test() ``` C example to control gpio: [gpio.h/gpio.c](https://www.cnblogs.com/juwan/p/16917802.html#gpio pwm) ### UART The default uart port of USB UART is **ttyS0**, and the UART on the pin header is **ttyS1**, the virtual USRT is **ttyGS0**. ![uart_tty](./../../../zh/maixIII/assets/uart_tty.jpg) Here is a `python3 pyserial` example code to test the UART on the pin header, make sure you have connected the GND on your UART TTL with the GND on the AXera Pi. ```python import serial ser serial.Serial('/dev/ttyS1', 115200, timeout 1) ser.write(b'hello world\\n') ser.close() ``` Example [ uart.h/uart.c ](https://www.cnblogs.com/juwan/p/16917802.html#linux uart ttysx) ### PWM Here we change the brightness of the screen of AXera Pi to test the pwm example **Example**：Run command `echo 204 > /sys/class/pwm/pwmchip0/pwm0/duty_cycle` and the screen is only one tenth of the original brightness. ```bash echo 0 > /sys/class/pwm/pwmchip0/export echo 4167 > /sys/class/pwm/pwmchip0/pwm0/period echo 204 > /sys/class/pwm/pwmchip0/pwm0/duty_cycle echo 2084 > /sys/class/pwm/pwmchip0/pwm0/duty_cycle echo 1 > /sys/class/pwm/pwmchip0/pwm0/enable ``` PWM Example：[Click me](https://wiki.sipeed.com/soft/maixpy3/zh/usage/hardware/PWM.html#%E5%BC%80%E5%A7%8B). ### I2C > The I2C on the pin header is `/dev/i2c 7` in AXera Pi, we use command `i2cdetect` to check the i2c device. ![i2c_detect](./assets/flash_system/i2c_detect.jpg) The `i2c 0`, `i2c 1`, `i2c 2` are the camera interface, and `i2c 7` is the connector on pin header, `i2c 8` is the RTC clock, and `i2c 9` is reserved. ![i2c_dev](./assets/flash_system/i2c_dev.jpg) For example we use command `i2cdetect y 0` to see the device on the i2c bus. If you can't detect your i2c device, make sure you have pulled up the data line. ```bash root@AXERA:~# i2cdetect y r 0 0 1 2 3 4 5 6 7 8 9 a b c d e f 00: 10: 20: 21 30: 36 40: 50: 60: 70: ``` The **0x21** 和 **0x36** in the log means there is a i2c device connecting to the `/dev/i2c 0` connector, and we can use command `i2cget` to read the data of the i2c device or command `i2cset` to write the i2c device. ### SPI ### CHIP ID Get the unique chip id of the main chip. ```bash cat /proc/ax_proc/uid ``` ### ADC ### Factory test script .. details::This is the factory test python script ```python test_flag False try: from gpiod import chip, line, line_request config None # rpi is default value A 0 def gpio(gpio_line 0, gpio_bank \"a\", gpio_chip 0, line_mode line_request.DIRECTION_OUTPUT): global config if config ! None and gpio_line in config: gpio_bank, gpio_chip config[gpio_line] l, c [32 * (ord(gpio_bank.lower()[0]) ord('a')) + gpio_line, chip(\"gpiochip%d\" % gpio_chip)] tmp c.get_line(l) cfg line_request() # led.active_state line.ACTIVE_LOW cfg.request_type line_mode # line.DIRECTION_INPUT tmp.request(cfg) tmp.source \"GPIO chip %s bank %s line %d\" % (gpio_chip, gpio_bank, gpio_line) return tmp def load(cfg None): global config config cfg except ModuleNotFoundError as e: pass key gpio(21, gpio_chip 2, line_mode line_request.DIRECTION_INPUT) led0 gpio(4, gpio_chip 2, line_mode line_request.DIRECTION_OUTPUT) led1 gpio(5, gpio_chip 2, line_mode line_request.DIRECTION_OUTPUT) import time import ifcfg import os def check_ifconfig(): result [] for name, interface in ifcfg.interfaces().items(): if name in ['eth0', 'wlan0'] and interface['inet']: result.append(name) return result try: if (0 key.get_value()): os.system(\"export LD_LIBRARY_PATH /opt/lib:LD_LIBRARY_PATH && /opt/bin/sample_vin_vo c 2 e 1 s 0 v dsi0@480x854@60 &\") led1.set_value(1) while True: led0.set_value(1) time.sleep(0.2) led0.set_value(0) time.sleep(0.2) tmp check_ifconfig() if len(tmp) > 1: led0.set_value(0) led1.set_value(0) test_flag True break while (0 key.get_value()): time.sleep(0.2) os.system(\"aplay /home/res/boot.wav\") led0.set_value(1) led1.set_value(1) import pyaudio chunk 1024 # Each chunk will consist of 1024 samples sample_format pyaudio.paInt16 # 16 bits per sample channels 2 # Number of audio channels fs 44100 # Record at 44100 samples per second p pyaudio.PyAudio() stream p.open(format sample_format, channels channels, rate fs, frames_per_buffer chunk, input True, output True) while (1 key.get_value()): data stream.read(chunk, exception_on_overflow False) stream.write(data) while (0 key.get_value()): time.sleep(0.2) os.system('killall sample_vin_vo') os.system('killall sample_vin_vo') # Stop and close the Stream and PyAudio stream.stop_stream() stream.close() p.terminate() except Exception as e: print(e) finally: if test_flag: led0.set_value(0) led1.set_value(0) ''' import pyaudio try: chunk 1024 # Each chunk will consist of 1024 samples sample_format pyaudio.paInt16 # 16 bits per sample channels 2 # Number of audio channels fs 44100 # Record at 44100 samples per second time_in_seconds 300 p pyaudio.PyAudio() stream p.open(format sample_format, channels channels, rate fs, frames_per_buffer chunk, input True, output True) for i in range(0, int(fs / chunk * time_in_seconds)): data stream.read(chunk) stream.write(data) finally: # Stop and close the Stream and PyAudio stream.stop_stream() stream.close() p.terminate() ''' ``` ## Built in applications ### IPCDemo This is an IPC (IP camera) demo program, and its functions are as follows: ISP: Transfers the RAW data stream from Sensor into YUV data stream, and output it in 3 channels IVPS: Image Video Processing submodule, Resize, Crop, Rotate the video image, or change the video image into multiple ones. VENC / JENC：Video / JPEG encoded output. Detect: Face detection or structure detection. Web display: H264 Web stream and provides to view real time Web video. RTSP Stream: H264 stream RTSP package and transmission. TF card Video storage: Package H264 stream into MP4 format and save it to TF card or FLASH. <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 260625114&bvid BV1me411T7g8&cid 837160730&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\" style \"max width:640px; max height:480px;\"> </iframe> </p> <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 688159412&bvid BV1p24y1d7Te&cid 837167669&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\" style \"max width:640px; max height:480px;\"> </iframe> </p> #### Usages Run the following command to start this application, and we can visit the ip address ([USB OTG RNDIS](#rndis) or network ip address) of AXera Pi and add port `8080` in web browser to see the streaming video. ```bash /opt/bin/IPCDemo/run.sh /opt/bin/IPCDemo/config/gc4653_config.json ``` We use the default camera gc4653 as the example, change the config_json file of your real camera in the end of example command with following choice. ![ipc_demo_json](./assets/flash_system/ipc_demo_json.jpg) Running this application, lots of logs are shown. ![ipc](./../../../zh/maixIII/assets/ipc.jpg) Open the ip address of AXera Pi with port `8080` in the web browser, here I take `192.168.233.1:8080` as an example (this ip address is the RNDIS ip address of AXera Pi and can be visited after connecting the computer with the USB OTG port of AXera Pi), click the blue frame to login. Sadly this application is only Chinese language support, you can use web translation tool to translate the web content into your language. ![ipc admin](./../../../zh/maixIII/assets/ipc admin.jpg) ![ipc_demo_translation](./assets/flash_system/ipc_demo_translation.jpg) #### Snapshot and Record **Snapshot** Login to the web stream service (Visit the ip address of AXera Pi port `8080` after running IPCDemo), there is a camera icon and record icon in the bottom right stream video corner. Click the camera icon to snapshot the video, and the snapshot picture will be automatically downloaded for viewing. ![ipc web](./../../../zh/maixIII/assets/ipc web.jpg) **Record** Click the record icon in the bottom right stream video corner to record the video (mp4 format), and click the record icon to stop recording. ![ipc mp4](./../../../zh/maixIII/assets/ipc mp4.jpg) Recording Unrecording ![ipc_recording](./assets/flash_system/ipc_recording.jpg) ![ipc_unrecording](./assets/flash_system/ipc_unrecording.jpg) And we can play or download the recorded video in following step marked with ① and ② in the following picture ![ipc config](./../../../zh/maixIII/assets/ipc config.jpg) **20221017 demo updating** we set the video automatically saved to `/opt/mp4` directory, with which you can use this board as a surveillance network camera after mounting a hard disk. ![ipc_recording_video](./assets/flash_system/ipc_recording_video.jpg) #### Face detection In the IPCDemo, we also set other functions, like `Face detection` or `LPRnet` Login to the IPC website (Visit the ip address of AXera Pi after running IPCDemo) first, then click what's the following picture marked for your need, use web translation tool to translate these settings. ![lprnet_detection](./assets/flash_system/lprnet_detection.jpg) Tick your needed configurations, we can do face detection in the preview page. IPCDemo application will automatically detect the face and take snapshot, and we can see the detected face picture in the following preview blank area. Left: Face detection. Right: Body detection <html> <img src \"./../../../zh/maixIII/assets/ipc model.jpg\" width 45%> <img src \"./../../../zh/maixIII/assets/ipc person.jpg\" width 45%> </html> #### LPRnet Login to the IPC website (Visit the ip address of AXera Pi after running IPCDemo) first, then click what's the following picture marked for your need, use web translation tool to translate these settings. ![lprnet_detection](./assets/flash_system/lprnet_detection.jpg) Tick your needed configurations, we can do LPRnet detection in the preview page. IPCDemo application will automatically detect the LPRnet and take snapshot, and we can see the detected LPRnet result in the following preview blank area. ![ipc car](./../../../zh/maixIII/assets/ipc car.jpg) ### rtsp > **rtsp**：Real Time Streaming Protocol is an application level network protocol designed for multiplexing and packetizing multimedia transport streams (such as interactive media, video and audio) over a suitable transport protocol. Here we use [VLC Media Player](https://www.videolan.org/vlc/) to play the rtsp stream video. ![vl yolov5s](./../../../zh/maixIII/assets/vlc yolov5s.jpg) Run the following command on AXera Pi, open `VLC Media Player` and use hotkey `Ctrl + N` to open a network stream video, enter the ip address of AXera Pi like `rtsp://192.168.233.1:8554/axstream0` to play the stream video. Run this command on AXera Pi: ```bash /home/examples/vin_ivps_joint_venc_rtsp_vo_onvif_mp4v2/run.sh ``` The log of AXera Pi running rtsp stream video ![vlr run](./../../../zh/maixIII/assets/vlc run.jpg) Enter the ip address of AXera Pi for playing the stream video, use hotkey `Ctrl + P` to play after entering the ip address of AXera Pi. ![vlc urt](./../../../zh/maixIII/assets/vlc urt.jpg) The rtsp example is as follows: <html> <img src \"./../../../zh/maixIII/assets/rtsp display.jpg\" width 48%> <img src \"./../../../zh/maixIII/assets/rtsp axpi.jpg\" width 48%> </html> Edit `/home/examples/vin_ivps_joint_venc_rtsp_vo_onvif_mp4v2/run.sh` if your camera is not gc4653. ![rtsp_stream_shell](./assets/flash_system/rtsp_stream_shell.jpg) #### ffplay Except `VCL`, we can use `ffplay` to play the stream video. **ffplay** :[Click me to download windows edition ffplat](https://dl.sipeed.com/shareURL/MaixIII/AXera/09_Software_tool), for linux user run command `sudo apt install ffmpeg` to install ffplay. After getting ffplay ready, run following command in command line to play the rtsp stream video of AXera Pi, change the ip address if necessary. ```bash ffplay rtsp://192.168.233.1:8554/axstream0 fflags nobuffer ``` ### ONVIF ODM **ONVIF Device Manager**：[Click to download](https://sourceforge.net/projects/onvifdm/) Different from VLC player, ODM has many different usages. ![odm](./../../../zh/maixIII/assets/odm.jpg) Run following command on AXera Pi, the screen on AXera Pi displays the yolov5s model, then we use `ODM` to display the content on computer. ```bash /home/examples/vin_ivps_joint_venc_rtsp_vo_onvif_mp4v2/run.sh ``` Edit `/home/examples/vin_ivps_joint_venc_rtsp_vo_onvif_mp4v2/run.sh` file to switch camera if your screen failed display the camera content. ![onvif_changing_camera](./assets/flash_system/onvif_changing_camera.jpg) Screen displays the camera content: ![odm mipi](./../../../zh/maixIII/assets/odm mipi.jpg) Run the `ONVIF Device Manager`, click `Refresh` to scan device, make sure you have connected computer with USB OTG port of AXera Pi and there is RNDIS device in your computer manager (Here we take RNDIS as network example and we play the video through `192.168.233.1`). After clicking `Refresh` there is a IP Camera with IP `192.168.233.1`, choose it and click `Live` video to stream the video. ![onvif_rndis_device](./assets/flash_system/onvif_rndis_device.jpg) ![onvif_example](./assets/flash_system/onvif_example.jpg) And we just take RNDIS as example, other IP address like wireless or ethernet are also fine. Make sure your network is good, and bad network can not use `ONVIF Device Manager` with good experience. Switch model > `20221116` we set the different camera parameters in `run.sh` > `20221111` we set yolov5s face/object detection model in the system image, read the following content to see how to edit the script and switch model. ``` bash nano /home/examples/vin_ivps_joint_venc_rtsp_vo_onvif_mp4v2/run.sh ``` Run this command on AXera Pi, we can edit `run.sh` shell annotation `#` to switch model or load other model. Use hotkey `Ctrl + x` to save your changes. ![model save](./../../../zh/maixIII/assets/model save.jpg) Follow the instruction press `Y` to save modified buffer. And use the default file name. Run `run.sh` we can see different detection effects on the screen of Axera Pi. ![model file](./../../../zh/maixIII/assets/model file.jpg) **Press key and Record MP4** While running `run.sh`, click `USER` key to record video, and **LED0** is on when AXera Pi is recording. ![odm mp4](./../../../zh/maixIII/assets/odm mp4.jpg) Click `USER` key again to stop recording and **LED0** is off ![odm adb](./../../../zh/maixIII/assets/odm adb.png) The recorded mp4 files are in **`home/examples/`** directory. ![mp4 file](./../../../zh/maixIII/assets/mp4 file.png) ### PP_human Run following command on AXera Pi, screen displays the background picture, and when capturing a human, it will be shown on the screen. ```bash /home/examples/vin_ivps_joint_vo_pp_human_seg/run.sh ``` ![pp_human](./../../../zh/maixIII/assets/pp_human.jpg) Use the following command to edit the script file, change the annotation `#` to switch camera. ```bash nano /home/examples/vin_ivps_joint_vo_pp_human_seg/run.sh ``` Use hotkey `Ctrl + X` and follow instructions we save the change of editing. ![pp_human_adb](./../../../zh/maixIII/assets/pp_humana_adb.png) ### uvc_vo **usb uvc gadget**：[Github repository](https://github.com/junhuanchen/usb uvc gadget) This demo is not very stable. For the first time running this demo application, the usb otg rndis will change into usb otg uvc and lead to the device reboot. After that run this demo application again then everything is right. If your screen displays green interface, this means the wrong camera configuration, edit the script to switch camera. Before running this demo, connecting both USB UART and USB OTG port, we use USB UART port to control AXera Pi and use USB OTG to transfer uvc stream to the computer. Run the following command to start this demo application. ```bash /home/examples/vin_ivps_joint_venc_uvc_vo/run.sh ``` ![uvc_adb](./../../../zh/maixIII/assets/uvc_adb.png) Run your computer camera application to display the camera detection of AXera Pi. ![uvc_vo](./../../../zh/maixIII/assets/uvc_vo.jpg) The following command can be used to `start`, `stop` or `restore` `uvc demo. ```bash /home/usb uvc gadget/uvc gadget.sh #start/stop/restore ``` **Android phone uvc** This uvc demo application can also display on Android phone which support OTG mode. Download and install a USB camera application on the phone first. Connect USB OTG port with Android phone, and run `/home/examples/vin_ivps_joint_venc_uvc_vo/run.sh` on AXera Pi by USB UART or SSH to start uvc demo, and start the USB camera application on the Android phone, then the camera content displays both on AXera Pi screen and Android phone. ![uvc_phone](./../../../zh/maixIII/assets/uvc_phone.jpg) This demo can run at system finishing boot if it's written into [rc.local](#boot script) ### lvgl7 UI Run following command we can run this lvgl demo. ```bash /home/bin/sample_vin_ivps_joint_vo_lvgl c 0 ``` ![lvgi_adb](./../../../zh/maixIII/assets/lvgl_adb.png) <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 690497396&bvid BV1n24y1C7DN&cid 901748014&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\"> </iframe> </p> ### Python API It's also good to program your application via python, read [Python on Maix III AXera Pi](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/python_api.html) for more. ### Human Parts detection This demo has been built in system, run following command to experience it. ```bash ./home/run.sh ``` And there are many other models in this system, edit `run.sh` to load and test other models. ```bash sample_vin_ivps_joint_vo sample_vin_ivps_joint_venc_rtsp_vo ``` ```bash yolov5_seg.json yolov7.json yolox.json yolov5s_face.json pp_human_seg.json ax_pose.json hrnet_animal_pose.json hand_pose.json ``` Use command `nano /home/run.sh` to enable the model you want to try. And change the camera by edit ` c 2` to switch to another camera. ![ax_poes_sh](./../../../zh/maixIII/assets/ax_poes_sh.jpg) <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 647932316&bvid BV1Pe4y1W7n6&cid 901750338&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\"> </iframe> </p> More built in examples There are more examples in `/home/bin`, run then if you want. ```bash root@AXERA:~# ls /home/bin sample_h264_ivps_joint_vo sample_v4l2_user_ivps_joint_vo sample_vin_ivps_joint_vo sample_vin_joint sample_rtsp_ivps_joint sample_vin_ivps_joint_venc_rtsp sample_vin_ivps_joint_vo_h265 sample_rtsp_ivps_joint_rtsp_vo sample_vin_ivps_joint_venc_rtsp_vo sample_vin_ivps_joint_vo_lvgl ``` Here is an example runnning `sample_vin_ivps_joint_vo_h265`, and ` c 2` means the camera choice. ```bash /home/bin/sample_vin_ivps_joint_vo_h265 c 2 ``` These are the command logs. ![sample](./../../../zh/maixIII/assets/sample.jpg) ### sherpa ncnn (Chinese and English speech recognition) #### Basic usage Open directory `/home/sherpa ncnn m3axpi`, here are the demos. ```bash cd /home/sherpa ncnn m3axpi ``` Chinese speech recognition ```bash ./sherpa ncnn alsa \\ ./sherpa ncnn streaming zipformer small bilingual zh en 2023 02 16/tokens.txt \\ ./sherpa ncnn streaming zipformer small bilingual zh en 2023 02 16/encoder_jit_trace pnnx.ncnn.param \\ ./sherpa ncnn streaming zipformer small bilingual zh en 2023 02 16/encoder_jit_trace pnnx.ncnn.bin \\ ./sherpa ncnn streaming zipformer small bilingual zh en 2023 02 16/decoder_jit_trace pnnx.ncnn.param \\ ./sherpa ncnn streaming zipformer small bilingual zh en 2023 02 16/decoder_jit_trace pnnx.ncnn.bin \\ ./sherpa ncnn streaming zipformer small bilingual zh en 2023 02 16/joiner_jit_trace pnnx.ncnn.param \\ ./sherpa ncnn streaming zipformer small bilingual zh en 2023 02 16/joiner_jit_trace pnnx.ncnn.bin \\ \"hw:0,0\" \\ 4 \\ greedy_search ``` English speech recognition ```bash ./sherpa ncnn alsa \\ ./sherpa ncnn conv emformer transducer small 2023 01 09/tokens.txt \\ ./sherpa ncnn conv emformer transducer small 2023 01 09/encoder_jit_trace pnnx.ncnn.int8.param \\ ./sherpa ncnn conv emformer transducer small 2023 01 09/encoder_jit_trace pnnx.ncnn.int8.bin \\ ./sherpa ncnn conv emformer transducer small 2023 01 09/decoder_jit_trace pnnx.ncnn.param \\ ./sherpa ncnn conv emformer transducer small 2023 01 09/decoder_jit_trace pnnx.ncnn.bin \\ ./sherpa ncnn conv emformer transducer small 2023 01 09/joiner_jit_trace pnnx.ncnn.int8.param \\ ./sherpa ncnn conv emformer transducer small 2023 01 09/joiner_jit_trace pnnx.ncnn.int8.bin \\ \"hw:0,0\" \\ 2 \\ greedy_search ``` Running the command above, speak to the MIC on AXera Pi or play audio, detection results are printed to terminal. ![sherpa](./assets/flash_system/axpi_english_audio_detection.png) #### Update sherpa ncnn You can update the speech model to get better experience. Open the directory `/home/sherpa ncnn m3axpi` first. ```bash cd /home/sherpa ncnn m3axpi ``` We need to enable the large files first, install `git lfs` in your Axpi, and enable it. ```bash sudo apt install git lfs git lfs install ``` Then clone the latest sherpa ncnn speech model, make sure you are in `/home/sherpa ncnn m3axpi` directory. ```bash git clone https://huggingface.co/marcoyang/sherpa ncnn streaming zipformer zh 14M 2023 02 23 ``` ![sherpa_ncnn_update_model](./assets/flash_system/sherpa_ncnn_update_model.png) Then you can run following code to test the model(Make sure you are in `/home/sherpa ncnn m3axpi` directory): ```bash ./sherpa ncnn alsa ./sherpa ncnn streaming zipformer zh 14M 2023 02 23/tokens.txt \\ ./sherpa ncnn streaming zipformer zh 14M 2023 02 23/encoder_jit_trace pnnx.ncnn.param \\ ./sherpa ncnn streaming zipformer zh 14M 2023 02 23/encoder_jit_trace pnnx.ncnn.bin \\ ./sherpa ncnn streaming zipformer zh 14M 2023 02 23/decoder_jit_trace pnnx.ncnn.param \\ ./sherpa ncnn streaming zipformer zh 14M 2023 02 23/decoder_jit_trace pnnx.ncnn.bin \\ ./sherpa ncnn streaming zipformer zh 14M 2023 02 23/joiner_jit_trace pnnx.ncnn.param \\ ./sherpa ncnn streaming zipformer zh 14M 2023 02 23/joiner_jit_trace pnnx.ncnn.bin \\ \"hw:0,0\" 2 greedy_search ```"},"/hardware/en/maixIII/ax-pi/python_api.html":{"title":"Python on Maix-III AXera-Pi","content":"DateAuthorChange: :: :: :2023.02.04wonderCreatefile2023.03.01wonderAddYolo8modelFinishreading[AXera PiGuide](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/flash_system.html),wecanstartPythononMAIX IIIAXera Pi.##PrefaceFromMAIX IMCU,MAIX IISOCtoMAIX IIILinuxboard,SIPEEDisdevotedforeasy usedevelopmentboard,andcreatedmanydocumentsonhowtousethem.IfyouarenotgoodatLinuxorC++,let'susepythontoplayMAIX IIIAXera Pi.###WhatisPython**Python**isahigh level,general purposeprogramminglanguage.Itsdesignphilosophyemphasizescodereadabilitywiththeuseofsignificantindentation.Itisdynamicallytypedandgarbage collected.Itsupportsmultipleprogrammingparadigms,includingstructured(particularlyprocedural),object orientedandfunctionalprogramming.Itisoftendescribedasa\"batteriesincluded\"languageduetoitscomprehensivestandardlibrary.[wikipedia](https://en.wikipedia.org/wiki/Python_(programming_language))![api_python_logo 3.jpg](attachment:api_python_logo 3.jpg) **DifferencebetweenPythonandC++**PythonisakindofScriptinglanguage,thismeansitisinterpretedatruntime,usersrunthecodefilesnamedwithextensionname`py`onPythoninterpreter,instaedofcompilingthemthenrunit.C++iscompilinglanguage,itneedstobecompiledbeforerunning,whichtakesalongtimetocompile.Pythoniseasierforuserstounderstandandstart,whileC++isnormallycomplexanddifficultforuserstostart. **Pythontutorial**[Pythonwebsite](https://www.python.org/)providesmany[documents](https://docs.python.org/3/),whichisenoughforstudyingpython.Besides,use[JupyterNotebook](https://jupyter.org/)tostartpythonaboutAIisagoodidea,whichyouhavetolearnandtry.###WhatisJupyterNotebookTheJupyterNotebookistheoriginalwebapplicationforcreatingandsharingcomputationaldocuments.Itoffersasimple,streamlined,document centricexperience.ThisdocumentiscreatedbyJupyterNotebook,savedallresultsofexamplecodesandexplanationforuserstoread.![api_jupyter.jpg](attachment:api_jupyter.jpg)>Wehaveset`Python3、JupyterNotebook、Pinpong、Pillow`inAXera Piforuserseasy usewithpython,herewetake`JupyterNotebook`asthepythonprogramexample.##RunJupyterNotebookTorunJupyterNotebookon**AXera Pi**,weneedtogettheIPaddressof**AXera Pi**,bothRNDISIPaddressornetworkIPaddressareOK,withthiswecanopentheJupyterNotebookwebsiteapplicationrunningon**AXera Pi**.Run`ifconfig`togettheIPaddressof**AXera Pi**,andruncommand`jupyternotebook`on**AXera Pi**viaaterminal,thenvisitthe`IP:8888`inyourcomputerbrowser(Attention：`ifconfig`commandresult`lo:127.0.0.1`isinaccessible),like`192.168.0.125:8888`(`192.168.0.125`isaexampleIPaddressof**AXera Pi**,seethefollowingpicture),thenyoucanrunyourpythoncodeonJupyterNotebook.![api_adb 2.jpg](attachment:api_adb 2.jpg)>**Note**:Payattentiontothecommunicationbetweencomputerand**AXera Pi**,operatormayfailduetobadcommunicationquality.Visitthe`IP:8888`,enter**`root`**tologinifrequiredpassword.![api_root.png](attachment:api_root.png)Click`New`andchoosePython3tonewafilewithpythonkernel.![api_python3.jpg](attachment:api_python3.jpg) Python3：Afilewithpython3kernel TextFile：Atestfile Folder：Newafolder Terminal：Newaterminal##JupyterNotebookbasicusageInJupyterNotebook,weeditbycelltable,thereare`bluecelltable`(Commandmode)and`greencelltable`(Editingmode)twoversions.**`Bluecelltable`(Commandmode)**![green.jpg](attachment:green.jpg)**`Greencelltable`(Editingmode)**![blue.jpg](attachment:blue.jpg)Commonusage： **Shift+Enter：**Runcelltable,movetonextcelltableandenterintocommandmode. **Ctrl+Enter：**Runcelltable,andenterintocommandmode.Editmode： **Esc**：EnterCommandmodeCommandmode： **h：**Openhelp **Enter：**EnterEditingmode **x：**Cutcelltable **c：**Copycelltable **v：**Pastecelltable **dd：**Deletethiscelltable **ii：**Stoprunningtask **a：**Addcelltableabove **b：**Addcelltablebelow **m：**Changecelltableintomarkdownformat##Runcode>Allexamplesinthisdocumentarerunon`GC4653`camerasensor,visit[Maix IIIAXera Pi(FAQ)](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/faq_axpi.html)toseehowtoswitchcamerasensorifyouuse`OS04A10`nightenhancedcamerasensor.HereareexamplesrunningcodeorcommandonJupyterNotebook,theresultisshowninJupyterNotebookoronboardscreen. **Usecommand`!+cmd`toruncommandorscript**!lshome/images#Runcommandair.jpg carvana02.jpg\t face5.jpg\t o2_resize.jpg ssd_car.jpg\r aoa 2.jpeg carvana03.jpg\t grace_hopper.jpg pineapple.jpg ssd_dog.jpg\r aoa.jpeg carvana04.jpg\t mobileface01.jpg pose 1.jpeg\t ssd_horse.jpg\r bike.jpg cat.jpg\t\t mobileface02.jpg pose 2.jpeg\r bike2.jpg cityscape.png\t mtcnn_face4.jpg pose 3.jpeg\r cable.jpg dog.jpg\t\t mtcnn_face6.jpg pose.jpg\r carvana01.jpg efficientdet.png mv2seg.png\t selfie.jpg!/home/ax samples/build/install/bin/ax_yolov5s m/home/models/yolov5s.joint i/home/images/cat.jpg r10#Runscript model file : /home/models/yolov5s.joint image file : /home/images/cat.jpg img_h, img_w : 640 640 [AX_SYS_LOG] AX_SYS_Log2ConsoleThread_Start Run Joint Runtime version: 0.5.10 [INFO]: Virtual npu mode is 1_1 Tools version: d696ee2f run over: output len 3 Create handle took 487.99 ms (neu 22.29 ms, axe 0.00 ms, overhead 465.70 ms) Repeat 10 times, avg time 22.57 ms, max_time 22.88 ms, min_time 22.46 ms detection num: 1 15: 89%, [ 167, 28, 356, 353], cat [AX_SYS_LOG] Waiting thread(2867848448) to exit [AX_SYS_LOG] AX_Log2ConsoleRoutine terminated!!! exit[AX_SYS_LOG] join thread(2867848448) ret:0fromIPython.displayimportImage#RunpythoncodeImage(\"yolov5s_out.jpg\") **Use`%run`torunscriptfile,hereweuse`hello.py`asexample.**%runhello.pyhello world！##Newmarkdown>Addmarkdowncelltablein**JupyterNotebook**tomakeiteasytowritethedocumentexplanation.ClicktheEdittableandchoose`Markdown`toswitchcelltableformat，andincommandmodeclick`M`toswitchthecelltableintomarkdowncelltableformat.![api_markdown 2.jpg](attachment:api_markdown 2.jpg)##Transferfile>WithJyputernotebook,transferfileisalsoOK.Click`Upload`totransferfilefromcomputertoAXera Pi.![api_upload.jpg](attachment:api_upload.jpg) **DownloadfilefromAXera Pitocomputer**DocumenteditonJupyterNotebookcanbedownloadedtocomputer,thedownloadedfileformatis`.ipynb`,click`File` \\>`Downloadas` \\>`yourtargetformat`ifyouwantotherfileformat.![api_file 2.jpg](attachment:api_file 2.jpg)##ax pipeline api[**ax pipeline api：**](https://github.com/junhuanchen/ax pipeline api)isbuilton[ax pipeline](https://github.com/AXERA TECH/ax pipeline),andit'ssuitablefor`pybind11`and`ctypes`,whichisusedforPythonAPIprogramming,withwhichuserscanloadmanybuilt inAImodelsbyPython,orusepythonlibrarylikepinpong、opencv、numpy、pillow.ThesemakeAXera Pieasiertouse.**Whatisthedifferencebetween`ctypes`and`pybind11`**`ctypes`iswhatwefirstusedonAXera Pi,soit'smorestableandhasmoreinterfacethan`pybind11`,while`pybind11`iseasiertoseetheresultfromscreenorwebsiteandit'seasierforpeopletounderstand.Becauseoflimitedperformance,theyshouldnotbeusedatthesametime.Beforerunning`ax pipeline api`,makesureyouhaveinstalledit.Andifyouhavetroublerunningthisapplication,updatingthisapplicationmaybeagoodsolution.!pip3installax pipeline api URequirement already satisfied: ax pipeline api in /usr/local/lib/python3.9/dist packages (1.0.7) Collecting ax pipeline api Using cached ax pipeline api 1.0.7.tar.gz (15.5 MB) Using cached ax pipeline api 1.0.6.tar.gz (19.5 MB)Finishinginstallingorupdating`ax pipeline api`,run`yolov8`modeltohaveatry.##ObjectdetectionwithYolov8(ctypes)importtimefromaximportpipelinepipeline.load(['libsample_vin_ivps_joint_vo_sipy.so',' p','/home/config/yolov8.json',' c','2',])whilepipeline.work():time.sleep(0.001)tmp pipeline.result()iftmpandtmp['nObjSize']:foriintmp['mObjects']:x,y,w,h i['bbox']['x'],i['bbox']['y'],i['bbox']['w'],i['bbox']['h']objname,objprob i['objname'],i['prob']print(objname,objprob,x,y,w,h)#iftmp['nObjSize']>10:#tryexit#pipeline.drop()pipeline.drop()b'toilet' 0.4541160762310028 0.602770209312439 0.9111631512641907 0.16810722649097443 0.08513855934143066 b'toilet' 0.6902503967285156 0.606963574886322 0.9117961525917053 0.16024480760097504 0.08727789670228958 b'toilet' 0.6852353811264038 0.6020327210426331 0.9118891358375549 0.16942621767520905 0.08718493580818176 b'toilet' 0.7014157176017761 0.6041151881217957 0.9120386242866516 0.16582755744457245 0.0863698348402977 b'cup' 0.46080872416496277 0.6049922108650208 0.9143685698509216 0.1643451750278473 0.08425315469503403Asthelogofrunningyolov8above,objectdetectionresultparametersareprintedout.Andthedetectionpictureisshownonboardscreen.>Allexamplesinthisdocumentarerunon`GC4653`camerasensor,changecode`' c','2'`into`' c','0'`ifyouuse`OS04A10`nightenhancedcamerasensor.```pythonpipeline.load(['libsample_vin_ivps_joint_venc_rtsp_vo_sipy.so',' p','/home/config/yolov5s.json',' c','2',#GC4653camerasensor#' c','0',#OS04A10camerasensor])```Wecanalsousingdifferent`.so`libraryorother`AI`modelstodomoreAIusages.Therearealsousefulinformationon[ax pipeline api](https://github.com/junhuanchen/ax pipeline api). Herearethe`ibxxx*.so`libraryinAXera Pi:```bashlibsample_h264_ivps_joint_vo_sipy.so#inputh264videotoivpsjointoutputscreenvolibsample_v4l2_user_ivps_joint_vo_sipy.so#inputv4l2/dev/videoXtoivpsjointoutputscreenvolibsample_rtsp_ivps_joint_rtsp_vo_sipy.so#inputvideofromrtsptoivpsjointoutputrtspandscreenvolibsample_vin_ivps_joint_vo_sipy.so#inputmipisensortoivpsjointoutputscreenvolibsample_vin_ivps_joint_venc_rtsp_sipy.so#inputmipisensortoivpsjointoutputrtsplibsample_vin_ivps_joint_venc_rtsp_vo_sipy.so#inputmipisensortoivpsjointoutputrtspandscreenvolibsample_vin_ivps_joint_vo_h265_sipy.so#inputmipisensortoivpsjointoutputscreenvoandsaveh265videofilelibsample_multi_rtsp_ivps_joint_multi_rtsp_sipy.so#inputmultirtspvideotoivpsjointoutputmultirtspvideo\\n\",libsample_rtsp_ivps_joint_rtsp_sipy.so#inputvideofromrtsptoivpsjointoutputrtsp\\n\",libsample_rtsp_ivps_joint_rtsp_vo_sipy.so#inputvideofromrtsptoivpsjointoutputrtspandscreenvo\\n\",libsample_rtsp_ivps_joint_vo_sipy.so#inputvideofromrtsptoivpsjointoutputscreenvo```Thisisthemaincodeofchanging`ibxxx*.so`.```pythonpipeline.load(['libsample_vin_ivps_joint_venc_rtsp_vo_sipy.so',' p','/home/config/yolov5s.json',' c','2',])``` HerearetheAImodels(whichareinthefolder`/home/config`)inAXera Pi:```bashax_bvc_det.jsonhrnet_pose_yolov8.jsonyolov5s_face_recognition.jsonax_person_det.jsonlicense_plate_recognition.jsonyolov5s_license_plate.jsonax_pose.jsonnanodet.jsonyolov6.jsonax_pose_yolov5s.jsonpalm_hand_detection.jsonyolov7.jsonax_pose_yolov8.jsonpp_human_seg.jsonyolov7_face.jsoncrowdcount.jsonscrfd.jsonyolov7_palm_hand.jsonhand_pose.jsonyolo_fastbody.jsonyolov8.jsonhand_pose_yolov7_palm.jsonyolopv2.jsonyolov8_seg.jsonhrnet_animal_pose.jsonyolov5_seg.jsonyolox.jsonhrnet_pose.jsonyolov5s.jsonhrnet_pose_ax_det.jsonyolov5s_face.json```Thisisthemaincodeofchanging`AImodels`.```pythonpipeline.load(['libsample_vin_ivps_joint_vo_sipy.so',' p','/home/config/yolov5s_face.json',' c','2',])```##Yolov8segmentationimporttimefromaximportpipelinepipeline.load(['libsample_vin_ivps_joint_vo_sipy.so',' p','/home/config/yolov8_seg.json',' c','2',])whilepipeline.work():time.sleep(0.001)tmp pipeline.result()iftmpandtmp['nObjSize']:foriintmp['mObjects']:print(i)#iftmp['nObjSize']>10:#tryexit#pipeline.drop()pipeline.drop(){'label': 39, 'prob': 0.41857901215553284, 'objname': b'bottle', 'bbox': {'x': 0.02848125249147415, 'y': 0.03796946257352829, 'w': 0.03146517649292946, 'h': 0.15615946054458618}, 'bHasMask': 1, 'mYolov5Mask': {'w': 6, 'h': 15, 'data': b'\\x00\\x00\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00'}} {'label': 39, 'prob': 0.4042961299419403, 'objname': b'bottle', 'bbox': {'x': 0.027379659935832024, 'y': 0.037133704870939255, 'w': 0.033295709639787674, 'h': 0.15926814079284668}, 'bHasMask': 1, 'mYolov5Mask': {'w': 6, 'h': 15, 'data': b'\\x00\\x00\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00'}} {'label': 39, 'prob': 0.4118087887763977, 'objname': b'bottle', 'bbox': {'x': 0.028065890073776245, 'y': 0.03647643327713013, 'w': 0.0326821468770504, 'h': 0.15858806669712067}, 'bHasMask': 1, 'mYolov5Mask': {'w': 6, 'h': 15, 'data': b'\\x00\\x00\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00'}}##Body,vehicleandnon motorvehicledetectionThiscodeisusedfordetectingpeople,vehicleandnon motorvehicle.importtimefromaximportpipelinepipeline.load(['libsample_vin_ivps_joint_vo_sipy.so',' p','/home/config/ax_bvc_det.json',' c','2',])whilepipeline.work():time.sleep(0.001)tmp pipeline.result()iftmpandtmp['nObjSize']:foriintmp['mObjects']:x,y,w,h i['bbox']['x'],i['bbox']['y'],i['bbox']['w'],i['bbox']['h']objname,objprob i['objname'],i['prob']print(objname,objprob,x,y,w,h)#iftmp['nObjSize']>10:#tryexit#pipeline.drop()pipeline.drop()b'vehicle' 0.9299032092094421 0.3565574288368225 0.44399410486221313 0.23071418702602386 0.2580929398536682 b'vehicle' 0.9225113391876221 0.357175350189209 0.44230249524116516 0.23054184019565582 0.2606807053089142 b'vehicle' 0.9186123609542847 0.3581112325191498 0.44336238503456116 0.22992925345897675 0.26163965463638306 b'vehicle' 0.5208129286766052 0.3618425130844116 0.4461480975151062 0.23065532743930817 0.2652992308139801 b'vehicle' 0.7194858193397522 0.3608142137527466 0.45302334427833557 0.23270295560359955 0.2703518867492676 b'vehicle' 0.8540934324264526 0.3617907166481018 0.4548843204975128 0.23152287304401398 0.27814221382141113 b'vehicle' 0.8912967443466187 0.3607788681983948 0.4583750367164612 0.2328854203224182 0.27056747674942017 b'vehicle' 0.8969211578369141 0.3522576689720154 0.45107507705688477 0.22706037759780884 0.26078158617019653 b'vehicle' 0.7722539901733398 0.32488399744033813 0.4447280168533325 0.23074783384799957 0.26997989416122437 b'vehicle' 0.8158320784568787 0.31976011395454407 0.46247294545173645 0.23671922087669373 0.28281715512275696 b'vehicle' 0.9343507289886475 0.332416832447052 0.5008321404457092 0.2320593148469925 0.26590874791145325 b'vehicle' 0.896917462348938 0.3266463875770569 0.48811814188957214 0.23444382846355438 0.266757994890213 b'vehicle' 0.7356315851211548 0.31006965041160583 0.45962005853652954 0.23436705768108368 0.26961490511894226##Crowdcountimporttimefromaximportpipelinepipeline.load(['libsample_vin_ivps_joint_vo_sipy.so',' p','/home/config/crowdcount.json',' c','2',])whilepipeline.work():time.sleep(0.001)tmp pipeline.result()iftmpandtmp['nObjSize']:foriintmp['mObjects']:x,y,w,h i['bbox']['x'],i['bbox']['y'],i['bbox']['w'],i['bbox']['h']objname,objprob i['objname'],i['prob']print(objname,objprob,x,y,w,h)#iftmp['nObjSize']>10:#tryexit#pipeline.drop()pipeline.drop()##Humanposturedetectiononax pose pplThesearethedetectionpoints.**0:Nose1:lefteye2:righteye3:leftear4:rightear5:leftshoulder6:rightshoulder7:leftelbow8:rightelbow9:leftwrist10:rightwrist11:lefthip12:righthip13:leftknee14:rightknee15:leftankle16:rightankle**importtimefromaximportpipelinepipeline.load(['libsample_vin_ivps_joint_vo_sipy.so',' p','/home/config/ax_pose.json',' c','2',])whilepipeline.work():time.sleep(0.001)tmp pipeline.result()iftmpandtmp['nObjSize']:foriintmp['mObjects']:print(i)#iftmp['nObjSize']>10:#tryexit#pipeline.drop()pipeline.drop(){'label': 0, 'prob': 0.41659796237945557, 'objname': b'person', 'bbox': {'x': 0.01200273260474205, 'y': 0.0, 'w': 0.9315435290336609, 'h': 0.9421796798706055}, 'bHasBoxVertices': 0, 'bHasLandmark': 17, 'landmark': [{'x': 0.6708333492279053, 'y': 0.23333333432674408}, {'x': 0.6427083611488342, 'y': 0.16851851344108582}, {'x': 0.6520833373069763, 'y': 0.14629629254341125}, {'x': 0.7322916388511658, 'y': 0.5055555701255798}, {'x': 0.7614583373069763, 'y': 0.06481481343507767}, {'x': 0.7541666626930237, 'y': 0.09444444626569748}, {'x': 0.7541666626930237, 'y': 0.1518518477678299}, {'x': 0.7124999761581421, 'y': 0.15925925970077515}, {'x': 0.5041666626930237, 'y': 0.08703703433275223}, {'x': 0.6739583611488342, 'y': 0.07407407462596893}, {'x': 0.690625011920929, 'y': 0.6814814805984497}, {'x': 0.7833333611488342, 'y': 0.25}, {'x': 0.7614583373069763, 'y': 0.25}, {'x': 0.35104167461395264, 'y': 0.6074073910713196}, {'x': 0.3489583432674408, 'y': 0.5777778029441833}, {'x': 0.0572916679084301, 'y': 0.5185185074806213}, {'x': 0.0677083358168602, 'y': 0.5185185074806213}]}##PillowYolov5sobjectdetectionimporttimefromaximportpipelinefromPILimportImage,ImageDraw#readysipeedlogocanvaslcd_width,lcd_height 854,480img Image.new('RGBA',(lcd_width,lcd_height),(255,0,0,200))ui ImageDraw.ImageDraw(img)ui.rectangle((20,20,lcd_width 20,lcd_height 20),fill (0,0,0,0),outline (0,0,255,100),width 20)logo Image.open(\"/home/res/logo.png\")img.paste(logo,box (lcd_width logo.size[0],lcd_height logo.size[1]),mask None)defrgba2argb(rgba):r,g,b,a rgba.split()returnImage.merge(\"RGBA\",(a,b,g,r))canvas_argb rgba2argb(img)pipeline.load(['libsample_vin_ivps_joint_vo_sipy.so',' p','/home/config/yolov5s.json',#' p','/home/config/yolov8.json',' c','2',])whilepipeline.work():time.sleep(0.001)argb canvas_argb.copy()tmp pipeline.result()iftmpandtmp['nObjSize']:ui ImageDraw.ImageDraw(argb)foriintmp['mObjects']:x i['bbox']['x']*lcd_widthy i['bbox']['y']*lcd_heightw i['bbox']['w']*lcd_widthh i['bbox']['h']*lcd_heightobjlabel i['label']objprob i['prob']ui.rectangle((x,y,x+w,y+h),fill (100,0,0,255),outline (255,0,0,255))ui.text((x,y),str(objlabel))ui.text((x,y+20),str(objprob))pipeline.config(\"ui_image\",(lcd_width,lcd_height,\"ARGB\",argb.tobytes()))pipeline.free()##PillowYolov8objectdetection(pybind11)HaveatryonYolov8objectdetectionvia`pybind11`API,the`pybind11`APIsupportssavecameraimageandthereferenceresultordisplaythemonscreenorwebsite.>It'snotstableenough,rerunjupyternotebookifthereissometingerror.importm3axpi#m3axpi.camera(SysCase 0)#switchos04a10#m3axpi.camera(SysCase 2)#defaultgc4653#m3axpi.load(\"/home/config/yolov8.json\")fromPILimportImage,ImageDraw,ImageFontlcd_width,lcd_height,lcd_channel 854,480,4fnt ImageFont.truetype(\"/home/res/sans.ttf\",20)img Image.new('RGBA',(lcd_width,lcd_height),(255,0,0,200))ui ImageDraw.ImageDraw(img)ui.rectangle((20,20,lcd_width 20,lcd_height 20),fill (0,0,0,0),outline (0,0,255,100),width 20)logo Image.open(\"/home/res/logo.png\")img.paste(logo,box (lcd_width logo.size[0],lcd_height logo.size[1]),mask None)whileTrue:rgba img.copy()tmp m3axpi.capture()rgb Image.frombuffer(\"RGB\",(tmp[1],tmp[0]),tmp[3])rgba.paste(rgb,box (0,0),mask None)##camera320x180paste854x480res m3axpi.forward()if'nObjSize'inres:ui ImageDraw.ImageDraw(rgba)ui.text((0,0),\"fps:%02d\"%(res['niFps']),font fnt)forobjinres['mObjects']:x,y,w,h int(obj['bbox'][0]*lcd_width),int(obj['bbox'][1]*lcd_height),int(obj['bbox'][2]*lcd_width),int(obj['bbox'][3]*lcd_height)ui.rectangle((x,y,x+w,y+h),fill (255,0,0,100),outline (255,0,0,255))ui.text((x,y),\"%s:%02d\"%(obj['objname'],obj['prob']*100),font fnt)rgba.paste(logo,box (x+w logo.size[1],y+h logo.size[1]),mask None)m3axpi.display([lcd_height,lcd_width,lcd_channel,rgba.tobytes()])#display(rgb)显示到网页##ImageprocessinganddisplayingbasedonPillow>**Pillow（PIL）**isthePythonImagingLibrary,isusedforimageprocessingpurposeslikeimagestore,imagedisplayandformatconversion.**HereisaexampletousePythonPillow:**!lshome/imagesair.jpg carvana02.jpg\t face5.jpg\t o2_resize.jpg ssd_car.jpg\r aoa 2.jpeg carvana03.jpg\t grace_hopper.jpg pineapple.jpg ssd_dog.jpg\r aoa.jpeg carvana04.jpg\t mobileface01.jpg pose 1.jpeg\t ssd_horse.jpg\r bike.jpg cat.jpg\t\t mobileface02.jpg pose 2.jpeg\r bike2.jpg cityscape.png\t mtcnn_face4.jpg pose 3.jpeg\r cable.jpg dog.jpg\t\t mtcnn_face6.jpg pose.jpg\r carvana01.jpg efficientdet.png mv2seg.png\t selfie.jpgfromPILimportImage,ImageDrawpil_im Image.open('home/images/bike2.jpg','r')draw ImageDraw.Draw(pil_im)draw.arc((0,0,400,400),start 0,end 300,fill 'red',width 3)draw.rectangle((20,20,200,100),fill (100,20,60),outline \"#FF0000\",width 3)pil_im.show()#display(pil_im) [Clickme](https://www.itcodar.com/python/how to show pil image in ipython notebook.html)toknowmoreusageaboutPillow##CalculationonNumpy>NumPy(NumericalPython)isthefundamentalpackageforscientificcomputinginPython.ItisaPythonlibrarythatprovidesamultidimensionalarrayobject,variousderivedobjects(suchasmaskedarraysandmatrices),andanassortmentofroutinesforfastoperationsonarrays,includingmathematical,logical,shapemanipulation,sorting,selecting,I/O,discreteFouriertransforms,basiclinearalgebra,basicstatisticaloperations,randomsimulationandmuchmore.>**WecanuseNumpyonAXera Pi：**importnumpyasnp#'i1','i2','i4','i8'aresameasint8,int16,int32,int64dt np.dtype('i4')print(dt)int32 Visit[Numpy](https://numpy.org/)formoreinformation##UseUSBcamerawithOpencvConnectUSBcamerawithUSB OTGportofyourAXera Pifirst.**ThisistheOpencvexample**,takeanddisplaythephotoviaUSBcamera.importosimportcv2video cv2.VideoCapture(0)foriinrange(30):ret,frame video.read()ifret:cv2.imwrite(\"/tmp/capture.jpg\",frame)os.system(\"fbon&&fbv/tmp/capture.jpg\")![opencv_cream 2.jpg](attachment:opencv_cream 2.jpg)>Visit[Maix IIIAXera PiQ&A](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/faq_axpi.html)iffailingrunning##Playmedia [PlaymediabyPython](https://wiki.sipeed.com/soft/maixpy3/zh/usage/Audio/play_mp4.html)##UseHttporMQTT [Clickme](https://wiki.sipeed.com/soft/maixpy3/zh/usage/net.html)##UseMicrobitwithPinPongonAXera Pi>[PinPong](https://pinpong.readthedocs.io/zh_CN/latest/)isanopensourcehardwarecontrolpythonlibrary,isbasedonFirmataprotocolandsupportMicroPythonlanguage.ConnectMicrobitwithUSB OTGportofyourAXera Pifirst.RunfollowingexamplecodeonAXera Pi,thereis`helloworld`scrolltextonmicrobit.importtimefrompinpong.boardimportBoard,Pinfrompinpong.extension.microbitimport*Board(\"microbit\",\"/dev/ttyACM0\").begin()display.show(Image.HEART)whileTrue:display.scroll(\"helloworld\")__________________________________________ ____ _ ____ / __ \\(_)___ / __ \\____ ____ ____ _ / /_/ / / __ \\/ /_/ / __ \\/ __ \\/ __ `/ / ____/ / / / / ____/ /_/ / / / / /_/ / /_/ /_/_/ /_/_/ \\____/_/ /_/\\__, / v0.4.9 Designed by DFRobot /____/ __________________________________________ [01] Python3.9.2 Linux 4.19.125 armv7l with glibc2.31 Board: MICROBIT selected > board: MICROBIT serial: /dev/ttyACM0 [10] Opening /dev/ttyACM0 [32] Firmata ID: 2.7 [22] Arduino compatible device found and connected to /dev/ttyACM0 [40] Retrieving analog map... [42] Auto discovery complete. Found 26 Digital Pins and 6 Analog Pins All right. PinPong go... **Visit[PINPONG](https://pinpong.readthedocs.io/zh_CN/latest/index.html)formoreinformation**##ControlArduinoUNOwithPinPongonAXera PiConnectArduinoUNOwithUSB OTGportofyourAXera Pifirst.RunfollowingexamplecodeonAXera Pi,LEDonArduinoUNOblinks.importtimefrompinpong.boardimportBoard,PinBoard(\"uno\",\"/dev/ttyUSB0\").begin()led Pin(Pin.D13,Pin.OUT)#InitpindirectionwhileTrue:led.value(1)#Highvoltageoutputprint(\"1\")#Printinformationtime.sleep(1)#Wait1secondled.value(0)#Lowvoltageoutputprint(\"0\")#Printinformationtime.sleep(1)#Wait1second__________________________________________ ____ _ ____ / __ \\(_)___ / __ \\____ ____ ____ _ / /_/ / / __ \\/ /_/ / __ \\/ __ \\/ __ `/ / ____/ / / / / ____/ /_/ / / / / /_/ / /_/ /_/_/ /_/_/ \\____/_/ /_/\\__, / v0.4.9 Designed by DFRobot /____/ __________________________________________ [01] Python3.9.2 Linux 4.19.125 armv7l with glibc2.31 Board: UNO selected > board: UNO serial: /dev/ttyUSB0 [10] Opening /dev/ttyUSB0 [32] Firmata ID: 2.7 [22] Arduino compatible device found and connected to /dev/ttyUSB0 [40] Retrieving analog map... [42] Auto discovery complete. Found 20 Digital Pins and 6 Analog Pins All right. PinPong go... 1 0 1 0 1 user quit process![uno 3.jpg](attachment:uno 3.jpg) **[Clickme](https://pinpong.readthedocs.io/zh_CN/latest/2.pinpong%E7%A4%BA%E4%BE%8B/%E7%A4%BA%E4%BE%8B%E7%A8%8B%E5%BA%8F blink.html)toseemoreinformation.**"},"/hardware/en/modules/Gamepad.html":{"title":"Sipeed Gamepad","content":"# Sipeed Gamepad ## 概述 ![](./../../assets/spmod/spmod_amigo_hendle/Gamepad141.jpg) 采用主控芯片： GD32F150G 通信接口：IIC（8P座子或者Grove 4P 2.0mm座子） 板载10个按键（每个按键都连接到独立的GPIO） 板载指示灯 ## 硬件参数 项目 参数 MCU GD32F150G（Arm Cortex M3） 主频 72Mhz 存储 64KB Flash, 8KB SRAM 按键 10个按键（每个按键都连接到独立的GPIO） 下载接口 SWD下载 晶振 24MHz无源晶振 LED 板载1个电源指示灯和2个LED USB接口 板载1个USB TYPE C 母座（连接到MCU的USB） ![](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_5.png) ## 手柄接口 ![](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_3.jpg) ![](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_4.jpg) 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 NC NC 悬空引脚，无功能 3 NC NC 悬空引脚，无功能 4 SDA I/O 模块I2C串行数据引脚 5 3V3 V 模块电源输入正 6 NC NC 悬空引脚，无功能 7 NC NC 悬空引脚，无功能 8 SCL I 模块I2C串行时钟引脚 链接方式 单手柄： ![](./../../assets/spmod/spmod_amigo_hendle/Gamepad.143.jpg) 双手柄： ![等待完善](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_6.png) ## 软件描述 项目 参数 开发环境 Maixpy IDE、 PlatformIO IDE 开发语言 C语言、 python 通讯协议 IIC > GD32F150G源码和例程 [https://github.com/sipeed/GD32F150 I2C Handle](https://github.com/sipeed/GD32F150 I2C Handle) ### 手柄测试 单手手柄输入测试 ```python from machine import I2C import nes, lcd from sound import CubeAudio import sys, time from fpioa_manager import fm from Maix import FPIOA, GPIO # B A SEL START UP DOWN LEFT RIGHT X Y # 1 2 4 8 16 32 64 128 254 253 i2c I2C(I2C.I2C2, freq 400*1000, sda 27, scl 24) lcd.init(freq 15000000) lcd.register(0x36, 0x20 state 0 import time i 0 while True: dev i2c1.scan() print(dev) dev i2c2.scan() print(dev) time.sleep(0.5) try: #i2c.writeto(0x4A, b'0') tmp (i2c1.readfrom(0x4A, 2)) print('{} {}'.format(int(tmp[0]), int(tmp[1]))) except Exception as e: print(e) ``` 双手柄输入测试 ```python from machine import I2C import nes, lcd from sound import CubeAudio import sys, time from fpioa_manager import fm from Maix import FPIOA, GPIO # B A SEL START UP DOWN LEFT RIGHT X Y # 1 2 4 8 16 32 64 128 254 253 i2c I2C(I2C.I2C2, freq 400*1000, sda 27, scl 24) lcd.init(freq 15000000) lcd.register(0x36, 0x20 state 0 import time i 0 while True: dev i2c1.scan() print(dev) dev i2c2.scan() print(dev) time.sleep(0.5) try: #i2c.writeto(0x4A, b'0') tmp (i2c1.readfrom(0x4A, 2)) print('{} {}'.format(int(tmp[0]), int(tmp[1]))) except Exception as e: print(e) try: #i2c.writeto(0x42, b'0') tmp (i2c2.readfrom(0x42, 2)) print('{} {}'.format(int(tmp[0]), int(tmp[1]))) except Exception as e: print(e) ``` 测试代码输出 ```python 0 252 #没有输出 1 252 #按下 B 键 2 252 #按下 A 键 4 252 #按下 SEL 键 8 252 #按下 START 键 16 252 #按下 UP 键 32 252 #按下 DOWN 键 64 252 #按下 LEFT 键 128 252 #按下 RIGHT 键 0 254 #按下 X 键 0 253 #按下 Y 键 ``` ### 游戏测试 [MaixPy NES](/soft/maixpy/zh/api_reference/media/nes.md) ## 资料下载 [Gamepad](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Gamepad)"},"/hardware/en/modules/micarray.html":{"title":"MicArray 麦克风阵列","content":"# MicArray 麦克风阵列 ## Summary Sipeed microphone array consists of six microphones along the board and a center microphone. The 12 leds on the array board can be used to visualize and identify the location of the sound source, which can be used to do the sound source localization experiment. Get it: [Aliexpress](https://www.aliexpress.com/item/1005002687541143.html) [TaoBao](https://item.taobao.com/item.htm?id 591820993474) ## Product figure <img src \"./../../assets/spmod/spmod_micarray/spmod_micarray.png\" width 55%> [Click me to download datasheet](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed R6+1_MicArray/Specifications/Sipeed%20R6+1%20%E9%BA%A6%E5%85%8B%E9%A3%8E%E9%98%B5%E5%88%97%20%E8%A7%84%E6%A0%BC%E4%B9%A6%20V1.0.pdf) [Click me to download schematic](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed R6+1_MicArray/Sipeed R6+1_MicArray_11.16/Sipeed R6+1_MicArray_11.16(Schematic).pdf) [Click me to download Assembly_drawing](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed R6+1_MicArray/Sipeed R6+1_MicArray_11.16/Sipeed R6+1_MicArray_11.16(Assembly%20drawing).pdf) ## Introduction MEMS microphone :7 MSM261S4030H0 make up the array [Click me to download datasheet of MSM261S4030H0](https://dl.sipeed.com/fileList/MAIX/HDK/Chip_DS/%E9%BA%A6%E5%85%8B_MSM261S4030H0(%E4%BD%BF%E7%94%A8%E7%9A%84).pdf) Sensitivity : 26(dB,dBFS @1kHz 1Pa) Signal noise ratio : 57dB(20kHz bandwidth, A weighted) Size :78.1*88.8mm LED :12 SK9822 LED make up the round led array [Click me to download datasheet of SK9822](https://dl.sipeed.com/fileList/MAIX/HDK/Chip_DS/sk9822_micarray_led.PDF) Multiple leds are cascaded through dual signal lines 8 Bit(256 levels) for color adjustment,5 Bit(32 levels) for brightness adjustment Connector: Supports 2 x 5P 2.54mm terminals and a 10P 0.5mm FPC connector ## Parameters Item Parameter Sound pressure level 140 dB SPL Sensitivity 26(dB,dBFS @1kHz 1Pa) Signal noise ratio 57 dB (20kHz bandwidth,A weighted) <br>THD<1% (100dB SPL @1kHz S Nom,Rload>2k ) Clock frequency 1.0 4.0Mhz(Normal mode) <br>150 800khz(Low energy mode) ## Pin definition Pin number Pin name Type Pin description 1 VIN VCC Power input pin 2 GND GND Power ground pin 3 MIC_D0 I/O Serial data output from I²S interface of microphone 0 and microphone 1 4 MIC_D1 I/O Serial data output from I²S interface of microphone 2 and microphone 3 5 MIC_D2 I/O Serial data output from I²S interface of microphone 4 and microphone 5 6 MIC_D3 I/O Serial data output from I²S interface of center microphone 7 MIC_WS I/O I²S interface serial data word selection 8 MIC_CK I/O I²S interface serial clock 9 LED_CK I/O LED serial clock 10 LED_DA I/O LED serial data <img src \"./../../assets/spmod/spmod_micarray/MicArray.png\" width 55%> ## Example code ### Connection Jumper Wire connection Microphone array Pins on development board Parameter in code VIN 3.3v/5v —— GND GND —— LED_CK I/O Port sk9822_clk LED_DA I/O Port sk9822_dat MIC_D0 I/O Port i2s_d0 MIC_D1 I/O Port i2s_d1 MIC_D2 I/O Port i2s_d2 MIC_D3 I/O Port i2s_d3 MIC_WS I/O Port i2s_ws MIC_CK I/O Port i2s_sclk Because of the FPIOA feature of K210, each peripheral can be mapped to any pin. Therefore, connect the `I/O port` in the above table with the pins with digital identification on your board. Those with special identification such as GND are not the so called digital identification pins. After connecting the pins, you can see the description of the pins in the code below. ### Burn firmware Go to [Download station](https://dl.sipeed.com/shareURL/MAIX/MaixPy/release/master) to download firmware, download the default firmware described in [Firmware naming instructions](https://wiki.sipeed.com/soft/maixpy/en/get_started/upgrade_maixpy_firmware.html#Get the firmware) . ### Micropython Code ```python from Maix import MIC_ARRAY as mic import lcd lcd.init() mic.init() #mic.init(i2s_d0 23, i2s_d1 22, i2s_d2 21, i2s_d3 20, i2s_ws 19, i2s_sclk 18, sk9822_dat 24, sk9822_clk 25) while True: imga mic.get_map() b mic.get_dir(imga) a mic.set_led(b,(0,0,255)) imgb imga.resize(160,160) imgc imgb.to_rainbow(1) a lcd.display(imgc) mic.deinit() ``` According to the pin number of your own connection, `init(i2s_d0 23, i2s_d1 22, i2s_d2 21, i2s_d3 20, i2s_ws 19, i2s_sclk 18, sk9822_dat 24, sk9822_clk 25) `. For example, if the `MIC_D0` on the microphone array is connected to the pin labeled 25 on the K210 board, then the corresponding parameter in this code needs to be changed to `i2s_d0 25`, the other seven pins should be changed by the same way. Since configuration of everyone is different, there are no identical connection instructions for using jumper wires, modify the pin parameters individually, and don't forget to delete the comment before `mic.init(...). `(just delete `#`). > Make sure not use the pin which has been used for peripherals(Like camera pins or lcd pins should not bu used for this micarray pin), which will make amazing error. ### C code #### SK9822 driver codes For reference only, source：[github](https://github.com/sipeed/MaixPy v1blob/master/components/kendryte_sdk/src/sipeed_sk9822.c); It is recommended to copy the code to the computer local editor to view if analyzing the code. <details> <summary>sipeed_sk9822.c</summary> <pre class \"language none line numbers language c\"><code class \"language c\">#include \"sipeed_sk9822.h\" #define LED_NUM 12 #define SK9822_DAT_SET() \\ { \\ gpiohs >output_val.bits.b27 1; \\ } #define SK9822_DAT_CLR() \\ { \\ gpiohs >output_val.bits.b27 0; \\ } #define SK9822_CLK_SET() \\ { \\ gpiohs >output_val.bits.b28 1; \\ } #define SK9822_CLK_CLR() \\ { \\ gpiohs >output_val.bits.b28 0; \\ } static void sk9822_init(void) { gpiohs_set_drive_mode(SK9822_DAT_GPIONUM, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(SK9822_CLK_GPIONUM, GPIO_DM_OUTPUT); gpiohs_set_pin(SK9822_DAT_GPIONUM, 0); gpiohs_set_pin(SK9822_CLK_GPIONUM, 0); } void sk9822_send_data(uint32_t data) { for (uint32_t mask 0x80000000; mask > 0; mask >> 1) { SK9822_CLK_CLR(); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); // usleep(1); if (data & mask) { SK9822_DAT_SET(); } else { SK9822_DAT_CLR(); } SK9822_CLK_SET(); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); // usleep(2); } } //32bit 0 void sk9822_start_frame(void) { sk9822_send_data(0); } //32bit 1 void sk9822_stop_frame(void) { sk9822_send_data(0xffffffff); } //1 1 1 1 gray b g r void sk9822_data_one_led(uint8_t gray, uint8_t r, uint8_t g, uint8_t b) { uint32_t tosend; gray & 0x1f; //for make sure no error data in tosend ((0xe0 gray) << 24) (b << 16) (g << 8) r; sk9822_send_data(tosend); } uint32_t sk9822_gen_data_one_led(uint8_t gray, uint8_t r, uint8_t g, uint8_t b) { uint32_t tosend; gray & 0x1f; //for make sure no error data in tosend ((0xe0 gray) << 24) (b << 16) (g << 8) r; return tosend; } //first color1, then msleep interval, then color2, last msleep interval void sk9822_flash(uint32_t color1, uint32_t color2, uint32_t interval) { uint8_t index; color1 0xe0000000; color2 0xe0000000; sk9822_start_frame(); for (index 0; index < LED_NUM; index++) { sk9822_send_data(color1); } sk9822_stop_frame(); msleep(interval); sk9822_start_frame(); for (index 0; index < LED_NUM; index++) { sk9822_send_data(color2); } sk9822_stop_frame(); msleep(interval); } static void arraymove(uint32_t array[], uint8_t len) { uint8_t index; uint32_t tmp; tmp array[0]; for (index 0; index < len 1; index++) { array[index] array[index + 1]; } array[len 1] tmp; } //呼吸 //跑马灯 //方位 void sk9822_horse_race(uint8_t r, uint8_t g, uint8_t b, uint32_t interval, uint8_t times) { uint32_t led_frame[LED_NUM] {0}; uint8_t i, index; for (index 0; index < 12; index++) { led_frame[index] 0xff000000; } for (index 0; index < 6; index++) { // led_frame[index] sk9822_gen_data_one_led((0xe0(index*4)),r 40*index,g 30*index,b 20*index); led_frame[index] sk9822_gen_data_one_led((0xe0 (32 index * 4)), r, g, b); } for (index 0; index < times; index++) { while (1) { sk9822_start_frame(); for (i 0; i < 12; i++) { sk9822_send_data(led_frame[i]); } sk9822_stop_frame(); arraymove(led_frame, LED_NUM); msleep(interval); } } } void sk9822_breath(uint8_t r, uint8_t g, uint8_t b, uint32_t interval) { uint8_t index, cnt, dir; uint32_t color sk9822_gen_data_one_led(0xff, r, g, b); cnt 0; dir 1; while (1) { if (cnt > 30) { dir !dir; cnt 0; } cnt++; color sk9822_gen_data_one_led((0xe0 (dir ? cnt : 31 cnt)), r, g, b); sk9822_start_frame(); for (index 0; index < LED_NUM; index++) { sk9822_send_data(color); } sk9822_stop_frame(); msleep(interval); } } void sipeed_init_mic_array_led(void) { sk9822_init(); //flash 3 times sk9822_flash(0xffeec900, 0xffff0000, 200); sk9822_flash(0xffeec900, 0xff00ff00, 200); sk9822_flash(0xffeec900, 0xff0000ff, 200); } // void sipeed_calc_voice_strength(uint8_t voice_data[]) // { // uint32_t tmp_sum[12] {0}; // uint32_t led_color[12]; // uint8_t i, index, tmp; // for (index 0; index < 12; index++) // { // tmp_sum[index] 0; // for (i 0; i < voice_strength_len[index]; i++) // { // tmp_sum[index] + voice_data[voice_strength[index][i]]; // } // tmp (uint8_t)tmp_sum[index] / voice_strength_len[index]; // led_brightness[index] tmp > 15 ? 15 : tmp; // } // sk9822_start_frame(); // for (index 0; index < 12; index++) // { // led_color[index] (led_brightness[index] / 2) > 1 ? (((0xe0 (led_brightness[index] * 2)) << 24) 0xcd3333) : 0xe0000000; // sk9822_send_data(led_color[index]); // } // sk9822_stop_frame(); // } </code> </pre> </details> #### Micarray code For reference only, source：[github](https://github.com/sipeed/MaixPy v1blob/master/components/micropython/port/src/Maix/Maix_mic_array.c); It is recommended to copy the code to the computer local editor to view if analyzing the code. ## Other information [Hardware information](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed R6+1_MicArray) ## More Usage Go to [bbs](https://bbs.sipeed.com)(Only Chinese) for more. ## Question ### This error occurs ![error_code](./../../assets/spmod/spmod_micarray/spmod_micarray_err.png) Use other IO port."},"/hardware/en/modules/micarray_usbboard_bl616.html":{"title":"MicArray UAC Drive Board (MA-USB8)","content":"# MicArray UAC Drive Board (MA USB8) ## Introduction ![](../../assets/modules/micarray_usbboard_bl616/product front.png) Driving a [microphone array module]((./micarray.md)), it provides UAC2.0 + CDC ACM + UART interfaces. UAC2.0: 8CH S16_LE 48000HZ CDC ACM: 16x16 Hotmap Frame UART: 16x16 Hotmap Frame on baudrate:2000000 ### Hotmap Frame Format: frame bytes value head 16 16x 0xFF data 16x16 (HxW) ... ## Connection Choose one of the following connection methods: Preferred: USB < > UAC2.0 + CDC ACM (Full functionality: obtain audio data and sound field map simultaneously) Or: UART/USB2TTL < > UART (Limited performance scenarios, e.g., MCU: obtain sound field map only) ### Linux ![](../../assets/modules/micarray_usbboard_bl616/dmesg.png) ![](../../assets/modules/micarray_usbboard_bl616/lsusb.png) ### Windows ![](../../assets/modules/micarray_usbboard_bl616/devmgmt.png) ## Usage ### USB UAC2.0 (Audacity) ![](../../assets/modules/micarray_usbboard_bl616/audacity linux sine1k.png) **Windows WASAPI** <div style \"display: flex; justify content: space between;\"> <img src \"../../assets/modules/micarray_usbboard_bl616/audacity windows wasapi step 1.png\" style \"width: 48%;\"> <img src \"../../assets/modules/micarray_usbboard_bl616/audacity windows wasapi step 2.png\" style \"width: 48%;\"> </div> ### USB UAC2.0 Beamforming (Audacity) This board supports 12 direction beamforming, which suppresses audio from other directions than the user set monitoring direction, thereby achieving noise reduction and gain for the target monitoring direction. The following example uses a sine wave audio test for demonstration: Mic0(CH0) is near the 500HZ SINE wave and Mic3(CH3) is near the 1000HZ SINE wave. Type `0` in serial so that CH6 is the output of beamforming at CH0. Obviously on CH6, the gain of the 500 Hz sine wave signal near CH0 has been increased, while the impact of the 1000 Hz sine wave signal from other directions has been eliminated. ![](../../assets/modules/micarray_usbboard_bl616/sine500hz@ch0_and_sine1000hz@ch3_with_beamforming@ch0.png) ### USB CDC ACM RAW (Minicom) and USB2TTL UART HEX CMAP (Picocom) ![](../../assets/modules/micarray_usbboard_bl616/minicom_acm&picocom_uart combine.png) ### USB CDC ACM RAW (Minicom) `minicom D /dev/ttyACM0 H` ![](../../assets/modules/micarray_usbboard_bl616/minicom_acm raw.png) ### USB2TTL UART RAW (Minicom) `minicom D /dev/ttyUSB0 b 2000000 H` ![](../../assets/modules/micarray_usbboard_bl616/minicom_uart raw.png) ### USB2TTL UART RAW,HEX CMAP (Picocom) 1. `picocom b 2000000 /dev/ttyUSB0` ![](../../assets/modules/micarray_usbboard_bl616/picocom_uart raw errcode.png) 2. type `F` and then `C` <div style \"display: flex; justify content: space between;\"> <img src \"../../assets/modules/micarray_usbboard_bl616/picocom_uart hex.png\" style \"width: 45%;\"> <img src \"../../assets/modules/micarray_usbboard_bl616/picocom_uart hex cmap.png\" style \"width: 45%;\"> </div> 3. type `f` ![](../../assets/modules/micarray_usbboard_bl616/picocom_uart hex to raw errcode.png) ## Commands Command Input (Lower/Uppercase: Off/On) Default Remarks Input Sources Set UAC CH6 Beamforming Direction Angle 0,1,..9,A,B 0 Actual angle input value × 30 (0,1,..B > 0°,30°,...,330°). Corresponds to the clockwise direction starting from microphone 0, as per the [microphone array](./micarray.html). Any UART Sound Source Map Pseudocolor Mapping Toggle c, C c Requires precondition: UART 16x16 sound source map printing enabled. UART input only UART Internal Debug Info Toggle d, D d Controls internal debugging output. UART input only LED Real Time Sound Direction Indicator Toggle e, E E Controls LED indicators. Any UART 16x16 Sound Field Map Print Toggle f, F f Toggles printing of 16x16 sound source map (ASCII). UART input only Restore Default Settings R \\ Restores a series of configurations to default values. Any ## Firmware Download it from [here](../../assets/modules/micarray_usbboard_bl616/firmware/MA USB8 250822.bin) and then refer to [this guide](../logic_analyzer/combo8/update_firmware.html#Burn firmware) to update the firmware."},"/hardware/en/no_translate.html":{"title":"no translation","content":" title: no translation class: md_page <div id \"visit_from\"></div> <div id \"no_translate_hint\">This page not translated yet</div> <div> <span id \"visit_hint\">Please visit</span> <a id \"translate_src\"></a> </div> <div> <script> function getQueryVariable(variable) { var query window.location.search.substring(1); var vars query.split(\"&\"); for (var i 0;i<vars.length;i++) { var pair vars[i].split(\" \"); if(pair[0] variable){return pair[1];} } return(false); } var ref getQueryVariable(\"ref\"); var from getQueryVariable(\"from\"); var link document.getElementById(\"translate_src\"); var fromDis document.getElementById(\"visit_from\"); link.href ref; link.text ref; fromDis.innerHTML from; </script> </div>"}}