{"/soft/longan/en/get_started/debug.html":{"title":"Debugging Longan Nano","content":"Debugging Longan Nano ## Connect the debugger Development board Debugger : : : : JTDO TDO JTDI TDI JTCK TCK JTMS TMS 3V3 3V3 GND GND ## Modify the configuration file Modify the project configuration file `platformio.ini`, add below ```ini debug_tool jlink ``` Select according to the actual debugger model. List of currently supported debuggers * `jlink` * `gd link` * `ft2232` * `sipeed rv debugger` * `altera usb blaster` * `um232h` * `RV Link` ## One click debugging VSCode switch to the left side of the `DEBUG` screen, click the green arrow to debug. ![](../../assets/pio_debug_longan.png)."},"/soft/longan/en/get_started/blink.html":{"title":"Getting to Blinky","content":"Getting to Blinky ## Create a LED Blink project * Open the PIO home page selection `Project Examples` ![](http://blog.sipeed.com/wp content/uploads/2019/04/d977e844490e6ccc4625f701883a29f5.png) * Select `arduino blink` Click `Import` Import sample program (first need to download the schema file and import tool, It may take long time to download) ![](http://blog.sipeed.com/wp content/uploads/2019/04/82943a6b74077e6210e2d9421cb5438f.png) * You can see the sample project after the import is successful. ![](http://blog.sipeed.com/wp content/uploads/2019/04/1262373ca7b0b483e30dac1124adaabf.png) ## Project configuration file * We first need to edit the configuration file works `platformio.ini` according to their own development board model, delete the other development board environmen. ![](../../assets/pio_ini_cfg.png) Configuration example ```ini [env:sipeed longan nano] platform gd32v ;Platform, choose gd32v framework arduino ;Optional gd32vf103 sdk or arduino board sipeed longan nano ; Development board monitor_speed 115200 ; Serial monitor baudrate upload_protocol serial ; Download tool Default serial port, optional jlink, gd link, dfu, etc. debug_tool jlink ; Debugging tool default jlink, optional sipeed rv debugger, etc. ``` PIO can implement setting macro definitions in the configuration file, control custom functions such as compilation process, etc. For advanced usage, please refer to [PIO official documentation](https://docs.platformio.org/en/latest/projectconf.html). ## One click compilation Click on the lower left corner `Build` to build the project ![](../../assets/pio_complie.png) ## Connect to the development board ### Serial ISP download * Prepare the USB to serial downloader * Connect development board and downloader * Modify the `platformio.ini` file and add the following line: ```ini upload_protocol serial ``` * Development board hold down the `BOOT` key, then press the `RESET` button to restart development board and then release the `BOOT` button to enter download mode development board. ### JTAG download * Prepare J link or Sipeed RV Debugger * Connection development board * Modify the `platformio.ini` file, add the following line: ```ini upload_protocol jlink ``` or ```ini upload_protocol sipeed rv debugger ``` ### USB DFU download * If using it for the first time then you need to install libusb driver, please refer to this guide [using Zaidig install the driver](#install drivers using zadig). * Prepare the USB Type C cable * Use a data cable to connect development board to your computer. * Modify the `platformio.ini` file, add the following line: ```ini upload_protocol dfu ``` * Development board hold down the `BOOT` key, then press the `RESET` button to restart development board and then release the `BOOT` button to enter DFU mode. ## One click download After selecting the download method according to the above steps, you can use the PIO built in tool to download it with one click. Click on the lower left corner `Upload` to upload the program to the development board. ![](../../assets/pio_upload.png) ## Install drivers using Zadig PIO has a built in dfu util download tool. To use this tool, you need to install the libusb driver for the development board. (Note: different from GD official driver) It is recommended to install the winusb driver via Zadig. [download link](https://github.com/pbatard/libwdi/releases/download/b721/zadig 2.4.exe) Open Zadig after successful download Select GD32V in the drop down bar, replace the driver with WinUSB, click the Replace button, and the replacement will succeed. ![](../../assets/dfu_zadig.png) ### USB DFU download Download the DFU tool：http://dl.sipeed.com/LONGAN/Nano/Tools/GD32_MCU_Dfu_Tool_V3.8.1.5784_1.rar Unzip two folders： GD32 MCU Dfu Drivers_v1.0.1.2316 and GD32 MCU Dfu Tool_v3.8.1.5784 First enter the driver folder, install the corresponding driver file, pay attention to run with administrator privileges ![](../../assets/examples/how_to_install_dfu.png) Run GD32 MCU Dfu Tool.exe Plug Longan Nano into the computer, press and hold the Boot0 key, short press the Reset key, then release the Boot0 key, you can see that the GD32VF chip is recognized in the DFU tool. Select the corresponding firmware file, and check the checksum after burning. Click OK to burn. After the burning is completed, it will not be reset automatically. You need to manually press the reset button to check the running effect. ![](../../assets/examples/how_to_use_dfu.png)"},"/soft/longan/en/get_started/pio.html":{"title":"PIO configuration","content":"PIO configuration ## Install VSCode VS CODE is a more common development tool. Go to the VSCode official website and download and install the installation package for the corresponding operating system version. ## Install the PIO plugin Open VSCode > click on the left extension > search for PlatformIO > click install plugin > wait for the installation to complete > restart VSCODE ![](http://blog.sipeed.com/wp content/uploads/2019/04/0d501a8515a735fba54e2f5de908cd1e.png) ## Install the GD32V platform definition PIO currently offers both **command line** and **graphical interface** installation. The following will introduce: (PS: Recommended command line, because you can see the download progress bar.) ### Command line Click the PlatformIO logo on the left > click New Terminal at the bottom left > execute the following installation command in the terminal window * Release version (stable version) ``` platformio platform install gd32v ``` * Development version (synchronized with Github) ``` platformio platform install https://github.com/sipeed/platform gd32v ``` ![](../../assets/pio_install_gd32v.png) Note: Due to the domestic network environment, the installation process takes a long time, please be patient. ### Graphical interface Open VS CODE > click on the PIO icon on the left > click on the Open option at the bottom left > click on the Platforms page > click on Advanced Installation to open the add window ![](../../assets/pio_install_add_gd32v_step1.png) Enter the following URL in the window that opens ``` https://github.com/sipeed/platform gd32v.git ``` Click Install to add it. ![](../../assets/pio_install_add_gd32v_step2.png) Wait patiently to install successfully. (The installation failure is mostly for network reasons, please try again after replacing the network environment) ![](../../assets/pio_install_add_gd32v_step3.png)"},"/soft/longan/en/get_started/rv-link.html":{"title":"Using RV-LINK","content":"Using RV LINK ## What is RV LINK **RV LINK** is a simulation based firmware development board RISC V, by programming **RV LINK** firmware can be **Sipeed Longan Nano** development board into a jtagdebugger for debugging another piece Longan or other development support jtag debugging board. RV LINK project address: [https://gitee.com/zoomdy/RV LINK](https://gitee.com/zoomdy/RV LINK) ## Burn RV LINK firmware ### Using the PlatformIO project to burn a key * Download RV LINK source code Project source code download address: [http://dl.sipeed.com/LONGAN/Nano/Tools/RV LINK pio src v0.1.zip](http://dl.sipeed.com/LONGAN/Nano/Tools/RV LINK pio src v0.1.zip) It can also be downloaded from the official RV LINK project: [https://gitee.com/zoomdy/RV LINK](https://gitee.com/zoomdy/RV LINK) * Open the project directory with VSCODE Extract the source code downloaded above into a separate folder and open the source folder using VSCODE As shown below: ![](../../assets/pio_open_rvlink.png) The firmware is usually burned using the DFU method, and the configuration file **does not need to be** modified. If you need to change the programming mode, you can modify `platformio.ini` to modify the file, please refer to the specific configuration:[modify the project configuration file](blink.md/#project configuration file) * Burn firmware with PIO After connecting the development board, after the development board enters the burning mode, click the arrow symbol in the lower left corner to burn. After the programming is successful, you can see the green light flashing on the development board. After connecting the development board to the USB port of the computer, you can see that there is one more serial device in the device manager. At this point the Longan board successfully became the RV LINK debugger. ### Other burning methods Reference Document: [Turning the Longan Nano Development Board into a RISC V Emulator](https://gitee.com/zoomdy/RV LINK/wikis/%E5%B0%86%20Longan%20Nano%20%E5%BC%80%E5%8F%91%E6%9D%BF%E5%8F%98%E6%88%90%20RISC V%20%E4%BB%BF%E7%9C%9F%E5%99%A8) ## Debugging with RV LINK ### Connecting the development board Connect the development board that brushes the RV LINK firmware to the jtag of the development board to be debugged. RV LINK To be debugged development board : : : : JTDO JTDO JTDI JTDI JTCK JTCK JTMS JTMS 3V3 3V3 GND GND ### Using RV LINK in the PlatformIO IDE RV LINK in the PlatformIO IDE can support one button boot debugging just like any other debugger. Only in the project `platformio.ini` configuration file, specify the debug options and debug port option. Sample code ```ini [env:sipeed longan nano] platform gd32v framework gd32vf103 sdk board sipeed longan nano monitor_speed 115200 upload_protocol rv link ; rv link download option debug_tool rv link ; rv link debug option debug_port COM2 ; Required with rv link Required debugger serial port ``` ### Using RV LINK on other platforms Reference [RV LINK WIKI](https://gitee.com/zoomdy/RV LINK/wikis/)"},"/soft/longan/en/get_started/sipeed-debugger.html":{"title":"Using the Sipeed debugger","content":"Using the Sipeed debugger ## Sipeed rv debugger ## Sipeed rv debugger lite"},"/soft/longan/en/index.html":{"title":"Longan Documentation","content":"Longan Documentation <div class \"title_pic\"> <img src \"../assets/sipeed_longan_logo.jpg\" height \"60\"> <img src \"../assets/icon_sipeed2.png\" height \"60\"> </div> ## What is Longan Longan Nano is a GD32VF103CBT6 based minimal development board based on GigaDevice's latest RISC V 32 bit core microcontroller. Convenient for students, engineers, geeks and enthusiasts to access the latest generation of RISC V processors. In the heart of Longan Nano is a GigaDevice's GD32VF103CBT6, based on [Nucleisys](http://www.nucleisys.com/) Bumblebee kernel (support RV32IMAC instruction sets and ECLIC rapid interrupt). You can download instruction set documents here: [http://dl.sipeed.com/LONGAN/Nano/DOC/](http://dl.sipeed.com/LONGAN/Nano/DOC/). The chip has built in 128KB Flash, 32KB SRAM, and peripherals listes below: * 4 x universal 16 bit timer * 2 x basic 16 bit timer * 1 x advanced 16 bit timer * Watchdog timer * RTC * Systick * 3 x USART * 2 x I2C * 3 x SPI * 2 x I2S * 2 x CAN * 1 x USBFS(OTG) * 2 x ADC(10 channel) * 2 x DAC Longan Nano development board is breadboard friendly. It has onboard 8M passive crystal, 32.768KHz RTC low speed crystal, mini TF card slot, and use the latest Type C USB interface. ## How to develop Longan Nano supports development using the VS CODE based under PlatformIO IDE environment, supporting one click project configuration, compilation, download and debugging. See the installation and tutorial here: [PIO configuration](./get_started/pio.html). ![pio_debug](../assets/longan_pio_debug.jpg) ## PIN Map ![](../assets/Longan nano_PINOUT.svg)"},"/soft/longan/en/no_translate.html":{"title":"no translation","content":" title: no translation class: md_page <div id \"visit_from\"></div> <div id \"no_translate_hint\">This page not translated yet</div> <div> <span id \"visit_hint\">Please visit</span> <a id \"translate_src\"></a> </div> <div> <script> function getQueryVariable(variable) { var query window.location.search.substring(1); var vars query.split(\"&\"); for (var i 0;i<vars.length;i++) { var pair vars[i].split(\" \"); if(pair[0] variable){return pair[1];} } return(false); } var ref getQueryVariable(\"ref\"); var from getQueryVariable(\"from\"); var link document.getElementById(\"translate_src\"); var fromDis document.getElementById(\"visit_from\"); link.href ref; link.text ref; fromDis.innerHTML from; </script> </div>"}}