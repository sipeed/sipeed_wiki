{"/soft/Tang/en/Analogic/Tang_primer/index.html":{"title":"Tang Primer Documentation","content":" title: Tang Primer Documentation # Tang Primer Docs Tang Primer, an extremely polished domestic open source RISC V development board. Litchi sugar was born in the tide of domestic chip oscillations. After three months of growth and transformation, it finally reached the stage of open source in July 2018. Litchi sugar not only takes on the expectations of open source developers, but also promotes the development and education related to RISC V architecture in China, and introduces an excellent development board in China to the world. ![Tang](./images/tang.jpg)"},"/soft/Tang/en/Analogic/Tang_primer/risc-v-core/_index.en.html":{"title":"","content":"+++ title \"Working with RISC V\" date 2019 02 23T13:44:08+05:30 weight 8 chapter true pre \"<b>4. </b>\" +++ ### Chapter 4 # Working with RISC V Here you can learn more about different RISC V Implementations ported to Tang Primer board. This chapter covers the basics of using these RV cores and some examples to get you started on awesome RISC V ISA. 1. [Hummingbird Core](/en/risc v core/hummingbird) 2. [PicoRV32 Core](/en/risc v core/picorv32)"},"/soft/Tang/en/Analogic/Tang_primer/risc-v-core/hummingbird/_index.en.html":{"title":"Hummingbrid Core","content":" title: \"Hummingbrid Core\" date: 2019 02 23T13:51:21+05:30 weight: 5 draft: false ## Download the SDK We have assembled an All In One SDK that includes SiRV SDK Toolchain, and OpenOCD. You can download the SDK from given link below. <i class \"fas fa download\"></i> [sirv e sdk.tar.lrz](https://github.com/kprasadvnsi/tang doc/releases/download/1.0.0/sirv e sdk.tar.lrz) ## Configuring the working environment Extract the downloaded archive to the current working directory. ``` lrzuntar sirv e sdk.tar.lrz ``` > You will need **lrzip** for the above command to work. Install it using the following command. > `sudo apt get install lrzip` ## Compile the demo program We are going to Compile a GPIO demo that Blinks the Onboard LED on Tang Primer. Use the following cammand to compile the Demo. ``` cd sirv e sdk make software PROGRAM demo_gpio BOARD sirv e203 lichee ``` ## Upload Demo to the board We need to first setup proper permissions to access USB Debugger. Add your username to plugdev group. Replace `<username>` with your present working system's username. ``` sudo usermod a G plugdev <username> ``` Set udev rules to enable Tang Primer to be accessed by the plugdev group, Execute the following command in terminal to create a new udev rules file. ``` sudo nano /etc/udev/rules.d/45 dt2232.rules ``` Copy the following code into the text editor and save it, as shown in the following image. ``` SUBSYSTEMS \"usb\", ATTRS{idVendor} \"0403\", ATTRS{idProduct} \"6010\", \\ GROUP \"plugdev\", \\ MODE \"0660\" ``` Execute the following command in terminal to restart the udev service. ``` sudo service udev restart ``` Press `ctrl+x` to save the file Connect Tang Primer with RV Debugger as shown below. Tang Primer RV Debugger U0_RX (Pin H13) TX U0_TX (Pin J13) RX E_TMS (Pin C9) TMS E_TDI (Pin B6) TDI E_TCK (Pin C5) TCK E_TDO (Pin A4) TDO GND (Pin G) GND > Pin locations on the Tang board can be found in [Pinout Diagram](/en/hardware overview/lichee tang/#pinouts). Execute the following command in “sirv e sdk” folder to upload demo into the board. ``` make upload PROGRAM demo_gpio BOARD sirv e203 lichee ``` ## Debugging the Demo OpenOCD provides us a nice way to debug our programs. Run the OpenOCD GDB server with the following command and leave it running. ``` make run_openocd PROGRAM demo_gpio BOARD sirv e203 lichee ``` In the other Terminal run the following command to debug your code using familiar GDB Debugger. ``` make run_gdb PROGRAM demo_gpio BOARD sirv e203 lichee ```"},"/soft/Tang/en/Analogic/Tang_primer/risc-v-core/picorv32/_index.en.html":{"title":"PicoRV32 Core","content":" title: \"PicoRV32 Core\" date: 2019 02 23T13:51:40+05:30 weight: 6 draft: false "},"/soft/Tang/en/Analogic/Tang_primer/getting-started/installing-USB-Driver/windows.html":{"title":"Install TD driver on Windows","content":" title: \"Install TD driver on Windows\" date: 2019 02 15T19:21:19+05:30 draft: false ## Check for default windows driver Insert Tang Primer into your computer and open Device Manager to see the information. It may be named `WinUsb Device` or `USB JTAG Cable` depending on the Windows version. Make sure USB VID:PID is `0547:1002`. ![device manager](./windows/no_driver.png \"Check for default windows driver.\") ![device manager win10](./windows/no_driver_win10.png \"Check for default windows 10 driver.\") ## Install drivers (Windows 7) Double click on `WinUsb Device` to select update driver ![update driver 1](./windows/update_driver1.png \"Update driver step 1\") ![update driver 2](./windows/update_driver2.png \"Update driver step 2\") Browse the folder and select the driver directory under the `TD installation directory`. Click OK to start the installation. ![Choose driver folder](./windows/choosefolder.png \"Choose driver folder\") The installation is successful and can be seen in the device manager. ![Install success](./windows/installsuccess.png \"Install success\") ## Install drivers (Windows 10) > Before installing the driver itself, make sure you [disable driver signature enforcement](https://social.technet.microsoft.com/wiki/contents/articles/51875.windows 10 how to install drivers which are not digitally signed.aspx) first, otherwise Windows 10 won't allow you to install the unsigned driver from Anlogic. Double click on `USB JTAG Cable` to select update driver. ![update driver 1](./windows/update_driver1_win10.png \"Update driver step 1\") ![update driver 2](./windows/update_driver2_win10.png \"Update driver step 2\") Browse the folder and select the `driver\\win8_10_64` directory under the `TD installation directory`. Click OK. Then click on `Let me pick from a list of available drivers on my computer`. ![Choose driver folder](./windows/choosefolder_win10.png \"Choose driver folder\") Click on `Have Disk...`, then select the directory you selected in the last step, then click OK. ![Install from disk](./windows/install_from_disk_win10.png \"Install from disk\") Now select the `Anlogic usb cable v0.1` in the driver list and click Next to start the installation. ![Select driver](./windows/select_driver_win10.png \"Select driver\") The installation is successful and can be seen in the device manager. ![Install success](./windows/installsuccess.png \"Install success\") ## Check if device detected by Tang Dynasty IDE Click on Download button as shown in following image. ![TD GUI Mode](./linux/87078310026779781.jpg \"Tang Dynasty SDK in GUI Mode.\") Plugin Tang Primer into your computer and hit Refresh buttion on Download Dialog box. ![TD Download Dialog](./linux/1823555291194601.jpg \"Bitstream Download Dialog\") Congratulations, you have setup the TD driver on Windows."},"/soft/Tang/en/Analogic/Tang_primer/getting-started/installing-USB-Driver/linux.html":{"title":"Install TD driver on Linux","content":" title: Install TD driver on Linux date: 2019 02 15T19:21:27+05:30 draft: false ## Check for default linux driver Insert Tang Primer into your computer and execute lsusb to see the information. Make sure USB VID:PID is `0547:1002` as shown in image below. ![lsusb](./linux/237929105611360081.jpg \"Check for default linux driver.\") ## Create a new udev rule file Set udev rules to enable Tang Primer to be accessed by the plugdev group Execute the following command in terminal to create a new udev rules file. ``` sudo nano /etc/udev/rules.d/91 anlogic jtag.rules ``` Copy the following code into text editor and save it, as shown in following image. ```toml SUBSYSTEMS \"usb\", ATTRS{idVendor} \"0547\", ATTRS{idProduct} \"1002\", \\ GROUP \"plugdev\", \\ MODE \"0660\" ``` ![udev edit](./linux/572316008299057820.jpg \"Create a new udev rule file.\") Execute the following command in terminal to restart the udev service. ``` sudo service udev restart ``` ## Check if device detected by Tang Dynasty IDE Go to `<TD installation directory>/bin/` and execute the following command to open TD IDE in GUI mode. ``` ./td gui ``` Click on Download buttion as shown in following image. ![TD GUI Mode](./linux/87078310026779781.jpg \"Tang Dynasty SDK in GUI Mode.\") Plugin Tang Primer into your computer and hit Refresh buttion on Download Dialog box. ![TD Download Dialog](./linux/1823555291194601.jpg \"Bitstream Download Dialog\") > Due to some unknown bug, JTAG only works with 400kbps or lower speed. Congratulations, you have setup the TD driver on Linux."},"/soft/Tang/en/Analogic/Tang_primer/getting-started/Getting-to-Blinky/Getting-to-Blinky.html":{"title":"Getting to Blinky","content":" title: Getting to Blinky date: 2019 02 15T19:23:03+05:30 draft: false The Blinky example is good way to test the setup. The following example will blink the Tang Primer's onboard RGB LED. Get the blinky example code from github.com ``` git clone https://github.com/Lichee Pi/Tang_FPGA_Examples ``` > You will need [**git**](https://git scm.com/) for the above command to work. Run TD IDE in GUI mode ``` $ td gui ``` ## Open the Blinky example. In the Menubar goto **Project > Open Project** or use the shortcut key **Ctrl+Alt+O**. ![Open project](./images/a.png \"Open project\") Select the Project file **Tang_FPGA_Examples/0.LED/prj/led.al** in Open Dialog. ![Open project dialog](./images/b.png \"Open project dialog\") ## Generate the Bitstream file. Click on the **Run** icon to start the compilation process. ![Start Compilation](./images/c.png \"Start Compilation\") If the compilation is successful you will see the Console log as shown in picture below. ![Console log](./images/d.png \"Console log\") ## Download Bitstrean to Tang Primer. Plug in your Tang Primer board to USB and click on **Download** icon to open the Download dialog. ![Open Download box](./images/d1.jpg \"Open Download box\") Make sure your device detacted by TD IDE. Add generated bitstream file by clicking on **Add** button. ![Open Bitstream](./images/e.png \"Open Bitstream\") > If you can't see your device, try refreshing it by clicking on the **Refresh** button. Select the Bitstream file **Tang_FPGA_Examples/0.LED/prj/led.bit** in the Downloading & Programming dialog, then click the **Open** button. (You may also double click on **led.bit** to automatically open it.) ![Open Bitstream dialog](./images/f.png \"Open Bitstream dialog\") Click on the **Run** button to start the download process. ![Start download](./images/g.png \"Start download\") > Due to some unknown bug, JTAG only works with 400kbps or lower speed on Linux. Wait for Download progress to reach 100%. ![Download progress](./images/h.png \"Download progress\")"},"/soft/Tang/en/Analogic/Tang_primer/getting-started/installing-TD-IDE/windows.html":{"title":"Install on Windows","content":" title: Install on Windows date: 2019 02 15T19:16:37+05:30 draft: false Once you have downloaded the installer, open it and you will see a welcome screen. ![welcome](./images/a.png \"Welcome screen\") On this screen you can choose where you want to install TD IDE. By default it installs to C:\\Anlogic\\TD4.3.633\\ ![Install location](./images/b.png \"Install location\") Click next, and the installer will begin copying the files it needs to install TD IDE. ![Install process](./images/c.png \"Install process\") When it's finished installing you should see this following screen. Click Finish to complete the installation. ![Install finish](./images/d.png \"Install finish\") Go to start menu and click on TD icon to start the IDE. ![TD in Menu](./images/e.png \"TD in Menu\") ![TD IDE welcome screen](./images/f.png \"TD IDE welcome screen\") Congratulations, you have installed the TD IDE on windows."},"/soft/Tang/en/Analogic/Tang_primer/getting-started/installing-TD-IDE/linux.html":{"title":"Install on Linux","content":" title: Install on Linux date: 2019 02 15T19:16:47+05:30 draft: false Once you have downloaded the installer archive, open Terminal and cd into that directory. ``` cd <path to installer archive directory> ``` {{% notice note %}} In this section, you will need **sudo** privileges. {{% /notice %}} The /opt directory is reserved for all the software and add on packages that are not part of the default installation. Create a directory for your TD IDE installation. ``` sudo mkdir /opt/TD_DECEMBER2018 ``` and extract TD into the /opt/TD_DECEMBER2018 directory: ``` sudo tar xvf TD_DECEMBER2018_GOLDEN_RHEL.tar.gz d /opt/TD_DECEMBER2018/ ``` Create an ``/usr/bin/td`` executable by creating a new symbolic link from the ``/opt/TD_DECEMBER2018/bin/td`` ``` sudo ln s /opt/TD_DECEMBER2018/bin/td /usr/bin/td ``` Run TD IDE in GUI mode ``` $ td gui ``` ![TD GUI Mode](./../installing USB Driver/linux/87078310026779781.jpg \"Tang Dynasty SDK in GUI Mode.\") Congratulations, you have installed the TD IDE on Linux."},"/soft/Tang/en/Analogic/Tang_primer/getting-started/requirements.html":{"title":"Requirements","content":" title: Requirements Thanks to the simplicity of Tang Dynasty FPGA development environment, Tang Primer needs very few things to get started. ## Getting the Tang Dinasty IDE Just download the latest version of Tang Dynasty IDE for your OS (Windows, Linux) from [here](http://dl.sipeed.com/TANG/Primer/IDE): it’s that simple. ## Getting Example Code Tang Primer comes with a lot of examples. They can be downloaded from [here](https://github.com/Lichee Pi/Tang_FPGA_Examples). ## Other Resources TD IDE user manual and Datasheet in English can be found [here](https://github.com/kprasadvnsi/Anlogic_Doc_English)"},"/soft/Tang/en/Analogic/Tang_primer/credits.en.html":{"title":"Credits","content":" title: Credits disableToc: true ## Contributors Thanks to them <i class \"fas fa heart\"></i> for making Open Source Software a better place ! {{% ghcontributors \"https://api.github.com/repos/kprasadvnsi/tang doc/contributors?per_page 100\" %}}"},"/soft/Tang/en/Analogic/Tang_primer/using-tang/_index.en.html":{"title":"","content":"+++ title \"Using Tang Primer\" date 2019 02 15T17:21:34+05:30 weight 7 chapter true pre \"<b>3. </b>\" +++ ### Chapter 3 # Using Tang Primer Here you can find basics of using Tang Primer and it's peripherals. Learn with small examples on every step of the way. 1. [Using Primer's GPIO](/en/using tang/using gpio) 2. [Using MicroSD Card](/en/using tang/using microsd) 3. [Using LCD display](/en/using tang/using lcd) 4. [Using Camera Module](/en/using tang/using camera) 5. [Using Built in SDRAM](/en/using tang/builtin sdram)"},"/soft/Tang/en/Analogic/Tang_primer/using-tang/using-camera/_index.en.html":{"title":"Using Camera Module","content":" title: \"Using Camera Module\" date: 2019 02 15T20:16:04+05:30 weight: 8 draft: false "},"/soft/Tang/en/Analogic/Tang_primer/using-tang/using-gpio/using-gpio.html":{"title":"Using Tang's GPIO","content":" title: Using Tang's GPIO date: 2019 02 15T20:14:28+05:30 weight: 5 draft: false ## Create a new project In the Menubar goto **Project > New Project** or uses the shortcut key **Ctrl+Alt+P**. Fill in the **Project Name** and **Project Path** fields. Note that you may create a new directory (such as \"gpio_test\") by clicking on **Browse** and then clicking on the **Create New Folder** icon in the \"choose a directory\" window. It's generally recommended to keep each project in its separate directory. Select **Device Family** and **Device Name** for Tang Primer as shown below. When done, click **OK**. ![New Project](./images/a.png) ## Create a new HDL source file. Right click on **Hierarchy** and click on **New Source** to make a new HDL source file. ![O](./images/b.png) Select the HDL **File Type** and enter a source file name in the **File Name** field. Check **Add To Project** to add this file to your project. Click **OK**. ![O](./images/c.png) **Copy** the following code into a text editor and **Save** it, as shown in the following image. ```toml module gpio_main \t( \t\tinput wire RST_N, \t\toutput wire R_LED\t \t); assign R_LED RST_N; endmodule ``` ![O](./images/d.png \"O\") Now we need to assign physical Pins to our IO ports. In the **FPGA Flow** pane, if there is a \"+\" to the left of **User Constraints**, click on the \"+\" to show the **IO Constraint** and **SDC Constraint** items. Double click on **IO Constraint** to open the IO Constraint Dialog. ![O](./images/e.png \"O\") Select the **IO Bank** and **Pin Location** for Tang's onboard LED and Button then save it as an adc file in the project. ![O](./images/f.png \"O\") ![O](./images/g.png \"O\") Click on **Run** Icon to start the compilation process. ![O](./images/h.png \"O\") Plugin your Tang Primer board to USB and click on **Download** icon to open Download Dialog. ![Open Download box](./../../getting started/Getting to Blinky/images/d1.jpg \"Open Download box\") Make sure your device detected by TD IDE. Add generated bitstream file by clicking on the **Add** button. Click on the **Run** button to start the download process. ![O](./images/i.png \"O\") Download the Bitstream into SPI Flash to make your design run after a power reset. ![O](./images/j.png \"O\")"},"/soft/Tang/en/Analogic/Tang_primer/using-tang/using-microSD/_index.en.html":{"title":"Using MicroSD Card","content":" title: \"Using MicroSD Card\" date: 2019 02 15T20:15:43+05:30 weight: 6 draft: false "},"/soft/Tang/en/Analogic/Tang_primer/using-tang/using-lcd/_index.en.html":{"title":"Using LCD display","content":" title: \"Using LCD display\" date: 2019 02 15T20:16:10+05:30 weight: 7 draft: false "},"/soft/Tang/en/Analogic/Tang_primer/using-tang/builtin-sdram/_index.en.html":{"title":"Using Built-in SDRAM","content":" title: \"Using Built in SDRAM\" date: 2019 02 15T20:15:08+05:30 weight: 9 draft: false "},"/soft/Tang/en/index.html":{"title":"Sipeed Hardware","content":" title: Sipeed Hardware keywords: Sipeed, Hardware, 矽速, 硬件资料, 文档, 资料下载 desc: 矽速科技的硬件资料站 > Edit at 2022.3.12 **Tang series development board is designed and prduced by Sipeed using FPGA chips, dedicating for students or amateurs to use high qualitied FPGA development board at a low price.** The main products are as shown below： [Tang nano 1K](./Wait.html) (Article will come soon) [Tang nano 4K](./Wait.html) (Article will come soon) [Tang nano 9K](./Wait.html) (Article will come soon) [Tang Primer](./Analogic/Tang_primer/index.html) [Tang nano](./Gowin/Tang_nano/index.html)"},"/soft/Tang/en/Gowin/Tang_nano_1k/Wait.html":{"title":"Sorry","content":"Sorry The page you are looking is being scheduled. This may take some weeks for us to create. If you really need this, please use google to translate for reading."},"/soft/Tang/en/Gowin/Tang_nano_4k/Wait.html":{"title":"Sorry","content":"Sorry The page you are looking is being scheduled. This may take some weeks for us to create. If you really need this, please use google to translate for reading."},"/soft/Tang/en/Gowin/Tang_nano/examples/2_lcd.html":{"title":"","content":"RGB LCD example # Introduce timing first The principle of RGB LCD display image is similar to that of VGA. It is to digitally generate the image information to be displayed inside the computer, and then convert the image information of these numbers into RGB three primary color analog signals through analog to digital conversion. Field sync signal. The timing of VGA is introduced below. ![](./../assets/examples/lcd_pjt_1.png) The above figure is the line synchronization and field synchronization timing of VGA in data transmission. As can be seen from the timing diagram, whether a line of data or a column of data is required, a synchronization (sync) signal is required, and the transmission of data needs to be completed between the pulses of the two synchronization signals. The data for each line includes the back porch, active viedo, and front porch. The valid data is the resolution we often say, and the parameters of the leading and trailing edges need to be set with reference to the specific resolution and number of frames. The relevant parameters can refer to the typical parameters, and the link is here: http://www.tinyvga.com /vga timing The control timing of this screen is slightly different. You can view the [Specifications] (../../assets/files/AT050TN43.pdf) Screenshots of LCD related timing are provided below ![](./../assets/examples/lcd_pjt_2.png) ![](./../assets/examples/lcd_pjt_3.png) The above picture is the parameter table in the timing, and the following picture is the timing chart. As seen from the timing diagram, this screen can be set without the front and rear edges, and only the blanking time can be set. It can be proved by the actual program that both methods are possible. # Verilog implementation ## 1.pll The onboard crystal clock is 24MHz, but our screen requires a 33.3MHZ clock, so we need to use pll to generate the clock we need. Need to use `IP Core Generate` here, located in Tools > IP Core Generate ![](./../assets/examples/lcd_pjt_4.png) Double click `PLL`, select Verilog in the pop up window language, CLKIN is 24MHz, CLKOUT is 200MHz, CLKOUTD should select Enable, then generate clock is 33.33MHz, Tolerance selects 0.2% ![](./../assets/examples/lcd_pjt_5.png) ## 2.osc The system clock can be provided by an external clock or by using an OSC generated clock. Also use `IP Core Generate` Find `OSC` and double click to open the settings for crossover. As you can see on the help page, the OSC of the GW1N 1 series fpga is divided from 240MHz, so to generate a 24MHz clock, only need to divide by 10 ## 3.lcd timing generation ``` localparam V_BackPorch 16'd6; //0 or 45 localparam V_Pluse 16'd5; localparam HightPixel 16'd480; localparam V_FrontPorch 16'd62; //45 or 0 localparam H_BackPorch 16'd182; //NOTE: When the high pixel clock is used, increase the delay here to facilitate the K210 to join the interrupt. localparam H_Pluse 16'd1; localparam WidthPixel 16'd800; localparam H_FrontPorch 16'd210; localparam PixelForHS WidthPixel + H_BackPorch + H_FrontPorch; localparam LineForVS HightPixel + V_BackPorch + V_FrontPorch; ``` The first is to set the timing related parameters: leading edge, trailing edge, effective pixels Regarding the display leading edge and trailing edge, as mentioned earlier, it can be combined into one erasing time, that is, one can be set to 0 and the other to the erasing time. Anyway, the time between the front and the back adds up to meet the time requirements in the table. ``` always @( posedge PixelClk or negedge nRST ) begin if( !nRST ) begin LineCount < 16'b0; PixelCount < 16'b0; end else if( PixelCount PixelForHS ) begin PixelCount < 16'b0; LineCount < LineCount + 1'b1; end else if( LineCount LineForVS ) begin LineCount < 16'b0; PixelCount < 16'b0; end end / / Note the HSYNC and VSYNC negative polarity here assign LCD_HSYNC (( PixelCount > H_Pluse)&&( PixelCount < (PixelForHS H_FrontPorch))) 1'b0 : 1'b1; assign LCD_VSYNC ((( LineCount > V_Pluse )&&( LineCount < (LineForVS 0) )) ) ) 1'b0 : 1'b1; ``` This code generates a sync signal. It should be noted that the sync signal of this screen is negative polarity enabled. ``` assign LCD_DE ( ( PixelCount > H_BackPorch )&& ( PixelCount < PixelForHS H_FrontPorch ) && ( LineCount > V_BackPorch ) && ( LineCount < LineForVS V_FrontPorch 1 )) ? 1'b1 : 1'b0; //This is not minus one, it will shake ``` This code sets the LCD to enable image display. This screen needs to control one pin to be used as a display switch. The actual signal is set when the 800*480 data is valid for transmitting images. ``` assign LCD_R (PixelCount<200)? 5'b00000 : (PixelCount<240 ? 5'b00001 : (PixelCount<280 ? 5'b00010 : (PixelCount<320 ? 5'b00100 : (PixelCount<360 ? 5'b01000 : (PixelCount<400 ? 5'b10000 : 5'b00000 ))))); assign LCD_G (PixelCount<400)? 6'b000000 : (PixelCount<440 ? 6'b000001 : (PixelCount<480 ? 6'b000010 : (PixelCount<520 ? 6'b000100 : (PixelCount<560 ? 6'b001000: (PixelCount<600 ? 6'b010000: (PixelCount<640 ? 6'b100000 : 6'b000000 )))))); assign LCD_B (PixelCount<640)? 5'b00000 : (PixelCount<680 ? 5'b00001 : (PixelCount<720 ? 5'b00010 : (PixelCount<760 ? 5'b00100 : (PixelCount<800 ? 5'b01000 : (PixelCount<840 ? 5'b10000 : 5'b00000 ))))); ``` This code is used to generate test data for the LCD to produce a color bar display. ``` VGAMod D1 ( .CLK ( CLK_SYS ), .nRST ( nRST ), .PixelClk ( CLK_PIX ), .LCD_DE ( LCD_DEN ), .LCD_HSYNC ( LCD_HYNC ), .LCD_VSYNC ( LCD_SYNC ), .LCD_B ( LCD_B ), .LCD_G ( LCD_G ), .LCD_R ( LCD_R ) ); ``` Finally, instantiate in TOP The entire project can be found at [https://github.com/sipeed/Tang Nano examples/tree/master/example_lcd](https://github.com/sipeed/Tang Nano examples/tree/master/example_lcd)download"},"/soft/Tang/en/Gowin/Tang_nano/examples/1_led.html":{"title":"Instance process","content":"# Instance process New Project > Add Source Code File > Add Timing, Pin Constraints > Synthesis > Programe Before reading this document, please make sure you have seen [Gowin Cloud Source Software User Guide](http://cdn.gowinsemi.com.cn/SUG100 1.8_Gowin%E4%BA%91%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf), Chapter 5 Cloud Source Software Usage The source code of this experiment: [https://github.com/sipeed/Tang Nano examples/tree/master/example_led](https://github.com/sipeed/Tang Nano examples/tree/master/ Example_led) # Verilog Prerequisites Here only introduce the relevant syntax that will be used next, more can refer to [Verilog Tutorial](http://www.asic world.com/verilog/veritut.html) The basic design unit of Verilog is the module, and each Verilog program consists of four main parts: port definition, I/O description, internal signal declaration and function definition. The module is like the black box we usually mentioned. When we implement the module, we don't need to care about the inside of the module. We only need to instantiate the module according to the input and output format defined by the module, and provide input to the module. Already working a module grows like this ``` module block (input a, output b); reg [width 1:0] R_1; assign b a; always @(posedge clk or negedge reset_n) begin // do something end endmodule ``` The overall structure of the module consists of module and endmodule. The module is followed by the definition of the module interface, which declares whether the direction of the port is input or output. Internal signals are sometimes used inside the module, and the internal signals are of type wire and reg. The definition of the function can be done through the assign and always blocks. Assign is one of the most common methods for describing combinatorial logic; always a block machine can be used to describe combinatorial logic, as well as to describe sequential logic # Pin usage The onboard is a RGB(tri color) LED, the schematic is as follows ![](./../assets/examples/led_pjt_1.png) The pin distribution used by the entire program is as follows port I/O pin desc sys_clk input 35 Clock Input Pin sys_rst_n input 15 System Reset Foot led[0] output 16 Green LED led[1] output 17 Blue LED led[2] output 18 Red LED # Programming The clock of this system is 24Mhz, one machine cycle is 1/24M s, which means 0.5s every 12000000 clock cycles. In the program, calculate 12000000 clock cycles by counter, and wait for 0.5s. After the time is up, set counter to 0 and change the color of the LED. ``` module led ( input sys_clk, // clk input input sys_rst_n, // reset input output reg [2:0] led // 110 G, 101 R, 011 B ); reg [23:0] counter; always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) counter < 24'd0; else if (counter < 24'd1200_0000) // 0.5s delay counter < counter + 1'b1; else counter < 24'd0; end always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) led < 3'b110; else if (counter 24'd1200_0000) // 0.5s delay led[2:0] < {led[1:0], led[2]}; else led < led; end endmodule ``` # Pin constraint In order for fpga to implement the function of the code, it is also necessary to constrain the pin operations involved in the code to the actual pins of fpga. As shown below, click process in the workspace on the left, then double click FloorPlanner ![](./../assets/examples/led_pjt_2.png) The first click in the project, you may be prompted to create a file, click OK In the pop up window, switch to Package View, drag the port under Ports to the corresponding pin of fpga, save it, as shown below ![](./../assets/examples/led_pjt_3.png) # Synthesis In the workspace on the left, right click Synthesize or Place&Route, there will be a run option, click ![](./../assets/examples/led_pjt_4.png) # Programe There are two options, one is to burn to sram, the other is to burn to flash. Burning to sram is faster, but there is no firmware in fpga after power off; burning to flash can save the firmware before burning after the system is powered off. Burning is done through the Programer Double click on the Program Device in the left workspace to open the Programer. ![](./../assets/examples/led_pjt_5.png) However, before using Programer, you need to be aware that you can use Programer after both Synthesize and Place&Route are completed, otherwise the software will report error `Bitstream file dose not exists` ![](./../assets/examples/led_pjt_6.png) Linux users need to pay attention > The programmer in the Linux installation package is for Linux version Red Hat 5.10. For the Red Hat 6/7 version of the programmer, please download the installation on the official website and replace the installation package with the file in the Gowin cloud source software installation package. Clip \"Programmer\". ## Change the burning position To select the location where the firmware is programmed, you can click Edit > Configure Device when the chip is selected. ![](./../assets/examples/led_pjt_7.png) In the pop up window, select the location you want to burn. The flash is selected here. The default burning location is sram. ![](./../assets/examples/led_pjt_8.png) ## Burning After selecting the burning location, you can burn the firmware, click on the menu bar to burn. ![](./../assets/examples/led_pjt_9.png)"},"/soft/Tang/en/Gowin/Tang_nano/get_started/install-the-ide.html":{"title":"","content":" layout: redirect redirect_url: https://wiki.sipeed.com/hardware/en/tang/common doc/install the ide.html "},"/soft/Tang/en/Gowin/Tang_nano/index.html":{"title":"Tang Nano Document","content":"Tang Nano Document <div class \"title_pic\"> <! <img src \"../assets/sipeed_longan_logo.jpg\" height \"60\"> > <img src \"./assets/icon_sipeed2.png\" height \"60\"> </div> ## What is Tang Nano? The Lichee Tang Nano is a compact development board based on the GW1N 1 FPGA from the Gaoyun Little Bee series. The onboard chip is GW1N LV1QN48C6/I5, equipped with 1152 LUT4 logic resources, 1 PLL and 4 Block total 72Kbit SRAM, packaged as QFN48. The development board brings out all I/O interfaces for the design and experimentation of small digital logic. Onboard 64Mbits PSRAM provides a rich storage resource for FPGAs. At the same time, the development board has an RGB interface that can be connected to peripherals such as LCD screens and VGA converters, making it ideal for applications such as screen displays. The board's onboard 24MHz crystal and USB to JTAG downloader make it easy to connect to a PC for development without the need for an external debugger and clock input. The onboard RGB LEDs can be used for indication and debugging, while the FPGA IOBANK group's adjustable IO levels allow the development board to easily interface with externally different level specifications. **Onboard resources:** + GW1N 1 + 64Mbit QSPI PSRAM + RGB LED + RGB LCD 40P interface and drive circuit + 24MHz crystal + USB debugger, based on Type C communication interface ## Pinout Diagram ![](./assets/tang_nano_pinout_v1.0.0_w5676_h4000_large.png) ## Resource download link + [GoWin official download station](http://www.gowinsemi.com.cn/faq.aspx) + [dl Download station](http://dl.sipeed.com/TANG/Nano) + [Tang nano Schematic.](http://dl.sipeed.com/TANG/Nano/HDK/)"},"/soft/Tang/en/Gowin/Tang_nano_9k/Wait.html":{"title":"Sorry","content":"Sorry The page you are looking is being scheduled. This may take some weeks for us to create. If you really need this, please use google to translate for reading."},"/soft/Tang/en/Analogic/Tang_primer/dev-guide/_index.en.html":{"title":"","content":"+++ title \"Developer Guide\" date 2019 02 25T13:53:55+05:30 weight 9 chapter true pre \"<b>5. </b>\" +++ ### Chapter 5 # Developer Guide Here we’ll cover topics related to RISC V and Tang Primer FPGA platform development. 1. [Buinding RISC V SoftCore](/en/dev guide/building rv core) 2. [Using Yosys with Tang Primer](/en/dev guide/using yosys)"},"/soft/Tang/en/Analogic/Tang_primer/dev-guide/building-rv-core/_index.en.html":{"title":"Buinding RISC-V SoftCore","content":" title: \"Buinding RISC V SoftCore\" date: 2019 03 10T15:52:29+05:30 "},"/soft/Tang/en/Analogic/Tang_primer/dev-guide/using-yosys/_index.en.html":{"title":"Using Yosys with Tang Primer","content":" title: \"Using Yosys with Tang Primer\" date: 2019 03 10T15:51:32+05:30 The Yosys now support Verilog synthesis for Anlogic's FPGA. Although support is partial, it progressing towards having full synthesis support. ### Prerequisites For Ubuntu Linux 16.04 LTS the following commands will install all prerequisites for building yosys: ``` sudo apt get install build essential clang bison flex \\ \tlibreadline dev gawk tcl dev libffi dev git \\ \tgraphviz xdot pkg config python3 ``` ### Download Yosys from Github Clone the Yosys repository from Github. ``` git clone https://github.com/YosysHQ/yosys.git ``` ### Build and Install Yosys To build Yosys simply type 'make' in this directory. ``` make make test sudo make install ``` ### Compile the Anlogic Demo We are going to compile an Anlogic example from Yosys examples directory. ### Setup TD environment for demo For Place and Route, we still need Official TD tools. set `TD_HOME` env variable to the full path to the TD <TD Install Directory> as follow. ``` export TD_HOME <TD Install Directory Path> ``` Finally, we are ready to build our demo. ``` cd examples/anlogic/ bash build.sh ``` This build will produce demo.bit that can be download into Tang Primer via TD Download tool."},"/soft/Tang/en/Analogic/Tang_primer/faq/_index.en.html":{"title":"","content":"+++ title \"TroubleshootingFAQ\" date 2019 02 25T13:54:07+05:30 weight 10 chapter true pre \"<b>6. </b>\" +++ ### Chapter 6 # Some Chapter title Lorem Ipsum."},"/soft/Tang/en/Analogic/Tang_primer/hardware-overview/OV2640-camera.html":{"title":"OV2640 Camera Module","content":" title: \"OV2640 Camera Module\" date: 2019 02 15T20:11:43+05:30 weight: 6 draft: false ![ov2640](./images/ov2640.jpg \"OV2640 module\") ## Features + 2 Megapixel + Array size: UXGA 1600X1200 + Power supply: 3.3V + IO voltage level: 1.7V~3.3V DC + Output formats: YUV(422/420)/YCnCr422 RGB565/555 8 bit compressed data + Max image transfer rate: UXGA/SXGA 15fps UXGA/SXGA 30fps SVGA 30fps CIF 60fps ## Resources #### Attachments: + [2640 XT400G2.pdf](https://github.com/kprasadvnsi/tang doc/releases/download/1.0.0/2640 XT400G2.pdf) + [OV2640 DATASHEET.pdf](https://github.com/kprasadvnsi/tang doc/releases/download/1.0.0/OV2640 DATASHEET.pdf)"},"/soft/Tang/en/Analogic/Tang_primer/hardware-overview/RV-debugger.html":{"title":"RV Debugger","content":" title: \"RV Debugger\" date: 2019 02 15T20:12:26+05:30 weight: 8 draft: false ![RV Debugger](./images/rvdebugger.jpg \"RV Debugger\") ## Resources #### Attachments: + [FT2232D(Schematic).pdf](https://github.com/kprasadvnsi/tang doc/releases/download/1.0.0/FT2232D.Schematic.pdf)"},"/soft/Tang/en/Analogic/Tang_primer/hardware-overview/LCD-display.html":{"title":"LCD Display module","content":" title: LCD Display module date: 2019 02 15T20:12:09+05:30 weight: 7 draft: false ![lcd](./images/lcd.jpg \"lcd\") This 5.0” TFT screen comes with 800x480 pixel resolution and an LED backlight. It's great for when you need a lot of space for graphics. These screens are commonly seen in consumer electronics, such as miniature TV’s, car displays, etc. A 40 pin connector has 8 red, 8 green, and 8 blue parallel pins, for 24 bit color capability ## Resources #### Attachments: + [AT050TN43_V_1_Pre_Ver01_20100511.pdf](https://github.com/kprasadvnsi/tang doc/releases/download/1.0.0/AT050TN43.V.1.Pre.Ver01.20100511.A050 43 TT 11._201102115899.pdf)"},"/soft/Tang/en/Analogic/Tang_primer/hardware-overview/lichee-tang.html":{"title":"Tang Primer board","content":" title: Tang Primer board date: 2020 06 09T09:26:04+02:00 weight: 5 draft: false ## The Tang Primer at a Glance ![Tang Primer at a Glance](./images/TANG_DD.jpg \"Tang Primer at a Glance\") Tang Primer uses Anlogic's EG4S20 as the core unit, 20K logic unit (LUT4/LUT5 hybrid architecture), approximately 130KB SRAM, built in 32bit bit width 64MBit SDRAM, rich LVDS pin, built in 12 bit 1MSPS ADC This provides unlimited possibilities for Tang Primer: ## Tang Primer features + FPC40P socket, can be connected to RGB LCD, VGA adapter board, high speed DAC module. + FPC24P socket, can be connected to DVP camera, high speed ADC module. + Resistive touch screen controller for I2C interface, used with RGB LCD. + 3 channel DCDC power supply chip, stable and efficient power supply, independent adjustment of Bank0 IO level. + FPGA configuration Flash, 8Mbit User Flash, nor/nand optional. + Onboard FPGA JTAG Download Debugger. + Onboard RGB LED + The adjacent pins LVDS are drawn in the same length, and 8 GCLKs are taken out, and 8 ADCs are all taken out. + The double row pin spacing is 900 mils and is compatible with breadboard development. + The half hole leads to an additional 40 IO and the entire board leads to 130+ IO. ## Pinouts Pinout for **New** Tang Primer Board. ![Tang Primer at a Glance](./images/newtang_pinout.png?width 45pc \"Tang Primer at a Glance\") Pinout for **Old** Tang Primer Board. ![Tang Primer at a Glance](./images/E203_pin.png \"Tang Primer at a Glance\") ## Resources #### Attachments: + [EG4S20_DataSheet_V1.5_english.pdf](https://github.com/kprasadvnsi/tang doc/releases/download/1.0.0/EG4S20_DataSheet_V1.5_english.pdf) + [Eagle_DataSheet_V2.8_english.pdf](https://github.com/kprasadvnsi/tang doc/releases/download/1.0.0/Eagle_DataSheet_V2.8_english.pdf) + [LicheeTang+RV.pdf](https://github.com/kprasadvnsi/tang doc/releases/download/1.0.0/LicheeTang+RV.pdf) + [sipeed tang primer pins.pdf](https://github.com/kprasadvnsi/tang doc/releases/download/1.0.0/sipeed tang primer pins.pdf)"},"/soft/Tang/en/Analogic/Tang_primer/contribute/_index.en.html":{"title":"","content":"+++ title \"Contribute\" date 2019 02 25T13:54:24+05:30 weight 11 chapter true pre \"<b>7. </b>\" +++ ### Chapter 7 # Some Chapter title Lorem Ipsum."},"/soft/Tang/en/no_translate.html":{"title":"no translation","content":" title: no translation class: md_page <div id \"visit_from\"></div> <div id \"no_translate_hint\">This page not translated yet</div> <div> <span id \"visit_hint\">Please visit</span> <a id \"translate_src\"></a> </div> <div> <script> function getQueryVariable(variable) { var query window.location.search.substring(1); var vars query.split(\"&\"); for (var i 0;i<vars.length;i++) { var pair vars[i].split(\" \"); if(pair[0] variable){return pair[1];} } return(false); } var ref getQueryVariable(\"ref\"); var from getQueryVariable(\"from\"); var link document.getElementById(\"translate_src\"); var fromDis document.getElementById(\"visit_from\"); link.href ref; link.text ref; fromDis.innerHTML from; </script> </div>"}}