{"/soft/Tang/zh/e203/display/spi_tft.html":{"title":"SPI\\_MCU彩屏","content":" title: 'SPI\\_MCU彩屏' 待补充。。。"},"/soft/Tang/zh/e203/display/lcd1602.html":{"title":"1602屏幕","content":" title: 1602屏幕 待补充。。。"},"/soft/Tang/zh/e203/display/oled.html":{"title":"OLED屏幕","content":" title: OLED屏幕 待补充。。。"},"/soft/Tang/zh/e203/peripherals.html":{"title":"蜂鸟外设简介","content":" title: 蜂鸟外设简介 待补充。。。"},"/soft/Tang/zh/index.html":{"title":"","content":" layout: redirect redirect_url: https://wiki.sipeed.com/hardware/en/tang/index.html "},"/soft/Tang/zh/fpga/ics/dac908.html":{"title":"FPGA驱动DAC908","content":" title: FPGA驱动DAC908 待补充。。。"},"/soft/Tang/zh/fpga/ics/codec.html":{"title":"FPGA驱动CODEC","content":" title: FPGA驱动CODEC 待补充。。。"},"/soft/Tang/zh/fpga/ics/adc9288.html":{"title":"FPGA驱动ADC9288","content":" title: FPGA驱动ADC9288 待补充。。。"},"/soft/Tang/zh/fpga/ics/usb3300.html":{"title":"FPGA驱动USB3300","content":" title: FPGA驱动USB3300 待补充。。。"},"/soft/Tang/zh/fpga/sdram.html":{"title":"FPGA驱动SDRAM","content":" title: FPGA驱动SDRAM 待补充。。。"},"/soft/Tang/zh/fpga/display.html":{"title":"FPGA外接常用显示接口","content":" title: FPGA外接常用显示接口 \\> maxdepth \\> : 2 \\> \\> display/lcd display/vga display/av display/hdmi"},"/soft/Tang/zh/fpga/opencores.html":{"title":"FPGA 运行其他软核","content":" title: FPGA 运行其他软核 待补充。。。"},"/soft/Tang/zh/fpga/ics.html":{"title":"FPGA驱动其他IC","content":" title: FPGA驱动其他IC \\> maxdepth \\> : 2 \\> \\> ics/adc9288 ics/dac908 ics/codec ics/usb3300"},"/soft/Tang/zh/fpga/led.html":{"title":"FPGA点灯","content":" title: FPGA点灯 # 源码下载 请到github下载，地址为 [\\<<https://github.com/Lichee Pi/Tang_FPGA_Examples/tree/master/0.LED>\\>](<https://github.com/Lichee Pi/Tang_FPGA_Examples/tree/master/0.LED>) # 代码简析 ``` module led ( input wire CLK_IN, //时钟输入，24MHz input wire RST_N, //复位按键输入，低有效 output wire [2:0]RGB_LED //RGB led输出 ); parameter time1 24’d24_000_000;//晶振为24Mhz，这里表示计数一秒 reg [2:0]rledout; reg [23:0] count; reg [1:0]shift_cnt; initial begin count 24’b0; rledout 3’b1; shift_cnt 2’b0; end always @(posedge CLK_IN)begin if(RST_N 0)begin //复位按键按下就清空计数并清空输出 count < 24’b0; rledout < 3’b1; shift_cnt < 2’b0; end if(count time1) //计数时间到 begin count< 24’d0; //清空计数值 if(shift_cnt 2’b10)begin //移位3次 rledout < 3’b1; shift_cnt < 2’b0; end else begin rledout < {rledout[1:0],1’b0}; //led输出移位 shift_cnt < shift_cnt + 1’b1; end end else count < count + 1’b1; //计数累加 end assign RGB_LED rledout; endmodule ``` 将代码综合，下载码流到fpga，可以看到板上的rgb led会移位闪烁。（emmm，闪烁效果太差，如果你有更好的可以发过来。(╯︵╰)"},"/soft/Tang/zh/fpga/dvp.html":{"title":"FPGA驱动DVP","content":" title: FPGA驱动DVP 待补充。。。"},"/soft/Tang/zh/Tang-Common-Doc/get_started/install-the-ide.html":{"title":"安装IDE","content":" title: 安装IDE keywords: Sipeed, Gowin, Tang, Nano, fpga, 矽速 高云半导体云源软件是专门为高云半导体半导体芯片配套的集成电路设计与实现工具。覆盖了FPGA芯片全类型的设计功能，具体功能可以自行到高云半导体官网进行查阅，在此不进行赘述。附上文档链接：<http://www.gowinsemi.com.cn/down.aspx?FId n14:14:26> 1. 用户安装请根据自己电脑系统选择 IDE； 2. 对于 Linux 系统下下载可以使用 Openfpgaloader，可以查看本页底部的 [安装openfpgaloader](#安装openfpgaloader) 来进行烧录操作。 ## 安装软件 此处以安装 **Gowin_V1.9.8_win** 为例进行说明： 按照文档对IDE有了初步了解之后根据文档说明可自行进行IDE的安装。云源软件链接 http://www.gowinsemi.com.cn/faq.aspx ![IDE](./assets/IDE 1.png) > 由于高云半导体的IDE在不断的更新，上图为2021年11月30号截图 进入链接后选择“云源软件历史版本”，往下拉找到历史版本中最新版本进行下载，下载到本地的文件夹是一个压缩包格式的文件，进行解压后得到安装包“Gowin_V1.9.8_win.exe”，直接双击开始进行安装： <div> \t<img src \"./assets/IDE 2.png\" width 45%> \t<img src \"./assets/IDE 3.png\" width 45%> </div> 下图的两个都需要安装上。 ![IDE](./assets/IDE 4.png) 下图的安装路径个人按照自己需要设置 ![IDE](./assets/IDE 5.png) 安装中... ![IDE](./assets/IDE 6.png) 下面这一步不要更改任何东西，按照默认的点击`Finish`就行 ![IDE](./assets/IDE 7.png) 上面的`Finish`后会出现下面的内容，这是安装驱动的。 ![IDE](./assets/IDE 8.png) ![IDE](./assets/IDE 9.png) 这里需要选择接受协议才能继续安装 ![IDE](./assets/IDE 10.png) ![IDE](./assets/IDE 11.png) 前面的完成后桌面上会出现下面这种图的图标 ![IDE](./assets/IDE 12.png) 这样我们就完成了软件的安装 ## license 激活 对于教育版 IDE 的是不需要 license 的，因此可以跳过这步。 对于非教育版的 IDE 需要向高云半导体官方申请 **license** 。 申请链接：[http://www.gowinsemi.com.cn/faq_view.aspx](http://www.gowinsemi.com.cn/faq_view.aspx) 打开高云半导体 IDE 的时候，在弹出的 license 管理中，点击 Broswer 选择自己所获得的 license 文件 ![IDE](./assets/IDE 13.png) ## 拓展 IDE 的安装路径下主要有如下几个文件夹：IDE、Programmer、uninst.exe； **IDE** 文件夹：主要介绍次路径下的 **doc** 文件夹，用户在安装完之后可以在这个路径下进行对 IDE 的基本了解，主要包含文件如下图所示： ![IDE](./assets/IDE 17.png) > “Programmer”：附带的烧录软件 > “uninst.exe”：卸载工具 ## 使用方法 参考官方文档[Gowin云源软件用户指南](http://cdn.gowinsemi.com.cn/SUG100 1.8_Gowin%E4%BA%91%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)，第5章 云源软件使用 ## 参考文档 + [高云半导体软件简介和安装](http://cdn.gowinsemi.com.cn/%E9%AB%98%E4%BA%91%E8%BD%AF%E4%BB%B6%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85.pdf) ## Linux 烧录教程 在Ubuntu系统下我们建议使用**openFPGALoader**烧写，以下为具体步骤 ### 安装openFPGALoader 参考：https://trabucayre.github.io/openFPGALoader/guide/install.html ``` # preprocess sudo apt get install libftdi1 2 libftdi1 dev libhidapi hidraw0 \\ libhidapi dev libudev dev zlib1g dev cmake pkg config make g++ # compile git clone https://github.com/trabucayre/openFPGALoader.git cd openFPGALoader mkdir build cd build cmake ../ # add DBUILD_STATIC ON to build a static version # add DENABLE_UDEV OFF to disable udev support and d /dev/xxx # add DENABLE_CMSISDAP OFF to disable CMSIS DAP support cmake build . # or # make j$(nproc) # install sudo make install ``` ### 烧录方法 检测板卡 ``` $ ./openFPGALoader detect Jtag frequency : requested 6.00MHz > real 6.00MHz index 0: \tidcode 0x100481b \tmanufacturer Gowin \tfamily GW1N \tmodel GW1N(R) 9C \tirlength 8 detach error 5 ``` 下载码流 ``` $ ./openFPGALoader b tangnano9k f ../../nano9k_lcd/impl/pnr/Tang_nano_9K_LCD.fs write to flash Jtag frequency : requested 6.00MHz > real 6.00MHz Parse file Parse ../../nano9k_lcd/impl/pnr/Tang_nano_9K_LCD.fs: Done DONE Jtag frequency : requested 2.50MHz > real 2.00MHz erase SRAM Done erase Flash Done write Flash: [ ] 100.00% Done CRC check: Success detach error 5 ``` 其中 b表示目标板型，可以使用以下取值： Board nameFPGAMemoryFlash tangnanoGW1N 1 QFN48OKInternal Flash tangnano1kGW1NZ 1 QFN48OKInternal Flash tangnano4kGW1NSR 4C QFN48OKInternal Flash/External Flash tangnano9kGW1NR 9C QFN88OKInternal Flash/External Flash"},"/soft/Tang/zh/Tang-Common-Doc/index.html":{"title":"Tang Nano","content":"# Tang Nano ## 什么是 Tang Nano Lichee Tang Nano 是基于高云半导体小蜜蜂系列 GW1N 1 FPGA 的简约型开发板。 板载芯片为 GW1N LV1QN48C6/I5，搭载了 1152 LUT4 的逻辑资源，1 PLL 和 4 Block 合计 72Kbit SRAM，封装为 QFN48。开发板引出了所有 I/O 接口，适用于小型数字逻辑的设计和实验。 板载 64Mbits PSRAM，为 FPGA 提供了丰富的存储资源。 同时，该开发板具有 RGB接口，能够与 LCD屏、VGA转换器 等外设连接，非常适合于屏幕显示等类型的应用。 板子板载 24MHz 晶振和 USB转JTAG下载器，能够容易的连接电脑进行开发，而不需要外部的调试器和时钟输入。板载的 RGB LED 可用于指示和调试，同时 FPGA IOBANK 分组可调的IO电平使得开发板能够容易的对外部各种不同电平规范的器件接口。 **板载资源:** + GW1N 1 + 64Mbit QSPI PSRAM + RGB LED + RGB LCD 40P接口及驱动电路 + 24MHz晶振 + USB调试器，基于Type C通讯接口 ## 引脚定义 ![Nano 引脚](./../../assets/tang_nano_pinout_v1.0.0_w5676_h4000_large.png) ## 资源下载链接 + [高云半导体官方下载站](http://www.gowinsemi.com.cn/faq.aspx) + [dl 下载站](http://dl.sipeed.com/TANG/Nano) + [Tang nano 原理图](../assets/files/Tang NANO.pdf)"},"/soft/Tang/zh/Tang-Common-Doc/SUMMARY.html":{"title":"Summary","content":"Summary ## 简介 [关于Tang Nano](index.html) ## 准备 [IDE安装](get_started/install the ide.html) ## 示例 [点灯教程](examples\\1_led.html) [点LCD教程](examples\\2_lcd.html) [使用PSRAM存储](examples\\3_psram.html)"},"/soft/Tang/zh/index_bak.html":{"title":"荔枝糖 全流程指南","content":"# 荔枝糖 全流程指南 荔枝糖，一款极致打磨的国产开源RISC V开发板。 荔枝糖萌生于国内芯片振荡之潮，历经三个月的生长与蜕变，终于在七月，登上开源的舞台。 荔枝糖不仅担起开源开发者们的期待，更志向于在国内推广RISC V架构相关的开发与教育，向世界介绍中国的一款优秀开发板。 ![](./../assets/material.png) 荔枝糖使用 安路科技(Anlogic Technologies) 的 EG4S20 作为核心单元, **20K逻辑单元(LUT4/LUT5混合架构)，约130KB SRAM，内置32bit位宽 64MBit SDRAM，丰富的LVDS引脚，内置12 bit 1MSPS ADC**，这为荔枝糖提供了无限的可能性： FPC40P座，可接 RGB LCD，VGA转接板，高速DAC模块 FPC24P座，可接DVP摄像头，高速ADC模块 I2C接口的电阻触摸屏控制器，配合RGB LCD使用 3路DCDC电源芯片，稳定高效的电源供应，Bank0 IO电平独立可调 FPGA 配置Flash，8Mbit 用户Flash，nor/nand可选 板载FPGA JTAG下载调试器 RGB LED 相邻插针LVDS等长引出，引出8路GCLK，全引出8路ADC。 双排插针间距900mil， **兼容面包板开发** 半孔引出额外 **40 IO**，整板引出 **130+ IO** 。 ![荔枝糖资源图](./../assets./../assets./../assets/E203_function.png) ![荔枝糖引脚图(旧板,底面丝印较小版本)](./../assets./../assets/E203_pin.png) ![ 荔枝派引脚图(新板,底面丝印较大版本)](./../assets/Lichee tang_NewIoMap.png) 2018年8月15日之前收到的板子预烧录的码流为旧版本IO分配，需要烧录[新版本码流](./../assets/LicheeTangNewIoMap_BitStream.bit) 您可能需要这些来进一步了解荔枝糖： [EG4S20Datasheet](https://dl.sipeed.com/shareURL/TANG/Primer/HDK/Datasheet/EG4S20_DataSheet_V1.4.pdf)[荔枝糖原理图](https://dl.sipeed.com/fileList/TANG/Primer/HDK/LicheeTang_RV(Schematic).pdf) 荔枝糖仍在不断地成长，对于外观、电路设计、文档内容甚至于荔枝糖的发展方向，我们欢迎您到[荔枝糖 建议与讨论帖](https://bbs.sipeed.com/category/3?search_ids 3&search_ids 36&search_ids 28&search_ids 31&search_ids 30) 提出您宝贵的建议。 同时欢迎各位加入[荔枝派交流群826307240](https://jq.qq.com/?_wv 1027&k 5uWO21P) [荔枝派Telegram电报群](https://t.me/sipeed)与众多开发者、爱好者即时交流，并获取 FPGA 开发环境 TD (Tang Dynasty)，其中 TD 软件自带全系列的参考文档。 ![](./../assets/QQ_Group_2.jpg)"},"/soft/Tang/zh/fpga/display/vga.html":{"title":"FPGA驱动VGA","content":" title: FPGA驱动VGA 待补充。。。"},"/soft/Tang/zh/fpga/display/av.html":{"title":"FPGA驱动AV显示器","content":" title: FPGA驱动AV显示器 待补充。。。"},"/soft/Tang/zh/fpga/display/lcd.html":{"title":"FPGA驱动LCD","content":" title: FPGA驱动LCD 待补充。。。"},"/soft/Tang/zh/fpga/display/hdmi.html":{"title":"FPGA驱动HDMI","content":" title: FPGA驱动HDMI 待补充。。。"},"/soft/Tang/zh/Tang-Common-Doc/examples/4K_led.html":{"title":"Nano 4K 点灯","content":"# Nano 4K 点灯 <p id \"back\"> <a href \"#\" onClick \"javascript :history.back( 1);\">返回上一页(Back)</a> </p> ## 本实例的过程 新建工程 > 添加源代码文件 > 添加时序、引脚约束 > 综合 > 烧录 在看这篇文档前，请再次确定自己看过[Gowin云源软件用户指南](http://cdn.gowinsemi.com.cn/SUG100 1.8_Gowin%E4%BA%91%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)，第5章 云源软件使用 本实验的源码地址：[TangNano 4K example/led_test/project](https://github.com/USTHzhanglu/TangNano 4K example/tree/USTHzhanglu/led_test/project) ## Verilog 预备知识 这里只介绍接下来会用到的相关语法，更多的可以参考《Verilog 数字系统设计教程》 Verilog 的基本设计单元是模块，每个 Verilog 程序包括 4个 主要部分：端口定义、I/O说明、内部信号声明和功能定义 模块就像我们平时提到的黑匣子，当我们实现了模块后，就不需要去关心模块内部，只需要根据模块定义的输入输出格式，将模块实例化，给模块提供输入，就可以让模块自己工作了 一个模块长成这样 ``` module block (input a, output b); reg [width 1:0] R_1; assign b a; always @(posedge clk or negedge reset_n) begin // do something end endmodule ``` 模块整体结构由 module 和 endmodule 组成，module 后面跟着的是模块接口的定义，声明了端口的方向是输入还是输出 模块内部有时候会使用内部的信号，内部信号有 wire 和 reg 类型 功能的定义可以通过 assign 和 always块 完成。 assign 是描述组合逻辑最常用的方法之一； always 块机可用于描述组合逻辑，也可描述时序逻辑 ## 引脚使用情况 板载的是一颗红色LED 灯，原理图如下 <img src \"https://raw.githubusercontent.com/USTHzhanglu/picture/main/img/image 20210810160224782.png\" alt \"image 20210810160224782\" style \"zoom:50%;\" /> 整个程序使用到的引脚分布如下 port I/O pin desc sys_clk input 45 时钟输入脚 sys_rst_n input 15 系统复位脚 led output 15 红灯 ## 程序设计 本系统时钟为 27Mhz，一个机器周期为 1/27M s，也就是说每过 13500000 个时钟周期为 0.5s 在程序中通过 counter 计算 13500000 个时钟周期，实现 0.5s 的等待，等时间到了之后将 counter 置 0，并改变 LED 的状态 ```v module led ( input sys_clk, input sys_rst_n, // reset input output reg led //R ); reg [23:0] counter; always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) counter < 24'd0; else if (counter < 24'd1350_0000) // 0.5s delay counter < counter + 1'b1; else counter < 24'd0; end always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) led < 1'b1; else if (counter 24'd1350_0000) // 0.5s delay led < ~led; // TogglePin end endmodule ``` ## 引脚约束 要想让 fpga 实现代码的功能，还必须将代码中涉及的引脚操作约束到 fpga 实际的引脚上 如下图，在左边的工作区点击 process，然后双击 FloorPlanner ![](./../../../assets/examples/led_pjt_2.png) 在工程中第一次点击，可能会提示说创建文件，点击确定即可 在弹出窗口中，切换到 Package View ，将 Ports 下的端口拖到 fpga 对应的引脚上，保存即可，如下图 ![image 20210810161650281](./../../../assets/Nano 4K/4K led 1.png) LED对应的IO10默认是mode Pin，无法直接约束，需要打开Project>Configuration>Dual Purpose Pin,勾选 Use MODE as regular IO,如下图 <img src \"./../../../Nano 4K/4K led 2.png\" alt \"image 20210810161934170\" style \"zoom:50%;\" /> ## 综合 在左侧的工作区中，右键 Synthesize 或 Place&Route 时，会有 run 的选项，点击即可 ![](./../../../assets/examples/led_pjt_4.png) ## 烧录到开发板 有两种选择，一种是烧录到 sram 中，一种是烧录到 flash 中 烧录到 sram 中比较快，但是掉电后 fpga 中就没有固件了；烧录到 flash 中可以在系统掉电后保存之前烧录的固件 烧录是通过 Programer 完成的 双击左侧工作区的 Program Device 就可以打开 Programer ![](./../../../assets/examples/led_pjt_5.png) 不过在使用 Programer 前需要注意，要在 Synthesize 和 Place&Route 都完成后才能使用 Programer ，否则软件会报错 `Bitstream file dose not exists` ![](./../../../assets/examples/led_pjt_6.png) Linux 用户需要注意 > Linux 安装包中的编程器适用于 Linux 版本 Red Hat 5.10，如需 Red Hat 6/7 版本的编程器，请到官网上下载安装后，将安装包替换为 Gowin 云源软件安装包中的文件夹“Programmer”。 ### 更改烧录位置 要选择固件烧录的位置，可以在选中芯片的情况下，点击 Edit > Configure Device ![](./../../../assets/examples/led_pjt_7.png) 在弹出窗口中选择自己需要烧录到的位置，这里选择的是 flash ，默认烧录位置是 sram ![image 20210810162149938](./../../../assets/Nano 4K/4K led 3.png) ### 烧录 在选择好烧录位置后，就可以烧录固件了，点击菜单栏的烧录即可 ![](./../../../assets/examples/led_pjt_9.png) <p id \"back\"> <a href \"#\" onClick \"javascript :history.back( 1);\">返回上一页(Back)</a> </p>"},"/soft/Tang/zh/Tang-Common-Doc/examples/2_lcd.html":{"title":"","content":"RGB LCD 示例 # 先介绍时序 RGB LCD 显示图像的原理和 VGA 类似，都是在计算机内部以数字的方式生成需要显示的图像信息，再通过模数转换的方式，将这些数字的图像信息转变为 RGB 三原色模拟信号，以及行、场同步信号。 下面就介绍 VGA 的时序 ![](./../../../assets/examples/lcd_pjt_1.png) 上图分别是 VGA 在数据传输中的行同步、场同步时序 从时序图中可以看出，不论是显示一行数据还是一列数据，都需要一个同步(sync)信号，数据的传输需要在两个同步信号的脉冲之间完成 每一行的数据包括显示前沿(back porch)、有效数据(active viedo)、显示后沿(front porch) 其中的有效数据就是我们常说的分辨率，而显示前后沿的参数需要参考具体的分辨率与帧数进行设置，相关参数可以参考典型参数，链接在此： http://www.tinyvga.com/vga timing 这块屏幕的控制时序略有不同，相关参数的设置可以查看[规格书](./../../../assets/files/AT050TN43.pdf) 下面提供了 LCD 相关时序的截图 ![](./../../../assets/examples/lcd_pjt_2.png) ![](./../../../assets/examples/lcd_pjt_3.png) 上面一张图是时序中的参数表，下面的图是时序图 从时序图中看出，这块屏幕可以不用设置前后沿，可以只设置消影(blanking)时间，通过实际的程序证明，两种方式都是可以的 # Verilog实现 ## pll 板载的晶振时钟为 24MHz ，但是我们的屏幕要求 33.3MHZ 的时钟，所以我们需要使用 pll 产生我们需要的时钟 这里需要使用到 `IP Core Generate` ，位置在 Tools > IP Core Generate ![](./../../../assets/examples/lcd_pjt_4.png) 双击 `PLL` ，在弹出窗口 language 选择 Verilog ，CLKIN 为 24MHz ，CLKOUT 为 200MHz，CLKOUTD 要选择 Enable，然后生成时钟为 33.33MHz，Tolerance 选择 0.2% ![](./../../../assets/examples/lcd_pjt_5.png) ## osc 系统的时钟可以使用外部时钟提供，也可以使用 OSC 生成的时钟 同样也是使用 `IP Core Generate` 找到 `OSC` 并双击打开进行分频的设置 在帮助页面可以知道，GW1N 1 系列的 fpga 的 OSC 是从 240MHz 进行分频的，所以要产生 24MHz 的时钟，只需要进行 10 的分频 ## lcd时序产生 ``` localparam V_BackPorch 16'd6; //0 or 45 localparam V_Pluse \t 16'd5; localparam HightPixel 16'd480; localparam V_FrontPorch 16'd62; //45 or 0 localparam H_BackPorch 16'd182; \t//NOTE: 高像素时钟时，增加这里的延迟，方便K210加入中断 localparam H_Pluse \t 16'd1; localparam WidthPixel 16'd800; localparam H_FrontPorch 16'd210; localparam PixelForHS WidthPixel + H_BackPorch + H_FrontPorch; \t localparam LineForVS HightPixel + V_BackPorch + V_FrontPorch; ``` 首先是设置时序相关的参数：前沿、后沿、有效像素 关于显示前沿、后沿，前面也说了，可以合并为一个消影时间，就是可以把其中一个设置为0，另一个设置为消影时间。反正前后沿的时间加起来符合表中的时间要求就可以 ``` always @( posedge PixelClk or negedge nRST )begin if( !nRST ) begin LineCount < 16'b0; PixelCount < 16'b0; end else if( PixelCount PixelForHS ) begin PixelCount < 16'b0; LineCount < LineCount + 1'b1; end else if( LineCount LineForVS ) begin LineCount < 16'b0; PixelCount < 16'b0; end end //注意这里HSYNC和VSYNC负极性 assign LCD_HSYNC (( PixelCount > H_Pluse)&&( PixelCount < (PixelForHS H_FrontPorch))) ? 1'b0 : 1'b1; assign LCD_VSYNC ((( LineCount > V_Pluse )&&( LineCount < (LineForVS 0) )) ) ? 1'b0 : 1'b1; ``` 这段代码产生同步信号，需要注意的是，这块屏幕的同步信号是负极性使能 ``` assign LCD_DE ( ( PixelCount > H_BackPorch )&& ( PixelCount < PixelForHS H_FrontPorch ) && ( LineCount > V_BackPorch ) && ( LineCount < LineForVS V_FrontPorch 1 )) ? 1'b1 : 1'b0; //这里不减一，会抖动 ``` 这段代码设置 LCD 使能图像显示，这块屏幕需要控制一个管脚用作显示开关，实际这个信号就是传输图像有效的那 800*480 的数据时置 1 ```verilog localparam Colorbar_width WidthPixel / 16; assign LCD_R ( PixelCount < ( H_BackPorch + Colorbar_width * 0 )) ? 5'b00000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 1 )) ? 5'b00001 : ( PixelCount < ( H_BackPorch + Colorbar_width * 2 )) ? 5'b00010 : ( PixelCount < ( H_BackPorch + Colorbar_width * 3 )) ? 5'b00100 : ( PixelCount < ( H_BackPorch + Colorbar_width * 4 )) ? 5'b01000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 5 )) ? 5'b10000 : 5'b00000; assign LCD_G ( PixelCount < ( H_BackPorch + Colorbar_width * 6 )) ? 6'b000001: ( PixelCount < ( H_BackPorch + Colorbar_width * 7 )) ? 6'b000010: ( PixelCount < ( H_BackPorch + Colorbar_width * 8 )) ? 6'b000100: ( PixelCount < ( H_BackPorch + Colorbar_width * 9 )) ? 6'b001000: ( PixelCount < ( H_BackPorch + Colorbar_width * 10 )) ? 6'b010000: ( PixelCount < ( H_BackPorch + Colorbar_width * 11 )) ? 6'b100000: 6'b000000; assign LCD_B ( PixelCount < ( H_BackPorch + Colorbar_width * 12 )) ? 5'b00001 : ( PixelCount < ( H_BackPorch + Colorbar_width * 13 )) ? 5'b00010 : ( PixelCount < ( H_BackPorch + Colorbar_width * 14 )) ? 5'b00100 : ( PixelCount < ( H_BackPorch + Colorbar_width * 15 )) ? 5'b01000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 16 )) ? 5'b10000 : 5'b00000; ``` 这段代码用来产生 LCD 的测试数据，产生彩条显示 ``` VGAMod\tD1 ( .CLK\t\t(\tCLK_SYS ), .nRST\t\t(\tnRST\t\t), .PixelClk\t(\tCLK_PIX\t\t), .LCD_DE\t\t(\tLCD_DEN\t \t), .LCD_HSYNC\t(\tLCD_HYNC \t), .LCD_VSYNC\t(\tLCD_SYNC \t), .LCD_B\t\t(\tLCD_B\t\t), .LCD_G\t\t(\tLCD_G\t\t), .LCD_R\t\t(\tLCD_R\t\t) ); ``` 最后就是在 TOP 中进行实例化 整个工程可以在 [这里](https://github.com/sipeed/Tang Nano examples/tree/master/example_lcd) 下载"},"/soft/Tang/zh/Tang-Common-Doc/examples/1_led.html":{"title":"点灯","content":"# 点灯 ## 本实例的过程 新建工程 > 添加源代码文件 > 添加时序、引脚约束 > 综合 > 烧录 在看这篇文档前，请再次确定自己看过[Gowin云源软件用户指南](http://cdn.gowinsemi.com.cn/SUG100 1.8_Gowin%E4%BA%91%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)，第5章 云源软件使用 本实验的源码地址：[https://github.com/sipeed/Tang Nano examples/tree/master/example_led](https://github.com/sipeed/Tang Nano examples/tree/master/example_led) ## Verilog 预备知识 这里只介绍接下来会用到的相关语法，更多的可以参考《Verilog 数字系统设计教程》 Verilog 的基本设计单元是模块，每个 Verilog 程序包括 4个 主要部分：端口定义、I/O说明、内部信号声明和功能定义 模块就像我们平时提到的黑匣子，当我们实现了模块后，就不需要去关心模块内部，只需要根据模块定义的输入输出格式，将模块实例化，给模块提供输入，就可以让模块自己工作了 一个模块长成这样 ``` module block (input a, output b); reg [width 1:0] R_1; assign b a; always @(posedge clk or negedge reset_n) begin // do something end endmodule ``` 模块整体结构由 module 和 endmodule 组成，module 后面跟着的是模块接口的定义，声明了端口的方向是输入还是输出 模块内部有时候会使用内部的信号，内部信号有 wire 和 reg 类型 功能的定义可以通过 assign 和 always块 完成。 assign 是描述组合逻辑最常用的方法之一； always 块机可用于描述组合逻辑，也可描述时序逻辑 ## 引脚使用情况 板载的是一颗三色 RGB 灯，原理图如下 ![](./../../../assets/examples/led_pjt_1.png) 整个程序使用到的引脚分布如下 port I/O pin desc sys_clk input 35 时钟输入脚 sys_rst_n input 15 系统复位脚 led[0] output 16 绿灯 led[1] output 17 蓝灯 led[2] output 18 红灯 ## 程序设计 本系统时钟为 24Mhz，一个机器周期为 1/24M s，也就是说每过 12000000 个时钟周期为 0.5s 在程序中通过 counter 计算 12000000 个时钟周期，实现 0.5s 的等待，等时间到了之后将 counter 置 0，并改变 LED 的颜色 ```v module led ( input sys_clk, // clk input input sys_rst_n, // reset input output reg [2:0] led // 110 G, 101 R, 011 B ); reg [23:0] counter; always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) counter < 24'd0; else if (counter < 24'd1200_0000) // 0.5s delay counter < counter + 1'b1; else counter < 24'd0; end always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) led < 3'b110; else if (counter 24'd1200_0000) // 0.5s delay led[2:0] < {led[1:0],led[2]}; else led < led; end endmodule ``` ## 引脚约束 要想让 fpga 实现代码的功能，还必须将代码中涉及的引脚操作约束到 fpga 实际的引脚上 如下图，在左边的工作区点击 process，然后双击 FloorPlanner ![](./../../../assets/examples/led_pjt_2.png) 在工程中第一次点击，可能会提示说创建文件，点击确定即可 在弹出窗口中，切换到 Package View ，将 Ports 下的端口拖到 fpga 对应的引脚上，保存即可，如下图 ![](./../../../assets/examples/led_pjt_3.png) ## 综合 在左侧的工作区中，右键 Synthesize 或 Place&Route 时，会有 run 的选项，点击即可 ![](./../../../assets/examples/led_pjt_4.png) ## 烧录到开发板 有两种选择，一种是烧录到 sram 中，一种是烧录到 flash 中 烧录到 sram 中比较快，但是掉电后 fpga 中就没有固件了；烧录到 flash 中可以在系统掉电后保存之前烧录的固件 烧录是通过 Programer 完成的 双击左侧工作区的 Program Device 就可以打开 Programer ![](./../../../assets/examples/led_pjt_5.png) 不过在使用 Programer 前需要注意，要在 Synthesize 和 Place&Route 都完成后才能使用 Programer ，否则软件会报错 `Bitstream file dose not exists` ![](./../../../assets/examples/led_pjt_6.png) Linux 用户需要注意 > Linux 安装包中的编程器适用于 Linux 版本 Red Hat 5.10，如需 Red Hat 6/7 版本的编程器，请到官网上下载安装后，将安装包替换为 Gowin 云源软件安装包中的文件夹“Programmer”。 ### 更改烧录位置 要选择固件烧录的位置，可以在选中芯片的情况下，点击 Edit > Configure Device ![](./../../../assets/examples/led_pjt_7.png) 在弹出窗口中选择自己需要烧录到的位置，这里选择的是 flash ，默认烧录位置是 sram ![](./../../../assets/examples/led_pjt_8.png) ### 烧录 在选择好烧录位置后，就可以烧录固件了，点击菜单栏的烧录即可 ![](./../../../assets/examples/led_pjt_9.png)"},"/soft/Tang/zh/get_started/td.html":{"title":"TD简要使用说明","content":" title: TD简要使用说明 待补充。。。"},"/soft/Tang/zh/get_started/fpga_download.html":{"title":"FPGA码流烧录","content":"# FPGA码流烧录 <font size 5>**Attention!! 下载码流需要先保证驱动安装成功**</font> 1. 打开TD软件，选择 download ![](https://fdvad021asfd8q.oss cn hangzhou.aliyuncs.com/migrate/E203_TD_download.png) 2. 添加 bitstream文件，选择 [LicheeTangNewIoMap_BitStream.bit](https://fdvad021asfd8q.oss cn hangzhou.aliyuncs.com/LicheeTang/LicheeTangNewIoMap_BitStream.bit) 或其他码流文件 ![](https://fdvad021asfd8q.oss cn hangzhou.aliyuncs.com/migrate/E203_TD_add.png) 3. 如果 Mode 为 JTAG，断电后则恢复默认，所以为了上电自动启动，需要选择 PROGRAM FLASH 。（时间较长） 4. E203源码已开放，如果需要进行IO修改，或者功能修改，请使用源码自行进行修改。可以到 [Github](https://github.com/Lichee Pi/Tang_E203_Mini.git) 下载。 5. FPGA例程已上传，请到 [Tang_FPGA_Examples](https://github.com/Lichee Pi/Tang_FPGA_Examples.git) 下载。"},"/soft/Tang/zh/get_started/install_Linux.html":{"title":"Linux的开发环境配置","content":"# Linux的开发环境配置 ## 安装TD 想要进行FPGA开发需要安装TD，可以通过[下载站](https://dl.sipeed.com/shareURL/TANG/Premier/IDE)，下载TD安装包和license。 ![install_TD_linux](./../../assets/get_started/install_TD_linux.png) 下载安装程序存档后，打开终端并 cd 进入该目录。 ``` cd <安装程序存档目录的路径 > ``` /opt 目录是为所有不属于默认安装的软件和附加包保留的。 为您的 TD IDE 安装创建一个目录 ``` sudo mkdir /opt/TD_DECEMBER2018 ``` 将 TD 解压到 /opt/TD_DECEMBER2018 目录中： ``` sudo tar xvf TD_5.0.3_28716_NL_Linux.zip d /opt/TD_DECEMBER2018/ ``` <div> <script> </script> </div>"},"/soft/Tang/zh/get_started/driver_linux_en.html":{"title":"Install TD driver on Linux","content":"# Install TD driver on Linux ## Insert LicheeTang into your computer and execute lsusb to see the information. Make sure USB VID:PID is 0547:1002 as shown in image below.</font> ![Check for default linux driver](https://fdvad021asfd8q.oss cn hangzhou.aliyuncs.com/LicheeTang/get_started/237929105611360081.jpg) Check for default linux driver. ## Set udev rules to enable LicheeTang to be accessed by the plugdev group > Execute the following command in terminal to create a new udev rules file. > ``` > sudo nano /etc/udev/rules.d/91 anlogic jtag.rules > ``` > Copy the following code into text editor and save it, as shown in following image. > ``` > SUBSYSTEMS \"usb\", ATTRS{idVendor} \"0547\", ATTRS{idProduct} \"1002\", \\ GROUP \"plugdev\", \\ MODE \"0660\" >``` ![Create a new udev rule file.](https://fdvad021asfd8q.oss cn hangzhou.aliyuncs.com/LicheeTang/get_started/572316008299057820.jpg) Execute the following command in terminal to restart the udev service. ## Open Tang Dynasty IDE. Go to <TD installation directory>/bin/ and execute the following command to open TD IDE in GUI mode. ./td gui Click on Download buttion as shown in following image. ![Tang Dynasty SDK in GUI Mode](https://fdvad021asfd8q.oss cn hangzhou.aliyuncs.com/LicheeTang/get_started/87078310026779781.jpg) ## Plugin LicheeTang into your computer and hit Refresh buttion on Download Dialog box. ![](https://fdvad021asfd8q.oss cn hangzhou.aliyuncs.com/LicheeTang/get_started/1823555291194601.jpg) >Note Due to some unknown bug, JTAG work only with 400kbps or lower speed. Congratulations, you have setup the TD driver on Linux."},"/soft/Tang/zh/get_started/E203.html":{"title":"搭建蜂鸟开发环境","content":"# 搭建蜂鸟开发环境 >Note 现已经做好了 虚拟机镜像 链接：[https://dl.sipeed.com/shareURL/TANG/Primer/vmware](https://dl.sipeed.com/shareURL/TANG/Primer/vmware)，可直接使用 ## 下载交叉编译工具链 百度网盘链接为: [https://pan.baidu.com/s/1eUbBlVc](https://pan.baidu.com/s/1eUbBlVc) 由于这里提供的openocd不支持LicheeTang使用的flash型号，所以进行了一些修改，请 [下载](https://fdvad021asfd8q.oss cn hangzhou.aliyuncs.com/LicheeTang/get_started/openocd) 新的进行替换 ## 配置工作环境 1. 从github下载e200_opensource >git clone https://github.com/SI RISCV/e200_opensource.git 1. 将 sirv e203 lichee.tar.gz 解压至 e200_opensource/sirv e sdk/bsp/env 目录下 + 将下载好的交叉工具编译链以及 openocd 解压(记得使用新的openocd替换)，在 e200_opensource/sirv e sdk/work 目录下将其分别软连接到: ``` .. code block:: sh :emphasize lines: 5,9 . └── build ├── openocd │ └── prefix │ └── bin > /opt/riscv/gnu mcu eclipse/openocd/0.10.0 6 20180112 1448/bin/ └── riscv gnu toolchain └── riscv32 unknown elf └── prefix └── bin > /opt/riscv/gnu mcu eclipse/riscv none gcc/7.2.0 2 20180111 2230/bin/ ``` ## 蜂鸟的调试 我们使用ft2232d与openocd进行蜂鸟的调试，所以需要进行一些配置 将ft2232d插入电脑，执行lsusb，可看到一下信息 Bus 003 Device 019: ID 0403:6010 Future Technology Devices International, Ltd FT2232C Dual USB UART/FIFO IC 设置 udev rules,使 ft2232d 能够被 plugdev group 访问 vim /etc/udev/rules.d/45 ft2232.rules ATTR{idVendor} \"0403\", ATTR{idProduct} \"6010\", MODE \"660\", GROUP \"plugdev\" 查看该设备是否属于 plugdev ls l /dev/ttyUSB1 crw rw 1 root plugdev 188, 1 7月 11 09:13 /dev/ttyUSB1 将你自己的用户添加到 plugdev group 中 whoami sudo usermod –a –G plugdev your user name 确认你自己的用户是否属于 plugdev group groups ## 编译下载demo程序 编译下载demo程序，可参考文件夹下的demo_gpio.tar.gz在e200_opensource/sirv e sdk目录下执行 >编译： make software PROGRAM demo_gpio BOARD sirv e203 lichee >上传： make upload PROGRAM demo_gpio BOARD sirv e203 lichee ## 调试 打开两个terminal，一个运行openocd，另外一个运行gdb >openocd: make run_openocd PROGRAM demo_gpio BOARD sirv e203 lichee >GDB: make run_gdb PROGRAM demo_gpio BOARD sirv e203 lichee `Tip 可能写的不是很清楚，如果有任何疑问欢迎提出，或者参看胡大的《手把手教你设计CPU：RISC V处理器》（已经上市，请在京东、淘宝、当当上搜索 RISC V关键字）`"},"/soft/Tang/zh/get_started/install_TD_win.html":{"title":"Windows的开发环境配置","content":"# Windows的开发环境配置 ## 安装TD 想要进行FPGA开发需要安装TD，可以通过[下载站](https://dl.sipeed.com/shareURL/TANG/Premier/IDE)，下载TD安装包和license. ![TD_1](./../../assets/get_started/TD_1.png) ![TD_2](./../../assets/get_started/TD_2.png) 双击打开第一个文件进行安装，建议使用默认的安装路径，安装结束之后，将 Anlogic_20220130.lic 修改成Anlogic.lic放到C:\\Anlogic\\TD5.0.27252\\license中 然后打开TD就可以了 ## 安装usb串口 将 Tang Primer 插入您的计算机并打开设备管理器以查看信息。 根据 Windows 版本，它可能被命名为 WinUsb Device 或 USB JTAG Cable。 确保 USB VID:PID 为 0547:1002 win7系统没有安装驱动时 ![no_driver](./../../assets/get_started/no_driver.png) win10系统没有安装驱动时 ![no_driver_win10](./../../assets/get_started/no_driver_win10.png) ### win7安装驱动 双击 WinUsb Device 选择更新驱动程序 ![update_drive1](./../../assets/get_started/update_driver1.png) ![update_drive2](./../../assets/get_started/update_driver2.png) 浏览文件夹，选择TD安装目录下的驱动目录。 单击确定开始安装 ![choosefolder](./../../assets/get_started/choosefolder.png) 安装成功，在设备管理器中可以看到 ![installsuccess](./../../assets/get_started/installsuccess.png) ### win10安装驱动 > 在安装驱动程序本身之前，请确保首先禁用驱动程序签名强制，否则 Windows 10 将不允许您安装来自 Anlogic 的未签名驱动程序 双击 WinUsb Device 选择更新驱动程序 ![update_drive1](./../../assets/get_started/update_driver1_win10.png) ![update_drive2](./../../assets/get_started/update_driver2_win10.png) 浏览文件夹，选择TD安装目录下的driver\\win8_10_64目录。 单击确定。 然后单击让我从计算机上的可用驱动程序列表中选择 ![choosefolder](./../../assets/get_started/choosefolder_win10.png) 单击Have Disk...，然后选择您在上一步中选择的目录，然后单击OK ![install_from_disk_win10](./../../assets/get_started/install_from_disk_win10.png) 安装成功，在设备管理器中可以看到 ![installsuccess](./../../assets/get_started/installsuccess.png) ## 验证安装 打开TD，点击下载,如图所示 ![](./../../assets/get_started/87078310026779781.jpg) 将 Tang Primer 插入您的计算机，然后点击下载对话框上的刷新按钮 ![](./../../assets/get_started/1823555291194601.jpg) 出现上图的信息，则表示安装成功"},"/soft/Tang/zh/e203/display.html":{"title":"蜂鸟驱动屏幕","content":" title: 蜂鸟驱动屏幕 > maxdepth > : 2 > > display/lcd1602 display/oled display/spi\\_tft"},"/soft/Tang/zh/e203/rv_ip.html":{"title":"蜂鸟添加外设","content":" title: 蜂鸟添加外设 待补充。。。"},"/soft/Tang/zh/e203/led/led.html":{"title":"RGB LED","content":" title: RGB LED 待补充。。。"},"/soft/Tang/zh/e203/led/ws2812.html":{"title":"WS2812灯带","content":" title: WS2812灯带 待补充。。。"},"/soft/Tang/zh/e203/led/pwm_led.html":{"title":"呼吸灯","content":" title: 呼吸灯 待补充。。。"},"/soft/Tang/zh/e203/led.html":{"title":"蜂鸟点灯","content":" title: 蜂鸟点灯 > maxdepth > : 2 > > led/led led/pwm\\_led led/ws2812"},"/soft/Tang/zh/e203/ft2232.html":{"title":"FT2232使用简明教程","content":" title: FT2232使用简明教程 待补充。。。"},"/soft/Tang/zh/e203/sensor.html":{"title":"蜂鸟外挂传感器","content":" title: 蜂鸟外挂传感器 待补充。。。"},"/soft/Tang/zh/e203/int.html":{"title":"蜂鸟的中断","content":" title: 蜂鸟的中断 待补充。。。"}}