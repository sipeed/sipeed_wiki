{"/soft/longan/zh/examples/printf.html":{"title":"串口打印","content":"串口打印 很多时候，串口打印都是一个非常方便的调试手段，通过串口打印的信息，可以方便的定位程序错误位置 本文基于 longan nano 演示如何实现 printf 通过串口打印 本文选择串口0作为串口打印信息的端口，外设使用前，自然需要进行初始化 ```c void init_uart0(void) {\t \t/* enable GPIO clock */ rcu_periph_clock_enable(RCU_GPIOA); /* enable USART clock */ rcu_periph_clock_enable(RCU_USART0); /* connect port to USARTx_Tx */ gpio_init(GPIOA, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_9); /* connect port to USARTx_Rx */ gpio_init(GPIOA, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_50MHZ, GPIO_PIN_10); \t/* USART configure */ usart_deinit(USART0); usart_baudrate_set(USART0, 115200U); usart_word_length_set(USART0, USART_WL_8BIT); usart_stop_bit_set(USART0, USART_STB_1BIT); usart_parity_config(USART0, USART_PM_NONE); usart_hardware_flow_rts_config(USART0, USART_RTS_DISABLE); usart_hardware_flow_cts_config(USART0, USART_CTS_DISABLE); usart_receive_config(USART0, USART_RECEIVE_ENABLE); usart_transmit_config(USART0, USART_TRANSMIT_ENABLE); usart_enable(USART0); usart_interrupt_enable(USART0, USART_INT_RBNE); } ``` 这里首先的开启了端口时钟和串口时钟，在初始化完管脚后，就进行了串口的功能配置 我们一般比较关心的就是串口的波特率，这里设置成了 115200 然后我们还需要重新实现 _put_char ，将 printf 重映射 ```c int _put_char(int ch) { usart_data_transmit(USART0, (uint8_t) ch ); while ( usart_flag_get(USART0, USART_FLAG_TBE) RESET){ } return ch; } ``` 这样就可以快乐的使用 printf 了"},"/soft/longan/zh/examples/badapple.html":{"title":"Bad Apple 演示视频","content":"Bad Apple 演示视频 本文目的是使用板载的 160*80 分辨率的 OLED 屏幕播放 bad apple 视频 ## 主要工作介绍 + 移植 OLED 屏幕的驱动 + 移植 tf 卡驱动和 fatfs 文件系统 + 将视频按自己需要的帧率转换为一帧帧的图片然后打包到 tf 卡 + 在 gd32v 上读取 tf 卡中的图片并进行显示 ### 屏幕驱动 使用硬件 SPI 驱动屏幕，首先需要初始化 SPI ```c void spi_config(void) { spi_parameter_struct spi_init_struct; /* deinitilize SPI and the parameters */ OLED_CS_Set(); spi_struct_para_init(&spi_init_struct); /* SPI0 parameter config */ spi_init_struct.trans_mode SPI_TRANSMODE_FULLDUPLEX; spi_init_struct.device_mode SPI_MASTER; spi_init_struct.frame_size SPI_FRAMESIZE_8BIT; spi_init_struct.clock_polarity_phase SPI_CK_PL_HIGH_PH_2EDGE; spi_init_struct.nss SPI_NSS_SOFT; spi_init_struct.prescale SPI_PSC_8; spi_init_struct.endian SPI_ENDIAN_MSB; spi_init(SPI0, &spi_init_struct); \tspi_crc_polynomial_set(SPI0,7); \tspi_enable(SPI0); } ``` 初始化完成后就可以实现数据指令的发送 ```c void LCD_Writ_Bus(u8 dat) { \tOLED_CS_Clr(); \twhile(RESET spi_i2s_flag_get(SPI0, SPI_FLAG_TBE)); spi_i2s_data_transmit(SPI0, dat); \twhile(RESET spi_i2s_flag_get(SPI0, SPI_FLAG_RBNE)); spi_i2s_data_receive(SPI0); \tOLED_CS_Set(); } void LCD_WR_DATA8(u8 dat) { \tOLED_DC_Set();//写数据 \tLCD_Writ_Bus(dat); } void LCD_WR_DATA(u16 dat) { \tOLED_DC_Set();//写数据 \tLCD_Writ_Bus(dat>>8); \tLCD_Writ_Bus(dat); } void LCD_WR_REG(u8 dat) { \tOLED_DC_Clr();//写命令 \tLCD_Writ_Bus(dat); } ``` `LCD_Writ_Bus` 完成了 SPI 的收发，通过控制命令数据线，完成命令和数据的发送 OLED 屏幕在使用前还需要设置它的一些参数，比如屏幕开启、数据帧的格式等等，这些在参数在屏幕初始化的时候，通过写命令再写数据的方式写入。想修改这些参数需要依靠屏幕配套的数据手册，不过一般可以参数屏幕生产商提供的例程中的参数。 ### tf 卡驱动和 fatfs 文件系统 tf 卡在 longan 上也是使用 SPI 驱动的。为了更快的访问速率，也是使用硬件 SPI 驱动。使用前也需要初始化，方式和屏幕的 SPI 初始化类似，就不再累述。 fatfs 是一个专为小型嵌入式设备设计的文件系统。fatfs 符合 ANSI C(C89)规范，并且和磁盘 I/O 层完全分离。 具体的移植也很简单，直接参照 fatfs 提供的 stm32 的工程移植进行 这里提供该工程的[下载地址](http://dl.sipeed.com/LONGAN/Nano/Firmware/badapple_demo_tools/ffsample.7z)，完整版可以去 fatfs 的[官网下载](http://elm chan.org/fsw/ff/ffsample.zip) 主要的工作在于实现 fatfs 的几个基本函数 `disk_initialize` `disk_status` `disk_read` `disk_ioctl` 这些函数又是基于 SPI 通信的，还需要修改 SPI 接收发送的实现 ```c static BYTE xchg_spi ( \tBYTE dat\t/* Data to send */ ) { \twhile(RESET spi_i2s_flag_get(SPI1, SPI_FLAG_TBE)); spi_i2s_data_transmit(SPI1, dat); \twhile(RESET spi_i2s_flag_get(SPI1, SPI_FLAG_RBNE)); return(spi_i2s_data_receive(SPI1)); /* Return received byte */ } static void rcvr_spi_multi ( \tBYTE *buff,\t\t/* Pointer to data buffer */ \tUINT btr\t\t/* Number of bytes to receive (even number) */ ) { \tdo \t{ \t\t*buff xchg_spi(0xff); \t\tbuff++; \t} while (btr ); } ``` ### 视频预解码 mp4 格式的视频，单片机因为没有硬件的加速，无法胜任解码播放的工作，所以只能靠手工预解码，相当于按照一定的帧率对原视频进行截图 这里需要使用到 PotPlayer XnViewMP 首先使用 PotPlayer 打开视频，快捷键 ctrl+G 打开连续截图 打开后如图 ![](../../assets/examples/potplayer.png) 其中格式一定要 BMP，尺寸按照屏幕的尺寸设置，时间我这里设置的是 100ms 也就是 1s 十帧的样子，采集数量就自己计算一下视频总时间再乘每秒帧数，我这里就是 219s * 10 2190 最后得到的图片是 32位 的 BMP，转换起来不方便，就用 XnViewMP 转换为 24位 的 BMP 打开 XnViewMP ，选择要转换的图片，快捷键 ctrl+U 打开批量转换，在动作中选择 24位 进行转换，如图 ![](../../assets/examples/XnViewMP.png) 然后就是将这些图片打包到 tf 卡，这里为了方便，修改了网上的一个开源项目 [bmp2hex](https://github.com/robertgallup/bmp2hex)，重新整理了一个工具，可以[点击下载](http://dl.sipeed.com/LONGAN/Nano/Firmware/badapple_demo_tools/tools_bmp2hex.zip) 使用方法很简单，把下载的这个压缩包放到之前生成的图片集中，进行解压 使用工具前需要确保所有图片的名字是 数字.bmp ，不是的话可以先运行一遍 rename.py 这个脚本，直接在命令行输入 `python rename.py` 即可 根据自己图片总数修改 genhex.py 这个脚本的第4行中的数字，比如我有 2190张 图片，这里的数字就写 2190 然后就运行这个脚本，在命令行输入 `python genhex.py`，时间可能比较久，需要耐心等待 最后运行完毕后会生成一个 bmp.bin 文件，将这个文件放入到 tf 卡中即可 ### 读取图片 最后的读取图片并显示其实很简单了，主要涉及到的就是文件操作，关于 fatfs 的 API [可以点击这里阅读](http://elm chan.org/fsw/ff/doc/open.html) 首先需要将 tf 卡挂载到文件系统，这里需要使用到 f_mount 这个函数 ```c fr f_mount(&fs, \"\", 1); ``` 挂载上后，就找到对应的文件然后打开，这里涉及到 f_open ```c fr f_open(&fil, \"bmp.bin\", FA_READ); ``` 文件打开后，就可以读取图片信息并显示了，这里 160*80 尺寸的 16位真彩图片，一张有 25600 字节，longan 上的处理器无法直接创建一个这么大的数组，所以只能分两次进行读取，每次读取完进行一次偏移，最后通过循环读取总共的 2189 张图片，这里涉及到 f_read f_lseek ```c for (int i 0; i<2189;i++) { fr f_read(&fil, image, sizeof(image), &br); LCD_ShowPicture(0,0,159,39); offset + 12800; f_lseek(&fil, offset); LEDB_TOG; fr f_read(&fil, image, sizeof(image), &br); LCD_ShowPicture(0,40,159,79); offset + 12800; f_lseek(&fil, offset); LEDB_TOG; } ``` 最后，本工程可以到 github 下载体验，[点击进行传送](https://github.com/sipeed/Longan_GD32VF_examples)"},"/soft/longan/zh/get_started/debug.html":{"title":"Debug 调试","content":"Debug 调试 ## 连接调试器 开发板 调试器 : : : : JTDO TDO JTDI TDI JTCK TCK JTMS TMS 3V3 3V3 GND GND ## 修改配置文件 修改工程配置文件 `platformio.ini`， 在下面添加 ```ini debug_tool jlink ``` 根据实际调试器型号选择。目前支持的调试器列表 * `jlink` * `gd link` * `ft2232` * `sipeed rv debugger` * `altera usb blaster` * `um232h` * `rv link` ## 一键调试 切换到 VS CODE 左侧的 `DEBUG` 界面， 点击绿色箭头即可进行调试。 ![](../../assets/pio_debug_longan.png)."},"/soft/longan/zh/get_started/blink.html":{"title":"Blink 闪灯程序","content":"Blink 闪灯程序 ## 创建 Blink 工程 * 打开 PIO 主页 选择 `Project Examples` ![](http://blog.sipeed.com/wp content/uploads/2019/04/d977e844490e6ccc4625f701883a29f5.png) * 选择 `arduino blink` 点击 `Import` 导入示例程序 （初次导入需要下载架构文件及工具，需要等待较长时间） ![](http://blog.sipeed.com/wp content/uploads/2019/04/82943a6b74077e6210e2d9421cb5438f.png) * 导入成功后即可见到示例工程 ![](http://blog.sipeed.com/wp content/uploads/2019/04/1262373ca7b0b483e30dac1124adaabf.png) ## 工程配置文件 * 我们首先需要编辑工程配置文件 `platformio.ini` 根据自己的开发板型号，删掉其他开发板环境。 ![](./../../assets/pio_ini_cfg.png) 配置示例 ```ini [env:sipeed longan nano] platform gd32v ;平台，选择gd32v framework arduino ;可选 gd32vf103 sdk 或 arduino board sipeed longan nano ; 开发板 monitor_speed 115200 ; 串口监视器波特率 upload_protocol serial ; 下载工具 默认串口， 可选 dfu、jlink、gd link 等 debug_tool jlink ; 调试工具 默认jlink ，可选 sipeed rv debugger 等 ``` PIO 可以在配置文件中实现设置宏定义， 控制编译流程等自定义功能，高级用法请参阅 [PIO 官方文档](https://docs.platformio.org/en/latest/projectconf.html). ## 一键编译 点击左下角的 `Build` 即可构建项目 ![](../../assets/pio_complie.png) ## 连接开发板 ### 串口 ISP 下载 * 准备 USB 转 串口下载器 * 连接开发板与下载器 * 修改 `platformio.ini` 文件， 添加下面一行内容： ```ini upload_protocol serial ``` * 开发板按住 `BOOT` 键，再按 `RESET` 键重启开发板后再松开 `BOOT` 键，进入下载模式。 ### JTAG 下载 * 准备J link 或 Sipeed RV 调试器 * 连接开发板 * 修改 `platformio.ini` 文件， 添加下面一行内容： ```ini upload_protocol jlink ``` 或者 ```ini upload_protocol sipeed rv debugger ``` ### USB DFU 下载 * **首次** 使用需要安装 libusb 驱动程序， 请参考此步骤 [使用 Zaidig 安装驱动](#使用zadig安装驱动). * 准备 USB Type c 数据线 * 使用数据线连接电脑与开发板 * 修改 `platformio.ini` 文件， 添加下面一行内容： ```ini upload_protocol dfu ``` * 开发板按住 `BOOT` 键，再按 `RESET` 键重启开发板后再松开 `BOOT` 键，进入 DFU 模式。 ## 一键下载 按照上面步骤选择好下载方式后，即可使用 PIO 内置工具一键下载。 点击左下角的 `Upload` 即可向开发板上传程序。 ![](../../assets/pio_upload.png) ## DFU 图形界面下载 下载DFU工具：http://dl.sipeed.com/LONGAN/Nano/Tools/GD32_MCU_Dfu_Tool_V3.8.1.5784_1.rar 解压出两个文件夹： GD32 MCU Dfu Drivers_v1.0.1.2316 和 GD32 MCU Dfu Tool_v3.8.1.5784 先进入driver文件夹，安装对应的驱动文件，注意使用管理员权限运行 ![](../../assets/examples/how_to_install_dfu.png) 运行 GD32 MCU Dfu Tool.exe 将 Longan Nano 插到电脑，按住 Boot0 键，短按 Reset 键，再松开 Boot0 键， 可以看到 DFU 工具中识别到了 GD32VF 芯片 选择对应的固件文件，并勾选烧录后校验，点击OK，即可进行烧录 烧录完成之后不会自动复位，需要自己手工按下复位按键，查看运行效果 ![](../../assets/examples/how_to_use_dfu.png) ## 使用Zadig安装驱动 PIO 内置 dfu util 下载工具，使用此工具需要为开发板安装 libusb 驱动。（注意： 与 GD 官方驱动不同） 建议通过 Zadig 安装 winusb 驱动。[下载地址](https://github.com/pbatard/libwdi/releases/download/b721/zadig 2.4.exe) 下载成功后打开 Zadig 在下拉栏中选择 GD32V， 替换驱动选择 WinUSB, 点击替换按钮，即可替换成功。 ![](../../assets/dfu_zadig.png)"},"/soft/longan/zh/get_started/pio.html":{"title":"PIO 配置","content":"PIO 配置 ## 安装 VS CODE VS CODE 是一款比较常用的开发工具。前往[VScode官网](https://code.visualstudio.com/ \"VScode官网\")，下载安装对应操作系统版本的安装包即可。 ## 安装 PIO 插件 打开 VSCode > 点击左侧扩展 > 搜索 PlatformIO > 点击安装插件 > 等待安装完成 > 重启 VSCODE ![](http://blog.sipeed.com/wp content/uploads/2019/04/0d501a8515a735fba54e2f5de908cd1e.png) ## 安装 GD32V 平台定义 PIO 目前提供**命令行**与**图形界面**两种方式来安装。下面将分别介绍： （PS : 推荐命令行，因为能看到下载进度条。） ### 命令行 点击左侧PIO标志 > 点击左下方的新建终端 > 在终端窗口中执行下面的安装指令 * 发布版 （稳定版本） ``` platformio platform install gd32v ``` * 开发版（与Github同步） ``` platformio platform install https://github.com/sipeed/platform gd32v ``` ![](../../assets/pio_install_gd32v.png) 注：受国内网络环境影响，安装过程需要较长时间，请耐心等待。 ### 图形界面 打开VS CODE > 点击左侧 PIO 图标 > 点击左下方的 Open 选项 > 点击 Platforms 页面 > 点击 Advanced Installation 打开添加窗口 ![](../../assets/pio_install_add_gd32v_step1.png) 在打开的窗口中输入下面的网址 ``` https://github.com/sipeed/platform gd32v.git ``` 点击 Install 即可添加完成。 ![](../../assets/pio_install_add_gd32v_step2.png) 耐心等待即可安装成功。 （安装失败多为网络原因， 请更换网络环境后再次尝试） ![](../../assets/pio_install_add_gd32v_step3.png)"},"/soft/longan/zh/get_started/rv-link.html":{"title":"使用 RV-LINK","content":"使用 RV LINK ## 什么是 RV LINK **RV LINK** 是一个基于 RISC V 开发板的仿真器固件，通过烧写 **RV LINK** 固件， 可以将 **Sipeed Longan Nano** 开发板变成一个 `jtag` 调试器，用来调试另一块 Longan 或者其他支持 jtag 调试的开发板。 RV LINK 项目地址: [https://gitee.com/zoomdy/RV LINK](https://gitee.com/zoomdy/RV LINK) ## 烧写 RV LINK 固件 ### 使用 PlatformIO 工程一键烧录 * 下载 RV LINK 源码 项目源码下载地址：[http://dl.sipeed.com/LONGAN/Nano/Tools/RV LINK pio src v0.1.zip](http://dl.sipeed.com/LONGAN/Nano/Tools/RV LINK pio src v0.1.zip) 也可以从RV LINK官方项目下载: [https://gitee.com/zoomdy/RV LINK](https://gitee.com/zoomdy/RV LINK) * 使用 VSCODE 打开工程目录 将上面下载的源码解压到单独的文件夹 然后使用 VSCODE 打开源码文件夹 如下图所示： ![](../../assets/pio_open_rvlink.png) 通常使用 DFU 方式烧录固件，**不需要**修改配置文件。(使用 DFU 方式下载请安装 libusb 驱动, 参考[使用Zadig安装驱动](blink.md/#使用zadig安装驱动)) 如果需要更改烧录方式，可以通过修改 `platformio.ini` 文件来修改， 具体配置方式请参考：[修改工程配置文件](blink.md/#工程配置文件) * 使用 PIO 烧录固件 连接开发板，使开发板进入烧录模式后，点击左下角的箭头符号即可进行烧录。 烧录成功后，可以看到开发板上的绿灯闪烁，将开发板连接到电脑USB口之后，可以在设备管理器中看到多出了一个串口设备。此时 Longan 板子就成功变成了 RV LINK 调试器。 ### 其他烧录方式 参考文档： [将 Longan Nano 开发板变成 RISC V 仿真器](https://gitee.com/zoomdy/RV LINK/wikis/%E5%B0%86%20Longan%20Nano%20%E5%BC%80%E5%8F%91%E6%9D%BF%E5%8F%98%E6%88%90%20RISC V%20%E4%BB%BF%E7%9C%9F%E5%99%A8) ## 使用 RV LINK 调试 ### 连接开发板 将刷好 RV LINK 固件的开发板与待调试开发板 jtag 连线按下表连接 RV LINK 待调试开发板 : : : : JTDO JTDO JTDI JTDI JTCK JTCK JTMS JTMS 3V3 3V3 GND GND #### WIN7 用户安装 GD 串口驱动 见此链接[安装 USB 串口驱动](https://gitee.com/zoomdy/RV LINK/wikis/GDB%20%E4%BD%BF%E7%94%A8%20RV LINK%20%E4%BB%BF%E7%9C%9F%E5%99%A8%E8%B0%83%E8%AF%95%20RISC V%20%E7%A8%8B%E5%BA%8F?sort_id 1667650#%E5%AE%89%E8%A3%85 usb %E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A8) ### 在 PlatformIO IDE 中使用 RV LINK RV LINK 在 PlatformIO IDE 可以和其他调试器一样，支持一键启动调试。 只需要在工程的 `platformio.ini` 配置文件中，指定调试器选项和调试器端口选项。 示例代码 ```ini [env:sipeed longan nano] platform gd32v framework gd32vf103 sdk board sipeed longan nano monitor_speed 115200 upload_protocol rv link ; rv link下载选项 debug_tool rv link ; rv link调试选项 debug_port COM2 ; 使用rv link 必填此项 调试器串口 ``` ### 在其他平台使用 RV LINK 参考 [RV LINK WIKI](https://gitee.com/zoomdy/RV LINK/wikis/)"},"/soft/longan/zh/get_started/sipeed-debugger.html":{"title":"使用 Sipeed 调试器","content":"使用 Sipeed 调试器 ## Sipeed rv debugger ## Sipeed rv debugger lite"},"/soft/longan/zh/index.html":{"title":"Longan nano","content":" title: Longan nano keywords: Sipeed, Hardware, 矽速, 硬件资料, 文档, 资料下载 desc: 矽速科技的硬件资料站 <div class \"title_pic\"> <img src \"../assets/sipeed_longan_logo.jpg\" height \"60\"> <img src \"../assets/icon_sipeed2.png\" height \"60\"> </div> ## 什么是 Longan Longan Nano 是基于兆易创新(GigaDevice)最新基于 RISC V 32 位内核的`GD32VF103CBT6` 单片机的极简开发板。方便广大学生、工程师、极客爱好者们接触最新一代的RISC V处理器。了解其特性。 主芯片为 GD32VF103CBT6 ，基于[芯来科技](http://www.nucleisys.com/).的Bumblebee内核(指令集文档在此下载：[http://dl.sipeed.com/LONGAN/Nano/DOC/](http://dl.sipeed.com/LONGAN/Nano/DOC/).。支持 `RV32IMAC` 指令集及`ECLIC` 快速中断功能。内核功耗仅传统 `Cortex M3` 的1/3. 芯片内置 `128KB` Flash, `32KB` SRAM，外设情况为： * 4 x 通用16位定时器 * 2 x 基本16位定时器 * 1 x 高级16位定时器 * 看门狗定时器 * RTC * Systick * 3 x USART * 2 x I2C * 3 x SPI * 2 x I2S * 2 x CAN * 1 x USBFS(OTG) * 2 x ADC(10 channel) * 2 x DAC Longan Nano 开发板，双列插针版型设计，排针间距 700mil，可直插面包板；板载 8M 无源晶振，32.768KHz RTC 低速晶振，迷你 TF 卡槽，并使用最新的 Type C USB 接口。 ## 如何开发 Longan Nano 支持基于 VS CODE 的 PlatformIO IDE 环境下的开发， 支持一键工程配置、编译、下载、调试。安装使用教程见：[PIO 配置](./get_started/pio.html). ![pio_debug](../assets/longan_pio_debug.jpg) ## 引脚定义 ![](../assets/Longan nano_PINOUT.svg)"}}